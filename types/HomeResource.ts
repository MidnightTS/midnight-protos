/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HomeResource.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class HomeResource extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        next_refresh_time?: number;
        store_limit?: number;
        store_value?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
            if ("store_limit" in data && data.store_limit != undefined) {
                this.store_limit = data.store_limit;
            }
            if ("store_value" in data && data.store_value != undefined) {
                this.store_value = data.store_value;
            }
        }
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set next_refresh_time(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get store_limit() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set store_limit(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get store_value() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set store_value(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        next_refresh_time?: number;
        store_limit?: number;
        store_value?: number;
    }): HomeResource {
        const message = new HomeResource({});
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        if (data.store_limit != null) {
            message.store_limit = data.store_limit;
        }
        if (data.store_value != null) {
            message.store_value = data.store_value;
        }
        return message;
    }
    toObject() {
        const data: {
            next_refresh_time?: number;
            store_limit?: number;
            store_value?: number;
        } = {};
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        if (this.store_limit != null) {
            data.store_limit = this.store_limit;
        }
        if (this.store_value != null) {
            data.store_value = this.store_value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.next_refresh_time != 0)
            writer.writeFixed32(15, this.next_refresh_time);
        if (this.store_limit != 0)
            writer.writeUint32(3, this.store_limit);
        if (this.store_value != 0)
            writer.writeUint32(12, this.store_value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomeResource {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomeResource();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.next_refresh_time = reader.readFixed32();
                    break;
                case 3:
                    message.store_limit = reader.readUint32();
                    break;
                case 12:
                    message.store_value = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HomeResource {
        return HomeResource.deserialize(bytes);
    }
}
