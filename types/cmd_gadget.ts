// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_gadget.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CustomGadgetTreeInfo } from "./define";
import { Vector } from "./define";
import { VehicleMember } from "./define";
import { FoundationInfo } from "./define";
import { Item } from "./define";
import { GadgetGeneralRewardInfo } from "./define";
import { ProfilePicture } from "./define";
import { BlossomChestInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GadgetInteractReq
 */
export interface GadgetInteractReq {
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 8;
     */
    gadgetId?: number;
    /**
     * @generated from protobuf field: optional bool is_use_condense_resin = 15;
     */
    isUseCondenseResin?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.InterOpType op_type = 5;
     */
    opType?: InterOpType;
    /**
     * @generated from protobuf field: optional com.midnights.game.ResinCostType resin_cost_type = 1;
     */
    resinCostType?: ResinCostType;
    /**
     * @generated from protobuf field: optional uint32 ui_interact_id = 2;
     */
    uiInteractId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 4;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetInteractReq.CmdId
 */
export enum GadgetInteractReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 872;
     */
    CMD_ID = 872,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetInteractRsp
 */
export interface GadgetInteractRsp {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 10;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.InteractType interact_type = 2;
     */
    interactType?: InteractType;
    /**
     * @generated from protobuf field: optional com.midnights.game.InterOpType op_type = 3;
     */
    opType?: InterOpType;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 15;
     */
    gadgetId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetInteractRsp.CmdId
 */
export enum GadgetInteractRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 898;
     */
    CMD_ID = 898,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetStateNotify
 */
export interface GadgetStateNotify {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 5;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_state = 3;
     */
    gadgetState?: number;
    /**
     * @generated from protobuf field: optional bool is_enable_interact = 11;
     */
    isEnableInteract?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetStateNotify.CmdId
 */
export enum GadgetStateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 812;
     */
    CMD_ID = 812,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorktopOptionNotify
 */
export interface WorktopOptionNotify {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 11;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: repeated uint32 option_list = 8;
     */
    optionList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.WorktopOptionNotify.CmdId
 */
export enum WorktopOptionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 835;
     */
    CMD_ID = 835,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectWorktopOptionReq
 */
export interface SelectWorktopOptionReq {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 12;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 option_id = 11;
     */
    optionId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectWorktopOptionReq.CmdId
 */
export enum SelectWorktopOptionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 807;
     */
    CMD_ID = 807,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectWorktopOptionRsp
 */
export interface SelectWorktopOptionRsp {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 13;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 option_id = 7;
     */
    optionId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectWorktopOptionRsp.CmdId
 */
export enum SelectWorktopOptionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 821;
     */
    CMD_ID = 821,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BossChestActivateNotify
 */
export interface BossChestActivateNotify {
    /**
     * @generated from protobuf field: repeated uint32 qualify_uid_list = 1;
     */
    qualifyUidList: number[];
    /**
     * @generated from protobuf field: optional uint32 entity_id = 12;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BossChestActivateNotify.CmdId
 */
export enum BossChestActivateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 803;
     */
    CMD_ID = 803,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlossomChestInfoNotify
 */
export interface BlossomChestInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 9;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BlossomChestInfo blossom_chest_info = 3;
     */
    blossomChestInfo?: BlossomChestInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.BlossomChestInfoNotify.CmdId
 */
export enum BlossomChestInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 890;
     */
    CMD_ID = 890,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetPlayStartNotify
 */
export interface GadgetPlayStartNotify {
    /**
     * @generated from protobuf field: optional uint32 start_time = 14;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 8;
     */
    playType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetPlayStartNotify.CmdId
 */
export enum GadgetPlayStartNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 873;
     */
    CMD_ID = 873,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetPlayUidInfo
 */
export interface GadgetPlayUidInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 2;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional uint32 battle_watcher_id = 6;
     */
    battleWatcherId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 7;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 icon = 14;
     */
    icon?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 4;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional string nickname = 3;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string online_id = 8;
     */
    onlineId?: string;
}
/**
 * @generated from protobuf message com.midnights.game.GadgetPlayStopNotify
 */
export interface GadgetPlayStopNotify {
    /**
     * @generated from protobuf field: optional bool is_win = 14;
     */
    isWin?: boolean;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 7;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 4;
     */
    playType?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GadgetPlayUidInfo uid_info_list = 8;
     */
    uidInfoList: GadgetPlayUidInfo[];
    /**
     * @generated from protobuf field: optional uint32 score = 5;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 cost_time = 6;
     */
    costTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetPlayStopNotify.CmdId
 */
export enum GadgetPlayStopNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 899;
     */
    CMD_ID = 899,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetPlayDataNotify
 */
export interface GadgetPlayDataNotify {
    /**
     * @generated from protobuf field: optional uint32 play_type = 12;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 9;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 6;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetPlayDataNotify.CmdId
 */
export enum GadgetPlayDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 831;
     */
    CMD_ID = 831,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetPlayUidOpNotify
 */
export interface GadgetPlayUidOpNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 2;
     */
    uidList: number[];
    /**
     * @generated from protobuf field: optional uint32 play_type = 6;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional string param_str = 1;
     */
    paramStr?: string;
    /**
     * @generated from protobuf field: optional uint32 op = 7;
     */
    op?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_list = 4;
     */
    paramList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetPlayUidOpNotify.CmdId
 */
export enum GadgetPlayUidOpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 875;
     */
    CMD_ID = 875,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetGeneralRewardInfoNotify
 */
export interface GadgetGeneralRewardInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 13;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GadgetGeneralRewardInfo general_reward_info = 9;
     */
    generalRewardInfo?: GadgetGeneralRewardInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetGeneralRewardInfoNotify.CmdId
 */
export enum GadgetGeneralRewardInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 848;
     */
    CMD_ID = 848,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetAutoPickDropInfoNotify
 */
export interface GadgetAutoPickDropInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Item item_list = 11;
     */
    itemList: Item[];
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetAutoPickDropInfoNotify.CmdId
 */
export enum GadgetAutoPickDropInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 897;
     */
    CMD_ID = 897,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify
 */
export interface UpdateAbilityCreatedMovingPlatformNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 4;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.OpType op_type = 3;
     */
    opType?: UpdateAbilityCreatedMovingPlatformNotify_OpType;
}
/**
 * @generated from protobuf enum com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.OpType
 */
export enum UpdateAbilityCreatedMovingPlatformNotify_OpType {
    /**
     * @generated from protobuf enum value: OP_NONE = 0;
     */
    OP_NONE = 0,
    /**
     * @generated from protobuf enum value: OP_ACTIVATE = 1;
     */
    OP_ACTIVATE = 1,
    /**
     * @generated from protobuf enum value: OP_DEACTIVATE = 2;
     */
    OP_DEACTIVATE = 2
}
/**
 * @generated from protobuf enum com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.CmdId
 */
export enum UpdateAbilityCreatedMovingPlatformNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 881;
     */
    CMD_ID = 881,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FoundationReq
 */
export interface FoundationReq {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 14;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_config_id = 12;
     */
    pointConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 building_id = 13;
     */
    buildingId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.FoundationOpType op_type = 10;
     */
    opType?: FoundationOpType;
}
/**
 * @generated from protobuf enum com.midnights.game.FoundationReq.CmdId
 */
export enum FoundationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 805;
     */
    CMD_ID = 805,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FoundationRsp
 */
export interface FoundationRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.FoundationOpType op_type = 13;
     */
    opType?: FoundationOpType;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 10;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 building_id = 11;
     */
    buildingId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_config_id = 12;
     */
    pointConfigId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FoundationRsp.CmdId
 */
export enum FoundationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 882;
     */
    CMD_ID = 882,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FoundationNotify
 */
export interface FoundationNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.FoundationInfo info = 7;
     */
    info?: FoundationInfo;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 9;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FoundationNotify.CmdId
 */
export enum FoundationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 847;
     */
    CMD_ID = 847,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetTalkChangeNotify
 */
export interface GadgetTalkChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 5;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_gadget_talk_state = 15;
     */
    curGadgetTalkState?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetTalkChangeNotify.CmdId
 */
export enum GadgetTalkChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 839;
     */
    CMD_ID = 839,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetChainLevelUpdateNotify
 */
export interface GadgetChainLevelUpdateNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> gadget_chain_level_map = 12;
     */
    gadgetChainLevelMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetChainLevelUpdateNotify.CmdId
 */
export enum GadgetChainLevelUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 853;
     */
    CMD_ID = 853,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetChainLevelChangeNotify
 */
export interface GadgetChainLevelChangeNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> gadget_chain_level_map = 2;
     */
    gadgetChainLevelMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetChainLevelChangeNotify.CmdId
 */
export enum GadgetChainLevelChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 822;
     */
    CMD_ID = 822,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VehicleInteractReq
 */
export interface VehicleInteractReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.VehicleInteractType interact_type = 8;
     */
    interactType?: VehicleInteractType;
    /**
     * @generated from protobuf field: optional uint32 pos = 12;
     */
    pos?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VehicleInteractReq.CmdId
 */
export enum VehicleInteractReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 865;
     */
    CMD_ID = 865,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VehicleInteractRsp
 */
export interface VehicleInteractRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.VehicleInteractType interact_type = 15;
     */
    interactType?: VehicleInteractType;
    /**
     * @generated from protobuf field: optional com.midnights.game.VehicleMember member = 3;
     */
    member?: VehicleMember;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VehicleInteractRsp.CmdId
 */
export enum VehicleInteractRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 804;
     */
    CMD_ID = 804,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CreateVehicleReq
 */
export interface CreateVehicleReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 11;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 vehicle_id = 2;
     */
    vehicleId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_point_id = 7;
     */
    scenePointId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 5;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.CreateVehicleReq.CmdId
 */
export enum CreateVehicleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 893;
     */
    CMD_ID = 893,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CreateVehicleRsp
 */
export interface CreateVehicleRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 vehicle_id = 9;
     */
    vehicleId?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CreateVehicleRsp.CmdId
 */
export enum CreateVehicleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 827;
     */
    CMD_ID = 827,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RequestLiveInfoReq
 */
export interface RequestLiveInfoReq {
    /**
     * @generated from protobuf field: optional uint32 live_id = 6;
     */
    liveId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RequestLiveInfoReq.CmdId
 */
export enum RequestLiveInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 894;
     */
    CMD_ID = 894,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RequestLiveInfoRsp
 */
export interface RequestLiveInfoRsp {
    /**
     * @generated from protobuf field: optional string spare_live_url = 14;
     */
    spareLiveUrl?: string;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional string live_url = 12;
     */
    liveUrl?: string;
    /**
     * @generated from protobuf field: optional uint32 live_id = 2;
     */
    liveId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RequestLiveInfoRsp.CmdId
 */
export enum RequestLiveInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 888;
     */
    CMD_ID = 888,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LiveStartNotify
 */
export interface LiveStartNotify {
    /**
     * @generated from protobuf field: optional uint32 live_id = 2;
     */
    liveId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LiveStartNotify.CmdId
 */
export enum LiveStartNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 826;
     */
    CMD_ID = 826,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ProjectorOptionReq
 */
export interface ProjectorOptionReq {
    /**
     * @generated from protobuf field: optional uint32 op_type = 7;
     */
    opType?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 10;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ProjectorOptionReq.CmdId
 */
export enum ProjectorOptionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 863;
     */
    CMD_ID = 863,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ProjectorOptionReq.ProjectorOpType
 */
export enum ProjectorOptionReq_ProjectorOpType {
    /**
     * @generated from protobuf enum value: PROJECTOR_OP_NONE = 0;
     */
    PROJECTOR_OP_NONE = 0,
    /**
     * @generated from protobuf enum value: PROJECTOR_OP_CREATE = 1;
     */
    PROJECTOR_OP_CREATE = 1,
    /**
     * @generated from protobuf enum value: PROJECTOR_OP_DESTROY = 2;
     */
    PROJECTOR_OP_DESTROY = 2
}
/**
 * @generated from protobuf message com.midnights.game.ProjectorOptionRsp
 */
export interface ProjectorOptionRsp {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 10;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 op_type = 13;
     */
    opType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ProjectorOptionRsp.CmdId
 */
export enum ProjectorOptionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 895;
     */
    CMD_ID = 895,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LiveEndNotify
 */
export interface LiveEndNotify {
    /**
     * @generated from protobuf field: optional uint32 live_id = 5;
     */
    liveId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LiveEndNotify.CmdId
 */
export enum LiveEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 806;
     */
    CMD_ID = 806,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VehicleStaminaNotify
 */
export interface VehicleStaminaNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 6;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional float cur_stamina = 14;
     */
    curStamina?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VehicleStaminaNotify.CmdId
 */
export enum VehicleStaminaNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 834;
     */
    CMD_ID = 834,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetCustomTreeInfoNotify
 */
export interface GadgetCustomTreeInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo custom_gadget_tree_info = 5;
     */
    customGadgetTreeInfo?: CustomGadgetTreeInfo;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 12;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetCustomTreeInfoNotify.CmdId
 */
export enum GadgetCustomTreeInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 850;
     */
    CMD_ID = 850,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetChangeLevelTagReq
 */
export interface GadgetChangeLevelTagReq {
    /**
     * @generated from protobuf field: optional uint32 level_tag_id = 14;
     */
    levelTagId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11;
     */
    combinationInfo?: CustomGadgetTreeInfo;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 10;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetChangeLevelTagReq.CmdId
 */
export enum GadgetChangeLevelTagReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 843;
     */
    CMD_ID = 843,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GadgetChangeLevelTagRsp
 */
export interface GadgetChangeLevelTagRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GadgetChangeLevelTagRsp.CmdId
 */
export enum GadgetChangeLevelTagRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 874;
     */
    CMD_ID = 874,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.NightCrowGadgetObservationMatchReq
 */
export interface NightCrowGadgetObservationMatchReq {
    /**
     * @generated from protobuf field: optional uint32 target_gadget_state = 3;
     */
    targetGadgetState?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 8;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.NightCrowGadgetObservationMatchReq.CmdId
 */
export enum NightCrowGadgetObservationMatchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 876;
     */
    CMD_ID = 876,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.NightCrowGadgetObservationMatchRsp
 */
export interface NightCrowGadgetObservationMatchRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.NightCrowGadgetObservationMatchRsp.CmdId
 */
export enum NightCrowGadgetObservationMatchRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 846;
     */
    CMD_ID = 846,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DeshretObeliskChestInfo
 */
export interface DeshretObeliskChestInfo {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 9;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 group_id = 7;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 3;
     */
    configId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DeshretObeliskChestInfoNotify
 */
export interface DeshretObeliskChestInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.DeshretObeliskChestInfo chest_info_list = 14;
     */
    chestInfoList: DeshretObeliskChestInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.DeshretObeliskChestInfoNotify.CmdId
 */
export enum DeshretObeliskChestInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 841;
     */
    CMD_ID = 841,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.InteractType
 */
export enum InteractType {
    /**
     * @generated from protobuf enum value: INTERACT_NONE = 0;
     */
    INTERACT_NONE = 0,
    /**
     * @generated from protobuf enum value: INTERACT_PICK_ITEM = 1;
     */
    INTERACT_PICK_ITEM = 1,
    /**
     * @generated from protobuf enum value: INTERACT_GATHER = 2;
     */
    INTERACT_GATHER = 2,
    /**
     * @generated from protobuf enum value: INTERACT_OPEN_CHEST = 3;
     */
    INTERACT_OPEN_CHEST = 3,
    /**
     * @generated from protobuf enum value: INTERACT_OPEN_STATUE = 4;
     */
    INTERACT_OPEN_STATUE = 4,
    /**
     * @generated from protobuf enum value: INTERACT_CONSUM = 5;
     */
    INTERACT_CONSUM = 5,
    /**
     * @generated from protobuf enum value: INTERACT_MP_PLAY_REWARD = 6;
     */
    INTERACT_MP_PLAY_REWARD = 6,
    /**
     * @generated from protobuf enum value: INTERACT_VIEW = 7;
     */
    INTERACT_VIEW = 7,
    /**
     * @generated from protobuf enum value: INTERACT_GENERAL_REWARD = 8;
     */
    INTERACT_GENERAL_REWARD = 8,
    /**
     * @generated from protobuf enum value: INTERACT_MIRACLE_RING = 9;
     */
    INTERACT_MIRACLE_RING = 9,
    /**
     * @generated from protobuf enum value: INTERACT_FOUNDATION = 10;
     */
    INTERACT_FOUNDATION = 10,
    /**
     * @generated from protobuf enum value: INTERACT_ECHO_SHELL = 11;
     */
    INTERACT_ECHO_SHELL = 11,
    /**
     * @generated from protobuf enum value: INTERACT_HOME_GATHER = 12;
     */
    INTERACT_HOME_GATHER = 12,
    /**
     * @generated from protobuf enum value: INTERACT_ENV_ANIMAL = 13;
     */
    INTERACT_ENV_ANIMAL = 13,
    /**
     * @generated from protobuf enum value: INTERACT_QUEST_GADGET = 14;
     */
    INTERACT_QUEST_GADGET = 14,
    /**
     * @generated from protobuf enum value: INTERACT_UI_INTERACT = 15;
     */
    INTERACT_UI_INTERACT = 15,
    /**
     * @generated from protobuf enum value: INTERACT_DESHRET_OBELISK = 16;
     */
    INTERACT_DESHRET_OBELISK = 16
}
/**
 * @generated from protobuf enum com.midnights.game.InterOpType
 */
export enum InterOpType {
    /**
     * @generated from protobuf enum value: INTER_OP_FINISH = 0;
     */
    INTER_OP_FINISH = 0,
    /**
     * @generated from protobuf enum value: INTER_OP_START = 1;
     */
    INTER_OP_START = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ResinCostType
 */
export enum ResinCostType {
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_NORMAL = 1;
     */
    NORMAL = 1,
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_CONDENSE = 2;
     */
    CONDENSE = 2,
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_REUNION_PRIVILEGE = 3;
     */
    REUNION_PRIVILEGE = 3,
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_OP_ACTIVITY = 4;
     */
    OP_ACTIVITY = 4,
    /**
     * @generated from protobuf enum value: RESIN_COST_TYPE_MATERIAL = 5;
     */
    MATERIAL = 5
}
/**
 * @generated from protobuf enum com.midnights.game.FoundationOpType
 */
export enum FoundationOpType {
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_NONE = 0;
     */
    FOUNDATION_OP_NONE = 0,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_BUILD = 1;
     */
    FOUNDATION_OP_BUILD = 1,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_DEMOLITION = 2;
     */
    FOUNDATION_OP_DEMOLITION = 2,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_REBUILD = 3;
     */
    FOUNDATION_OP_REBUILD = 3,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_ROTATE = 4;
     */
    FOUNDATION_OP_ROTATE = 4,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_LOCK = 5;
     */
    FOUNDATION_OP_LOCK = 5,
    /**
     * @generated from protobuf enum value: FOUNDATION_OP_UNLOCK = 6;
     */
    FOUNDATION_OP_UNLOCK = 6
}
/**
 * @generated from protobuf enum com.midnights.game.VehicleInteractType
 */
export enum VehicleInteractType {
    /**
     * @generated from protobuf enum value: VEHICLE_INTERACT_NONE = 0;
     */
    VEHICLE_INTERACT_NONE = 0,
    /**
     * @generated from protobuf enum value: VEHICLE_INTERACT_IN = 1;
     */
    VEHICLE_INTERACT_IN = 1,
    /**
     * @generated from protobuf enum value: VEHICLE_INTERACT_OUT = 2;
     */
    VEHICLE_INTERACT_OUT = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GadgetInteractReq$Type extends MessageType<GadgetInteractReq> {
    constructor() {
        super("com.midnights.game.GadgetInteractReq", [
            { no: 8, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_use_condense_resin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.InterOpType", InterOpType] },
            { no: 1, name: "resin_cost_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ResinCostType", ResinCostType, "RESIN_COST_TYPE_"] },
            { no: 2, name: "ui_interact_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetInteractReq>): GadgetInteractReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetInteractReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetInteractReq): GadgetInteractReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_id */ 8:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional bool is_use_condense_resin */ 15:
                    message.isUseCondenseResin = reader.bool();
                    break;
                case /* optional com.midnights.game.InterOpType op_type */ 5:
                    message.opType = reader.int32();
                    break;
                case /* optional com.midnights.game.ResinCostType resin_cost_type */ 1:
                    message.resinCostType = reader.int32();
                    break;
                case /* optional uint32 ui_interact_id */ 2:
                    message.uiInteractId = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 4:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetInteractReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_id = 8; */
        if (message.gadgetId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gadgetId);
        /* optional bool is_use_condense_resin = 15; */
        if (message.isUseCondenseResin !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isUseCondenseResin);
        /* optional com.midnights.game.InterOpType op_type = 5; */
        if (message.opType !== undefined)
            writer.tag(5, WireType.Varint).int32(message.opType);
        /* optional com.midnights.game.ResinCostType resin_cost_type = 1; */
        if (message.resinCostType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.resinCostType);
        /* optional uint32 ui_interact_id = 2; */
        if (message.uiInteractId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.uiInteractId);
        /* optional uint32 gadget_entity_id = 4; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetInteractReq
 */
export const GadgetInteractReq = new GadgetInteractReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetInteractRsp$Type extends MessageType<GadgetInteractRsp> {
    constructor() {
        super("com.midnights.game.GadgetInteractRsp", [
            { no: 10, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "interact_type", kind: "enum", opt: true, T: () => ["com.midnights.game.InteractType", InteractType] },
            { no: 3, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.InterOpType", InterOpType] },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetInteractRsp>): GadgetInteractRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetInteractRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetInteractRsp): GadgetInteractRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 10:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.InteractType interact_type */ 2:
                    message.interactType = reader.int32();
                    break;
                case /* optional com.midnights.game.InterOpType op_type */ 3:
                    message.opType = reader.int32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gadget_id */ 15:
                    message.gadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetInteractRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 10; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional com.midnights.game.InteractType interact_type = 2; */
        if (message.interactType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.interactType);
        /* optional com.midnights.game.InterOpType op_type = 3; */
        if (message.opType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.opType);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 gadget_id = 15; */
        if (message.gadgetId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetInteractRsp
 */
export const GadgetInteractRsp = new GadgetInteractRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetStateNotify$Type extends MessageType<GadgetStateNotify> {
    constructor() {
        super("com.midnights.game.GadgetStateNotify", [
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "gadget_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_enable_interact", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetStateNotify>): GadgetStateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetStateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetStateNotify): GadgetStateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 gadget_state */ 3:
                    message.gadgetState = reader.uint32();
                    break;
                case /* optional bool is_enable_interact */ 11:
                    message.isEnableInteract = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetStateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 gadget_state = 3; */
        if (message.gadgetState !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.gadgetState);
        /* optional bool is_enable_interact = 11; */
        if (message.isEnableInteract !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isEnableInteract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetStateNotify
 */
export const GadgetStateNotify = new GadgetStateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorktopOptionNotify$Type extends MessageType<WorktopOptionNotify> {
    constructor() {
        super("com.midnights.game.WorktopOptionNotify", [
            { no: 11, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "option_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WorktopOptionNotify>): WorktopOptionNotify {
        const message = { optionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorktopOptionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorktopOptionNotify): WorktopOptionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 11:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* repeated uint32 option_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionList.push(reader.uint32());
                    else
                        message.optionList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorktopOptionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 11; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.gadgetEntityId);
        /* repeated uint32 option_list = 8; */
        for (let i = 0; i < message.optionList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.optionList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorktopOptionNotify
 */
export const WorktopOptionNotify = new WorktopOptionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectWorktopOptionReq$Type extends MessageType<SelectWorktopOptionReq> {
    constructor() {
        super("com.midnights.game.SelectWorktopOptionReq", [
            { no: 12, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "option_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectWorktopOptionReq>): SelectWorktopOptionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectWorktopOptionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectWorktopOptionReq): SelectWorktopOptionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 12:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 option_id */ 11:
                    message.optionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectWorktopOptionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 12; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 option_id = 11; */
        if (message.optionId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.optionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectWorktopOptionReq
 */
export const SelectWorktopOptionReq = new SelectWorktopOptionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectWorktopOptionRsp$Type extends MessageType<SelectWorktopOptionRsp> {
    constructor() {
        super("com.midnights.game.SelectWorktopOptionRsp", [
            { no: 13, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "option_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectWorktopOptionRsp>): SelectWorktopOptionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectWorktopOptionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectWorktopOptionRsp): SelectWorktopOptionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 13:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 option_id */ 7:
                    message.optionId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectWorktopOptionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 13; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 option_id = 7; */
        if (message.optionId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.optionId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectWorktopOptionRsp
 */
export const SelectWorktopOptionRsp = new SelectWorktopOptionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BossChestActivateNotify$Type extends MessageType<BossChestActivateNotify> {
    constructor() {
        super("com.midnights.game.BossChestActivateNotify", [
            { no: 1, name: "qualify_uid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BossChestActivateNotify>): BossChestActivateNotify {
        const message = { qualifyUidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BossChestActivateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BossChestActivateNotify): BossChestActivateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 qualify_uid_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.qualifyUidList.push(reader.uint32());
                    else
                        message.qualifyUidList.push(reader.uint32());
                    break;
                case /* optional uint32 entity_id */ 12:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BossChestActivateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 qualify_uid_list = 1; */
        for (let i = 0; i < message.qualifyUidList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.qualifyUidList[i]);
        /* optional uint32 entity_id = 12; */
        if (message.entityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BossChestActivateNotify
 */
export const BossChestActivateNotify = new BossChestActivateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlossomChestInfoNotify$Type extends MessageType<BlossomChestInfoNotify> {
    constructor() {
        super("com.midnights.game.BlossomChestInfoNotify", [
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "blossom_chest_info", kind: "message", T: () => BlossomChestInfo }
        ]);
    }
    create(value?: PartialMessage<BlossomChestInfoNotify>): BlossomChestInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlossomChestInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlossomChestInfoNotify): BlossomChestInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.BlossomChestInfo blossom_chest_info */ 3:
                    message.blossomChestInfo = BlossomChestInfo.internalBinaryRead(reader, reader.uint32(), options, message.blossomChestInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlossomChestInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.BlossomChestInfo blossom_chest_info = 3; */
        if (message.blossomChestInfo)
            BlossomChestInfo.internalBinaryWrite(message.blossomChestInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlossomChestInfoNotify
 */
export const BlossomChestInfoNotify = new BlossomChestInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetPlayStartNotify$Type extends MessageType<GadgetPlayStartNotify> {
    constructor() {
        super("com.midnights.game.GadgetPlayStartNotify", [
            { no: 14, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetPlayStartNotify>): GadgetPlayStartNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetPlayStartNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetPlayStartNotify): GadgetPlayStartNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 14:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 8:
                    message.playType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetPlayStartNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_time = 14; */
        if (message.startTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.startTime);
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        /* optional uint32 play_type = 8; */
        if (message.playType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.playType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetPlayStartNotify
 */
export const GadgetPlayStartNotify = new GadgetPlayStartNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetPlayUidInfo$Type extends MessageType<GadgetPlayUidInfo> {
    constructor() {
        super("com.midnights.game.GadgetPlayUidInfo", [
            { no: 2, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 6, name: "battle_watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "icon", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetPlayUidInfo>): GadgetPlayUidInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetPlayUidInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetPlayUidInfo): GadgetPlayUidInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 2:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 battle_watcher_id */ 6:
                    message.battleWatcherId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 7:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 icon */ 14:
                    message.icon = reader.uint32();
                    break;
                case /* optional uint32 score */ 4:
                    message.score = reader.uint32();
                    break;
                case /* optional string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* optional string online_id */ 8:
                    message.onlineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetPlayUidInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ProfilePicture profile_picture = 2; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 battle_watcher_id = 6; */
        if (message.battleWatcherId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.battleWatcherId);
        /* optional uint32 uid = 7; */
        if (message.uid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.uid);
        /* optional uint32 icon = 14; */
        if (message.icon !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.icon);
        /* optional uint32 score = 4; */
        if (message.score !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.score);
        /* optional string nickname = 3; */
        if (message.nickname !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* optional string online_id = 8; */
        if (message.onlineId !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.onlineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetPlayUidInfo
 */
export const GadgetPlayUidInfo = new GadgetPlayUidInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetPlayStopNotify$Type extends MessageType<GadgetPlayStopNotify> {
    constructor() {
        super("com.midnights.game.GadgetPlayStopNotify", [
            { no: 14, name: "is_win", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "uid_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GadgetPlayUidInfo },
            { no: 5, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetPlayStopNotify>): GadgetPlayStopNotify {
        const message = { uidInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetPlayStopNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetPlayStopNotify): GadgetPlayStopNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_win */ 14:
                    message.isWin = reader.bool();
                    break;
                case /* optional uint32 entity_id */ 7:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 4:
                    message.playType = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GadgetPlayUidInfo uid_info_list */ 8:
                    message.uidInfoList.push(GadgetPlayUidInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 score */ 5:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 cost_time */ 6:
                    message.costTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetPlayStopNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_win = 14; */
        if (message.isWin !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isWin);
        /* optional uint32 entity_id = 7; */
        if (message.entityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.entityId);
        /* optional uint32 play_type = 4; */
        if (message.playType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.playType);
        /* repeated com.midnights.game.GadgetPlayUidInfo uid_info_list = 8; */
        for (let i = 0; i < message.uidInfoList.length; i++)
            GadgetPlayUidInfo.internalBinaryWrite(message.uidInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 score = 5; */
        if (message.score !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.score);
        /* optional uint32 cost_time = 6; */
        if (message.costTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.costTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetPlayStopNotify
 */
export const GadgetPlayStopNotify = new GadgetPlayStopNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetPlayDataNotify$Type extends MessageType<GadgetPlayDataNotify> {
    constructor() {
        super("com.midnights.game.GadgetPlayDataNotify", [
            { no: 12, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetPlayDataNotify>): GadgetPlayDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetPlayDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetPlayDataNotify): GadgetPlayDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 play_type */ 12:
                    message.playType = reader.uint32();
                    break;
                case /* optional uint32 progress */ 9:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetPlayDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 play_type = 12; */
        if (message.playType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.playType);
        /* optional uint32 progress = 9; */
        if (message.progress !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.progress);
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetPlayDataNotify
 */
export const GadgetPlayDataNotify = new GadgetPlayDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetPlayUidOpNotify$Type extends MessageType<GadgetPlayUidOpNotify> {
    constructor() {
        super("com.midnights.game.GadgetPlayUidOpNotify", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "uid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "param_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "op", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "param_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetPlayUidOpNotify>): GadgetPlayUidOpNotify {
        const message = { uidList: [], paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetPlayUidOpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetPlayUidOpNotify): GadgetPlayUidOpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                case /* repeated uint32 uid_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                case /* optional uint32 play_type */ 6:
                    message.playType = reader.uint32();
                    break;
                case /* optional string param_str */ 1:
                    message.paramStr = reader.string();
                    break;
                case /* optional uint32 op */ 7:
                    message.op = reader.uint32();
                    break;
                case /* repeated uint32 param_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.uint32());
                    else
                        message.paramList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetPlayUidOpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        /* repeated uint32 uid_list = 2; */
        for (let i = 0; i < message.uidList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.uidList[i]);
        /* optional uint32 play_type = 6; */
        if (message.playType !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.playType);
        /* optional string param_str = 1; */
        if (message.paramStr !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.paramStr);
        /* optional uint32 op = 7; */
        if (message.op !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.op);
        /* repeated uint32 param_list = 4; */
        for (let i = 0; i < message.paramList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.paramList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetPlayUidOpNotify
 */
export const GadgetPlayUidOpNotify = new GadgetPlayUidOpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetGeneralRewardInfoNotify$Type extends MessageType<GadgetGeneralRewardInfoNotify> {
    constructor() {
        super("com.midnights.game.GadgetGeneralRewardInfoNotify", [
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "general_reward_info", kind: "message", T: () => GadgetGeneralRewardInfo }
        ]);
    }
    create(value?: PartialMessage<GadgetGeneralRewardInfoNotify>): GadgetGeneralRewardInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetGeneralRewardInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetGeneralRewardInfoNotify): GadgetGeneralRewardInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.GadgetGeneralRewardInfo general_reward_info */ 9:
                    message.generalRewardInfo = GadgetGeneralRewardInfo.internalBinaryRead(reader, reader.uint32(), options, message.generalRewardInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetGeneralRewardInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.GadgetGeneralRewardInfo general_reward_info = 9; */
        if (message.generalRewardInfo)
            GadgetGeneralRewardInfo.internalBinaryWrite(message.generalRewardInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetGeneralRewardInfoNotify
 */
export const GadgetGeneralRewardInfoNotify = new GadgetGeneralRewardInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetAutoPickDropInfoNotify$Type extends MessageType<GadgetAutoPickDropInfoNotify> {
    constructor() {
        super("com.midnights.game.GadgetAutoPickDropInfoNotify", [
            { no: 11, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<GadgetAutoPickDropInfoNotify>): GadgetAutoPickDropInfoNotify {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetAutoPickDropInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetAutoPickDropInfoNotify): GadgetAutoPickDropInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Item item_list */ 11:
                    message.itemList.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetAutoPickDropInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Item item_list = 11; */
        for (let i = 0; i < message.itemList.length; i++)
            Item.internalBinaryWrite(message.itemList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetAutoPickDropInfoNotify
 */
export const GadgetAutoPickDropInfoNotify = new GadgetAutoPickDropInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAbilityCreatedMovingPlatformNotify$Type extends MessageType<UpdateAbilityCreatedMovingPlatformNotify> {
    constructor() {
        super("com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify", [
            { no: 4, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.OpType", UpdateAbilityCreatedMovingPlatformNotify_OpType] }
        ]);
    }
    create(value?: PartialMessage<UpdateAbilityCreatedMovingPlatformNotify>): UpdateAbilityCreatedMovingPlatformNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAbilityCreatedMovingPlatformNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAbilityCreatedMovingPlatformNotify): UpdateAbilityCreatedMovingPlatformNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 4:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.OpType op_type */ 3:
                    message.opType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAbilityCreatedMovingPlatformNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 4; */
        if (message.entityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify.OpType op_type = 3; */
        if (message.opType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.opType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateAbilityCreatedMovingPlatformNotify
 */
export const UpdateAbilityCreatedMovingPlatformNotify = new UpdateAbilityCreatedMovingPlatformNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FoundationReq$Type extends MessageType<FoundationReq> {
    constructor() {
        super("com.midnights.game.FoundationReq", [
            { no: 14, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "building_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.FoundationOpType", FoundationOpType] }
        ]);
    }
    create(value?: PartialMessage<FoundationReq>): FoundationReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FoundationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FoundationReq): FoundationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 14:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 point_config_id */ 12:
                    message.pointConfigId = reader.uint32();
                    break;
                case /* optional uint32 building_id */ 13:
                    message.buildingId = reader.uint32();
                    break;
                case /* optional com.midnights.game.FoundationOpType op_type */ 10:
                    message.opType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FoundationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 14; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 point_config_id = 12; */
        if (message.pointConfigId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointConfigId);
        /* optional uint32 building_id = 13; */
        if (message.buildingId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.buildingId);
        /* optional com.midnights.game.FoundationOpType op_type = 10; */
        if (message.opType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.opType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FoundationReq
 */
export const FoundationReq = new FoundationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FoundationRsp$Type extends MessageType<FoundationRsp> {
    constructor() {
        super("com.midnights.game.FoundationRsp", [
            { no: 13, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.FoundationOpType", FoundationOpType] },
            { no: 10, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "building_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FoundationRsp>): FoundationRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FoundationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FoundationRsp): FoundationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FoundationOpType op_type */ 13:
                    message.opType = reader.int32();
                    break;
                case /* optional uint32 gadget_entity_id */ 10:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 building_id */ 11:
                    message.buildingId = reader.uint32();
                    break;
                case /* optional uint32 point_config_id */ 12:
                    message.pointConfigId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FoundationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FoundationOpType op_type = 13; */
        if (message.opType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.opType);
        /* optional uint32 gadget_entity_id = 10; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 building_id = 11; */
        if (message.buildingId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.buildingId);
        /* optional uint32 point_config_id = 12; */
        if (message.pointConfigId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointConfigId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FoundationRsp
 */
export const FoundationRsp = new FoundationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FoundationNotify$Type extends MessageType<FoundationNotify> {
    constructor() {
        super("com.midnights.game.FoundationNotify", [
            { no: 7, name: "info", kind: "message", T: () => FoundationInfo },
            { no: 9, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FoundationNotify>): FoundationNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FoundationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FoundationNotify): FoundationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FoundationInfo info */ 7:
                    message.info = FoundationInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                case /* optional uint32 gadget_entity_id */ 9:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FoundationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FoundationInfo info = 7; */
        if (message.info)
            FoundationInfo.internalBinaryWrite(message.info, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gadget_entity_id = 9; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FoundationNotify
 */
export const FoundationNotify = new FoundationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetTalkChangeNotify$Type extends MessageType<GadgetTalkChangeNotify> {
    constructor() {
        super("com.midnights.game.GadgetTalkChangeNotify", [
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "cur_gadget_talk_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetTalkChangeNotify>): GadgetTalkChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetTalkChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetTalkChangeNotify): GadgetTalkChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 cur_gadget_talk_state */ 15:
                    message.curGadgetTalkState = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetTalkChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 cur_gadget_talk_state = 15; */
        if (message.curGadgetTalkState !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.curGadgetTalkState);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetTalkChangeNotify
 */
export const GadgetTalkChangeNotify = new GadgetTalkChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetChainLevelUpdateNotify$Type extends MessageType<GadgetChainLevelUpdateNotify> {
    constructor() {
        super("com.midnights.game.GadgetChainLevelUpdateNotify", [
            { no: 12, name: "gadget_chain_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GadgetChainLevelUpdateNotify>): GadgetChainLevelUpdateNotify {
        const message = { gadgetChainLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetChainLevelUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetChainLevelUpdateNotify): GadgetChainLevelUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> gadget_chain_level_map */ 12:
                    this.binaryReadMap12(message.gadgetChainLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: GadgetChainLevelUpdateNotify["gadgetChainLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GadgetChainLevelUpdateNotify["gadgetChainLevelMap"] | undefined, val: GadgetChainLevelUpdateNotify["gadgetChainLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GadgetChainLevelUpdateNotify.gadget_chain_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GadgetChainLevelUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> gadget_chain_level_map = 12; */
        for (let k of Object.keys(message.gadgetChainLevelMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.gadgetChainLevelMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetChainLevelUpdateNotify
 */
export const GadgetChainLevelUpdateNotify = new GadgetChainLevelUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetChainLevelChangeNotify$Type extends MessageType<GadgetChainLevelChangeNotify> {
    constructor() {
        super("com.midnights.game.GadgetChainLevelChangeNotify", [
            { no: 2, name: "gadget_chain_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GadgetChainLevelChangeNotify>): GadgetChainLevelChangeNotify {
        const message = { gadgetChainLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetChainLevelChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetChainLevelChangeNotify): GadgetChainLevelChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> gadget_chain_level_map */ 2:
                    this.binaryReadMap2(message.gadgetChainLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: GadgetChainLevelChangeNotify["gadgetChainLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GadgetChainLevelChangeNotify["gadgetChainLevelMap"] | undefined, val: GadgetChainLevelChangeNotify["gadgetChainLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GadgetChainLevelChangeNotify.gadget_chain_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GadgetChainLevelChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> gadget_chain_level_map = 2; */
        for (let k of Object.keys(message.gadgetChainLevelMap))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.gadgetChainLevelMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetChainLevelChangeNotify
 */
export const GadgetChainLevelChangeNotify = new GadgetChainLevelChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VehicleInteractReq$Type extends MessageType<VehicleInteractReq> {
    constructor() {
        super("com.midnights.game.VehicleInteractReq", [
            { no: 8, name: "interact_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VehicleInteractType", VehicleInteractType] },
            { no: 12, name: "pos", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VehicleInteractReq>): VehicleInteractReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VehicleInteractReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleInteractReq): VehicleInteractReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.VehicleInteractType interact_type */ 8:
                    message.interactType = reader.int32();
                    break;
                case /* optional uint32 pos */ 12:
                    message.pos = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleInteractReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.VehicleInteractType interact_type = 8; */
        if (message.interactType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.interactType);
        /* optional uint32 pos = 12; */
        if (message.pos !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pos);
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VehicleInteractReq
 */
export const VehicleInteractReq = new VehicleInteractReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VehicleInteractRsp$Type extends MessageType<VehicleInteractRsp> {
    constructor() {
        super("com.midnights.game.VehicleInteractRsp", [
            { no: 15, name: "interact_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VehicleInteractType", VehicleInteractType] },
            { no: 3, name: "member", kind: "message", T: () => VehicleMember },
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VehicleInteractRsp>): VehicleInteractRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VehicleInteractRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleInteractRsp): VehicleInteractRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.VehicleInteractType interact_type */ 15:
                    message.interactType = reader.int32();
                    break;
                case /* optional com.midnights.game.VehicleMember member */ 3:
                    message.member = VehicleMember.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleInteractRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.VehicleInteractType interact_type = 15; */
        if (message.interactType !== undefined)
            writer.tag(15, WireType.Varint).int32(message.interactType);
        /* optional com.midnights.game.VehicleMember member = 3; */
        if (message.member)
            VehicleMember.internalBinaryWrite(message.member, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VehicleInteractRsp
 */
export const VehicleInteractRsp = new VehicleInteractRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVehicleReq$Type extends MessageType<CreateVehicleReq> {
    constructor() {
        super("com.midnights.game.CreateVehicleReq", [
            { no: 11, name: "pos", kind: "message", T: () => Vector },
            { no: 2, name: "vehicle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "scene_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<CreateVehicleReq>): CreateVehicleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateVehicleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVehicleReq): CreateVehicleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 11:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 vehicle_id */ 2:
                    message.vehicleId = reader.uint32();
                    break;
                case /* optional uint32 scene_point_id */ 7:
                    message.scenePointId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 5:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVehicleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 11; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 vehicle_id = 2; */
        if (message.vehicleId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.vehicleId);
        /* optional uint32 scene_point_id = 7; */
        if (message.scenePointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scenePointId);
        /* optional com.midnights.game.Vector rot = 5; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CreateVehicleReq
 */
export const CreateVehicleReq = new CreateVehicleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVehicleRsp$Type extends MessageType<CreateVehicleRsp> {
    constructor() {
        super("com.midnights.game.CreateVehicleRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "vehicle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateVehicleRsp>): CreateVehicleRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateVehicleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVehicleRsp): CreateVehicleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 vehicle_id */ 9:
                    message.vehicleId = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVehicleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 vehicle_id = 9; */
        if (message.vehicleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.vehicleId);
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CreateVehicleRsp
 */
export const CreateVehicleRsp = new CreateVehicleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestLiveInfoReq$Type extends MessageType<RequestLiveInfoReq> {
    constructor() {
        super("com.midnights.game.RequestLiveInfoReq", [
            { no: 6, name: "live_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestLiveInfoReq>): RequestLiveInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestLiveInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLiveInfoReq): RequestLiveInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 live_id */ 6:
                    message.liveId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestLiveInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 live_id = 6; */
        if (message.liveId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.liveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RequestLiveInfoReq
 */
export const RequestLiveInfoReq = new RequestLiveInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestLiveInfoRsp$Type extends MessageType<RequestLiveInfoRsp> {
    constructor() {
        super("com.midnights.game.RequestLiveInfoRsp", [
            { no: 14, name: "spare_live_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "live_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "live_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestLiveInfoRsp>): RequestLiveInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RequestLiveInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLiveInfoRsp): RequestLiveInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string spare_live_url */ 14:
                    message.spareLiveUrl = reader.string();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional string live_url */ 12:
                    message.liveUrl = reader.string();
                    break;
                case /* optional uint32 live_id */ 2:
                    message.liveId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestLiveInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string spare_live_url = 14; */
        if (message.spareLiveUrl !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.spareLiveUrl);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional string live_url = 12; */
        if (message.liveUrl !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.liveUrl);
        /* optional uint32 live_id = 2; */
        if (message.liveId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.liveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RequestLiveInfoRsp
 */
export const RequestLiveInfoRsp = new RequestLiveInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveStartNotify$Type extends MessageType<LiveStartNotify> {
    constructor() {
        super("com.midnights.game.LiveStartNotify", [
            { no: 2, name: "live_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LiveStartNotify>): LiveStartNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveStartNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveStartNotify): LiveStartNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 live_id */ 2:
                    message.liveId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveStartNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 live_id = 2; */
        if (message.liveId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.liveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LiveStartNotify
 */
export const LiveStartNotify = new LiveStartNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectorOptionReq$Type extends MessageType<ProjectorOptionReq> {
    constructor() {
        super("com.midnights.game.ProjectorOptionReq", [
            { no: 7, name: "op_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectorOptionReq>): ProjectorOptionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProjectorOptionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectorOptionReq): ProjectorOptionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 op_type */ 7:
                    message.opType = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectorOptionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 op_type = 7; */
        if (message.opType !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.opType);
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ProjectorOptionReq
 */
export const ProjectorOptionReq = new ProjectorOptionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProjectorOptionRsp$Type extends MessageType<ProjectorOptionRsp> {
    constructor() {
        super("com.midnights.game.ProjectorOptionRsp", [
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "op_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProjectorOptionRsp>): ProjectorOptionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ProjectorOptionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProjectorOptionRsp): ProjectorOptionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 op_type */ 13:
                    message.opType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProjectorOptionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 op_type = 13; */
        if (message.opType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.opType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ProjectorOptionRsp
 */
export const ProjectorOptionRsp = new ProjectorOptionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LiveEndNotify$Type extends MessageType<LiveEndNotify> {
    constructor() {
        super("com.midnights.game.LiveEndNotify", [
            { no: 5, name: "live_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LiveEndNotify>): LiveEndNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LiveEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LiveEndNotify): LiveEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 live_id */ 5:
                    message.liveId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LiveEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 live_id = 5; */
        if (message.liveId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.liveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LiveEndNotify
 */
export const LiveEndNotify = new LiveEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VehicleStaminaNotify$Type extends MessageType<VehicleStaminaNotify> {
    constructor() {
        super("com.midnights.game.VehicleStaminaNotify", [
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cur_stamina", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<VehicleStaminaNotify>): VehicleStaminaNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VehicleStaminaNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleStaminaNotify): VehicleStaminaNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                case /* optional float cur_stamina */ 14:
                    message.curStamina = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleStaminaNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.entityId);
        /* optional float cur_stamina = 14; */
        if (message.curStamina !== undefined)
            writer.tag(14, WireType.Bit32).float(message.curStamina);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VehicleStaminaNotify
 */
export const VehicleStaminaNotify = new VehicleStaminaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetCustomTreeInfoNotify$Type extends MessageType<GadgetCustomTreeInfoNotify> {
    constructor() {
        super("com.midnights.game.GadgetCustomTreeInfoNotify", [
            { no: 5, name: "custom_gadget_tree_info", kind: "message", T: () => CustomGadgetTreeInfo },
            { no: 12, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetCustomTreeInfoNotify>): GadgetCustomTreeInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetCustomTreeInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetCustomTreeInfoNotify): GadgetCustomTreeInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CustomGadgetTreeInfo custom_gadget_tree_info */ 5:
                    message.customGadgetTreeInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.customGadgetTreeInfo);
                    break;
                case /* optional uint32 gadget_entity_id */ 12:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetCustomTreeInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.CustomGadgetTreeInfo custom_gadget_tree_info = 5; */
        if (message.customGadgetTreeInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.customGadgetTreeInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gadget_entity_id = 12; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetCustomTreeInfoNotify
 */
export const GadgetCustomTreeInfoNotify = new GadgetCustomTreeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetChangeLevelTagReq$Type extends MessageType<GadgetChangeLevelTagReq> {
    constructor() {
        super("com.midnights.game.GadgetChangeLevelTagReq", [
            { no: 14, name: "level_tag_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combination_info", kind: "message", T: () => CustomGadgetTreeInfo },
            { no: 10, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetChangeLevelTagReq>): GadgetChangeLevelTagReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetChangeLevelTagReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetChangeLevelTagReq): GadgetChangeLevelTagReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_tag_id */ 14:
                    message.levelTagId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 11:
                    message.combinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                case /* optional uint32 gadget_entity_id */ 10:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetChangeLevelTagReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_tag_id = 14; */
        if (message.levelTagId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelTagId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11; */
        if (message.combinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gadget_entity_id = 10; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetChangeLevelTagReq
 */
export const GadgetChangeLevelTagReq = new GadgetChangeLevelTagReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GadgetChangeLevelTagRsp$Type extends MessageType<GadgetChangeLevelTagRsp> {
    constructor() {
        super("com.midnights.game.GadgetChangeLevelTagRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GadgetChangeLevelTagRsp>): GadgetChangeLevelTagRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GadgetChangeLevelTagRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GadgetChangeLevelTagRsp): GadgetChangeLevelTagRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GadgetChangeLevelTagRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GadgetChangeLevelTagRsp
 */
export const GadgetChangeLevelTagRsp = new GadgetChangeLevelTagRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NightCrowGadgetObservationMatchReq$Type extends MessageType<NightCrowGadgetObservationMatchReq> {
    constructor() {
        super("com.midnights.game.NightCrowGadgetObservationMatchReq", [
            { no: 3, name: "target_gadget_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NightCrowGadgetObservationMatchReq>): NightCrowGadgetObservationMatchReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NightCrowGadgetObservationMatchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NightCrowGadgetObservationMatchReq): NightCrowGadgetObservationMatchReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_gadget_state */ 3:
                    message.targetGadgetState = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 8:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NightCrowGadgetObservationMatchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_gadget_state = 3; */
        if (message.targetGadgetState !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.targetGadgetState);
        /* optional uint32 gadget_entity_id = 8; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NightCrowGadgetObservationMatchReq
 */
export const NightCrowGadgetObservationMatchReq = new NightCrowGadgetObservationMatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NightCrowGadgetObservationMatchRsp$Type extends MessageType<NightCrowGadgetObservationMatchRsp> {
    constructor() {
        super("com.midnights.game.NightCrowGadgetObservationMatchRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NightCrowGadgetObservationMatchRsp>): NightCrowGadgetObservationMatchRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NightCrowGadgetObservationMatchRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NightCrowGadgetObservationMatchRsp): NightCrowGadgetObservationMatchRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NightCrowGadgetObservationMatchRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NightCrowGadgetObservationMatchRsp
 */
export const NightCrowGadgetObservationMatchRsp = new NightCrowGadgetObservationMatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeshretObeliskChestInfo$Type extends MessageType<DeshretObeliskChestInfo> {
    constructor() {
        super("com.midnights.game.DeshretObeliskChestInfo", [
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "pos", kind: "message", T: () => Vector },
            { no: 7, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeshretObeliskChestInfo>): DeshretObeliskChestInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeshretObeliskChestInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeshretObeliskChestInfo): DeshretObeliskChestInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 9:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 group_id */ 7:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 3:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeshretObeliskChestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* optional com.midnights.game.Vector pos = 9; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 group_id = 7; */
        if (message.groupId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.groupId);
        /* optional uint32 config_id = 3; */
        if (message.configId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DeshretObeliskChestInfo
 */
export const DeshretObeliskChestInfo = new DeshretObeliskChestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeshretObeliskChestInfoNotify$Type extends MessageType<DeshretObeliskChestInfoNotify> {
    constructor() {
        super("com.midnights.game.DeshretObeliskChestInfoNotify", [
            { no: 14, name: "chest_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DeshretObeliskChestInfo }
        ]);
    }
    create(value?: PartialMessage<DeshretObeliskChestInfoNotify>): DeshretObeliskChestInfoNotify {
        const message = { chestInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeshretObeliskChestInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeshretObeliskChestInfoNotify): DeshretObeliskChestInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DeshretObeliskChestInfo chest_info_list */ 14:
                    message.chestInfoList.push(DeshretObeliskChestInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeshretObeliskChestInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.DeshretObeliskChestInfo chest_info_list = 14; */
        for (let i = 0; i < message.chestInfoList.length; i++)
            DeshretObeliskChestInfo.internalBinaryWrite(message.chestInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DeshretObeliskChestInfoNotify
 */
export const DeshretObeliskChestInfoNotify = new DeshretObeliskChestInfoNotify$Type();
