// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_region_search.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RegionSearchState } from "./define";
/**
 * @generated from protobuf message com.midnights.game.RegionSearch
 */
export interface RegionSearch {
    /**
     * @generated from protobuf field: optional bool is_entered = 13;
     */
    isEntered?: boolean;
    /**
     * @generated from protobuf field: optional uint32 progress = 5;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.RegionSearchState state = 2;
     */
    state?: RegionSearchState;
    /**
     * @generated from protobuf field: optional uint32 region_search_id = 8;
     */
    regionSearchId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RegionSearchInfo
 */
export interface RegionSearchInfo {
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RegionSearch region_search_list = 1;
     */
    regionSearchList: RegionSearch[];
    /**
     * @generated from protobuf field: optional bool is_entered = 7;
     */
    isEntered?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.RegionSearchNotify
 */
export interface RegionSearchNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RegionSearchInfo region_search_list = 1;
     */
    regionSearchList: RegionSearchInfo[];
    /**
     * @generated from protobuf field: optional uint32 uid = 8;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RegionSearchNotify.CmdId
 */
export enum RegionSearchNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5626;
     */
    CMD_ID = 5626,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RegionSearchChangeRegionNotify
 */
export interface RegionSearchChangeRegionNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.RegionSearchChangeRegionNotify.RegionEvent event = 1;
     */
    event?: RegionSearchChangeRegionNotify_RegionEvent;
    /**
     * @generated from protobuf field: optional uint32 region_id = 10;
     */
    regionId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RegionSearchChangeRegionNotify.RegionEvent
 */
export enum RegionSearchChangeRegionNotify_RegionEvent {
    /**
     * @generated from protobuf enum value: REGION_EVENT_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: REGION_EVENT_ENTER = 1;
     */
    ENTER = 1,
    /**
     * @generated from protobuf enum value: REGION_EVENT_LEAVE = 2;
     */
    LEAVE = 2
}
/**
 * @generated from protobuf enum com.midnights.game.RegionSearchChangeRegionNotify.CmdId
 */
export enum RegionSearchChangeRegionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5618;
     */
    CMD_ID = 5618,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeRegionSearchRewardReq
 */
export interface TakeRegionSearchRewardReq {
    /**
     * @generated from protobuf field: optional uint32 search_id = 3;
     */
    searchId?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 15;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeRegionSearchRewardReq.CmdId
 */
export enum TakeRegionSearchRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5625;
     */
    CMD_ID = 5625,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeRegionSearchRewardRsp
 */
export interface TakeRegionSearchRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 search_id = 14;
     */
    searchId?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeRegionSearchRewardRsp.CmdId
 */
export enum TakeRegionSearchRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5607;
     */
    CMD_ID = 5607,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetRegionSearchReq
 */
export interface GetRegionSearchReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetRegionSearchReq.CmdId
 */
export enum GetRegionSearchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5602;
     */
    CMD_ID = 5602,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class RegionSearch$Type extends MessageType<RegionSearch> {
    constructor() {
        super("com.midnights.game.RegionSearch", [
            { no: 13, name: "is_entered", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.RegionSearchState", RegionSearchState] },
            { no: 8, name: "region_search_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RegionSearch>): RegionSearch {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionSearch>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionSearch): RegionSearch {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_entered */ 13:
                    message.isEntered = reader.bool();
                    break;
                case /* optional uint32 progress */ 5:
                    message.progress = reader.uint32();
                    break;
                case /* optional com.midnights.game.RegionSearchState state */ 2:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 region_search_id */ 8:
                    message.regionSearchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionSearch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_entered = 13; */
        if (message.isEntered !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isEntered);
        /* optional uint32 progress = 5; */
        if (message.progress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.progress);
        /* optional com.midnights.game.RegionSearchState state = 2; */
        if (message.state !== undefined)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* optional uint32 region_search_id = 8; */
        if (message.regionSearchId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.regionSearchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RegionSearch
 */
export const RegionSearch = new RegionSearch$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionSearchInfo$Type extends MessageType<RegionSearchInfo> {
    constructor() {
        super("com.midnights.game.RegionSearchInfo", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "region_search_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegionSearch },
            { no: 7, name: "is_entered", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RegionSearchInfo>): RegionSearchInfo {
        const message = { regionSearchList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionSearchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionSearchInfo): RegionSearchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RegionSearch region_search_list */ 1:
                    message.regionSearchList.push(RegionSearch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_entered */ 7:
                    message.isEntered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionSearchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        /* repeated com.midnights.game.RegionSearch region_search_list = 1; */
        for (let i = 0; i < message.regionSearchList.length; i++)
            RegionSearch.internalBinaryWrite(message.regionSearchList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_entered = 7; */
        if (message.isEntered !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isEntered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RegionSearchInfo
 */
export const RegionSearchInfo = new RegionSearchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionSearchNotify$Type extends MessageType<RegionSearchNotify> {
    constructor() {
        super("com.midnights.game.RegionSearchNotify", [
            { no: 1, name: "region_search_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegionSearchInfo },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RegionSearchNotify>): RegionSearchNotify {
        const message = { regionSearchList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionSearchNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionSearchNotify): RegionSearchNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RegionSearchInfo region_search_list */ 1:
                    message.regionSearchList.push(RegionSearchInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionSearchNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RegionSearchInfo region_search_list = 1; */
        for (let i = 0; i < message.regionSearchList.length; i++)
            RegionSearchInfo.internalBinaryWrite(message.regionSearchList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RegionSearchNotify
 */
export const RegionSearchNotify = new RegionSearchNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegionSearchChangeRegionNotify$Type extends MessageType<RegionSearchChangeRegionNotify> {
    constructor() {
        super("com.midnights.game.RegionSearchChangeRegionNotify", [
            { no: 1, name: "event", kind: "enum", opt: true, T: () => ["com.midnights.game.RegionSearchChangeRegionNotify.RegionEvent", RegionSearchChangeRegionNotify_RegionEvent, "REGION_EVENT_"] },
            { no: 10, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RegionSearchChangeRegionNotify>): RegionSearchChangeRegionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionSearchChangeRegionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionSearchChangeRegionNotify): RegionSearchChangeRegionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RegionSearchChangeRegionNotify.RegionEvent event */ 1:
                    message.event = reader.int32();
                    break;
                case /* optional uint32 region_id */ 10:
                    message.regionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionSearchChangeRegionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.RegionSearchChangeRegionNotify.RegionEvent event = 1; */
        if (message.event !== undefined)
            writer.tag(1, WireType.Varint).int32(message.event);
        /* optional uint32 region_id = 10; */
        if (message.regionId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.regionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RegionSearchChangeRegionNotify
 */
export const RegionSearchChangeRegionNotify = new RegionSearchChangeRegionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeRegionSearchRewardReq$Type extends MessageType<TakeRegionSearchRewardReq> {
    constructor() {
        super("com.midnights.game.TakeRegionSearchRewardReq", [
            { no: 3, name: "search_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeRegionSearchRewardReq>): TakeRegionSearchRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeRegionSearchRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeRegionSearchRewardReq): TakeRegionSearchRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 search_id */ 3:
                    message.searchId = reader.uint32();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeRegionSearchRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 search_id = 3; */
        if (message.searchId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.searchId);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeRegionSearchRewardReq
 */
export const TakeRegionSearchRewardReq = new TakeRegionSearchRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeRegionSearchRewardRsp$Type extends MessageType<TakeRegionSearchRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeRegionSearchRewardRsp", [
            { no: 14, name: "search_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeRegionSearchRewardRsp>): TakeRegionSearchRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeRegionSearchRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeRegionSearchRewardRsp): TakeRegionSearchRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 search_id */ 14:
                    message.searchId = reader.uint32();
                    break;
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeRegionSearchRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 search_id = 14; */
        if (message.searchId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.searchId);
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeRegionSearchRewardRsp
 */
export const TakeRegionSearchRewardRsp = new TakeRegionSearchRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRegionSearchReq$Type extends MessageType<GetRegionSearchReq> {
    constructor() {
        super("com.midnights.game.GetRegionSearchReq", []);
    }
    create(value?: PartialMessage<GetRegionSearchReq>): GetRegionSearchReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRegionSearchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRegionSearchReq): GetRegionSearchReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetRegionSearchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetRegionSearchReq
 */
export const GetRegionSearchReq = new GetRegionSearchReq$Type();
