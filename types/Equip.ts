/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Equip.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Reliquary";
import * as dependency_2 from "./Weapon";
import * as pb_1 from "google-protobuf";
export class Equip extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({
        is_locked?: boolean;
    } & (({
        reliquary?: dependency_1.Reliquary;
        weapon?: never;
    } | {
        reliquary?: never;
        weapon?: dependency_2.Weapon;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_locked" in data && data.is_locked != undefined) {
                this.is_locked = data.is_locked;
            }
            if ("reliquary" in data && data.reliquary != undefined) {
                this.reliquary = data.reliquary;
            }
            if ("weapon" in data && data.weapon != undefined) {
                this.weapon = data.weapon;
            }
        }
    }
    get is_locked() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_locked(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get reliquary() {
        return pb_1.Message.getWrapperField(this, dependency_1.Reliquary, 1) as dependency_1.Reliquary;
    }
    set reliquary(value: dependency_1.Reliquary) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_reliquary() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get weapon() {
        return pb_1.Message.getWrapperField(this, dependency_2.Weapon, 2) as dependency_2.Weapon;
    }
    set weapon(value: dependency_2.Weapon) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get has_weapon() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get detail() {
        const cases: {
            [index: number]: "none" | "reliquary" | "weapon";
        } = {
            0: "none",
            1: "reliquary",
            2: "weapon"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        is_locked?: boolean;
        reliquary?: ReturnType<typeof dependency_1.Reliquary.prototype.toObject>;
        weapon?: ReturnType<typeof dependency_2.Weapon.prototype.toObject>;
    }): Equip {
        const message = new Equip({});
        if (data.is_locked != null) {
            message.is_locked = data.is_locked;
        }
        if (data.reliquary != null) {
            message.reliquary = dependency_1.Reliquary.fromObject(data.reliquary);
        }
        if (data.weapon != null) {
            message.weapon = dependency_2.Weapon.fromObject(data.weapon);
        }
        return message;
    }
    toObject() {
        const data: {
            is_locked?: boolean;
            reliquary?: ReturnType<typeof dependency_1.Reliquary.prototype.toObject>;
            weapon?: ReturnType<typeof dependency_2.Weapon.prototype.toObject>;
        } = {};
        if (this.is_locked != null) {
            data.is_locked = this.is_locked;
        }
        if (this.reliquary != null) {
            data.reliquary = this.reliquary.toObject();
        }
        if (this.weapon != null) {
            data.weapon = this.weapon.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_locked != false)
            writer.writeBool(3, this.is_locked);
        if (this.has_reliquary)
            writer.writeMessage(1, this.reliquary, () => this.reliquary.serialize(writer));
        if (this.has_weapon)
            writer.writeMessage(2, this.weapon, () => this.weapon.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Equip {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Equip();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.is_locked = reader.readBool();
                    break;
                case 1:
                    reader.readMessage(message.reliquary, () => message.reliquary = dependency_1.Reliquary.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.weapon, () => message.weapon = dependency_2.Weapon.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Equip {
        return Equip.deserialize(bytes);
    }
}
