/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarEquipAffixInfo";
import * as dependency_2 from "./AvatarExcelInfo";
import * as dependency_3 from "./AvatarExpeditionState";
import * as dependency_4 from "./AvatarFetterInfo";
import * as dependency_5 from "./AvatarSkillInfo";
import * as dependency_6 from "./PropValue";
import * as dependency_7 from "./TrialAvatarInfo";
import * as pb_1 from "google-protobuf";
export class AvatarInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        avatar_id?: number;
        guid?: number;
        prop_map?: Map<number, dependency_6.PropValue>;
        life_state?: number;
        equip_guid_list?: number[];
        talent_id_list?: number[];
        fight_prop_map?: Map<number, number>;
        trial_avatar_info?: dependency_7.TrialAvatarInfo;
        skill_map?: Map<number, dependency_5.AvatarSkillInfo>;
        skill_depot_id?: number;
        fetter_info?: dependency_4.AvatarFetterInfo;
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: Map<number, number>;
        expedition_state?: dependency_3.AvatarExpeditionState;
        proud_skill_extra_level_map?: Map<number, number>;
        is_focus?: boolean;
        avatar_type?: number;
        team_resonance_list?: number[];
        wearing_flycloak_id?: number;
        equip_affix_list?: dependency_1.AvatarEquipAffixInfo[];
        born_time?: number;
        pending_promote_reward_list?: number[];
        costume_id?: number;
        excel_info?: dependency_2.AvatarExcelInfo;
        anim_hash?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 14, 20, 22, 24], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("guid" in data && data.guid != undefined) {
                this.guid = data.guid;
            }
            if ("prop_map" in data && data.prop_map != undefined) {
                this.prop_map = data.prop_map;
            }
            if ("life_state" in data && data.life_state != undefined) {
                this.life_state = data.life_state;
            }
            if ("equip_guid_list" in data && data.equip_guid_list != undefined) {
                this.equip_guid_list = data.equip_guid_list;
            }
            if ("talent_id_list" in data && data.talent_id_list != undefined) {
                this.talent_id_list = data.talent_id_list;
            }
            if ("fight_prop_map" in data && data.fight_prop_map != undefined) {
                this.fight_prop_map = data.fight_prop_map;
            }
            if ("trial_avatar_info" in data && data.trial_avatar_info != undefined) {
                this.trial_avatar_info = data.trial_avatar_info;
            }
            if ("skill_map" in data && data.skill_map != undefined) {
                this.skill_map = data.skill_map;
            }
            if ("skill_depot_id" in data && data.skill_depot_id != undefined) {
                this.skill_depot_id = data.skill_depot_id;
            }
            if ("fetter_info" in data && data.fetter_info != undefined) {
                this.fetter_info = data.fetter_info;
            }
            if ("core_proud_skill_level" in data && data.core_proud_skill_level != undefined) {
                this.core_proud_skill_level = data.core_proud_skill_level;
            }
            if ("inherent_proud_skill_list" in data && data.inherent_proud_skill_list != undefined) {
                this.inherent_proud_skill_list = data.inherent_proud_skill_list;
            }
            if ("skill_level_map" in data && data.skill_level_map != undefined) {
                this.skill_level_map = data.skill_level_map;
            }
            if ("expedition_state" in data && data.expedition_state != undefined) {
                this.expedition_state = data.expedition_state;
            }
            if ("proud_skill_extra_level_map" in data && data.proud_skill_extra_level_map != undefined) {
                this.proud_skill_extra_level_map = data.proud_skill_extra_level_map;
            }
            if ("is_focus" in data && data.is_focus != undefined) {
                this.is_focus = data.is_focus;
            }
            if ("avatar_type" in data && data.avatar_type != undefined) {
                this.avatar_type = data.avatar_type;
            }
            if ("team_resonance_list" in data && data.team_resonance_list != undefined) {
                this.team_resonance_list = data.team_resonance_list;
            }
            if ("wearing_flycloak_id" in data && data.wearing_flycloak_id != undefined) {
                this.wearing_flycloak_id = data.wearing_flycloak_id;
            }
            if ("equip_affix_list" in data && data.equip_affix_list != undefined) {
                this.equip_affix_list = data.equip_affix_list;
            }
            if ("born_time" in data && data.born_time != undefined) {
                this.born_time = data.born_time;
            }
            if ("pending_promote_reward_list" in data && data.pending_promote_reward_list != undefined) {
                this.pending_promote_reward_list = data.pending_promote_reward_list;
            }
            if ("costume_id" in data && data.costume_id != undefined) {
                this.costume_id = data.costume_id;
            }
            if ("excel_info" in data && data.excel_info != undefined) {
                this.excel_info = data.excel_info;
            }
            if ("anim_hash" in data && data.anim_hash != undefined) {
                this.anim_hash = data.anim_hash;
            }
        }
        if (!this.prop_map)
            this.prop_map = new Map();
        if (!this.fight_prop_map)
            this.fight_prop_map = new Map();
        if (!this.skill_map)
            this.skill_map = new Map();
        if (!this.skill_level_map)
            this.skill_level_map = new Map();
        if (!this.proud_skill_extra_level_map)
            this.proud_skill_extra_level_map = new Map();
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get guid() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set guid(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get prop_map() {
        return pb_1.Message.getField(this, 3) as any as Map<number, dependency_6.PropValue>;
    }
    set prop_map(value: Map<number, dependency_6.PropValue>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    get life_state() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set life_state(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get equip_guid_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set equip_guid_list(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get talent_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
    }
    set talent_id_list(value: number[]) {
        pb_1.Message.setField(this, 6, value);
    }
    get fight_prop_map() {
        return pb_1.Message.getField(this, 7) as any as Map<number, number>;
    }
    set fight_prop_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    get trial_avatar_info() {
        return pb_1.Message.getWrapperField(this, dependency_7.TrialAvatarInfo, 9) as dependency_7.TrialAvatarInfo;
    }
    set trial_avatar_info(value: dependency_7.TrialAvatarInfo) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_trial_avatar_info() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get skill_map() {
        return pb_1.Message.getField(this, 10) as any as Map<number, dependency_5.AvatarSkillInfo>;
    }
    set skill_map(value: Map<number, dependency_5.AvatarSkillInfo>) {
        pb_1.Message.setField(this, 10, value as any);
    }
    get skill_depot_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set skill_depot_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get fetter_info() {
        return pb_1.Message.getWrapperField(this, dependency_4.AvatarFetterInfo, 12) as dependency_4.AvatarFetterInfo;
    }
    set fetter_info(value: dependency_4.AvatarFetterInfo) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_fetter_info() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get core_proud_skill_level() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set core_proud_skill_level(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get inherent_proud_skill_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as number[];
    }
    set inherent_proud_skill_list(value: number[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get skill_level_map() {
        return pb_1.Message.getField(this, 15) as any as Map<number, number>;
    }
    set skill_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 15, value as any);
    }
    get expedition_state() {
        return pb_1.Message.getFieldWithDefault(this, 16, dependency_3.AvatarExpeditionState.AVATAR_EXPEDITION_STATE_NONE) as dependency_3.AvatarExpeditionState;
    }
    set expedition_state(value: dependency_3.AvatarExpeditionState) {
        pb_1.Message.setField(this, 16, value);
    }
    get proud_skill_extra_level_map() {
        return pb_1.Message.getField(this, 17) as any as Map<number, number>;
    }
    set proud_skill_extra_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 17, value as any);
    }
    get is_focus() {
        return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
    }
    set is_focus(value: boolean) {
        pb_1.Message.setField(this, 18, value);
    }
    get avatar_type() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set avatar_type(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get team_resonance_list() {
        return pb_1.Message.getFieldWithDefault(this, 20, []) as number[];
    }
    set team_resonance_list(value: number[]) {
        pb_1.Message.setField(this, 20, value);
    }
    get wearing_flycloak_id() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set wearing_flycloak_id(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get equip_affix_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.AvatarEquipAffixInfo, 22) as dependency_1.AvatarEquipAffixInfo[];
    }
    set equip_affix_list(value: dependency_1.AvatarEquipAffixInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 22, value);
    }
    get born_time() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
    }
    set born_time(value: number) {
        pb_1.Message.setField(this, 23, value);
    }
    get pending_promote_reward_list() {
        return pb_1.Message.getFieldWithDefault(this, 24, []) as number[];
    }
    set pending_promote_reward_list(value: number[]) {
        pb_1.Message.setField(this, 24, value);
    }
    get costume_id() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set costume_id(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get excel_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.AvatarExcelInfo, 26) as dependency_2.AvatarExcelInfo;
    }
    set excel_info(value: dependency_2.AvatarExcelInfo) {
        pb_1.Message.setWrapperField(this, 26, value);
    }
    get has_excel_info() {
        return pb_1.Message.getField(this, 26) != null;
    }
    get anim_hash() {
        return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
    }
    set anim_hash(value: number) {
        pb_1.Message.setField(this, 27, value);
    }
    static fromObject(data: {
        avatar_id?: number;
        guid?: number;
        prop_map?: {
            [key: number]: ReturnType<typeof dependency_6.PropValue.prototype.toObject>;
        };
        life_state?: number;
        equip_guid_list?: number[];
        talent_id_list?: number[];
        fight_prop_map?: {
            [key: number]: number;
        };
        trial_avatar_info?: ReturnType<typeof dependency_7.TrialAvatarInfo.prototype.toObject>;
        skill_map?: {
            [key: number]: ReturnType<typeof dependency_5.AvatarSkillInfo.prototype.toObject>;
        };
        skill_depot_id?: number;
        fetter_info?: ReturnType<typeof dependency_4.AvatarFetterInfo.prototype.toObject>;
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: {
            [key: number]: number;
        };
        expedition_state?: dependency_3.AvatarExpeditionState;
        proud_skill_extra_level_map?: {
            [key: number]: number;
        };
        is_focus?: boolean;
        avatar_type?: number;
        team_resonance_list?: number[];
        wearing_flycloak_id?: number;
        equip_affix_list?: ReturnType<typeof dependency_1.AvatarEquipAffixInfo.prototype.toObject>[];
        born_time?: number;
        pending_promote_reward_list?: number[];
        costume_id?: number;
        excel_info?: ReturnType<typeof dependency_2.AvatarExcelInfo.prototype.toObject>;
        anim_hash?: number;
    }): AvatarInfo {
        const message = new AvatarInfo({});
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.guid != null) {
            message.guid = data.guid;
        }
        if (typeof data.prop_map == "object") {
            message.prop_map = new Map(Object.entries(data.prop_map).map(([key, value]) => [Number(key), dependency_6.PropValue.fromObject(value)]));
        }
        if (data.life_state != null) {
            message.life_state = data.life_state;
        }
        if (data.equip_guid_list != null) {
            message.equip_guid_list = data.equip_guid_list;
        }
        if (data.talent_id_list != null) {
            message.talent_id_list = data.talent_id_list;
        }
        if (typeof data.fight_prop_map == "object") {
            message.fight_prop_map = new Map(Object.entries(data.fight_prop_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.trial_avatar_info != null) {
            message.trial_avatar_info = dependency_7.TrialAvatarInfo.fromObject(data.trial_avatar_info);
        }
        if (typeof data.skill_map == "object") {
            message.skill_map = new Map(Object.entries(data.skill_map).map(([key, value]) => [Number(key), dependency_5.AvatarSkillInfo.fromObject(value)]));
        }
        if (data.skill_depot_id != null) {
            message.skill_depot_id = data.skill_depot_id;
        }
        if (data.fetter_info != null) {
            message.fetter_info = dependency_4.AvatarFetterInfo.fromObject(data.fetter_info);
        }
        if (data.core_proud_skill_level != null) {
            message.core_proud_skill_level = data.core_proud_skill_level;
        }
        if (data.inherent_proud_skill_list != null) {
            message.inherent_proud_skill_list = data.inherent_proud_skill_list;
        }
        if (typeof data.skill_level_map == "object") {
            message.skill_level_map = new Map(Object.entries(data.skill_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.expedition_state != null) {
            message.expedition_state = data.expedition_state;
        }
        if (typeof data.proud_skill_extra_level_map == "object") {
            message.proud_skill_extra_level_map = new Map(Object.entries(data.proud_skill_extra_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.is_focus != null) {
            message.is_focus = data.is_focus;
        }
        if (data.avatar_type != null) {
            message.avatar_type = data.avatar_type;
        }
        if (data.team_resonance_list != null) {
            message.team_resonance_list = data.team_resonance_list;
        }
        if (data.wearing_flycloak_id != null) {
            message.wearing_flycloak_id = data.wearing_flycloak_id;
        }
        if (data.equip_affix_list != null) {
            message.equip_affix_list = data.equip_affix_list.map(item => dependency_1.AvatarEquipAffixInfo.fromObject(item));
        }
        if (data.born_time != null) {
            message.born_time = data.born_time;
        }
        if (data.pending_promote_reward_list != null) {
            message.pending_promote_reward_list = data.pending_promote_reward_list;
        }
        if (data.costume_id != null) {
            message.costume_id = data.costume_id;
        }
        if (data.excel_info != null) {
            message.excel_info = dependency_2.AvatarExcelInfo.fromObject(data.excel_info);
        }
        if (data.anim_hash != null) {
            message.anim_hash = data.anim_hash;
        }
        return message;
    }
    toObject() {
        const data: {
            avatar_id?: number;
            guid?: number;
            prop_map?: {
                [key: number]: ReturnType<typeof dependency_6.PropValue.prototype.toObject>;
            };
            life_state?: number;
            equip_guid_list?: number[];
            talent_id_list?: number[];
            fight_prop_map?: {
                [key: number]: number;
            };
            trial_avatar_info?: ReturnType<typeof dependency_7.TrialAvatarInfo.prototype.toObject>;
            skill_map?: {
                [key: number]: ReturnType<typeof dependency_5.AvatarSkillInfo.prototype.toObject>;
            };
            skill_depot_id?: number;
            fetter_info?: ReturnType<typeof dependency_4.AvatarFetterInfo.prototype.toObject>;
            core_proud_skill_level?: number;
            inherent_proud_skill_list?: number[];
            skill_level_map?: {
                [key: number]: number;
            };
            expedition_state?: dependency_3.AvatarExpeditionState;
            proud_skill_extra_level_map?: {
                [key: number]: number;
            };
            is_focus?: boolean;
            avatar_type?: number;
            team_resonance_list?: number[];
            wearing_flycloak_id?: number;
            equip_affix_list?: ReturnType<typeof dependency_1.AvatarEquipAffixInfo.prototype.toObject>[];
            born_time?: number;
            pending_promote_reward_list?: number[];
            costume_id?: number;
            excel_info?: ReturnType<typeof dependency_2.AvatarExcelInfo.prototype.toObject>;
            anim_hash?: number;
        } = {};
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.guid != null) {
            data.guid = this.guid;
        }
        if (this.prop_map.size > 0) {
            data.prop_map = (Object.fromEntries)((Array.from)(this.prop_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.life_state != null) {
            data.life_state = this.life_state;
        }
        if (this.equip_guid_list != null) {
            data.equip_guid_list = this.equip_guid_list;
        }
        if (this.talent_id_list != null) {
            data.talent_id_list = this.talent_id_list;
        }
        if (this.fight_prop_map.size > 0) {
            data.fight_prop_map = (Object.fromEntries)(this.fight_prop_map);
        }
        if (this.trial_avatar_info != null) {
            data.trial_avatar_info = this.trial_avatar_info.toObject();
        }
        if (this.skill_map.size > 0) {
            data.skill_map = (Object.fromEntries)((Array.from)(this.skill_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.skill_depot_id != null) {
            data.skill_depot_id = this.skill_depot_id;
        }
        if (this.fetter_info != null) {
            data.fetter_info = this.fetter_info.toObject();
        }
        if (this.core_proud_skill_level != null) {
            data.core_proud_skill_level = this.core_proud_skill_level;
        }
        if (this.inherent_proud_skill_list != null) {
            data.inherent_proud_skill_list = this.inherent_proud_skill_list;
        }
        if (this.skill_level_map.size > 0) {
            data.skill_level_map = (Object.fromEntries)(this.skill_level_map);
        }
        if (this.expedition_state != null) {
            data.expedition_state = this.expedition_state;
        }
        if (this.proud_skill_extra_level_map.size > 0) {
            data.proud_skill_extra_level_map = (Object.fromEntries)(this.proud_skill_extra_level_map);
        }
        if (this.is_focus != null) {
            data.is_focus = this.is_focus;
        }
        if (this.avatar_type != null) {
            data.avatar_type = this.avatar_type;
        }
        if (this.team_resonance_list != null) {
            data.team_resonance_list = this.team_resonance_list;
        }
        if (this.wearing_flycloak_id != null) {
            data.wearing_flycloak_id = this.wearing_flycloak_id;
        }
        if (this.equip_affix_list != null) {
            data.equip_affix_list = this.equip_affix_list.map((item: dependency_1.AvatarEquipAffixInfo) => item.toObject());
        }
        if (this.born_time != null) {
            data.born_time = this.born_time;
        }
        if (this.pending_promote_reward_list != null) {
            data.pending_promote_reward_list = this.pending_promote_reward_list;
        }
        if (this.costume_id != null) {
            data.costume_id = this.costume_id;
        }
        if (this.excel_info != null) {
            data.excel_info = this.excel_info.toObject();
        }
        if (this.anim_hash != null) {
            data.anim_hash = this.anim_hash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.avatar_id != 0)
            writer.writeUint32(1, this.avatar_id);
        if (this.guid != 0)
            writer.writeUint64(2, this.guid);
        for (const [key, value] of this.prop_map) {
            writer.writeMessage(3, this.prop_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.life_state != 0)
            writer.writeUint32(4, this.life_state);
        if (this.equip_guid_list.length)
            writer.writePackedUint64(5, this.equip_guid_list);
        if (this.talent_id_list.length)
            writer.writePackedUint32(6, this.talent_id_list);
        for (const [key, value] of this.fight_prop_map) {
            writer.writeMessage(7, this.fight_prop_map, () => {
                writer.writeUint32(1, key);
                writer.writeFloat(2, value);
            });
        }
        if (this.has_trial_avatar_info)
            writer.writeMessage(9, this.trial_avatar_info, () => this.trial_avatar_info.serialize(writer));
        for (const [key, value] of this.skill_map) {
            writer.writeMessage(10, this.skill_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.skill_depot_id != 0)
            writer.writeUint32(11, this.skill_depot_id);
        if (this.has_fetter_info)
            writer.writeMessage(12, this.fetter_info, () => this.fetter_info.serialize(writer));
        if (this.core_proud_skill_level != 0)
            writer.writeUint32(13, this.core_proud_skill_level);
        if (this.inherent_proud_skill_list.length)
            writer.writePackedUint32(14, this.inherent_proud_skill_list);
        for (const [key, value] of this.skill_level_map) {
            writer.writeMessage(15, this.skill_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.expedition_state != dependency_3.AvatarExpeditionState.AVATAR_EXPEDITION_STATE_NONE)
            writer.writeEnum(16, this.expedition_state);
        for (const [key, value] of this.proud_skill_extra_level_map) {
            writer.writeMessage(17, this.proud_skill_extra_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.is_focus != false)
            writer.writeBool(18, this.is_focus);
        if (this.avatar_type != 0)
            writer.writeUint32(19, this.avatar_type);
        if (this.team_resonance_list.length)
            writer.writePackedUint32(20, this.team_resonance_list);
        if (this.wearing_flycloak_id != 0)
            writer.writeUint32(21, this.wearing_flycloak_id);
        if (this.equip_affix_list.length)
            writer.writeRepeatedMessage(22, this.equip_affix_list, (item: dependency_1.AvatarEquipAffixInfo) => item.serialize(writer));
        if (this.born_time != 0)
            writer.writeUint32(23, this.born_time);
        if (this.pending_promote_reward_list.length)
            writer.writePackedUint32(24, this.pending_promote_reward_list);
        if (this.costume_id != 0)
            writer.writeUint32(25, this.costume_id);
        if (this.has_excel_info)
            writer.writeMessage(26, this.excel_info, () => this.excel_info.serialize(writer));
        if (this.anim_hash != 0)
            writer.writeUint32(27, this.anim_hash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvatarInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.avatar_id = reader.readUint32();
                    break;
                case 2:
                    message.guid = reader.readUint64();
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.prop_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_6.PropValue.deserialize(reader));
                        return value;
                    }));
                    break;
                case 4:
                    message.life_state = reader.readUint32();
                    break;
                case 5:
                    message.equip_guid_list = reader.readPackedUint64();
                    break;
                case 6:
                    message.talent_id_list = reader.readPackedUint32();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fight_prop_map as any, reader, reader.readUint32, reader.readFloat));
                    break;
                case 9:
                    reader.readMessage(message.trial_avatar_info, () => message.trial_avatar_info = dependency_7.TrialAvatarInfo.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_5.AvatarSkillInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 11:
                    message.skill_depot_id = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.fetter_info, () => message.fetter_info = dependency_4.AvatarFetterInfo.deserialize(reader));
                    break;
                case 13:
                    message.core_proud_skill_level = reader.readUint32();
                    break;
                case 14:
                    message.inherent_proud_skill_list = reader.readPackedUint32();
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 16:
                    message.expedition_state = reader.readEnum();
                    break;
                case 17:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.proud_skill_extra_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 18:
                    message.is_focus = reader.readBool();
                    break;
                case 19:
                    message.avatar_type = reader.readUint32();
                    break;
                case 20:
                    message.team_resonance_list = reader.readPackedUint32();
                    break;
                case 21:
                    message.wearing_flycloak_id = reader.readUint32();
                    break;
                case 22:
                    reader.readMessage(message.equip_affix_list, () => pb_1.Message.addToRepeatedWrapperField(message, 22, dependency_1.AvatarEquipAffixInfo.deserialize(reader), dependency_1.AvatarEquipAffixInfo));
                    break;
                case 23:
                    message.born_time = reader.readUint32();
                    break;
                case 24:
                    message.pending_promote_reward_list = reader.readPackedUint32();
                    break;
                case 25:
                    message.costume_id = reader.readUint32();
                    break;
                case 26:
                    reader.readMessage(message.excel_info, () => message.excel_info = dependency_2.AvatarExcelInfo.deserialize(reader));
                    break;
                case 27:
                    message.anim_hash = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AvatarInfo {
        return AvatarInfo.deserialize(bytes);
    }
}
