"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ViewCodexRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewCodexRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ViewCodexRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./CodexTypeData");
const pb_1 = require("google-protobuf");
class ViewCodexRsp extends pb_1.Message {
    constructor(data) {
        super();
        _ViewCodexRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 3, 9, 15], __classPrivateFieldGet(this, _ViewCodexRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("Unk2800_IPOCJIPGNEJ" in data && data.Unk2800_IPOCJIPGNEJ != undefined) {
                this.Unk2800_IPOCJIPGNEJ = data.Unk2800_IPOCJIPGNEJ;
            }
            if ("Unk2700_DFJJHFHHIHF" in data && data.Unk2700_DFJJHFHHIHF != undefined) {
                this.Unk2700_DFJJHFHHIHF = data.Unk2700_DFJJHFHHIHF;
            }
            if ("type_data_list" in data && data.type_data_list != undefined) {
                this.type_data_list = data.type_data_list;
            }
            if ("Unk2800_OIPJCEPGJCF" in data && data.Unk2800_OIPJCEPGJCF != undefined) {
                this.Unk2800_OIPJCEPGJCF = data.Unk2800_OIPJCEPGJCF;
            }
        }
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get Unk2800_IPOCJIPGNEJ() {
        return pb_1.Message.getFieldWithDefault(this, 10, []);
    }
    set Unk2800_IPOCJIPGNEJ(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get Unk2700_DFJJHFHHIHF() {
        return pb_1.Message.getFieldWithDefault(this, 3, []);
    }
    set Unk2700_DFJJHFHHIHF(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get type_data_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.CodexTypeData, 9);
    }
    set type_data_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get Unk2800_OIPJCEPGJCF() {
        return pb_1.Message.getFieldWithDefault(this, 15, []);
    }
    set Unk2800_OIPJCEPGJCF(value) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data) {
        const message = new ViewCodexRsp({});
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.Unk2800_IPOCJIPGNEJ != null) {
            message.Unk2800_IPOCJIPGNEJ = data.Unk2800_IPOCJIPGNEJ;
        }
        if (data.Unk2700_DFJJHFHHIHF != null) {
            message.Unk2700_DFJJHFHHIHF = data.Unk2700_DFJJHFHHIHF;
        }
        if (data.type_data_list != null) {
            message.type_data_list = data.type_data_list.map(item => dependency_1.CodexTypeData.fromObject(item));
        }
        if (data.Unk2800_OIPJCEPGJCF != null) {
            message.Unk2800_OIPJCEPGJCF = data.Unk2800_OIPJCEPGJCF;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.Unk2800_IPOCJIPGNEJ != null) {
            data.Unk2800_IPOCJIPGNEJ = this.Unk2800_IPOCJIPGNEJ;
        }
        if (this.Unk2700_DFJJHFHHIHF != null) {
            data.Unk2700_DFJJHFHHIHF = this.Unk2700_DFJJHFHHIHF;
        }
        if (this.type_data_list != null) {
            data.type_data_list = this.type_data_list.map((item) => item.toObject());
        }
        if (this.Unk2800_OIPJCEPGJCF != null) {
            data.Unk2800_OIPJCEPGJCF = this.Unk2800_OIPJCEPGJCF;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.retcode != 0)
            writer.writeInt32(12, this.retcode);
        if (this.Unk2800_IPOCJIPGNEJ.length)
            writer.writePackedUint32(10, this.Unk2800_IPOCJIPGNEJ);
        if (this.Unk2700_DFJJHFHHIHF.length)
            writer.writePackedUint32(3, this.Unk2700_DFJJHFHHIHF);
        if (this.type_data_list.length)
            writer.writeRepeatedMessage(9, this.type_data_list, (item) => item.serialize(writer));
        if (this.Unk2800_OIPJCEPGJCF.length)
            writer.writePackedUint32(15, this.Unk2800_OIPJCEPGJCF);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewCodexRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.retcode = reader.readInt32();
                    break;
                case 10:
                    message.Unk2800_IPOCJIPGNEJ = reader.readPackedUint32();
                    break;
                case 3:
                    message.Unk2700_DFJJHFHHIHF = reader.readPackedUint32();
                    break;
                case 9:
                    reader.readMessage(message.type_data_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_1.CodexTypeData.deserialize(reader), dependency_1.CodexTypeData));
                    break;
                case 15:
                    message.Unk2800_OIPJCEPGJCF = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ViewCodexRsp.deserialize(bytes);
    }
}
exports.ViewCodexRsp = ViewCodexRsp;
_ViewCodexRsp_one_of_decls = new WeakMap();
