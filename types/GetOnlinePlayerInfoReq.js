"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GetOnlinePlayerInfoReq_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOnlinePlayerInfoReq = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetOnlinePlayerInfoReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class GetOnlinePlayerInfoReq extends pb_1.Message {
    constructor(data) {
        super();
        _GetOnlinePlayerInfoReq_one_of_decls.set(this, [[9, 7, 2]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _GetOnlinePlayerInfoReq_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_online_id" in data && data.is_online_id != undefined) {
                this.is_online_id = data.is_online_id;
            }
            if ("target_uid" in data && data.target_uid != undefined) {
                this.target_uid = data.target_uid;
            }
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
            if ("psn_id" in data && data.psn_id != undefined) {
                this.psn_id = data.psn_id;
            }
        }
    }
    get is_online_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, false);
    }
    set is_online_id(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get target_uid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set target_uid(value) {
        pb_1.Message.setOneofField(this, 9, __classPrivateFieldGet(this, _GetOnlinePlayerInfoReq_one_of_decls, "f")[0], value);
    }
    get has_target_uid() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, "");
    }
    set online_id(value) {
        pb_1.Message.setOneofField(this, 7, __classPrivateFieldGet(this, _GetOnlinePlayerInfoReq_one_of_decls, "f")[0], value);
    }
    get has_online_id() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get psn_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set psn_id(value) {
        pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, _GetOnlinePlayerInfoReq_one_of_decls, "f")[0], value);
    }
    get has_psn_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get player_id() {
        const cases = {
            0: "none",
            9: "target_uid",
            7: "online_id",
            2: "psn_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [9, 7, 2])];
    }
    static fromObject(data) {
        const message = new GetOnlinePlayerInfoReq({});
        if (data.is_online_id != null) {
            message.is_online_id = data.is_online_id;
        }
        if (data.target_uid != null) {
            message.target_uid = data.target_uid;
        }
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        if (data.psn_id != null) {
            message.psn_id = data.psn_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_online_id != null) {
            data.is_online_id = this.is_online_id;
        }
        if (this.target_uid != null) {
            data.target_uid = this.target_uid;
        }
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        if (this.psn_id != null) {
            data.psn_id = this.psn_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_online_id != false)
            writer.writeBool(15, this.is_online_id);
        if (this.has_target_uid)
            writer.writeUint32(9, this.target_uid);
        if (this.has_online_id)
            writer.writeString(7, this.online_id);
        if (this.has_psn_id)
            writer.writeString(2, this.psn_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOnlinePlayerInfoReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.is_online_id = reader.readBool();
                    break;
                case 9:
                    message.target_uid = reader.readUint32();
                    break;
                case 7:
                    message.online_id = reader.readString();
                    break;
                case 2:
                    message.psn_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetOnlinePlayerInfoReq.deserialize(bytes);
    }
}
exports.GetOnlinePlayerInfoReq = GetOnlinePlayerInfoReq;
_GetOnlinePlayerInfoReq_one_of_decls = new WeakMap();
