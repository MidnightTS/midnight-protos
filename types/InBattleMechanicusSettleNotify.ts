/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InBattleMechanicusSettleNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MultistageSettleWatcherInfo";
import * as pb_1 from "google-protobuf";
export class InBattleMechanicusSettleNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        group_id?: number;
        scene_time_ms?: number;
        difficulty_percentage?: number;
        total_token?: number;
        watcher_list?: dependency_1.MultistageSettleWatcherInfo[];
        real_token?: number;
        is_success?: boolean;
        play_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("scene_time_ms" in data && data.scene_time_ms != undefined) {
                this.scene_time_ms = data.scene_time_ms;
            }
            if ("difficulty_percentage" in data && data.difficulty_percentage != undefined) {
                this.difficulty_percentage = data.difficulty_percentage;
            }
            if ("total_token" in data && data.total_token != undefined) {
                this.total_token = data.total_token;
            }
            if ("watcher_list" in data && data.watcher_list != undefined) {
                this.watcher_list = data.watcher_list;
            }
            if ("real_token" in data && data.real_token != undefined) {
                this.real_token = data.real_token;
            }
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
            if ("play_index" in data && data.play_index != undefined) {
                this.play_index = data.play_index;
            }
        }
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set group_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get scene_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set scene_time_ms(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get difficulty_percentage() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set difficulty_percentage(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get total_token() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set total_token(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get watcher_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MultistageSettleWatcherInfo, 3) as dependency_1.MultistageSettleWatcherInfo[];
    }
    set watcher_list(value: dependency_1.MultistageSettleWatcherInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get real_token() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set real_token(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get play_index() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set play_index(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        group_id?: number;
        scene_time_ms?: number;
        difficulty_percentage?: number;
        total_token?: number;
        watcher_list?: ReturnType<typeof dependency_1.MultistageSettleWatcherInfo.prototype.toObject>[];
        real_token?: number;
        is_success?: boolean;
        play_index?: number;
    }): InBattleMechanicusSettleNotify {
        const message = new InBattleMechanicusSettleNotify({});
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.scene_time_ms != null) {
            message.scene_time_ms = data.scene_time_ms;
        }
        if (data.difficulty_percentage != null) {
            message.difficulty_percentage = data.difficulty_percentage;
        }
        if (data.total_token != null) {
            message.total_token = data.total_token;
        }
        if (data.watcher_list != null) {
            message.watcher_list = data.watcher_list.map(item => dependency_1.MultistageSettleWatcherInfo.fromObject(item));
        }
        if (data.real_token != null) {
            message.real_token = data.real_token;
        }
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        if (data.play_index != null) {
            message.play_index = data.play_index;
        }
        return message;
    }
    toObject() {
        const data: {
            group_id?: number;
            scene_time_ms?: number;
            difficulty_percentage?: number;
            total_token?: number;
            watcher_list?: ReturnType<typeof dependency_1.MultistageSettleWatcherInfo.prototype.toObject>[];
            real_token?: number;
            is_success?: boolean;
            play_index?: number;
        } = {};
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.scene_time_ms != null) {
            data.scene_time_ms = this.scene_time_ms;
        }
        if (this.difficulty_percentage != null) {
            data.difficulty_percentage = this.difficulty_percentage;
        }
        if (this.total_token != null) {
            data.total_token = this.total_token;
        }
        if (this.watcher_list != null) {
            data.watcher_list = this.watcher_list.map((item: dependency_1.MultistageSettleWatcherInfo) => item.toObject());
        }
        if (this.real_token != null) {
            data.real_token = this.real_token;
        }
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        if (this.play_index != null) {
            data.play_index = this.play_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.group_id != 0)
            writer.writeUint32(15, this.group_id);
        if (this.scene_time_ms != 0)
            writer.writeUint64(11, this.scene_time_ms);
        if (this.difficulty_percentage != 0)
            writer.writeUint32(6, this.difficulty_percentage);
        if (this.total_token != 0)
            writer.writeUint32(7, this.total_token);
        if (this.watcher_list.length)
            writer.writeRepeatedMessage(3, this.watcher_list, (item: dependency_1.MultistageSettleWatcherInfo) => item.serialize(writer));
        if (this.real_token != 0)
            writer.writeUint32(13, this.real_token);
        if (this.is_success != false)
            writer.writeBool(2, this.is_success);
        if (this.play_index != 0)
            writer.writeUint32(14, this.play_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InBattleMechanicusSettleNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InBattleMechanicusSettleNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.group_id = reader.readUint32();
                    break;
                case 11:
                    message.scene_time_ms = reader.readUint64();
                    break;
                case 6:
                    message.difficulty_percentage = reader.readUint32();
                    break;
                case 7:
                    message.total_token = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.watcher_list, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.MultistageSettleWatcherInfo.deserialize(reader), dependency_1.MultistageSettleWatcherInfo));
                    break;
                case 13:
                    message.real_token = reader.readUint32();
                    break;
                case 2:
                    message.is_success = reader.readBool();
                    break;
                case 14:
                    message.play_index = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InBattleMechanicusSettleNotify {
        return InBattleMechanicusSettleNotify.deserialize(bytes);
    }
}
