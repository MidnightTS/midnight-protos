/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HomeResourceNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HomeResource";
import * as pb_1 from "google-protobuf";
export class HomeResourceNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        home_coin?: dependency_1.HomeResource;
        fetter_exp?: dependency_1.HomeResource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("home_coin" in data && data.home_coin != undefined) {
                this.home_coin = data.home_coin;
            }
            if ("fetter_exp" in data && data.fetter_exp != undefined) {
                this.fetter_exp = data.fetter_exp;
            }
        }
    }
    get home_coin() {
        return pb_1.Message.getWrapperField(this, dependency_1.HomeResource, 9) as dependency_1.HomeResource;
    }
    set home_coin(value: dependency_1.HomeResource) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_home_coin() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get fetter_exp() {
        return pb_1.Message.getWrapperField(this, dependency_1.HomeResource, 8) as dependency_1.HomeResource;
    }
    set fetter_exp(value: dependency_1.HomeResource) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_fetter_exp() {
        return pb_1.Message.getField(this, 8) != null;
    }
    static fromObject(data: {
        home_coin?: ReturnType<typeof dependency_1.HomeResource.prototype.toObject>;
        fetter_exp?: ReturnType<typeof dependency_1.HomeResource.prototype.toObject>;
    }): HomeResourceNotify {
        const message = new HomeResourceNotify({});
        if (data.home_coin != null) {
            message.home_coin = dependency_1.HomeResource.fromObject(data.home_coin);
        }
        if (data.fetter_exp != null) {
            message.fetter_exp = dependency_1.HomeResource.fromObject(data.fetter_exp);
        }
        return message;
    }
    toObject() {
        const data: {
            home_coin?: ReturnType<typeof dependency_1.HomeResource.prototype.toObject>;
            fetter_exp?: ReturnType<typeof dependency_1.HomeResource.prototype.toObject>;
        } = {};
        if (this.home_coin != null) {
            data.home_coin = this.home_coin.toObject();
        }
        if (this.fetter_exp != null) {
            data.fetter_exp = this.fetter_exp.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_home_coin)
            writer.writeMessage(9, this.home_coin, () => this.home_coin.serialize(writer));
        if (this.has_fetter_exp)
            writer.writeMessage(8, this.fetter_exp, () => this.fetter_exp.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomeResourceNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomeResourceNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    reader.readMessage(message.home_coin, () => message.home_coin = dependency_1.HomeResource.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.fetter_exp, () => message.fetter_exp = dependency_1.HomeResource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HomeResourceNotify {
        return HomeResourceNotify.deserialize(bytes);
    }
}
