/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MassiveEntityState.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class MassiveEntityState extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        entity_type?: number;
        obj_id?: number;
        element_state?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity_type" in data && data.entity_type != undefined) {
                this.entity_type = data.entity_type;
            }
            if ("obj_id" in data && data.obj_id != undefined) {
                this.obj_id = data.obj_id;
            }
            if ("element_state" in data && data.element_state != undefined) {
                this.element_state = data.element_state;
            }
        }
    }
    get entity_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set entity_type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get obj_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set obj_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get element_state() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set element_state(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        entity_type?: number;
        obj_id?: number;
        element_state?: number;
    }): MassiveEntityState {
        const message = new MassiveEntityState({});
        if (data.entity_type != null) {
            message.entity_type = data.entity_type;
        }
        if (data.obj_id != null) {
            message.obj_id = data.obj_id;
        }
        if (data.element_state != null) {
            message.element_state = data.element_state;
        }
        return message;
    }
    toObject() {
        const data: {
            entity_type?: number;
            obj_id?: number;
            element_state?: number;
        } = {};
        if (this.entity_type != null) {
            data.entity_type = this.entity_type;
        }
        if (this.obj_id != null) {
            data.obj_id = this.obj_id;
        }
        if (this.element_state != null) {
            data.element_state = this.element_state;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.entity_type != 0)
            writer.writeUint32(1, this.entity_type);
        if (this.obj_id != 0)
            writer.writeInt64(2, this.obj_id);
        if (this.element_state != 0)
            writer.writeUint32(3, this.element_state);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassiveEntityState {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassiveEntityState();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.entity_type = reader.readUint32();
                    break;
                case 2:
                    message.obj_id = reader.readInt64();
                    break;
                case 3:
                    message.element_state = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MassiveEntityState {
        return MassiveEntityState.deserialize(bytes);
    }
}
