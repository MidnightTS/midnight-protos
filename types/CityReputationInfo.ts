// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "CityReputationInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CityReputationExploreInfo } from "./CityReputationExploreInfo";
import { CityReputationHuntInfo } from "./CityReputationHuntInfo";
import { CityReputationRequestInfo } from "./CityReputationRequestInfo";
import { CityReputationQuestInfo } from "./CityReputationQuestInfo";
/**
 * @generated from protobuf message CityReputationInfo
 */
export interface CityReputationInfo {
    /**
     * @generated from protobuf field: uint32 exp = 8;
     */
    exp: number;
    /**
     * @generated from protobuf field: CityReputationQuestInfo quest_info = 9;
     */
    questInfo?: CityReputationQuestInfo;
    /**
     * @generated from protobuf field: repeated uint32 taken_level_reward_list = 10;
     */
    takenLevelRewardList: number[];
    /**
     * @generated from protobuf field: CityReputationRequestInfo request_info = 5;
     */
    requestInfo?: CityReputationRequestInfo;
    /**
     * @generated from protobuf field: uint32 next_refresh_time = 11;
     */
    nextRefreshTime: number;
    /**
     * @generated from protobuf field: uint32 total_accept_request_num = 12;
     */
    totalAcceptRequestNum: number;
    /**
     * @generated from protobuf field: CityReputationHuntInfo hunt_info = 15;
     */
    huntInfo?: CityReputationHuntInfo;
    /**
     * @generated from protobuf field: CityReputationExploreInfo explore_info = 3;
     */
    exploreInfo?: CityReputationExploreInfo;
    /**
     * @generated from protobuf field: uint32 level = 2;
     */
    level: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationInfo$Type extends MessageType<CityReputationInfo> {
    constructor() {
        super("CityReputationInfo", [
            { no: 8, name: "exp", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "quest_info", kind: "message", T: () => CityReputationQuestInfo },
            { no: 10, name: "taken_level_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "request_info", kind: "message", T: () => CityReputationRequestInfo },
            { no: 11, name: "next_refresh_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_accept_request_num", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "hunt_info", kind: "message", T: () => CityReputationHuntInfo },
            { no: 3, name: "explore_info", kind: "message", T: () => CityReputationExploreInfo },
            { no: 2, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationInfo>): CityReputationInfo {
        const message = { exp: 0, takenLevelRewardList: [], nextRefreshTime: 0, totalAcceptRequestNum: 0, level: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationInfo): CityReputationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 exp */ 8:
                    message.exp = reader.uint32();
                    break;
                case /* CityReputationQuestInfo quest_info */ 9:
                    message.questInfo = CityReputationQuestInfo.internalBinaryRead(reader, reader.uint32(), options, message.questInfo);
                    break;
                case /* repeated uint32 taken_level_reward_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenLevelRewardList.push(reader.uint32());
                    else
                        message.takenLevelRewardList.push(reader.uint32());
                    break;
                case /* CityReputationRequestInfo request_info */ 5:
                    message.requestInfo = CityReputationRequestInfo.internalBinaryRead(reader, reader.uint32(), options, message.requestInfo);
                    break;
                case /* uint32 next_refresh_time */ 11:
                    message.nextRefreshTime = reader.uint32();
                    break;
                case /* uint32 total_accept_request_num */ 12:
                    message.totalAcceptRequestNum = reader.uint32();
                    break;
                case /* CityReputationHuntInfo hunt_info */ 15:
                    message.huntInfo = CityReputationHuntInfo.internalBinaryRead(reader, reader.uint32(), options, message.huntInfo);
                    break;
                case /* CityReputationExploreInfo explore_info */ 3:
                    message.exploreInfo = CityReputationExploreInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                case /* uint32 level */ 2:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 exp = 8; */
        if (message.exp !== 0)
            writer.tag(8, WireType.Varint).uint32(message.exp);
        /* CityReputationQuestInfo quest_info = 9; */
        if (message.questInfo)
            CityReputationQuestInfo.internalBinaryWrite(message.questInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 taken_level_reward_list = 10; */
        if (message.takenLevelRewardList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenLevelRewardList.length; i++)
                writer.uint32(message.takenLevelRewardList[i]);
            writer.join();
        }
        /* CityReputationRequestInfo request_info = 5; */
        if (message.requestInfo)
            CityReputationRequestInfo.internalBinaryWrite(message.requestInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint32 next_refresh_time = 11; */
        if (message.nextRefreshTime !== 0)
            writer.tag(11, WireType.Varint).uint32(message.nextRefreshTime);
        /* uint32 total_accept_request_num = 12; */
        if (message.totalAcceptRequestNum !== 0)
            writer.tag(12, WireType.Varint).uint32(message.totalAcceptRequestNum);
        /* CityReputationHuntInfo hunt_info = 15; */
        if (message.huntInfo)
            CityReputationHuntInfo.internalBinaryWrite(message.huntInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* CityReputationExploreInfo explore_info = 3; */
        if (message.exploreInfo)
            CityReputationExploreInfo.internalBinaryWrite(message.exploreInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CityReputationInfo
 */
export const CityReputationInfo = new CityReputationInfo$Type();
