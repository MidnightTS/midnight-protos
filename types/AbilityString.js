"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbilityString_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbilityString = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AbilityString.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class AbilityString extends pb_1.Message {
    constructor(data) {
        super();
        _AbilityString_one_of_decls.set(this, [[1, 2]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AbilityString_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("str" in data && data.str != undefined) {
                this.str = data.str;
            }
            if ("hash" in data && data.hash != undefined) {
                this.hash = data.hash;
            }
        }
    }
    get str() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set str(value) {
        pb_1.Message.setOneofField(this, 1, __classPrivateFieldGet(this, _AbilityString_one_of_decls, "f")[0], value);
    }
    get has_str() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get hash() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set hash(value) {
        pb_1.Message.setOneofField(this, 2, __classPrivateFieldGet(this, _AbilityString_one_of_decls, "f")[0], value);
    }
    get has_hash() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get type() {
        const cases = {
            0: "none",
            1: "str",
            2: "hash"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data) {
        const message = new AbilityString({});
        if (data.str != null) {
            message.str = data.str;
        }
        if (data.hash != null) {
            message.hash = data.hash;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.str != null) {
            data.str = this.str;
        }
        if (this.hash != null) {
            data.hash = this.hash;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_str)
            writer.writeString(1, this.str);
        if (this.has_hash)
            writer.writeUint32(2, this.hash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbilityString();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.str = reader.readString();
                    break;
                case 2:
                    message.hash = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AbilityString.deserialize(bytes);
    }
}
exports.AbilityString = AbilityString;
_AbilityString_one_of_decls = new WeakMap();
