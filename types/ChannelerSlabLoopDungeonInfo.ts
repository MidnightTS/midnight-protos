/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabLoopDungeonInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChannelerSlabLoopDungeonInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        score?: number;
        dungeon_index?: number;
        open_time?: number;
        is_first_pass_reward_taken?: boolean;
        last_condition_id_list?: number[];
        is_open?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("dungeon_index" in data && data.dungeon_index != undefined) {
                this.dungeon_index = data.dungeon_index;
            }
            if ("open_time" in data && data.open_time != undefined) {
                this.open_time = data.open_time;
            }
            if ("is_first_pass_reward_taken" in data && data.is_first_pass_reward_taken != undefined) {
                this.is_first_pass_reward_taken = data.is_first_pass_reward_taken;
            }
            if ("last_condition_id_list" in data && data.last_condition_id_list != undefined) {
                this.last_condition_id_list = data.last_condition_id_list;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
        }
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get dungeon_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set dungeon_index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get open_time() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set open_time(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_first_pass_reward_taken() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set is_first_pass_reward_taken(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get last_condition_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as number[];
    }
    set last_condition_id_list(value: number[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_open(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        score?: number;
        dungeon_index?: number;
        open_time?: number;
        is_first_pass_reward_taken?: boolean;
        last_condition_id_list?: number[];
        is_open?: boolean;
    }): ChannelerSlabLoopDungeonInfo {
        const message = new ChannelerSlabLoopDungeonInfo({});
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.dungeon_index != null) {
            message.dungeon_index = data.dungeon_index;
        }
        if (data.open_time != null) {
            message.open_time = data.open_time;
        }
        if (data.is_first_pass_reward_taken != null) {
            message.is_first_pass_reward_taken = data.is_first_pass_reward_taken;
        }
        if (data.last_condition_id_list != null) {
            message.last_condition_id_list = data.last_condition_id_list;
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        return message;
    }
    toObject() {
        const data: {
            score?: number;
            dungeon_index?: number;
            open_time?: number;
            is_first_pass_reward_taken?: boolean;
            last_condition_id_list?: number[];
            is_open?: boolean;
        } = {};
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.dungeon_index != null) {
            data.dungeon_index = this.dungeon_index;
        }
        if (this.open_time != null) {
            data.open_time = this.open_time;
        }
        if (this.is_first_pass_reward_taken != null) {
            data.is_first_pass_reward_taken = this.is_first_pass_reward_taken;
        }
        if (this.last_condition_id_list != null) {
            data.last_condition_id_list = this.last_condition_id_list;
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.score != 0)
            writer.writeUint32(7, this.score);
        if (this.dungeon_index != 0)
            writer.writeUint32(4, this.dungeon_index);
        if (this.open_time != 0)
            writer.writeUint32(12, this.open_time);
        if (this.is_first_pass_reward_taken != false)
            writer.writeBool(9, this.is_first_pass_reward_taken);
        if (this.last_condition_id_list.length)
            writer.writePackedUint32(14, this.last_condition_id_list);
        if (this.is_open != false)
            writer.writeBool(1, this.is_open);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelerSlabLoopDungeonInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabLoopDungeonInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.score = reader.readUint32();
                    break;
                case 4:
                    message.dungeon_index = reader.readUint32();
                    break;
                case 12:
                    message.open_time = reader.readUint32();
                    break;
                case 9:
                    message.is_first_pass_reward_taken = reader.readBool();
                    break;
                case 14:
                    message.last_condition_id_list = reader.readPackedUint32();
                    break;
                case 1:
                    message.is_open = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelerSlabLoopDungeonInfo {
        return ChannelerSlabLoopDungeonInfo.deserialize(bytes);
    }
}
