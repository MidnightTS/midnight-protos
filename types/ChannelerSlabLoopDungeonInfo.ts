// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "ChannelerSlabLoopDungeonInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ChannelerSlabLoopDungeonInfo
 */
export interface ChannelerSlabLoopDungeonInfo {
    /**
     * @generated from protobuf field: bool is_first_pass_reward_taken = 9;
     */
    isFirstPassRewardTaken: boolean;
    /**
     * @generated from protobuf field: uint32 score = 7;
     */
    score: number;
    /**
     * @generated from protobuf field: repeated uint32 last_condition_id_list = 10;
     */
    lastConditionIdList: number[];
    /**
     * @generated from protobuf field: uint32 dungeon_index = 1;
     */
    dungeonIndex: number;
    /**
     * @generated from protobuf field: bool is_open = 4;
     */
    isOpen: boolean;
    /**
     * @generated from protobuf field: uint32 open_time = 13;
     */
    openTime: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabLoopDungeonInfo$Type extends MessageType<ChannelerSlabLoopDungeonInfo> {
    constructor() {
        super("ChannelerSlabLoopDungeonInfo", [
            { no: 9, name: "is_first_pass_reward_taken", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "last_condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "dungeon_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "open_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabLoopDungeonInfo>): ChannelerSlabLoopDungeonInfo {
        const message = { isFirstPassRewardTaken: false, score: 0, lastConditionIdList: [], dungeonIndex: 0, isOpen: false, openTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabLoopDungeonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabLoopDungeonInfo): ChannelerSlabLoopDungeonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_first_pass_reward_taken */ 9:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* repeated uint32 last_condition_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lastConditionIdList.push(reader.uint32());
                    else
                        message.lastConditionIdList.push(reader.uint32());
                    break;
                case /* uint32 dungeon_index */ 1:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* bool is_open */ 4:
                    message.isOpen = reader.bool();
                    break;
                case /* uint32 open_time */ 13:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabLoopDungeonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_first_pass_reward_taken = 9; */
        if (message.isFirstPassRewardTaken !== false)
            writer.tag(9, WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* uint32 score = 7; */
        if (message.score !== 0)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* repeated uint32 last_condition_id_list = 10; */
        if (message.lastConditionIdList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lastConditionIdList.length; i++)
                writer.uint32(message.lastConditionIdList[i]);
            writer.join();
        }
        /* uint32 dungeon_index = 1; */
        if (message.dungeonIndex !== 0)
            writer.tag(1, WireType.Varint).uint32(message.dungeonIndex);
        /* bool is_open = 4; */
        if (message.isOpen !== false)
            writer.tag(4, WireType.Varint).bool(message.isOpen);
        /* uint32 open_time = 13; */
        if (message.openTime !== 0)
            writer.tag(13, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ChannelerSlabLoopDungeonInfo
 */
export const ChannelerSlabLoopDungeonInfo = new ChannelerSlabLoopDungeonInfo$Type();
