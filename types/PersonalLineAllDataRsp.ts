/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PersonalLineAllDataRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./LockedPersonallineData";
import * as pb_1 from "google-protobuf";
export class PersonalLineAllDataRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cur_finished_daily_task_count?: number;
        can_be_unlocked_personal_line_list?: number[];
        retcode?: number;
        ongoing_personal_line_list?: number[];
        legendary_key_count?: number;
        locked_personal_line_list?: dependency_1.LockedPersonallineData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 8, 10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cur_finished_daily_task_count" in data && data.cur_finished_daily_task_count != undefined) {
                this.cur_finished_daily_task_count = data.cur_finished_daily_task_count;
            }
            if ("can_be_unlocked_personal_line_list" in data && data.can_be_unlocked_personal_line_list != undefined) {
                this.can_be_unlocked_personal_line_list = data.can_be_unlocked_personal_line_list;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("ongoing_personal_line_list" in data && data.ongoing_personal_line_list != undefined) {
                this.ongoing_personal_line_list = data.ongoing_personal_line_list;
            }
            if ("legendary_key_count" in data && data.legendary_key_count != undefined) {
                this.legendary_key_count = data.legendary_key_count;
            }
            if ("locked_personal_line_list" in data && data.locked_personal_line_list != undefined) {
                this.locked_personal_line_list = data.locked_personal_line_list;
            }
        }
    }
    get cur_finished_daily_task_count() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set cur_finished_daily_task_count(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get can_be_unlocked_personal_line_list() {
        return pb_1.Message.getFieldWithDefault(this, 13, []) as number[];
    }
    set can_be_unlocked_personal_line_list(value: number[]) {
        pb_1.Message.setField(this, 13, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get ongoing_personal_line_list() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
    }
    set ongoing_personal_line_list(value: number[]) {
        pb_1.Message.setField(this, 8, value);
    }
    get legendary_key_count() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set legendary_key_count(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get locked_personal_line_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.LockedPersonallineData, 10) as dependency_1.LockedPersonallineData[];
    }
    set locked_personal_line_list(value: dependency_1.LockedPersonallineData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    static fromObject(data: {
        cur_finished_daily_task_count?: number;
        can_be_unlocked_personal_line_list?: number[];
        retcode?: number;
        ongoing_personal_line_list?: number[];
        legendary_key_count?: number;
        locked_personal_line_list?: ReturnType<typeof dependency_1.LockedPersonallineData.prototype.toObject>[];
    }): PersonalLineAllDataRsp {
        const message = new PersonalLineAllDataRsp({});
        if (data.cur_finished_daily_task_count != null) {
            message.cur_finished_daily_task_count = data.cur_finished_daily_task_count;
        }
        if (data.can_be_unlocked_personal_line_list != null) {
            message.can_be_unlocked_personal_line_list = data.can_be_unlocked_personal_line_list;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.ongoing_personal_line_list != null) {
            message.ongoing_personal_line_list = data.ongoing_personal_line_list;
        }
        if (data.legendary_key_count != null) {
            message.legendary_key_count = data.legendary_key_count;
        }
        if (data.locked_personal_line_list != null) {
            message.locked_personal_line_list = data.locked_personal_line_list.map(item => dependency_1.LockedPersonallineData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            cur_finished_daily_task_count?: number;
            can_be_unlocked_personal_line_list?: number[];
            retcode?: number;
            ongoing_personal_line_list?: number[];
            legendary_key_count?: number;
            locked_personal_line_list?: ReturnType<typeof dependency_1.LockedPersonallineData.prototype.toObject>[];
        } = {};
        if (this.cur_finished_daily_task_count != null) {
            data.cur_finished_daily_task_count = this.cur_finished_daily_task_count;
        }
        if (this.can_be_unlocked_personal_line_list != null) {
            data.can_be_unlocked_personal_line_list = this.can_be_unlocked_personal_line_list;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.ongoing_personal_line_list != null) {
            data.ongoing_personal_line_list = this.ongoing_personal_line_list;
        }
        if (this.legendary_key_count != null) {
            data.legendary_key_count = this.legendary_key_count;
        }
        if (this.locked_personal_line_list != null) {
            data.locked_personal_line_list = this.locked_personal_line_list.map((item: dependency_1.LockedPersonallineData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cur_finished_daily_task_count != 0)
            writer.writeUint32(5, this.cur_finished_daily_task_count);
        if (this.can_be_unlocked_personal_line_list.length)
            writer.writePackedUint32(13, this.can_be_unlocked_personal_line_list);
        if (this.retcode != 0)
            writer.writeInt32(15, this.retcode);
        if (this.ongoing_personal_line_list.length)
            writer.writePackedUint32(8, this.ongoing_personal_line_list);
        if (this.legendary_key_count != 0)
            writer.writeUint32(11, this.legendary_key_count);
        if (this.locked_personal_line_list.length)
            writer.writeRepeatedMessage(10, this.locked_personal_line_list, (item: dependency_1.LockedPersonallineData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonalLineAllDataRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonalLineAllDataRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.cur_finished_daily_task_count = reader.readUint32();
                    break;
                case 13:
                    message.can_be_unlocked_personal_line_list = reader.readPackedUint32();
                    break;
                case 15:
                    message.retcode = reader.readInt32();
                    break;
                case 8:
                    message.ongoing_personal_line_list = reader.readPackedUint32();
                    break;
                case 11:
                    message.legendary_key_count = reader.readUint32();
                    break;
                case 10:
                    reader.readMessage(message.locked_personal_line_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_1.LockedPersonallineData.deserialize(reader), dependency_1.LockedPersonallineData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PersonalLineAllDataRsp {
        return PersonalLineAllDataRsp.deserialize(bytes);
    }
}
