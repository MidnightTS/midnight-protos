/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SalesmanActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./SalesmanStatusType";
import * as pb_1 from "google-protobuf";
export class SalesmanActivityDetailInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        special_reward_preview_id?: number;
        status?: dependency_1.SalesmanStatusType;
        last_deliver_time?: number;
        selected_reward_id_map?: Map<number, number>;
        deliver_count?: number;
        is_has_taken_special_reward?: boolean;
        day_index?: number;
        cond_day_count?: number;
        day_reward_id?: number;
        is_today_has_delivered?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("special_reward_preview_id" in data && data.special_reward_preview_id != undefined) {
                this.special_reward_preview_id = data.special_reward_preview_id;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("last_deliver_time" in data && data.last_deliver_time != undefined) {
                this.last_deliver_time = data.last_deliver_time;
            }
            if ("selected_reward_id_map" in data && data.selected_reward_id_map != undefined) {
                this.selected_reward_id_map = data.selected_reward_id_map;
            }
            if ("deliver_count" in data && data.deliver_count != undefined) {
                this.deliver_count = data.deliver_count;
            }
            if ("is_has_taken_special_reward" in data && data.is_has_taken_special_reward != undefined) {
                this.is_has_taken_special_reward = data.is_has_taken_special_reward;
            }
            if ("day_index" in data && data.day_index != undefined) {
                this.day_index = data.day_index;
            }
            if ("cond_day_count" in data && data.cond_day_count != undefined) {
                this.cond_day_count = data.cond_day_count;
            }
            if ("day_reward_id" in data && data.day_reward_id != undefined) {
                this.day_reward_id = data.day_reward_id;
            }
            if ("is_today_has_delivered" in data && data.is_today_has_delivered != undefined) {
                this.is_today_has_delivered = data.is_today_has_delivered;
            }
        }
        if (!this.selected_reward_id_map)
            this.selected_reward_id_map = new Map();
    }
    get special_reward_preview_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set special_reward_preview_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.SalesmanStatusType.SALESMAN_STATUS_TYPE_NONE) as dependency_1.SalesmanStatusType;
    }
    set status(value: dependency_1.SalesmanStatusType) {
        pb_1.Message.setField(this, 4, value);
    }
    get last_deliver_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set last_deliver_time(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get selected_reward_id_map() {
        return pb_1.Message.getField(this, 5) as any as Map<number, number>;
    }
    set selected_reward_id_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 5, value as any);
    }
    get deliver_count() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set deliver_count(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_has_taken_special_reward() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_has_taken_special_reward(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get day_index() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set day_index(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get cond_day_count() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set cond_day_count(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get day_reward_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set day_reward_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get is_today_has_delivered() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set is_today_has_delivered(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        special_reward_preview_id?: number;
        status?: dependency_1.SalesmanStatusType;
        last_deliver_time?: number;
        selected_reward_id_map?: {
            [key: number]: number;
        };
        deliver_count?: number;
        is_has_taken_special_reward?: boolean;
        day_index?: number;
        cond_day_count?: number;
        day_reward_id?: number;
        is_today_has_delivered?: boolean;
    }): SalesmanActivityDetailInfo {
        const message = new SalesmanActivityDetailInfo({});
        if (data.special_reward_preview_id != null) {
            message.special_reward_preview_id = data.special_reward_preview_id;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.last_deliver_time != null) {
            message.last_deliver_time = data.last_deliver_time;
        }
        if (typeof data.selected_reward_id_map == "object") {
            message.selected_reward_id_map = new Map(Object.entries(data.selected_reward_id_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.deliver_count != null) {
            message.deliver_count = data.deliver_count;
        }
        if (data.is_has_taken_special_reward != null) {
            message.is_has_taken_special_reward = data.is_has_taken_special_reward;
        }
        if (data.day_index != null) {
            message.day_index = data.day_index;
        }
        if (data.cond_day_count != null) {
            message.cond_day_count = data.cond_day_count;
        }
        if (data.day_reward_id != null) {
            message.day_reward_id = data.day_reward_id;
        }
        if (data.is_today_has_delivered != null) {
            message.is_today_has_delivered = data.is_today_has_delivered;
        }
        return message;
    }
    toObject() {
        const data: {
            special_reward_preview_id?: number;
            status?: dependency_1.SalesmanStatusType;
            last_deliver_time?: number;
            selected_reward_id_map?: {
                [key: number]: number;
            };
            deliver_count?: number;
            is_has_taken_special_reward?: boolean;
            day_index?: number;
            cond_day_count?: number;
            day_reward_id?: number;
            is_today_has_delivered?: boolean;
        } = {};
        if (this.special_reward_preview_id != null) {
            data.special_reward_preview_id = this.special_reward_preview_id;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.last_deliver_time != null) {
            data.last_deliver_time = this.last_deliver_time;
        }
        if (this.selected_reward_id_map.size > 0) {
            data.selected_reward_id_map = (Object.fromEntries)(this.selected_reward_id_map);
        }
        if (this.deliver_count != null) {
            data.deliver_count = this.deliver_count;
        }
        if (this.is_has_taken_special_reward != null) {
            data.is_has_taken_special_reward = this.is_has_taken_special_reward;
        }
        if (this.day_index != null) {
            data.day_index = this.day_index;
        }
        if (this.cond_day_count != null) {
            data.cond_day_count = this.cond_day_count;
        }
        if (this.day_reward_id != null) {
            data.day_reward_id = this.day_reward_id;
        }
        if (this.is_today_has_delivered != null) {
            data.is_today_has_delivered = this.is_today_has_delivered;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.special_reward_preview_id != 0)
            writer.writeUint32(3, this.special_reward_preview_id);
        if (this.status != dependency_1.SalesmanStatusType.SALESMAN_STATUS_TYPE_NONE)
            writer.writeEnum(4, this.status);
        if (this.last_deliver_time != 0)
            writer.writeUint32(2, this.last_deliver_time);
        for (const [key, value] of this.selected_reward_id_map) {
            writer.writeMessage(5, this.selected_reward_id_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.deliver_count != 0)
            writer.writeUint32(11, this.deliver_count);
        if (this.is_has_taken_special_reward != false)
            writer.writeBool(7, this.is_has_taken_special_reward);
        if (this.day_index != 0)
            writer.writeUint32(12, this.day_index);
        if (this.cond_day_count != 0)
            writer.writeUint32(6, this.cond_day_count);
        if (this.day_reward_id != 0)
            writer.writeUint32(9, this.day_reward_id);
        if (this.is_today_has_delivered != false)
            writer.writeBool(13, this.is_today_has_delivered);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SalesmanActivityDetailInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SalesmanActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.special_reward_preview_id = reader.readUint32();
                    break;
                case 4:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.last_deliver_time = reader.readUint32();
                    break;
                case 5:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.selected_reward_id_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 11:
                    message.deliver_count = reader.readUint32();
                    break;
                case 7:
                    message.is_has_taken_special_reward = reader.readBool();
                    break;
                case 12:
                    message.day_index = reader.readUint32();
                    break;
                case 6:
                    message.cond_day_count = reader.readUint32();
                    break;
                case 9:
                    message.day_reward_id = reader.readUint32();
                    break;
                case 13:
                    message.is_today_has_delivered = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SalesmanActivityDetailInfo {
        return SalesmanActivityDetailInfo.deserialize(bytes);
    }
}
