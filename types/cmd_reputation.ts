// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_reputation.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.CityReputationQuestInfo
 */
export interface CityReputationQuestInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 2;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 taken_parent_quest_reward_list = 12;
     */
    takenParentQuestRewardList: number[];
    /**
     * @generated from protobuf field: repeated uint32 finished_parent_quest_list = 7;
     */
    finishedParentQuestList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationRequestInfo
 */
export interface CityReputationRequestInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 2;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CityReputationRequestInfo.RequestInfo request_info_list = 1;
     */
    requestInfoList: CityReputationRequestInfo_RequestInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationRequestInfo.RequestInfo
 */
export interface CityReputationRequestInfo_RequestInfo {
    /**
     * @generated from protobuf field: optional uint32 request_id = 3;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 9;
     */
    questId?: number;
    /**
     * @generated from protobuf field: optional bool is_taken_reward = 6;
     */
    isTakenReward?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationExploreInfo
 */
export interface CityReputationExploreInfo {
    /**
     * @generated from protobuf field: repeated uint32 taken_explore_reward_list = 2;
     */
    takenExploreRewardList: number[];
    /**
     * @generated from protobuf field: optional uint32 explore_percent = 14;
     */
    explorePercent?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 15;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationHuntInfo
 */
export interface CityReputationHuntInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 6;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_week_finish_num = 15;
     */
    curWeekFinishNum?: number;
    /**
     * @generated from protobuf field: optional bool has_reward = 5;
     */
    hasReward?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationInfo
 */
export interface CityReputationInfo {
    /**
     * @generated from protobuf field: optional uint32 level = 4;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 next_refresh_time = 3;
     */
    nextRefreshTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityReputationHuntInfo hunt_info = 11;
     */
    huntInfo?: CityReputationHuntInfo;
    /**
     * @generated from protobuf field: repeated uint32 taken_level_reward_list = 2;
     */
    takenLevelRewardList: number[];
    /**
     * @generated from protobuf field: optional uint32 total_accept_request_num = 6;
     */
    totalAcceptRequestNum?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityReputationRequestInfo request_info = 5;
     */
    requestInfo?: CityReputationRequestInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityReputationQuestInfo quest_info = 9;
     */
    questInfo?: CityReputationQuestInfo;
    /**
     * @generated from protobuf field: optional uint32 exp = 13;
     */
    exp?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityReputationExploreInfo explore_info = 10;
     */
    exploreInfo?: CityReputationExploreInfo;
}
/**
 * @generated from protobuf message com.midnights.game.GetCityReputationInfoReq
 */
export interface GetCityReputationInfoReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 7;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityReputationInfoReq.CmdId
 */
export enum GetCityReputationInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2872;
     */
    CMD_ID = 2872,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCityReputationInfoRsp
 */
export interface GetCityReputationInfoRsp {
    /**
     * @generated from protobuf field: optional uint32 city_id = 1;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityReputationInfo city_reputation_info = 9;
     */
    cityReputationInfo?: CityReputationInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityReputationInfoRsp.CmdId
 */
export enum GetCityReputationInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2898;
     */
    CMD_ID = 2898,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationLevelRewardReq
 */
export interface TakeCityReputationLevelRewardReq {
    /**
     * @generated from protobuf field: optional uint32 level = 11;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 1;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationLevelRewardReq.CmdId
 */
export enum TakeCityReputationLevelRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2812;
     */
    CMD_ID = 2812,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationLevelRewardRsp
 */
export interface TakeCityReputationLevelRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 city_id = 15;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 13;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 level = 9;
     */
    level?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationLevelRewardRsp.CmdId
 */
export enum TakeCityReputationLevelRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2835;
     */
    CMD_ID = 2835,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationLevelupNotify
 */
export interface CityReputationLevelupNotify {
    /**
     * @generated from protobuf field: optional uint32 city_id = 12;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 15;
     */
    level?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CityReputationLevelupNotify.CmdId
 */
export enum CityReputationLevelupNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2807;
     */
    CMD_ID = 2807,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationParentQuestReq
 */
export interface TakeCityReputationParentQuestReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 1;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: repeated uint32 parent_quest_list = 6;
     */
    parentQuestList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationParentQuestReq.CmdId
 */
export enum TakeCityReputationParentQuestReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2821;
     */
    CMD_ID = 2821,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationParentQuestRsp
 */
export interface TakeCityReputationParentQuestRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 14;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: repeated uint32 parent_quest_list = 9;
     */
    parentQuestList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 13;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationParentQuestRsp.CmdId
 */
export enum TakeCityReputationParentQuestRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2803;
     */
    CMD_ID = 2803,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AcceptCityReputationRequestReq
 */
export interface AcceptCityReputationRequestReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 14;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional uint32 request_id = 5;
     */
    requestId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AcceptCityReputationRequestReq.CmdId
 */
export enum AcceptCityReputationRequestReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2890;
     */
    CMD_ID = 2890,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AcceptCityReputationRequestRsp
 */
export interface AcceptCityReputationRequestRsp {
    /**
     * @generated from protobuf field: optional uint32 request_id = 5;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 13;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AcceptCityReputationRequestRsp.CmdId
 */
export enum AcceptCityReputationRequestRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2873;
     */
    CMD_ID = 2873,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CancelCityReputationRequestReq
 */
export interface CancelCityReputationRequestReq {
    /**
     * @generated from protobuf field: optional uint32 request_id = 10;
     */
    requestId?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 6;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CancelCityReputationRequestReq.CmdId
 */
export enum CancelCityReputationRequestReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2899;
     */
    CMD_ID = 2899,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CancelCityReputationRequestRsp
 */
export interface CancelCityReputationRequestRsp {
    /**
     * @generated from protobuf field: optional uint32 city_id = 3;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 request_id = 12;
     */
    requestId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CancelCityReputationRequestRsp.CmdId
 */
export enum CancelCityReputationRequestRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2831;
     */
    CMD_ID = 2831,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCityReputationMapInfoReq
 */
export interface GetCityReputationMapInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityReputationMapInfoReq.CmdId
 */
export enum GetCityReputationMapInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2875;
     */
    CMD_ID = 2875,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCityReputationMapInfoRsp
 */
export interface GetCityReputationMapInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_new_hunting = 10;
     */
    isNewHunting?: boolean;
    /**
     * @generated from protobuf field: optional bool is_new_request = 2;
     */
    isNewRequest?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 unlock_hunting_city_list = 9;
     */
    unlockHuntingCityList: number[];
    /**
     * @generated from protobuf field: repeated uint32 reward_city_list = 3;
     */
    rewardCityList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityReputationMapInfoRsp.CmdId
 */
export enum GetCityReputationMapInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2848;
     */
    CMD_ID = 2848,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationExploreRewardReq
 */
export interface TakeCityReputationExploreRewardReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 15;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: repeated uint32 explore_id_list = 12;
     */
    exploreIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationExploreRewardReq.CmdId
 */
export enum TakeCityReputationExploreRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2897;
     */
    CMD_ID = 2897,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCityReputationExploreRewardRsp
 */
export interface TakeCityReputationExploreRewardRsp {
    /**
     * @generated from protobuf field: repeated uint32 explore_id_list = 8;
     */
    exploreIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 12;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 13;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCityReputationExploreRewardRsp.CmdId
 */
export enum TakeCityReputationExploreRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2881;
     */
    CMD_ID = 2881,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationSimpleInfo
 */
export interface CityReputationSimpleInfo {
    /**
     * @generated from protobuf field: optional uint32 level = 15;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 9;
     */
    cityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CityReputationDataNotify
 */
export interface CityReputationDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CityReputationSimpleInfo simple_info_list = 7;
     */
    simpleInfoList: CityReputationSimpleInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.CityReputationDataNotify.CmdId
 */
export enum CityReputationDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2805;
     */
    CMD_ID = 2805,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationQuestInfo$Type extends MessageType<CityReputationQuestInfo> {
    constructor() {
        super("com.midnights.game.CityReputationQuestInfo", [
            { no: 2, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "taken_parent_quest_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "finished_parent_quest_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationQuestInfo>): CityReputationQuestInfo {
        const message = { takenParentQuestRewardList: [], finishedParentQuestList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationQuestInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationQuestInfo): CityReputationQuestInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 2:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated uint32 taken_parent_quest_reward_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenParentQuestRewardList.push(reader.uint32());
                    else
                        message.takenParentQuestRewardList.push(reader.uint32());
                    break;
                case /* repeated uint32 finished_parent_quest_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedParentQuestList.push(reader.uint32());
                    else
                        message.finishedParentQuestList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationQuestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 2; */
        if (message.isOpen !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isOpen);
        /* repeated uint32 taken_parent_quest_reward_list = 12; */
        if (message.takenParentQuestRewardList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenParentQuestRewardList.length; i++)
                writer.uint32(message.takenParentQuestRewardList[i]);
            writer.join();
        }
        /* repeated uint32 finished_parent_quest_list = 7; */
        if (message.finishedParentQuestList.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedParentQuestList.length; i++)
                writer.uint32(message.finishedParentQuestList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationQuestInfo
 */
export const CityReputationQuestInfo = new CityReputationQuestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationRequestInfo$Type extends MessageType<CityReputationRequestInfo> {
    constructor() {
        super("com.midnights.game.CityReputationRequestInfo", [
            { no: 2, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "request_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CityReputationRequestInfo_RequestInfo }
        ]);
    }
    create(value?: PartialMessage<CityReputationRequestInfo>): CityReputationRequestInfo {
        const message = { requestInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationRequestInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationRequestInfo): CityReputationRequestInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 2:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.CityReputationRequestInfo.RequestInfo request_info_list */ 1:
                    message.requestInfoList.push(CityReputationRequestInfo_RequestInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationRequestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 2; */
        if (message.isOpen !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.CityReputationRequestInfo.RequestInfo request_info_list = 1; */
        for (let i = 0; i < message.requestInfoList.length; i++)
            CityReputationRequestInfo_RequestInfo.internalBinaryWrite(message.requestInfoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationRequestInfo
 */
export const CityReputationRequestInfo = new CityReputationRequestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationRequestInfo_RequestInfo$Type extends MessageType<CityReputationRequestInfo_RequestInfo> {
    constructor() {
        super("com.midnights.game.CityReputationRequestInfo.RequestInfo", [
            { no: 3, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationRequestInfo_RequestInfo>): CityReputationRequestInfo_RequestInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationRequestInfo_RequestInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationRequestInfo_RequestInfo): CityReputationRequestInfo_RequestInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 3:
                    message.requestId = reader.uint32();
                    break;
                case /* optional uint32 quest_id */ 9:
                    message.questId = reader.uint32();
                    break;
                case /* optional bool is_taken_reward */ 6:
                    message.isTakenReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationRequestInfo_RequestInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 3; */
        if (message.requestId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.requestId);
        /* optional uint32 quest_id = 9; */
        if (message.questId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.questId);
        /* optional bool is_taken_reward = 6; */
        if (message.isTakenReward !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isTakenReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationRequestInfo.RequestInfo
 */
export const CityReputationRequestInfo_RequestInfo = new CityReputationRequestInfo_RequestInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationExploreInfo$Type extends MessageType<CityReputationExploreInfo> {
    constructor() {
        super("com.midnights.game.CityReputationExploreInfo", [
            { no: 2, name: "taken_explore_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "explore_percent", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationExploreInfo>): CityReputationExploreInfo {
        const message = { takenExploreRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationExploreInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationExploreInfo): CityReputationExploreInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 taken_explore_reward_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenExploreRewardList.push(reader.uint32());
                    else
                        message.takenExploreRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 explore_percent */ 14:
                    message.explorePercent = reader.uint32();
                    break;
                case /* optional bool is_open */ 15:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationExploreInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 taken_explore_reward_list = 2; */
        if (message.takenExploreRewardList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenExploreRewardList.length; i++)
                writer.uint32(message.takenExploreRewardList[i]);
            writer.join();
        }
        /* optional uint32 explore_percent = 14; */
        if (message.explorePercent !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.explorePercent);
        /* optional bool is_open = 15; */
        if (message.isOpen !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationExploreInfo
 */
export const CityReputationExploreInfo = new CityReputationExploreInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationHuntInfo$Type extends MessageType<CityReputationHuntInfo> {
    constructor() {
        super("com.midnights.game.CityReputationHuntInfo", [
            { no: 6, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "cur_week_finish_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "has_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationHuntInfo>): CityReputationHuntInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationHuntInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationHuntInfo): CityReputationHuntInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 6:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 cur_week_finish_num */ 15:
                    message.curWeekFinishNum = reader.uint32();
                    break;
                case /* optional bool has_reward */ 5:
                    message.hasReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationHuntInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 6; */
        if (message.isOpen !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isOpen);
        /* optional uint32 cur_week_finish_num = 15; */
        if (message.curWeekFinishNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.curWeekFinishNum);
        /* optional bool has_reward = 5; */
        if (message.hasReward !== undefined)
            writer.tag(5, WireType.Varint).bool(message.hasReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationHuntInfo
 */
export const CityReputationHuntInfo = new CityReputationHuntInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationInfo$Type extends MessageType<CityReputationInfo> {
    constructor() {
        super("com.midnights.game.CityReputationInfo", [
            { no: 4, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "hunt_info", kind: "message", T: () => CityReputationHuntInfo },
            { no: 2, name: "taken_level_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_accept_request_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "request_info", kind: "message", T: () => CityReputationRequestInfo },
            { no: 9, name: "quest_info", kind: "message", T: () => CityReputationQuestInfo },
            { no: 13, name: "exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "explore_info", kind: "message", T: () => CityReputationExploreInfo }
        ]);
    }
    create(value?: PartialMessage<CityReputationInfo>): CityReputationInfo {
        const message = { takenLevelRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationInfo): CityReputationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 4:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 next_refresh_time */ 3:
                    message.nextRefreshTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.CityReputationHuntInfo hunt_info */ 11:
                    message.huntInfo = CityReputationHuntInfo.internalBinaryRead(reader, reader.uint32(), options, message.huntInfo);
                    break;
                case /* repeated uint32 taken_level_reward_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenLevelRewardList.push(reader.uint32());
                    else
                        message.takenLevelRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 total_accept_request_num */ 6:
                    message.totalAcceptRequestNum = reader.uint32();
                    break;
                case /* optional com.midnights.game.CityReputationRequestInfo request_info */ 5:
                    message.requestInfo = CityReputationRequestInfo.internalBinaryRead(reader, reader.uint32(), options, message.requestInfo);
                    break;
                case /* optional com.midnights.game.CityReputationQuestInfo quest_info */ 9:
                    message.questInfo = CityReputationQuestInfo.internalBinaryRead(reader, reader.uint32(), options, message.questInfo);
                    break;
                case /* optional uint32 exp */ 13:
                    message.exp = reader.uint32();
                    break;
                case /* optional com.midnights.game.CityReputationExploreInfo explore_info */ 10:
                    message.exploreInfo = CityReputationExploreInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.level);
        /* optional uint32 next_refresh_time = 3; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.nextRefreshTime);
        /* optional com.midnights.game.CityReputationHuntInfo hunt_info = 11; */
        if (message.huntInfo)
            CityReputationHuntInfo.internalBinaryWrite(message.huntInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 taken_level_reward_list = 2; */
        if (message.takenLevelRewardList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenLevelRewardList.length; i++)
                writer.uint32(message.takenLevelRewardList[i]);
            writer.join();
        }
        /* optional uint32 total_accept_request_num = 6; */
        if (message.totalAcceptRequestNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.totalAcceptRequestNum);
        /* optional com.midnights.game.CityReputationRequestInfo request_info = 5; */
        if (message.requestInfo)
            CityReputationRequestInfo.internalBinaryWrite(message.requestInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.CityReputationQuestInfo quest_info = 9; */
        if (message.questInfo)
            CityReputationQuestInfo.internalBinaryWrite(message.questInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 exp = 13; */
        if (message.exp !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.exp);
        /* optional com.midnights.game.CityReputationExploreInfo explore_info = 10; */
        if (message.exploreInfo)
            CityReputationExploreInfo.internalBinaryWrite(message.exploreInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationInfo
 */
export const CityReputationInfo = new CityReputationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityReputationInfoReq$Type extends MessageType<GetCityReputationInfoReq> {
    constructor() {
        super("com.midnights.game.GetCityReputationInfoReq", [
            { no: 7, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCityReputationInfoReq>): GetCityReputationInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityReputationInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityReputationInfoReq): GetCityReputationInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 7:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityReputationInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 7; */
        if (message.cityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityReputationInfoReq
 */
export const GetCityReputationInfoReq = new GetCityReputationInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityReputationInfoRsp$Type extends MessageType<GetCityReputationInfoRsp> {
    constructor() {
        super("com.midnights.game.GetCityReputationInfoRsp", [
            { no: 1, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "city_reputation_info", kind: "message", T: () => CityReputationInfo }
        ]);
    }
    create(value?: PartialMessage<GetCityReputationInfoRsp>): GetCityReputationInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityReputationInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityReputationInfoRsp): GetCityReputationInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 1:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.CityReputationInfo city_reputation_info */ 9:
                    message.cityReputationInfo = CityReputationInfo.internalBinaryRead(reader, reader.uint32(), options, message.cityReputationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityReputationInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 1; */
        if (message.cityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.CityReputationInfo city_reputation_info = 9; */
        if (message.cityReputationInfo)
            CityReputationInfo.internalBinaryWrite(message.cityReputationInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityReputationInfoRsp
 */
export const GetCityReputationInfoRsp = new GetCityReputationInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationLevelRewardReq$Type extends MessageType<TakeCityReputationLevelRewardReq> {
    constructor() {
        super("com.midnights.game.TakeCityReputationLevelRewardReq", [
            { no: 11, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationLevelRewardReq>): TakeCityReputationLevelRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationLevelRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationLevelRewardReq): TakeCityReputationLevelRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 11:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 city_id */ 1:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationLevelRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 11; */
        if (message.level !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.level);
        /* optional uint32 city_id = 1; */
        if (message.cityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationLevelRewardReq
 */
export const TakeCityReputationLevelRewardReq = new TakeCityReputationLevelRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationLevelRewardRsp$Type extends MessageType<TakeCityReputationLevelRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeCityReputationLevelRewardRsp", [
            { no: 15, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 9, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationLevelRewardRsp>): TakeCityReputationLevelRewardRsp {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationLevelRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationLevelRewardRsp): TakeCityReputationLevelRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 15:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 13:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level */ 9:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationLevelRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 15; */
        if (message.cityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam item_list = 13; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level = 9; */
        if (message.level !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationLevelRewardRsp
 */
export const TakeCityReputationLevelRewardRsp = new TakeCityReputationLevelRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationLevelupNotify$Type extends MessageType<CityReputationLevelupNotify> {
    constructor() {
        super("com.midnights.game.CityReputationLevelupNotify", [
            { no: 12, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationLevelupNotify>): CityReputationLevelupNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationLevelupNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationLevelupNotify): CityReputationLevelupNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 12:
                    message.cityId = reader.uint32();
                    break;
                case /* optional uint32 level */ 15:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationLevelupNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 12; */
        if (message.cityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.cityId);
        /* optional uint32 level = 15; */
        if (message.level !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationLevelupNotify
 */
export const CityReputationLevelupNotify = new CityReputationLevelupNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationParentQuestReq$Type extends MessageType<TakeCityReputationParentQuestReq> {
    constructor() {
        super("com.midnights.game.TakeCityReputationParentQuestReq", [
            { no: 1, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "parent_quest_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationParentQuestReq>): TakeCityReputationParentQuestReq {
        const message = { parentQuestList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationParentQuestReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationParentQuestReq): TakeCityReputationParentQuestReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 1:
                    message.cityId = reader.uint32();
                    break;
                case /* repeated uint32 parent_quest_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.parentQuestList.push(reader.uint32());
                    else
                        message.parentQuestList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationParentQuestReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 1; */
        if (message.cityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cityId);
        /* repeated uint32 parent_quest_list = 6; */
        if (message.parentQuestList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.parentQuestList.length; i++)
                writer.uint32(message.parentQuestList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationParentQuestReq
 */
export const TakeCityReputationParentQuestReq = new TakeCityReputationParentQuestReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationParentQuestRsp$Type extends MessageType<TakeCityReputationParentQuestRsp> {
    constructor() {
        super("com.midnights.game.TakeCityReputationParentQuestRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "parent_quest_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationParentQuestRsp>): TakeCityReputationParentQuestRsp {
        const message = { parentQuestList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationParentQuestRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationParentQuestRsp): TakeCityReputationParentQuestRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 city_id */ 14:
                    message.cityId = reader.uint32();
                    break;
                case /* repeated uint32 parent_quest_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.parentQuestList.push(reader.uint32());
                    else
                        message.parentQuestList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 13:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationParentQuestRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 city_id = 14; */
        if (message.cityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cityId);
        /* repeated uint32 parent_quest_list = 9; */
        if (message.parentQuestList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.parentQuestList.length; i++)
                writer.uint32(message.parentQuestList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ItemParam item_list = 13; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationParentQuestRsp
 */
export const TakeCityReputationParentQuestRsp = new TakeCityReputationParentQuestRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptCityReputationRequestReq$Type extends MessageType<AcceptCityReputationRequestReq> {
    constructor() {
        super("com.midnights.game.AcceptCityReputationRequestReq", [
            { no: 14, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AcceptCityReputationRequestReq>): AcceptCityReputationRequestReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AcceptCityReputationRequestReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptCityReputationRequestReq): AcceptCityReputationRequestReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 14:
                    message.cityId = reader.uint32();
                    break;
                case /* optional uint32 request_id */ 5:
                    message.requestId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptCityReputationRequestReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 14; */
        if (message.cityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cityId);
        /* optional uint32 request_id = 5; */
        if (message.requestId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.requestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AcceptCityReputationRequestReq
 */
export const AcceptCityReputationRequestReq = new AcceptCityReputationRequestReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AcceptCityReputationRequestRsp$Type extends MessageType<AcceptCityReputationRequestRsp> {
    constructor() {
        super("com.midnights.game.AcceptCityReputationRequestRsp", [
            { no: 5, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AcceptCityReputationRequestRsp>): AcceptCityReputationRequestRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AcceptCityReputationRequestRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AcceptCityReputationRequestRsp): AcceptCityReputationRequestRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 5:
                    message.requestId = reader.uint32();
                    break;
                case /* optional uint32 city_id */ 13:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AcceptCityReputationRequestRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 5; */
        if (message.requestId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.requestId);
        /* optional uint32 city_id = 13; */
        if (message.cityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AcceptCityReputationRequestRsp
 */
export const AcceptCityReputationRequestRsp = new AcceptCityReputationRequestRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelCityReputationRequestReq$Type extends MessageType<CancelCityReputationRequestReq> {
    constructor() {
        super("com.midnights.game.CancelCityReputationRequestReq", [
            { no: 10, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CancelCityReputationRequestReq>): CancelCityReputationRequestReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CancelCityReputationRequestReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelCityReputationRequestReq): CancelCityReputationRequestReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 request_id */ 10:
                    message.requestId = reader.uint32();
                    break;
                case /* optional uint32 city_id */ 6:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelCityReputationRequestReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 request_id = 10; */
        if (message.requestId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.requestId);
        /* optional uint32 city_id = 6; */
        if (message.cityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CancelCityReputationRequestReq
 */
export const CancelCityReputationRequestReq = new CancelCityReputationRequestReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelCityReputationRequestRsp$Type extends MessageType<CancelCityReputationRequestRsp> {
    constructor() {
        super("com.midnights.game.CancelCityReputationRequestRsp", [
            { no: 3, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "request_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CancelCityReputationRequestRsp>): CancelCityReputationRequestRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CancelCityReputationRequestRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelCityReputationRequestRsp): CancelCityReputationRequestRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 3:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 request_id */ 12:
                    message.requestId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelCityReputationRequestRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 3; */
        if (message.cityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 request_id = 12; */
        if (message.requestId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.requestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CancelCityReputationRequestRsp
 */
export const CancelCityReputationRequestRsp = new CancelCityReputationRequestRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityReputationMapInfoReq$Type extends MessageType<GetCityReputationMapInfoReq> {
    constructor() {
        super("com.midnights.game.GetCityReputationMapInfoReq", []);
    }
    create(value?: PartialMessage<GetCityReputationMapInfoReq>): GetCityReputationMapInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityReputationMapInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityReputationMapInfoReq): GetCityReputationMapInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCityReputationMapInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityReputationMapInfoReq
 */
export const GetCityReputationMapInfoReq = new GetCityReputationMapInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityReputationMapInfoRsp$Type extends MessageType<GetCityReputationMapInfoRsp> {
    constructor() {
        super("com.midnights.game.GetCityReputationMapInfoRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "is_new_hunting", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_new_request", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "unlock_hunting_city_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reward_city_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCityReputationMapInfoRsp>): GetCityReputationMapInfoRsp {
        const message = { unlockHuntingCityList: [], rewardCityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityReputationMapInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityReputationMapInfoRsp): GetCityReputationMapInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_new_hunting */ 10:
                    message.isNewHunting = reader.bool();
                    break;
                case /* optional bool is_new_request */ 2:
                    message.isNewRequest = reader.bool();
                    break;
                case /* repeated uint32 unlock_hunting_city_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockHuntingCityList.push(reader.uint32());
                    else
                        message.unlockHuntingCityList.push(reader.uint32());
                    break;
                case /* repeated uint32 reward_city_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rewardCityList.push(reader.uint32());
                    else
                        message.rewardCityList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityReputationMapInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional bool is_new_hunting = 10; */
        if (message.isNewHunting !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isNewHunting);
        /* optional bool is_new_request = 2; */
        if (message.isNewRequest !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNewRequest);
        /* repeated uint32 unlock_hunting_city_list = 9; */
        if (message.unlockHuntingCityList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockHuntingCityList.length; i++)
                writer.uint32(message.unlockHuntingCityList[i]);
            writer.join();
        }
        /* repeated uint32 reward_city_list = 3; */
        if (message.rewardCityList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rewardCityList.length; i++)
                writer.uint32(message.rewardCityList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityReputationMapInfoRsp
 */
export const GetCityReputationMapInfoRsp = new GetCityReputationMapInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationExploreRewardReq$Type extends MessageType<TakeCityReputationExploreRewardReq> {
    constructor() {
        super("com.midnights.game.TakeCityReputationExploreRewardReq", [
            { no: 15, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "explore_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationExploreRewardReq>): TakeCityReputationExploreRewardReq {
        const message = { exploreIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationExploreRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationExploreRewardReq): TakeCityReputationExploreRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 15:
                    message.cityId = reader.uint32();
                    break;
                case /* repeated uint32 explore_id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploreIdList.push(reader.uint32());
                    else
                        message.exploreIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationExploreRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 15; */
        if (message.cityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cityId);
        /* repeated uint32 explore_id_list = 12; */
        if (message.exploreIdList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exploreIdList.length; i++)
                writer.uint32(message.exploreIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationExploreRewardReq
 */
export const TakeCityReputationExploreRewardReq = new TakeCityReputationExploreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCityReputationExploreRewardRsp$Type extends MessageType<TakeCityReputationExploreRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeCityReputationExploreRewardRsp", [
            { no: 8, name: "explore_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCityReputationExploreRewardRsp>): TakeCityReputationExploreRewardRsp {
        const message = { exploreIdList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCityReputationExploreRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCityReputationExploreRewardRsp): TakeCityReputationExploreRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 explore_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploreIdList.push(reader.uint32());
                    else
                        message.exploreIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 12:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 city_id */ 13:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCityReputationExploreRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 explore_id_list = 8; */
        if (message.exploreIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exploreIdList.length; i++)
                writer.uint32(message.exploreIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ItemParam item_list = 12; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 city_id = 13; */
        if (message.cityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCityReputationExploreRewardRsp
 */
export const TakeCityReputationExploreRewardRsp = new TakeCityReputationExploreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationSimpleInfo$Type extends MessageType<CityReputationSimpleInfo> {
    constructor() {
        super("com.midnights.game.CityReputationSimpleInfo", [
            { no: 15, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CityReputationSimpleInfo>): CityReputationSimpleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationSimpleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationSimpleInfo): CityReputationSimpleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 15:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 city_id */ 9:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationSimpleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 15; */
        if (message.level !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.level);
        /* optional uint32 city_id = 9; */
        if (message.cityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationSimpleInfo
 */
export const CityReputationSimpleInfo = new CityReputationSimpleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityReputationDataNotify$Type extends MessageType<CityReputationDataNotify> {
    constructor() {
        super("com.midnights.game.CityReputationDataNotify", [
            { no: 7, name: "simple_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CityReputationSimpleInfo }
        ]);
    }
    create(value?: PartialMessage<CityReputationDataNotify>): CityReputationDataNotify {
        const message = { simpleInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityReputationDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityReputationDataNotify): CityReputationDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CityReputationSimpleInfo simple_info_list */ 7:
                    message.simpleInfoList.push(CityReputationSimpleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityReputationDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CityReputationSimpleInfo simple_info_list = 7; */
        for (let i = 0; i < message.simpleInfoList.length; i++)
            CityReputationSimpleInfo.internalBinaryWrite(message.simpleInfoList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityReputationDataNotify
 */
export const CityReputationDataNotify = new CityReputationDataNotify$Type();
