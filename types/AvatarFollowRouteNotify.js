"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AvatarFollowRouteNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvatarFollowRouteNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarFollowRouteNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Route");
const pb_1 = require("google-protobuf");
class AvatarFollowRouteNotify extends pb_1.Message {
    constructor(data) {
        super();
        _AvatarFollowRouteNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AvatarFollowRouteNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("template_id" in data && data.template_id != undefined) {
                this.template_id = data.template_id;
            }
            if ("start_scene_time_ms" in data && data.start_scene_time_ms != undefined) {
                this.start_scene_time_ms = data.start_scene_time_ms;
            }
            if ("route" in data && data.route != undefined) {
                this.route = data.route;
            }
            if ("client_params" in data && data.client_params != undefined) {
                this.client_params = data.client_params;
            }
        }
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set entity_id(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get template_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set template_id(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get start_scene_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set start_scene_time_ms(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get route() {
        return pb_1.Message.getWrapperField(this, dependency_1.Route, 2);
    }
    set route(value) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_route() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get client_params() {
        return pb_1.Message.getFieldWithDefault(this, 13, "");
    }
    set client_params(value) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data) {
        const message = new AvatarFollowRouteNotify({});
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.template_id != null) {
            message.template_id = data.template_id;
        }
        if (data.start_scene_time_ms != null) {
            message.start_scene_time_ms = data.start_scene_time_ms;
        }
        if (data.route != null) {
            message.route = dependency_1.Route.fromObject(data.route);
        }
        if (data.client_params != null) {
            message.client_params = data.client_params;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.template_id != null) {
            data.template_id = this.template_id;
        }
        if (this.start_scene_time_ms != null) {
            data.start_scene_time_ms = this.start_scene_time_ms;
        }
        if (this.route != null) {
            data.route = this.route.toObject();
        }
        if (this.client_params != null) {
            data.client_params = this.client_params;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.entity_id != 0)
            writer.writeUint32(4, this.entity_id);
        if (this.template_id != 0)
            writer.writeUint32(6, this.template_id);
        if (this.start_scene_time_ms != 0)
            writer.writeUint32(8, this.start_scene_time_ms);
        if (this.has_route)
            writer.writeMessage(2, this.route, () => this.route.serialize(writer));
        if (this.client_params.length)
            writer.writeString(13, this.client_params);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarFollowRouteNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.entity_id = reader.readUint32();
                    break;
                case 6:
                    message.template_id = reader.readUint32();
                    break;
                case 8:
                    message.start_scene_time_ms = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.route, () => message.route = dependency_1.Route.deserialize(reader));
                    break;
                case 13:
                    message.client_params = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AvatarFollowRouteNotify.deserialize(bytes);
    }
}
exports.AvatarFollowRouteNotify = AvatarFollowRouteNotify;
_AvatarFollowRouteNotify_one_of_decls = new WeakMap();
