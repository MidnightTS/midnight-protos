"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SummerTimeDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SummerTimeDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SummerTimeDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./SummerTimeSprintBoatInfo");
const dependency_2 = require("./SummerTimeStageInfo");
const pb_1 = require("google-protobuf");
class SummerTimeDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _SummerTimeDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SummerTimeDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stage_map" in data && data.stage_map != undefined) {
                this.stage_map = data.stage_map;
            }
            if ("content_close_time" in data && data.content_close_time != undefined) {
                this.content_close_time = data.content_close_time;
            }
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("sprint_boat_info" in data && data.sprint_boat_info != undefined) {
                this.sprint_boat_info = data.sprint_boat_info;
            }
        }
        if (!this.stage_map)
            this.stage_map = new Map();
    }
    get stage_map() {
        return pb_1.Message.getField(this, 3);
    }
    set stage_map(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get content_close_time() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set content_close_time(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 13, false);
    }
    set is_content_closed(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get sprint_boat_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.SummerTimeSprintBoatInfo, 4);
    }
    set sprint_boat_info(value) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_sprint_boat_info() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data) {
        const message = new SummerTimeDetailInfo({});
        if (typeof data.stage_map == "object") {
            message.stage_map = new Map(Object.entries(data.stage_map).map(([key, value]) => [Number(key), dependency_2.SummerTimeStageInfo.fromObject(value)]));
        }
        if (data.content_close_time != null) {
            message.content_close_time = data.content_close_time;
        }
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (data.sprint_boat_info != null) {
            message.sprint_boat_info = dependency_1.SummerTimeSprintBoatInfo.fromObject(data.sprint_boat_info);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.stage_map.size > 0) {
            data.stage_map = (Object.fromEntries)((Array.from)(this.stage_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.content_close_time != null) {
            data.content_close_time = this.content_close_time;
        }
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.sprint_boat_info != null) {
            data.sprint_boat_info = this.sprint_boat_info.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.stage_map) {
            writer.writeMessage(3, this.stage_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.content_close_time != 0)
            writer.writeUint32(11, this.content_close_time);
        if (this.is_content_closed != false)
            writer.writeBool(13, this.is_content_closed);
        if (this.has_sprint_boat_info)
            writer.writeMessage(4, this.sprint_boat_info, () => this.sprint_boat_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SummerTimeDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stage_map, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_2.SummerTimeStageInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 11:
                    message.content_close_time = reader.readUint32();
                    break;
                case 13:
                    message.is_content_closed = reader.readBool();
                    break;
                case 4:
                    reader.readMessage(message.sprint_boat_info, () => message.sprint_boat_info = dependency_1.SummerTimeSprintBoatInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SummerTimeDetailInfo.deserialize(bytes);
    }
}
exports.SummerTimeDetailInfo = SummerTimeDetailInfo;
_SummerTimeDetailInfo_one_of_decls = new WeakMap();
