/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HuntingOfferData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HuntingOfferState";
import * as dependency_2 from "./HuntingPair";
import * as pb_1 from "google-protobuf";
export class HuntingOfferData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hunting_pair?: dependency_2.HuntingPair;
        city_id?: number;
        state?: dependency_1.HuntingOfferState;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hunting_pair" in data && data.hunting_pair != undefined) {
                this.hunting_pair = data.hunting_pair;
            }
            if ("city_id" in data && data.city_id != undefined) {
                this.city_id = data.city_id;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
        }
    }
    get hunting_pair() {
        return pb_1.Message.getWrapperField(this, dependency_2.HuntingPair, 4) as dependency_2.HuntingPair;
    }
    set hunting_pair(value: dependency_2.HuntingPair) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_hunting_pair() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get city_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set city_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.HuntingOfferState.HUNTING_OFFER_STATE_NONE) as dependency_1.HuntingOfferState;
    }
    set state(value: dependency_1.HuntingOfferState) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        hunting_pair?: ReturnType<typeof dependency_2.HuntingPair.prototype.toObject>;
        city_id?: number;
        state?: dependency_1.HuntingOfferState;
    }): HuntingOfferData {
        const message = new HuntingOfferData({});
        if (data.hunting_pair != null) {
            message.hunting_pair = dependency_2.HuntingPair.fromObject(data.hunting_pair);
        }
        if (data.city_id != null) {
            message.city_id = data.city_id;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        return message;
    }
    toObject() {
        const data: {
            hunting_pair?: ReturnType<typeof dependency_2.HuntingPair.prototype.toObject>;
            city_id?: number;
            state?: dependency_1.HuntingOfferState;
        } = {};
        if (this.hunting_pair != null) {
            data.hunting_pair = this.hunting_pair.toObject();
        }
        if (this.city_id != null) {
            data.city_id = this.city_id;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_hunting_pair)
            writer.writeMessage(4, this.hunting_pair, () => this.hunting_pair.serialize(writer));
        if (this.city_id != 0)
            writer.writeUint32(8, this.city_id);
        if (this.state != dependency_1.HuntingOfferState.HUNTING_OFFER_STATE_NONE)
            writer.writeEnum(1, this.state);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HuntingOfferData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HuntingOfferData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    reader.readMessage(message.hunting_pair, () => message.hunting_pair = dependency_2.HuntingPair.deserialize(reader));
                    break;
                case 8:
                    message.city_id = reader.readUint32();
                    break;
                case 1:
                    message.state = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HuntingOfferData {
        return HuntingOfferData.deserialize(bytes);
    }
}
