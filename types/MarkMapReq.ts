/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MarkMapReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MapMarkPoint";
import * as pb_1 from "google-protobuf";
export class MarkMapReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mark?: dependency_1.MapMarkPoint;
        old?: dependency_1.MapMarkPoint;
        op?: MarkMapReq.Operation;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mark" in data && data.mark != undefined) {
                this.mark = data.mark;
            }
            if ("old" in data && data.old != undefined) {
                this.old = data.old;
            }
            if ("op" in data && data.op != undefined) {
                this.op = data.op;
            }
        }
    }
    get mark() {
        return pb_1.Message.getWrapperField(this, dependency_1.MapMarkPoint, 8) as dependency_1.MapMarkPoint;
    }
    set mark(value: dependency_1.MapMarkPoint) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_mark() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get old() {
        return pb_1.Message.getWrapperField(this, dependency_1.MapMarkPoint, 6) as dependency_1.MapMarkPoint;
    }
    set old(value: dependency_1.MapMarkPoint) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_old() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get op() {
        return pb_1.Message.getFieldWithDefault(this, 9, MarkMapReq.Operation.OPERATION_ADD) as MarkMapReq.Operation;
    }
    set op(value: MarkMapReq.Operation) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        mark?: ReturnType<typeof dependency_1.MapMarkPoint.prototype.toObject>;
        old?: ReturnType<typeof dependency_1.MapMarkPoint.prototype.toObject>;
        op?: MarkMapReq.Operation;
    }): MarkMapReq {
        const message = new MarkMapReq({});
        if (data.mark != null) {
            message.mark = dependency_1.MapMarkPoint.fromObject(data.mark);
        }
        if (data.old != null) {
            message.old = dependency_1.MapMarkPoint.fromObject(data.old);
        }
        if (data.op != null) {
            message.op = data.op;
        }
        return message;
    }
    toObject() {
        const data: {
            mark?: ReturnType<typeof dependency_1.MapMarkPoint.prototype.toObject>;
            old?: ReturnType<typeof dependency_1.MapMarkPoint.prototype.toObject>;
            op?: MarkMapReq.Operation;
        } = {};
        if (this.mark != null) {
            data.mark = this.mark.toObject();
        }
        if (this.old != null) {
            data.old = this.old.toObject();
        }
        if (this.op != null) {
            data.op = this.op;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_mark)
            writer.writeMessage(8, this.mark, () => this.mark.serialize(writer));
        if (this.has_old)
            writer.writeMessage(6, this.old, () => this.old.serialize(writer));
        if (this.op != MarkMapReq.Operation.OPERATION_ADD)
            writer.writeEnum(9, this.op);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MarkMapReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MarkMapReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    reader.readMessage(message.mark, () => message.mark = dependency_1.MapMarkPoint.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.old, () => message.old = dependency_1.MapMarkPoint.deserialize(reader));
                    break;
                case 9:
                    message.op = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MarkMapReq {
        return MarkMapReq.deserialize(bytes);
    }
}
export namespace MarkMapReq {
    export enum Operation {
        OPERATION_ADD = 0,
        OPERATION_MOD = 1,
        OPERATION_DEL = 2,
        OPERATION_GET = 3
    }
}
