// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "MultistagePlaySettleNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { InBattleIrodoriChessSettleInfo } from "./InBattleIrodoriChessSettleInfo";
import { InBattleChessSettleInfo } from "./InBattleChessSettleInfo";
import { InBattleMechanicusSettleInfo } from "./InBattleMechanicusSettleInfo";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 5360;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message MultistagePlaySettleNotify
 */
export interface MultistagePlaySettleNotify {
    /**
     * @generated from protobuf field: uint32 group_id = 3;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint32 play_index = 9;
     */
    playIndex: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "mechanicusSettleInfo";
        /**
         * @generated from protobuf field: InBattleMechanicusSettleInfo mechanicus_settle_info = 649;
         */
        mechanicusSettleInfo: InBattleMechanicusSettleInfo;
    } | {
        oneofKind: "chessSettleInfo";
        /**
         * @generated from protobuf field: InBattleChessSettleInfo chess_settle_info = 512;
         */
        chessSettleInfo: InBattleChessSettleInfo;
    } | {
        oneofKind: "irodoriChessSettleInfo";
        /**
         * @generated from protobuf field: InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 520;
         */
        irodoriChessSettleInfo: InBattleIrodoriChessSettleInfo;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class MultistagePlaySettleNotify$Type extends MessageType<MultistagePlaySettleNotify> {
    constructor() {
        super("MultistagePlaySettleNotify", [
            { no: 3, name: "group_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "play_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 649, name: "mechanicus_settle_info", kind: "message", oneof: "detail", T: () => InBattleMechanicusSettleInfo },
            { no: 512, name: "chess_settle_info", kind: "message", oneof: "detail", T: () => InBattleChessSettleInfo },
            { no: 520, name: "irodori_chess_settle_info", kind: "message", oneof: "detail", T: () => InBattleIrodoriChessSettleInfo }
        ]);
    }
    create(value?: PartialMessage<MultistagePlaySettleNotify>): MultistagePlaySettleNotify {
        const message = { groupId: 0, playIndex: 0, detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultistagePlaySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultistagePlaySettleNotify): MultistagePlaySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 group_id */ 3:
                    message.groupId = reader.uint32();
                    break;
                case /* uint32 play_index */ 9:
                    message.playIndex = reader.uint32();
                    break;
                case /* InBattleMechanicusSettleInfo mechanicus_settle_info */ 649:
                    message.detail = {
                        oneofKind: "mechanicusSettleInfo",
                        mechanicusSettleInfo: InBattleMechanicusSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).mechanicusSettleInfo)
                    };
                    break;
                case /* InBattleChessSettleInfo chess_settle_info */ 512:
                    message.detail = {
                        oneofKind: "chessSettleInfo",
                        chessSettleInfo: InBattleChessSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).chessSettleInfo)
                    };
                    break;
                case /* InBattleIrodoriChessSettleInfo irodori_chess_settle_info */ 520:
                    message.detail = {
                        oneofKind: "irodoriChessSettleInfo",
                        irodoriChessSettleInfo: InBattleIrodoriChessSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).irodoriChessSettleInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultistagePlaySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 group_id = 3; */
        if (message.groupId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.groupId);
        /* uint32 play_index = 9; */
        if (message.playIndex !== 0)
            writer.tag(9, WireType.Varint).uint32(message.playIndex);
        /* InBattleMechanicusSettleInfo mechanicus_settle_info = 649; */
        if (message.detail.oneofKind === "mechanicusSettleInfo")
            InBattleMechanicusSettleInfo.internalBinaryWrite(message.detail.mechanicusSettleInfo, writer.tag(649, WireType.LengthDelimited).fork(), options).join();
        /* InBattleChessSettleInfo chess_settle_info = 512; */
        if (message.detail.oneofKind === "chessSettleInfo")
            InBattleChessSettleInfo.internalBinaryWrite(message.detail.chessSettleInfo, writer.tag(512, WireType.LengthDelimited).fork(), options).join();
        /* InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 520; */
        if (message.detail.oneofKind === "irodoriChessSettleInfo")
            InBattleIrodoriChessSettleInfo.internalBinaryWrite(message.detail.irodoriChessSettleInfo, writer.tag(520, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MultistagePlaySettleNotify
 */
export const MultistagePlaySettleNotify = new MultistagePlaySettleNotify$Type();
