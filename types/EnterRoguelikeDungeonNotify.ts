/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EnterRoguelikeDungeonNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./RogueCellInfo";
import * as dependency_2 from "./RoguelikeRuneRecord";
import * as pb_1 from "google-protobuf";
export class EnterRoguelikeDungeonNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_mist_clear?: boolean;
        dungeon_weight_config_id?: number;
        rune_record_list?: dependency_2.RoguelikeRuneRecord[];
        onstage_avatar_guid_list?: number[];
        is_first_enter?: boolean;
        explored_cell_list?: number[];
        cell_info_map?: Map<number, dependency_1.RogueCellInfo>;
        dungeon_id?: number;
        refresh_cost_item_count?: number;
        bonus_resource_prop?: number;
        revise_monster_level?: number;
        stage_id?: number;
        backstage_avatar_guid_list?: number[];
        cur_cell_id?: number;
        refresh_cost_item_id?: number;
        cur_level?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 9, 3, 10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_mist_clear" in data && data.is_mist_clear != undefined) {
                this.is_mist_clear = data.is_mist_clear;
            }
            if ("dungeon_weight_config_id" in data && data.dungeon_weight_config_id != undefined) {
                this.dungeon_weight_config_id = data.dungeon_weight_config_id;
            }
            if ("rune_record_list" in data && data.rune_record_list != undefined) {
                this.rune_record_list = data.rune_record_list;
            }
            if ("onstage_avatar_guid_list" in data && data.onstage_avatar_guid_list != undefined) {
                this.onstage_avatar_guid_list = data.onstage_avatar_guid_list;
            }
            if ("is_first_enter" in data && data.is_first_enter != undefined) {
                this.is_first_enter = data.is_first_enter;
            }
            if ("explored_cell_list" in data && data.explored_cell_list != undefined) {
                this.explored_cell_list = data.explored_cell_list;
            }
            if ("cell_info_map" in data && data.cell_info_map != undefined) {
                this.cell_info_map = data.cell_info_map;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("refresh_cost_item_count" in data && data.refresh_cost_item_count != undefined) {
                this.refresh_cost_item_count = data.refresh_cost_item_count;
            }
            if ("bonus_resource_prop" in data && data.bonus_resource_prop != undefined) {
                this.bonus_resource_prop = data.bonus_resource_prop;
            }
            if ("revise_monster_level" in data && data.revise_monster_level != undefined) {
                this.revise_monster_level = data.revise_monster_level;
            }
            if ("stage_id" in data && data.stage_id != undefined) {
                this.stage_id = data.stage_id;
            }
            if ("backstage_avatar_guid_list" in data && data.backstage_avatar_guid_list != undefined) {
                this.backstage_avatar_guid_list = data.backstage_avatar_guid_list;
            }
            if ("cur_cell_id" in data && data.cur_cell_id != undefined) {
                this.cur_cell_id = data.cur_cell_id;
            }
            if ("refresh_cost_item_id" in data && data.refresh_cost_item_id != undefined) {
                this.refresh_cost_item_id = data.refresh_cost_item_id;
            }
            if ("cur_level" in data && data.cur_level != undefined) {
                this.cur_level = data.cur_level;
            }
        }
        if (!this.cell_info_map)
            this.cell_info_map = new Map();
    }
    get is_mist_clear() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set is_mist_clear(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get dungeon_weight_config_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set dungeon_weight_config_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get rune_record_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.RoguelikeRuneRecord, 6) as dependency_2.RoguelikeRuneRecord[];
    }
    set rune_record_list(value: dependency_2.RoguelikeRuneRecord[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get onstage_avatar_guid_list() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set onstage_avatar_guid_list(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get is_first_enter() {
        return pb_1.Message.getFieldWithDefault(this, 205, false) as boolean;
    }
    set is_first_enter(value: boolean) {
        pb_1.Message.setField(this, 205, value);
    }
    get explored_cell_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set explored_cell_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get cell_info_map() {
        return pb_1.Message.getField(this, 11) as any as Map<number, dependency_1.RogueCellInfo>;
    }
    set cell_info_map(value: Map<number, dependency_1.RogueCellInfo>) {
        pb_1.Message.setField(this, 11, value as any);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get refresh_cost_item_count() {
        return pb_1.Message.getFieldWithDefault(this, 1999, 0) as number;
    }
    set refresh_cost_item_count(value: number) {
        pb_1.Message.setField(this, 1999, value);
    }
    get bonus_resource_prop() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set bonus_resource_prop(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get revise_monster_level() {
        return pb_1.Message.getFieldWithDefault(this, 1541, 0) as number;
    }
    set revise_monster_level(value: number) {
        pb_1.Message.setField(this, 1541, value);
    }
    get stage_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set stage_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get backstage_avatar_guid_list() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
    }
    set backstage_avatar_guid_list(value: number[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get cur_cell_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set cur_cell_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get refresh_cost_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set refresh_cost_item_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get cur_level() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set cur_level(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        is_mist_clear?: boolean;
        dungeon_weight_config_id?: number;
        rune_record_list?: ReturnType<typeof dependency_2.RoguelikeRuneRecord.prototype.toObject>[];
        onstage_avatar_guid_list?: number[];
        is_first_enter?: boolean;
        explored_cell_list?: number[];
        cell_info_map?: {
            [key: number]: ReturnType<typeof dependency_1.RogueCellInfo.prototype.toObject>;
        };
        dungeon_id?: number;
        refresh_cost_item_count?: number;
        bonus_resource_prop?: number;
        revise_monster_level?: number;
        stage_id?: number;
        backstage_avatar_guid_list?: number[];
        cur_cell_id?: number;
        refresh_cost_item_id?: number;
        cur_level?: number;
    }): EnterRoguelikeDungeonNotify {
        const message = new EnterRoguelikeDungeonNotify({});
        if (data.is_mist_clear != null) {
            message.is_mist_clear = data.is_mist_clear;
        }
        if (data.dungeon_weight_config_id != null) {
            message.dungeon_weight_config_id = data.dungeon_weight_config_id;
        }
        if (data.rune_record_list != null) {
            message.rune_record_list = data.rune_record_list.map(item => dependency_2.RoguelikeRuneRecord.fromObject(item));
        }
        if (data.onstage_avatar_guid_list != null) {
            message.onstage_avatar_guid_list = data.onstage_avatar_guid_list;
        }
        if (data.is_first_enter != null) {
            message.is_first_enter = data.is_first_enter;
        }
        if (data.explored_cell_list != null) {
            message.explored_cell_list = data.explored_cell_list;
        }
        if (typeof data.cell_info_map == "object") {
            message.cell_info_map = new Map(Object.entries(data.cell_info_map).map(([key, value]) => [Number(key), dependency_1.RogueCellInfo.fromObject(value)]));
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.refresh_cost_item_count != null) {
            message.refresh_cost_item_count = data.refresh_cost_item_count;
        }
        if (data.bonus_resource_prop != null) {
            message.bonus_resource_prop = data.bonus_resource_prop;
        }
        if (data.revise_monster_level != null) {
            message.revise_monster_level = data.revise_monster_level;
        }
        if (data.stage_id != null) {
            message.stage_id = data.stage_id;
        }
        if (data.backstage_avatar_guid_list != null) {
            message.backstage_avatar_guid_list = data.backstage_avatar_guid_list;
        }
        if (data.cur_cell_id != null) {
            message.cur_cell_id = data.cur_cell_id;
        }
        if (data.refresh_cost_item_id != null) {
            message.refresh_cost_item_id = data.refresh_cost_item_id;
        }
        if (data.cur_level != null) {
            message.cur_level = data.cur_level;
        }
        return message;
    }
    toObject() {
        const data: {
            is_mist_clear?: boolean;
            dungeon_weight_config_id?: number;
            rune_record_list?: ReturnType<typeof dependency_2.RoguelikeRuneRecord.prototype.toObject>[];
            onstage_avatar_guid_list?: number[];
            is_first_enter?: boolean;
            explored_cell_list?: number[];
            cell_info_map?: {
                [key: number]: ReturnType<typeof dependency_1.RogueCellInfo.prototype.toObject>;
            };
            dungeon_id?: number;
            refresh_cost_item_count?: number;
            bonus_resource_prop?: number;
            revise_monster_level?: number;
            stage_id?: number;
            backstage_avatar_guid_list?: number[];
            cur_cell_id?: number;
            refresh_cost_item_id?: number;
            cur_level?: number;
        } = {};
        if (this.is_mist_clear != null) {
            data.is_mist_clear = this.is_mist_clear;
        }
        if (this.dungeon_weight_config_id != null) {
            data.dungeon_weight_config_id = this.dungeon_weight_config_id;
        }
        if (this.rune_record_list != null) {
            data.rune_record_list = this.rune_record_list.map((item: dependency_2.RoguelikeRuneRecord) => item.toObject());
        }
        if (this.onstage_avatar_guid_list != null) {
            data.onstage_avatar_guid_list = this.onstage_avatar_guid_list;
        }
        if (this.is_first_enter != null) {
            data.is_first_enter = this.is_first_enter;
        }
        if (this.explored_cell_list != null) {
            data.explored_cell_list = this.explored_cell_list;
        }
        if (this.cell_info_map.size > 0) {
            data.cell_info_map = (Object.fromEntries)((Array.from)(this.cell_info_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.refresh_cost_item_count != null) {
            data.refresh_cost_item_count = this.refresh_cost_item_count;
        }
        if (this.bonus_resource_prop != null) {
            data.bonus_resource_prop = this.bonus_resource_prop;
        }
        if (this.revise_monster_level != null) {
            data.revise_monster_level = this.revise_monster_level;
        }
        if (this.stage_id != null) {
            data.stage_id = this.stage_id;
        }
        if (this.backstage_avatar_guid_list != null) {
            data.backstage_avatar_guid_list = this.backstage_avatar_guid_list;
        }
        if (this.cur_cell_id != null) {
            data.cur_cell_id = this.cur_cell_id;
        }
        if (this.refresh_cost_item_id != null) {
            data.refresh_cost_item_id = this.refresh_cost_item_id;
        }
        if (this.cur_level != null) {
            data.cur_level = this.cur_level;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_mist_clear != false)
            writer.writeBool(14, this.is_mist_clear);
        if (this.dungeon_weight_config_id != 0)
            writer.writeUint32(2, this.dungeon_weight_config_id);
        if (this.rune_record_list.length)
            writer.writeRepeatedMessage(6, this.rune_record_list, (item: dependency_2.RoguelikeRuneRecord) => item.serialize(writer));
        if (this.onstage_avatar_guid_list.length)
            writer.writePackedUint64(9, this.onstage_avatar_guid_list);
        if (this.is_first_enter != false)
            writer.writeBool(205, this.is_first_enter);
        if (this.explored_cell_list.length)
            writer.writePackedUint32(3, this.explored_cell_list);
        for (const [key, value] of this.cell_info_map) {
            writer.writeMessage(11, this.cell_info_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.dungeon_id != 0)
            writer.writeUint32(1, this.dungeon_id);
        if (this.refresh_cost_item_count != 0)
            writer.writeUint32(1999, this.refresh_cost_item_count);
        if (this.bonus_resource_prop != 0)
            writer.writeFloat(13, this.bonus_resource_prop);
        if (this.revise_monster_level != 0)
            writer.writeUint32(1541, this.revise_monster_level);
        if (this.stage_id != 0)
            writer.writeUint32(15, this.stage_id);
        if (this.backstage_avatar_guid_list.length)
            writer.writePackedUint64(10, this.backstage_avatar_guid_list);
        if (this.cur_cell_id != 0)
            writer.writeUint32(12, this.cur_cell_id);
        if (this.refresh_cost_item_id != 0)
            writer.writeUint32(7, this.refresh_cost_item_id);
        if (this.cur_level != 0)
            writer.writeUint32(8, this.cur_level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnterRoguelikeDungeonNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnterRoguelikeDungeonNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.is_mist_clear = reader.readBool();
                    break;
                case 2:
                    message.dungeon_weight_config_id = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.rune_record_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.RoguelikeRuneRecord.deserialize(reader), dependency_2.RoguelikeRuneRecord));
                    break;
                case 9:
                    message.onstage_avatar_guid_list = reader.readPackedUint64();
                    break;
                case 205:
                    message.is_first_enter = reader.readBool();
                    break;
                case 3:
                    message.explored_cell_list = reader.readPackedUint32();
                    break;
                case 11:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cell_info_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.RogueCellInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 1:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 1999:
                    message.refresh_cost_item_count = reader.readUint32();
                    break;
                case 13:
                    message.bonus_resource_prop = reader.readFloat();
                    break;
                case 1541:
                    message.revise_monster_level = reader.readUint32();
                    break;
                case 15:
                    message.stage_id = reader.readUint32();
                    break;
                case 10:
                    message.backstage_avatar_guid_list = reader.readPackedUint64();
                    break;
                case 12:
                    message.cur_cell_id = reader.readUint32();
                    break;
                case 7:
                    message.refresh_cost_item_id = reader.readUint32();
                    break;
                case 8:
                    message.cur_level = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EnterRoguelikeDungeonNotify {
        return EnterRoguelikeDungeonNotify.deserialize(bytes);
    }
}
