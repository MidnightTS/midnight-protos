// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "OpActivityInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BonusOpActivityInfo } from "./BonusOpActivityInfo";
/**
 * @generated from protobuf message OpActivityInfo
 */
export interface OpActivityInfo {
    /**
     * @generated from protobuf field: uint32 activity_id = 15;
     */
    activityId: number;
    /**
     * @generated from protobuf field: uint32 schedule_id = 14;
     */
    scheduleId: number;
    /**
     * @generated from protobuf field: uint32 end_time = 4;
     */
    endTime: number;
    /**
     * @generated from protobuf field: uint32 begin_time = 13;
     */
    beginTime: number;
    /**
     * @generated from protobuf field: bool is_has_change = 7;
     */
    isHasChange: boolean;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "bonusInfo";
        /**
         * @generated from protobuf field: BonusOpActivityInfo bonus_info = 6;
         */
        bonusInfo: BonusOpActivityInfo;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class OpActivityInfo$Type extends MessageType<OpActivityInfo> {
    constructor() {
        super("OpActivityInfo", [
            { no: 15, name: "activity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "end_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "begin_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_has_change", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "bonus_info", kind: "message", oneof: "detail", T: () => BonusOpActivityInfo }
        ]);
    }
    create(value?: PartialMessage<OpActivityInfo>): OpActivityInfo {
        const message = { activityId: 0, scheduleId: 0, endTime: 0, beginTime: 0, isHasChange: false, detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpActivityInfo): OpActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                case /* uint32 end_time */ 4:
                    message.endTime = reader.uint32();
                    break;
                case /* uint32 begin_time */ 13:
                    message.beginTime = reader.uint32();
                    break;
                case /* bool is_has_change */ 7:
                    message.isHasChange = reader.bool();
                    break;
                case /* BonusOpActivityInfo bonus_info */ 6:
                    message.detail = {
                        oneofKind: "bonusInfo",
                        bonusInfo: BonusOpActivityInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).bonusInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 activity_id = 15; */
        if (message.activityId !== 0)
            writer.tag(15, WireType.Varint).uint32(message.activityId);
        /* uint32 schedule_id = 14; */
        if (message.scheduleId !== 0)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        /* uint32 end_time = 4; */
        if (message.endTime !== 0)
            writer.tag(4, WireType.Varint).uint32(message.endTime);
        /* uint32 begin_time = 13; */
        if (message.beginTime !== 0)
            writer.tag(13, WireType.Varint).uint32(message.beginTime);
        /* bool is_has_change = 7; */
        if (message.isHasChange !== false)
            writer.tag(7, WireType.Varint).bool(message.isHasChange);
        /* BonusOpActivityInfo bonus_info = 6; */
        if (message.detail.oneofKind === "bonusInfo")
            BonusOpActivityInfo.internalBinaryWrite(message.detail.bonusInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message OpActivityInfo
 */
export const OpActivityInfo = new OpActivityInfo$Type();
