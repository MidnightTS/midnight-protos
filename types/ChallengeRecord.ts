/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChallengeRecord.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChallengeRecord extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        challenge_record_type?: number;
        challenge_index?: number;
        challenge_id?: number;
        best_value?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("challenge_record_type" in data && data.challenge_record_type != undefined) {
                this.challenge_record_type = data.challenge_record_type;
            }
            if ("challenge_index" in data && data.challenge_index != undefined) {
                this.challenge_index = data.challenge_index;
            }
            if ("challenge_id" in data && data.challenge_id != undefined) {
                this.challenge_id = data.challenge_id;
            }
            if ("best_value" in data && data.best_value != undefined) {
                this.best_value = data.best_value;
            }
        }
    }
    get challenge_record_type() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set challenge_record_type(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get challenge_index() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set challenge_index(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get challenge_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set challenge_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get best_value() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set best_value(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        challenge_record_type?: number;
        challenge_index?: number;
        challenge_id?: number;
        best_value?: number;
    }): ChallengeRecord {
        const message = new ChallengeRecord({});
        if (data.challenge_record_type != null) {
            message.challenge_record_type = data.challenge_record_type;
        }
        if (data.challenge_index != null) {
            message.challenge_index = data.challenge_index;
        }
        if (data.challenge_id != null) {
            message.challenge_id = data.challenge_id;
        }
        if (data.best_value != null) {
            message.best_value = data.best_value;
        }
        return message;
    }
    toObject() {
        const data: {
            challenge_record_type?: number;
            challenge_index?: number;
            challenge_id?: number;
            best_value?: number;
        } = {};
        if (this.challenge_record_type != null) {
            data.challenge_record_type = this.challenge_record_type;
        }
        if (this.challenge_index != null) {
            data.challenge_index = this.challenge_index;
        }
        if (this.challenge_id != null) {
            data.challenge_id = this.challenge_id;
        }
        if (this.best_value != null) {
            data.best_value = this.best_value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.challenge_record_type != 0)
            writer.writeUint32(14, this.challenge_record_type);
        if (this.challenge_index != 0)
            writer.writeUint32(15, this.challenge_index);
        if (this.challenge_id != 0)
            writer.writeUint32(1, this.challenge_id);
        if (this.best_value != 0)
            writer.writeUint32(8, this.best_value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChallengeRecord {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChallengeRecord();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.challenge_record_type = reader.readUint32();
                    break;
                case 15:
                    message.challenge_index = reader.readUint32();
                    break;
                case 1:
                    message.challenge_id = reader.readUint32();
                    break;
                case 8:
                    message.best_value = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChallengeRecord {
        return ChallengeRecord.deserialize(bytes);
    }
}
