/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BuyGoodsReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ShopGoods";
import * as pb_1 from "google-protobuf";
export class BuyGoodsReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        buy_count?: number;
        goods?: dependency_1.ShopGoods;
        shop_type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("buy_count" in data && data.buy_count != undefined) {
                this.buy_count = data.buy_count;
            }
            if ("goods" in data && data.goods != undefined) {
                this.goods = data.goods;
            }
            if ("shop_type" in data && data.shop_type != undefined) {
                this.shop_type = data.shop_type;
            }
        }
    }
    get buy_count() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set buy_count(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get goods() {
        return pb_1.Message.getWrapperField(this, dependency_1.ShopGoods, 15) as dependency_1.ShopGoods;
    }
    set goods(value: dependency_1.ShopGoods) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_goods() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get shop_type() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set shop_type(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        buy_count?: number;
        goods?: ReturnType<typeof dependency_1.ShopGoods.prototype.toObject>;
        shop_type?: number;
    }): BuyGoodsReq {
        const message = new BuyGoodsReq({});
        if (data.buy_count != null) {
            message.buy_count = data.buy_count;
        }
        if (data.goods != null) {
            message.goods = dependency_1.ShopGoods.fromObject(data.goods);
        }
        if (data.shop_type != null) {
            message.shop_type = data.shop_type;
        }
        return message;
    }
    toObject() {
        const data: {
            buy_count?: number;
            goods?: ReturnType<typeof dependency_1.ShopGoods.prototype.toObject>;
            shop_type?: number;
        } = {};
        if (this.buy_count != null) {
            data.buy_count = this.buy_count;
        }
        if (this.goods != null) {
            data.goods = this.goods.toObject();
        }
        if (this.shop_type != null) {
            data.shop_type = this.shop_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.buy_count != 0)
            writer.writeUint32(14, this.buy_count);
        if (this.has_goods)
            writer.writeMessage(15, this.goods, () => this.goods.serialize(writer));
        if (this.shop_type != 0)
            writer.writeUint32(7, this.shop_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BuyGoodsReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BuyGoodsReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.buy_count = reader.readUint32();
                    break;
                case 15:
                    reader.readMessage(message.goods, () => message.goods = dependency_1.ShopGoods.deserialize(reader));
                    break;
                case 7:
                    message.shop_type = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BuyGoodsReq {
        return BuyGoodsReq.deserialize(bytes);
    }
}
