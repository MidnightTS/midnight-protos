/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DungeonPlayerDieNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./PlayerDieType";
import * as dependency_2 from "./StrengthenPointData";
import * as pb_1 from "google-protobuf";
export class DungeonPlayerDieNotify extends pb_1.Message {
    #one_of_decls: number[][] = [[4, 8]];
    constructor(data?: any[] | ({
        strengthen_point_data_map?: Map<number, dependency_2.StrengthenPointData>;
        wait_time?: number;
        dungeon_id?: number;
        murderer_entity_id?: number;
        die_type?: dependency_1.PlayerDieType;
        revive_count?: number;
    } & (({
        monster_id?: number;
        gadget_id?: never;
    } | {
        monster_id?: never;
        gadget_id?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("strengthen_point_data_map" in data && data.strengthen_point_data_map != undefined) {
                this.strengthen_point_data_map = data.strengthen_point_data_map;
            }
            if ("wait_time" in data && data.wait_time != undefined) {
                this.wait_time = data.wait_time;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("murderer_entity_id" in data && data.murderer_entity_id != undefined) {
                this.murderer_entity_id = data.murderer_entity_id;
            }
            if ("die_type" in data && data.die_type != undefined) {
                this.die_type = data.die_type;
            }
            if ("revive_count" in data && data.revive_count != undefined) {
                this.revive_count = data.revive_count;
            }
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("gadget_id" in data && data.gadget_id != undefined) {
                this.gadget_id = data.gadget_id;
            }
        }
        if (!this.strengthen_point_data_map)
            this.strengthen_point_data_map = new Map();
    }
    get strengthen_point_data_map() {
        return pb_1.Message.getField(this, 15) as any as Map<number, dependency_2.StrengthenPointData>;
    }
    set strengthen_point_data_map(value: Map<number, dependency_2.StrengthenPointData>) {
        pb_1.Message.setField(this, 15, value as any);
    }
    get wait_time() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set wait_time(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get murderer_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set murderer_entity_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get die_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE) as dependency_1.PlayerDieType;
    }
    set die_type(value: dependency_1.PlayerDieType) {
        pb_1.Message.setField(this, 3, value);
    }
    get revive_count() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set revive_count(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set monster_id(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_monster_id() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set gadget_id(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
    }
    get has_gadget_id() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get entity() {
        const cases: {
            [index: number]: "none" | "monster_id" | "gadget_id";
        } = {
            0: "none",
            4: "monster_id",
            8: "gadget_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4, 8])];
    }
    static fromObject(data: {
        strengthen_point_data_map?: {
            [key: number]: ReturnType<typeof dependency_2.StrengthenPointData.prototype.toObject>;
        };
        wait_time?: number;
        dungeon_id?: number;
        murderer_entity_id?: number;
        die_type?: dependency_1.PlayerDieType;
        revive_count?: number;
        monster_id?: number;
        gadget_id?: number;
    }): DungeonPlayerDieNotify {
        const message = new DungeonPlayerDieNotify({});
        if (typeof data.strengthen_point_data_map == "object") {
            message.strengthen_point_data_map = new Map(Object.entries(data.strengthen_point_data_map).map(([key, value]) => [Number(key), dependency_2.StrengthenPointData.fromObject(value)]));
        }
        if (data.wait_time != null) {
            message.wait_time = data.wait_time;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.murderer_entity_id != null) {
            message.murderer_entity_id = data.murderer_entity_id;
        }
        if (data.die_type != null) {
            message.die_type = data.die_type;
        }
        if (data.revive_count != null) {
            message.revive_count = data.revive_count;
        }
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.gadget_id != null) {
            message.gadget_id = data.gadget_id;
        }
        return message;
    }
    toObject() {
        const data: {
            strengthen_point_data_map?: {
                [key: number]: ReturnType<typeof dependency_2.StrengthenPointData.prototype.toObject>;
            };
            wait_time?: number;
            dungeon_id?: number;
            murderer_entity_id?: number;
            die_type?: dependency_1.PlayerDieType;
            revive_count?: number;
            monster_id?: number;
            gadget_id?: number;
        } = {};
        if (this.strengthen_point_data_map.size > 0) {
            data.strengthen_point_data_map = (Object.fromEntries)((Array.from)(this.strengthen_point_data_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.wait_time != null) {
            data.wait_time = this.wait_time;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.murderer_entity_id != null) {
            data.murderer_entity_id = this.murderer_entity_id;
        }
        if (this.die_type != null) {
            data.die_type = this.die_type;
        }
        if (this.revive_count != null) {
            data.revive_count = this.revive_count;
        }
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.gadget_id != null) {
            data.gadget_id = this.gadget_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.strengthen_point_data_map) {
            writer.writeMessage(15, this.strengthen_point_data_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.wait_time != 0)
            writer.writeUint32(1, this.wait_time);
        if (this.dungeon_id != 0)
            writer.writeUint32(9, this.dungeon_id);
        if (this.murderer_entity_id != 0)
            writer.writeUint32(13, this.murderer_entity_id);
        if (this.die_type != dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE)
            writer.writeEnum(3, this.die_type);
        if (this.revive_count != 0)
            writer.writeUint32(6, this.revive_count);
        if (this.has_monster_id)
            writer.writeUint32(4, this.monster_id);
        if (this.has_gadget_id)
            writer.writeUint32(8, this.gadget_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DungeonPlayerDieNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DungeonPlayerDieNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.strengthen_point_data_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_2.StrengthenPointData.deserialize(reader));
                        return value;
                    }));
                    break;
                case 1:
                    message.wait_time = reader.readUint32();
                    break;
                case 9:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 13:
                    message.murderer_entity_id = reader.readUint32();
                    break;
                case 3:
                    message.die_type = reader.readEnum();
                    break;
                case 6:
                    message.revive_count = reader.readUint32();
                    break;
                case 4:
                    message.monster_id = reader.readUint32();
                    break;
                case 8:
                    message.gadget_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DungeonPlayerDieNotify {
        return DungeonPlayerDieNotify.deserialize(bytes);
    }
}
