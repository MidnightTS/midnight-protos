"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ItemAddHintNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemAddHintNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ItemAddHintNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ItemHint");
const dependency_2 = require("./Vector");
const pb_1 = require("google-protobuf");
class ItemAddHintNotify extends pb_1.Message {
    constructor(data) {
        super();
        _ItemAddHintNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 8], __classPrivateFieldGet(this, _ItemAddHintNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_position_valid" in data && data.is_position_valid != undefined) {
                this.is_position_valid = data.is_position_valid;
            }
            if ("quest_id" in data && data.quest_id != undefined) {
                this.quest_id = data.quest_id;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("is_general_reward_hiden" in data && data.is_general_reward_hiden != undefined) {
                this.is_general_reward_hiden = data.is_general_reward_hiden;
            }
            if ("item_list" in data && data.item_list != undefined) {
                this.item_list = data.item_list;
            }
            if ("is_transfered_from_avatar_card" in data && data.is_transfered_from_avatar_card != undefined) {
                this.is_transfered_from_avatar_card = data.is_transfered_from_avatar_card;
            }
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("overflow_transformed_item_list" in data && data.overflow_transformed_item_list != undefined) {
                this.overflow_transformed_item_list = data.overflow_transformed_item_list;
            }
        }
    }
    get is_position_valid() {
        return pb_1.Message.getFieldWithDefault(this, 14, false);
    }
    set is_position_valid(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set quest_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set reason(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_general_reward_hiden() {
        return pb_1.Message.getFieldWithDefault(this, 15, false);
    }
    set is_general_reward_hiden(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ItemHint, 10);
    }
    set item_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get is_transfered_from_avatar_card() {
        return pb_1.Message.getFieldWithDefault(this, 12, false);
    }
    set is_transfered_from_avatar_card(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get position() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 9);
    }
    set position(value) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_position() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get overflow_transformed_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ItemHint, 8);
    }
    set overflow_transformed_item_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data) {
        const message = new ItemAddHintNotify({});
        if (data.is_position_valid != null) {
            message.is_position_valid = data.is_position_valid;
        }
        if (data.quest_id != null) {
            message.quest_id = data.quest_id;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.is_general_reward_hiden != null) {
            message.is_general_reward_hiden = data.is_general_reward_hiden;
        }
        if (data.item_list != null) {
            message.item_list = data.item_list.map(item => dependency_1.ItemHint.fromObject(item));
        }
        if (data.is_transfered_from_avatar_card != null) {
            message.is_transfered_from_avatar_card = data.is_transfered_from_avatar_card;
        }
        if (data.position != null) {
            message.position = dependency_2.Vector.fromObject(data.position);
        }
        if (data.overflow_transformed_item_list != null) {
            message.overflow_transformed_item_list = data.overflow_transformed_item_list.map(item => dependency_1.ItemHint.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_position_valid != null) {
            data.is_position_valid = this.is_position_valid;
        }
        if (this.quest_id != null) {
            data.quest_id = this.quest_id;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.is_general_reward_hiden != null) {
            data.is_general_reward_hiden = this.is_general_reward_hiden;
        }
        if (this.item_list != null) {
            data.item_list = this.item_list.map((item) => item.toObject());
        }
        if (this.is_transfered_from_avatar_card != null) {
            data.is_transfered_from_avatar_card = this.is_transfered_from_avatar_card;
        }
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        if (this.overflow_transformed_item_list != null) {
            data.overflow_transformed_item_list = this.overflow_transformed_item_list.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_position_valid != false)
            writer.writeBool(14, this.is_position_valid);
        if (this.quest_id != 0)
            writer.writeUint32(3, this.quest_id);
        if (this.reason != 0)
            writer.writeUint32(6, this.reason);
        if (this.is_general_reward_hiden != false)
            writer.writeBool(15, this.is_general_reward_hiden);
        if (this.item_list.length)
            writer.writeRepeatedMessage(10, this.item_list, (item) => item.serialize(writer));
        if (this.is_transfered_from_avatar_card != false)
            writer.writeBool(12, this.is_transfered_from_avatar_card);
        if (this.has_position)
            writer.writeMessage(9, this.position, () => this.position.serialize(writer));
        if (this.overflow_transformed_item_list.length)
            writer.writeRepeatedMessage(8, this.overflow_transformed_item_list, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemAddHintNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.is_position_valid = reader.readBool();
                    break;
                case 3:
                    message.quest_id = reader.readUint32();
                    break;
                case 6:
                    message.reason = reader.readUint32();
                    break;
                case 15:
                    message.is_general_reward_hiden = reader.readBool();
                    break;
                case 10:
                    reader.readMessage(message.item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_1.ItemHint.deserialize(reader), dependency_1.ItemHint));
                    break;
                case 12:
                    message.is_transfered_from_avatar_card = reader.readBool();
                    break;
                case 9:
                    reader.readMessage(message.position, () => message.position = dependency_2.Vector.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.overflow_transformed_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.ItemHint.deserialize(reader), dependency_1.ItemHint));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ItemAddHintNotify.deserialize(bytes);
    }
}
exports.ItemAddHintNotify = ItemAddHintNotify;
_ItemAddHintNotify_one_of_decls = new WeakMap();
