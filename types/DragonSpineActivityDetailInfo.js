"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DragonSpineActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DragonSpineActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DragonSpineActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./DragonSpineChapterInfo");
const pb_1 = require("google-protobuf");
class DragonSpineActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _DragonSpineActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], __classPrivateFieldGet(this, _DragonSpineActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("chapter_info_list" in data && data.chapter_info_list != undefined) {
                this.chapter_info_list = data.chapter_info_list;
            }
            if ("weapon_enhance_level" in data && data.weapon_enhance_level != undefined) {
                this.weapon_enhance_level = data.weapon_enhance_level;
            }
            if ("content_finish_time" in data && data.content_finish_time != undefined) {
                this.content_finish_time = data.content_finish_time;
            }
            if ("shimmering_essence" in data && data.shimmering_essence != undefined) {
                this.shimmering_essence = data.shimmering_essence;
            }
            if ("warm_essence" in data && data.warm_essence != undefined) {
                this.warm_essence = data.warm_essence;
            }
            if ("wondrous_essence" in data && data.wondrous_essence != undefined) {
                this.wondrous_essence = data.wondrous_essence;
            }
        }
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 10, false);
    }
    set is_content_closed(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get chapter_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DragonSpineChapterInfo, 4);
    }
    set chapter_info_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get weapon_enhance_level() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set weapon_enhance_level(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get content_finish_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set content_finish_time(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get shimmering_essence() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set shimmering_essence(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get warm_essence() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set warm_essence(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get wondrous_essence() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set wondrous_essence(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new DragonSpineActivityDetailInfo({});
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (data.chapter_info_list != null) {
            message.chapter_info_list = data.chapter_info_list.map(item => dependency_1.DragonSpineChapterInfo.fromObject(item));
        }
        if (data.weapon_enhance_level != null) {
            message.weapon_enhance_level = data.weapon_enhance_level;
        }
        if (data.content_finish_time != null) {
            message.content_finish_time = data.content_finish_time;
        }
        if (data.shimmering_essence != null) {
            message.shimmering_essence = data.shimmering_essence;
        }
        if (data.warm_essence != null) {
            message.warm_essence = data.warm_essence;
        }
        if (data.wondrous_essence != null) {
            message.wondrous_essence = data.wondrous_essence;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.chapter_info_list != null) {
            data.chapter_info_list = this.chapter_info_list.map((item) => item.toObject());
        }
        if (this.weapon_enhance_level != null) {
            data.weapon_enhance_level = this.weapon_enhance_level;
        }
        if (this.content_finish_time != null) {
            data.content_finish_time = this.content_finish_time;
        }
        if (this.shimmering_essence != null) {
            data.shimmering_essence = this.shimmering_essence;
        }
        if (this.warm_essence != null) {
            data.warm_essence = this.warm_essence;
        }
        if (this.wondrous_essence != null) {
            data.wondrous_essence = this.wondrous_essence;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_content_closed != false)
            writer.writeBool(10, this.is_content_closed);
        if (this.chapter_info_list.length)
            writer.writeRepeatedMessage(4, this.chapter_info_list, (item) => item.serialize(writer));
        if (this.weapon_enhance_level != 0)
            writer.writeUint32(2, this.weapon_enhance_level);
        if (this.content_finish_time != 0)
            writer.writeUint32(15, this.content_finish_time);
        if (this.shimmering_essence != 0)
            writer.writeUint32(13, this.shimmering_essence);
        if (this.warm_essence != 0)
            writer.writeUint32(11, this.warm_essence);
        if (this.wondrous_essence != 0)
            writer.writeUint32(7, this.wondrous_essence);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DragonSpineActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.is_content_closed = reader.readBool();
                    break;
                case 4:
                    reader.readMessage(message.chapter_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.DragonSpineChapterInfo.deserialize(reader), dependency_1.DragonSpineChapterInfo));
                    break;
                case 2:
                    message.weapon_enhance_level = reader.readUint32();
                    break;
                case 15:
                    message.content_finish_time = reader.readUint32();
                    break;
                case 13:
                    message.shimmering_essence = reader.readUint32();
                    break;
                case 11:
                    message.warm_essence = reader.readUint32();
                    break;
                case 7:
                    message.wondrous_essence = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DragonSpineActivityDetailInfo.deserialize(bytes);
    }
}
exports.DragonSpineActivityDetailInfo = DragonSpineActivityDetailInfo;
_DragonSpineActivityDetailInfo_one_of_decls = new WeakMap();
