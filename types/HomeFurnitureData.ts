// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "HomeFurnitureData.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./Vector";
/**
 * @generated from protobuf message HomeFurnitureData
 */
export interface HomeFurnitureData {
    /**
     * @generated from protobuf field: uint32 furniture_id = 8;
     */
    furnitureId: number;
    /**
     * @generated from protobuf field: int32 parent_furniture_index = 15;
     */
    parentFurnitureIndex: number;
    /**
     * @generated from protobuf field: uint32 guid = 12;
     */
    guid: number;
    /**
     * @generated from protobuf field: Vector spawn_rot = 6;
     */
    spawnRot?: Vector;
    /**
     * @generated from protobuf field: Vector spawn_pos = 2;
     */
    spawnPos?: Vector;
    /**
     * @generated from protobuf field: uint32 version = 11;
     */
    version: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class HomeFurnitureData$Type extends MessageType<HomeFurnitureData> {
    constructor() {
        super("HomeFurnitureData", [
            { no: 8, name: "furniture_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "parent_furniture_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "guid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "spawn_rot", kind: "message", T: () => Vector },
            { no: 2, name: "spawn_pos", kind: "message", T: () => Vector },
            { no: 11, name: "version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HomeFurnitureData>): HomeFurnitureData {
        const message = { furnitureId: 0, parentFurnitureIndex: 0, guid: 0, version: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HomeFurnitureData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HomeFurnitureData): HomeFurnitureData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 furniture_id */ 8:
                    message.furnitureId = reader.uint32();
                    break;
                case /* int32 parent_furniture_index */ 15:
                    message.parentFurnitureIndex = reader.int32();
                    break;
                case /* uint32 guid */ 12:
                    message.guid = reader.uint32();
                    break;
                case /* Vector spawn_rot */ 6:
                    message.spawnRot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.spawnRot);
                    break;
                case /* Vector spawn_pos */ 2:
                    message.spawnPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.spawnPos);
                    break;
                case /* uint32 version */ 11:
                    message.version = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HomeFurnitureData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 furniture_id = 8; */
        if (message.furnitureId !== 0)
            writer.tag(8, WireType.Varint).uint32(message.furnitureId);
        /* int32 parent_furniture_index = 15; */
        if (message.parentFurnitureIndex !== 0)
            writer.tag(15, WireType.Varint).int32(message.parentFurnitureIndex);
        /* uint32 guid = 12; */
        if (message.guid !== 0)
            writer.tag(12, WireType.Varint).uint32(message.guid);
        /* Vector spawn_rot = 6; */
        if (message.spawnRot)
            Vector.internalBinaryWrite(message.spawnRot, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* Vector spawn_pos = 2; */
        if (message.spawnPos)
            Vector.internalBinaryWrite(message.spawnPos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 version = 11; */
        if (message.version !== 0)
            writer.tag(11, WireType.Varint).uint32(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HomeFurnitureData
 */
export const HomeFurnitureData = new HomeFurnitureData$Type();
