"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReportTrackingIOInfoNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportTrackingIOInfoNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ReportTrackingIOInfoNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class ReportTrackingIOInfoNotify extends pb_1.Message {
    constructor(data) {
        super();
        _ReportTrackingIOInfoNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ReportTrackingIOInfoNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rydevicetype" in data && data.rydevicetype != undefined) {
                this.rydevicetype = data.rydevicetype;
            }
            if ("deviceid" in data && data.deviceid != undefined) {
                this.deviceid = data.deviceid;
            }
            if ("client_tz" in data && data.client_tz != undefined) {
                this.client_tz = data.client_tz;
            }
            if ("appid" in data && data.appid != undefined) {
                this.appid = data.appid;
            }
            if ("mac" in data && data.mac != undefined) {
                this.mac = data.mac;
            }
        }
    }
    get rydevicetype() {
        return pb_1.Message.getFieldWithDefault(this, 12, "");
    }
    set rydevicetype(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get deviceid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set deviceid(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get client_tz() {
        return pb_1.Message.getFieldWithDefault(this, 13, "");
    }
    set client_tz(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get appid() {
        return pb_1.Message.getFieldWithDefault(this, 14, "");
    }
    set appid(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get mac() {
        return pb_1.Message.getFieldWithDefault(this, 15, "");
    }
    set mac(value) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data) {
        const message = new ReportTrackingIOInfoNotify({});
        if (data.rydevicetype != null) {
            message.rydevicetype = data.rydevicetype;
        }
        if (data.deviceid != null) {
            message.deviceid = data.deviceid;
        }
        if (data.client_tz != null) {
            message.client_tz = data.client_tz;
        }
        if (data.appid != null) {
            message.appid = data.appid;
        }
        if (data.mac != null) {
            message.mac = data.mac;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.rydevicetype != null) {
            data.rydevicetype = this.rydevicetype;
        }
        if (this.deviceid != null) {
            data.deviceid = this.deviceid;
        }
        if (this.client_tz != null) {
            data.client_tz = this.client_tz;
        }
        if (this.appid != null) {
            data.appid = this.appid;
        }
        if (this.mac != null) {
            data.mac = this.mac;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.rydevicetype.length)
            writer.writeString(12, this.rydevicetype);
        if (this.deviceid.length)
            writer.writeString(1, this.deviceid);
        if (this.client_tz.length)
            writer.writeString(13, this.client_tz);
        if (this.appid.length)
            writer.writeString(14, this.appid);
        if (this.mac.length)
            writer.writeString(15, this.mac);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportTrackingIOInfoNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.rydevicetype = reader.readString();
                    break;
                case 1:
                    message.deviceid = reader.readString();
                    break;
                case 13:
                    message.client_tz = reader.readString();
                    break;
                case 14:
                    message.appid = reader.readString();
                    break;
                case 15:
                    message.mac = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ReportTrackingIOInfoNotify.deserialize(bytes);
    }
}
exports.ReportTrackingIOInfoNotify = ReportTrackingIOInfoNotify;
_ReportTrackingIOInfoNotify_one_of_decls = new WeakMap();
