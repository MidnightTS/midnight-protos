/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GeneralMatchInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MatchPlayerInfo";
import * as pb_1 from "google-protobuf";
export class GeneralMatchInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        match_param?: number;
        match_id?: number;
        player_list?: dependency_1.MatchPlayerInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("match_param" in data && data.match_param != undefined) {
                this.match_param = data.match_param;
            }
            if ("match_id" in data && data.match_id != undefined) {
                this.match_id = data.match_id;
            }
            if ("player_list" in data && data.player_list != undefined) {
                this.player_list = data.player_list;
            }
        }
    }
    get match_param() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set match_param(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get match_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set match_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get player_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.MatchPlayerInfo, 5) as dependency_1.MatchPlayerInfo[];
    }
    set player_list(value: dependency_1.MatchPlayerInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        match_param?: number;
        match_id?: number;
        player_list?: ReturnType<typeof dependency_1.MatchPlayerInfo.prototype.toObject>[];
    }): GeneralMatchInfo {
        const message = new GeneralMatchInfo({});
        if (data.match_param != null) {
            message.match_param = data.match_param;
        }
        if (data.match_id != null) {
            message.match_id = data.match_id;
        }
        if (data.player_list != null) {
            message.player_list = data.player_list.map(item => dependency_1.MatchPlayerInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            match_param?: number;
            match_id?: number;
            player_list?: ReturnType<typeof dependency_1.MatchPlayerInfo.prototype.toObject>[];
        } = {};
        if (this.match_param != null) {
            data.match_param = this.match_param;
        }
        if (this.match_id != null) {
            data.match_id = this.match_id;
        }
        if (this.player_list != null) {
            data.player_list = this.player_list.map((item: dependency_1.MatchPlayerInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.match_param != 0)
            writer.writeUint32(1, this.match_param);
        if (this.match_id != 0)
            writer.writeUint32(9, this.match_id);
        if (this.player_list.length)
            writer.writeRepeatedMessage(5, this.player_list, (item: dependency_1.MatchPlayerInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneralMatchInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneralMatchInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.match_param = reader.readUint32();
                    break;
                case 9:
                    message.match_id = reader.readUint32();
                    break;
                case 5:
                    reader.readMessage(message.player_list, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.MatchPlayerInfo.deserialize(reader), dependency_1.MatchPlayerInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GeneralMatchInfo {
        return GeneralMatchInfo.deserialize(bytes);
    }
}
