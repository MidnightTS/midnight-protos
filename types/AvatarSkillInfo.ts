/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarSkillInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class AvatarSkillInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pass_cd_time?: number;
        full_cd_time_list?: number[];
        max_charge_count?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pass_cd_time" in data && data.pass_cd_time != undefined) {
                this.pass_cd_time = data.pass_cd_time;
            }
            if ("full_cd_time_list" in data && data.full_cd_time_list != undefined) {
                this.full_cd_time_list = data.full_cd_time_list;
            }
            if ("max_charge_count" in data && data.max_charge_count != undefined) {
                this.max_charge_count = data.max_charge_count;
            }
        }
    }
    get pass_cd_time() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pass_cd_time(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get full_cd_time_list() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set full_cd_time_list(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get max_charge_count() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set max_charge_count(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        pass_cd_time?: number;
        full_cd_time_list?: number[];
        max_charge_count?: number;
    }): AvatarSkillInfo {
        const message = new AvatarSkillInfo({});
        if (data.pass_cd_time != null) {
            message.pass_cd_time = data.pass_cd_time;
        }
        if (data.full_cd_time_list != null) {
            message.full_cd_time_list = data.full_cd_time_list;
        }
        if (data.max_charge_count != null) {
            message.max_charge_count = data.max_charge_count;
        }
        return message;
    }
    toObject() {
        const data: {
            pass_cd_time?: number;
            full_cd_time_list?: number[];
            max_charge_count?: number;
        } = {};
        if (this.pass_cd_time != null) {
            data.pass_cd_time = this.pass_cd_time;
        }
        if (this.full_cd_time_list != null) {
            data.full_cd_time_list = this.full_cd_time_list;
        }
        if (this.max_charge_count != null) {
            data.max_charge_count = this.max_charge_count;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pass_cd_time != 0)
            writer.writeUint32(1, this.pass_cd_time);
        if (this.full_cd_time_list.length)
            writer.writePackedUint32(2, this.full_cd_time_list);
        if (this.max_charge_count != 0)
            writer.writeUint32(3, this.max_charge_count);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvatarSkillInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarSkillInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pass_cd_time = reader.readUint32();
                    break;
                case 2:
                    message.full_cd_time_list = reader.readPackedUint32();
                    break;
                case 3:
                    message.max_charge_count = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AvatarSkillInfo {
        return AvatarSkillInfo.deserialize(bytes);
    }
}
