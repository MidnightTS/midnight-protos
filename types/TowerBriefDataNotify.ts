/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TowerBriefDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class TowerBriefDataNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        total_star_num?: number;
        last_floor_index?: number;
        schedule_start_time?: number;
        next_schedule_change_time?: number;
        is_finished_entrance_floor?: boolean;
        last_level_index?: number;
        tower_schedule_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total_star_num" in data && data.total_star_num != undefined) {
                this.total_star_num = data.total_star_num;
            }
            if ("last_floor_index" in data && data.last_floor_index != undefined) {
                this.last_floor_index = data.last_floor_index;
            }
            if ("schedule_start_time" in data && data.schedule_start_time != undefined) {
                this.schedule_start_time = data.schedule_start_time;
            }
            if ("next_schedule_change_time" in data && data.next_schedule_change_time != undefined) {
                this.next_schedule_change_time = data.next_schedule_change_time;
            }
            if ("is_finished_entrance_floor" in data && data.is_finished_entrance_floor != undefined) {
                this.is_finished_entrance_floor = data.is_finished_entrance_floor;
            }
            if ("last_level_index" in data && data.last_level_index != undefined) {
                this.last_level_index = data.last_level_index;
            }
            if ("tower_schedule_id" in data && data.tower_schedule_id != undefined) {
                this.tower_schedule_id = data.tower_schedule_id;
            }
        }
    }
    get total_star_num() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set total_star_num(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get last_floor_index() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set last_floor_index(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get schedule_start_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set schedule_start_time(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get next_schedule_change_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set next_schedule_change_time(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_finished_entrance_floor() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set is_finished_entrance_floor(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get last_level_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set last_level_index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get tower_schedule_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set tower_schedule_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        total_star_num?: number;
        last_floor_index?: number;
        schedule_start_time?: number;
        next_schedule_change_time?: number;
        is_finished_entrance_floor?: boolean;
        last_level_index?: number;
        tower_schedule_id?: number;
    }): TowerBriefDataNotify {
        const message = new TowerBriefDataNotify({});
        if (data.total_star_num != null) {
            message.total_star_num = data.total_star_num;
        }
        if (data.last_floor_index != null) {
            message.last_floor_index = data.last_floor_index;
        }
        if (data.schedule_start_time != null) {
            message.schedule_start_time = data.schedule_start_time;
        }
        if (data.next_schedule_change_time != null) {
            message.next_schedule_change_time = data.next_schedule_change_time;
        }
        if (data.is_finished_entrance_floor != null) {
            message.is_finished_entrance_floor = data.is_finished_entrance_floor;
        }
        if (data.last_level_index != null) {
            message.last_level_index = data.last_level_index;
        }
        if (data.tower_schedule_id != null) {
            message.tower_schedule_id = data.tower_schedule_id;
        }
        return message;
    }
    toObject() {
        const data: {
            total_star_num?: number;
            last_floor_index?: number;
            schedule_start_time?: number;
            next_schedule_change_time?: number;
            is_finished_entrance_floor?: boolean;
            last_level_index?: number;
            tower_schedule_id?: number;
        } = {};
        if (this.total_star_num != null) {
            data.total_star_num = this.total_star_num;
        }
        if (this.last_floor_index != null) {
            data.last_floor_index = this.last_floor_index;
        }
        if (this.schedule_start_time != null) {
            data.schedule_start_time = this.schedule_start_time;
        }
        if (this.next_schedule_change_time != null) {
            data.next_schedule_change_time = this.next_schedule_change_time;
        }
        if (this.is_finished_entrance_floor != null) {
            data.is_finished_entrance_floor = this.is_finished_entrance_floor;
        }
        if (this.last_level_index != null) {
            data.last_level_index = this.last_level_index;
        }
        if (this.tower_schedule_id != null) {
            data.tower_schedule_id = this.tower_schedule_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total_star_num != 0)
            writer.writeUint32(11, this.total_star_num);
        if (this.last_floor_index != 0)
            writer.writeUint32(8, this.last_floor_index);
        if (this.schedule_start_time != 0)
            writer.writeUint32(15, this.schedule_start_time);
        if (this.next_schedule_change_time != 0)
            writer.writeUint32(6, this.next_schedule_change_time);
        if (this.is_finished_entrance_floor != false)
            writer.writeBool(14, this.is_finished_entrance_floor);
        if (this.last_level_index != 0)
            writer.writeUint32(4, this.last_level_index);
        if (this.tower_schedule_id != 0)
            writer.writeUint32(5, this.tower_schedule_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TowerBriefDataNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TowerBriefDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.total_star_num = reader.readUint32();
                    break;
                case 8:
                    message.last_floor_index = reader.readUint32();
                    break;
                case 15:
                    message.schedule_start_time = reader.readUint32();
                    break;
                case 6:
                    message.next_schedule_change_time = reader.readUint32();
                    break;
                case 14:
                    message.is_finished_entrance_floor = reader.readBool();
                    break;
                case 4:
                    message.last_level_index = reader.readUint32();
                    break;
                case 5:
                    message.tower_schedule_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TowerBriefDataNotify {
        return TowerBriefDataNotify.deserialize(bytes);
    }
}
