"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ArenaChallengeActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArenaChallengeActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ArenaChallengeActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ArenaChallengeMonsterLevel");
const pb_1 = require("google-protobuf");
class ArenaChallengeActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _ArenaChallengeActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], __classPrivateFieldGet(this, _ArenaChallengeActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("Unk2800_GNKHCICOIMC" in data && data.Unk2800_GNKHCICOIMC != undefined) {
                this.Unk2800_GNKHCICOIMC = data.Unk2800_GNKHCICOIMC;
            }
            if ("level_open_time_map" in data && data.level_open_time_map != undefined) {
                this.level_open_time_map = data.level_open_time_map;
            }
            if ("world_level" in data && data.world_level != undefined) {
                this.world_level = data.world_level;
            }
            if ("level_list" in data && data.level_list != undefined) {
                this.level_list = data.level_list;
            }
        }
        if (!this.level_open_time_map)
            this.level_open_time_map = new Map();
    }
    get Unk2800_GNKHCICOIMC() {
        return pb_1.Message.getFieldWithDefault(this, 14, false);
    }
    set Unk2800_GNKHCICOIMC(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get level_open_time_map() {
        return pb_1.Message.getField(this, 3);
    }
    set level_open_time_map(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get world_level() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set world_level(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get level_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ArenaChallengeMonsterLevel, 9);
    }
    set level_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    static fromObject(data) {
        const message = new ArenaChallengeActivityDetailInfo({});
        if (data.Unk2800_GNKHCICOIMC != null) {
            message.Unk2800_GNKHCICOIMC = data.Unk2800_GNKHCICOIMC;
        }
        if (typeof data.level_open_time_map == "object") {
            message.level_open_time_map = new Map(Object.entries(data.level_open_time_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.world_level != null) {
            message.world_level = data.world_level;
        }
        if (data.level_list != null) {
            message.level_list = data.level_list.map(item => dependency_1.ArenaChallengeMonsterLevel.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.Unk2800_GNKHCICOIMC != null) {
            data.Unk2800_GNKHCICOIMC = this.Unk2800_GNKHCICOIMC;
        }
        if (this.level_open_time_map.size > 0) {
            data.level_open_time_map = (Object.fromEntries)(this.level_open_time_map);
        }
        if (this.world_level != null) {
            data.world_level = this.world_level;
        }
        if (this.level_list != null) {
            data.level_list = this.level_list.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.Unk2800_GNKHCICOIMC != false)
            writer.writeBool(14, this.Unk2800_GNKHCICOIMC);
        for (const [key, value] of this.level_open_time_map) {
            writer.writeMessage(3, this.level_open_time_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.world_level != 0)
            writer.writeUint32(15, this.world_level);
        if (this.level_list.length)
            writer.writeRepeatedMessage(9, this.level_list, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArenaChallengeActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.Unk2800_GNKHCICOIMC = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.level_open_time_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 15:
                    message.world_level = reader.readUint32();
                    break;
                case 9:
                    reader.readMessage(message.level_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_1.ArenaChallengeMonsterLevel.deserialize(reader), dependency_1.ArenaChallengeMonsterLevel));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ArenaChallengeActivityDetailInfo.deserialize(bytes);
    }
}
exports.ArenaChallengeActivityDetailInfo = ArenaChallengeActivityDetailInfo;
_ArenaChallengeActivityDetailInfo_one_of_decls = new WeakMap();
