/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneFishInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class SceneFishInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fish_id?: number;
        fish_pool_entity_id?: number;
        fish_pool_pos?: dependency_1.Vector;
        fish_pool_gadget_id?: number;
        Unk2700_HIPFHKFMBBE?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fish_id" in data && data.fish_id != undefined) {
                this.fish_id = data.fish_id;
            }
            if ("fish_pool_entity_id" in data && data.fish_pool_entity_id != undefined) {
                this.fish_pool_entity_id = data.fish_pool_entity_id;
            }
            if ("fish_pool_pos" in data && data.fish_pool_pos != undefined) {
                this.fish_pool_pos = data.fish_pool_pos;
            }
            if ("fish_pool_gadget_id" in data && data.fish_pool_gadget_id != undefined) {
                this.fish_pool_gadget_id = data.fish_pool_gadget_id;
            }
            if ("Unk2700_HIPFHKFMBBE" in data && data.Unk2700_HIPFHKFMBBE != undefined) {
                this.Unk2700_HIPFHKFMBBE = data.Unk2700_HIPFHKFMBBE;
            }
        }
    }
    get fish_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set fish_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get fish_pool_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set fish_pool_entity_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get fish_pool_pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3) as dependency_1.Vector;
    }
    set fish_pool_pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_fish_pool_pos() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get fish_pool_gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set fish_pool_gadget_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get Unk2700_HIPFHKFMBBE() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set Unk2700_HIPFHKFMBBE(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        fish_id?: number;
        fish_pool_entity_id?: number;
        fish_pool_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        fish_pool_gadget_id?: number;
        Unk2700_HIPFHKFMBBE?: number;
    }): SceneFishInfo {
        const message = new SceneFishInfo({});
        if (data.fish_id != null) {
            message.fish_id = data.fish_id;
        }
        if (data.fish_pool_entity_id != null) {
            message.fish_pool_entity_id = data.fish_pool_entity_id;
        }
        if (data.fish_pool_pos != null) {
            message.fish_pool_pos = dependency_1.Vector.fromObject(data.fish_pool_pos);
        }
        if (data.fish_pool_gadget_id != null) {
            message.fish_pool_gadget_id = data.fish_pool_gadget_id;
        }
        if (data.Unk2700_HIPFHKFMBBE != null) {
            message.Unk2700_HIPFHKFMBBE = data.Unk2700_HIPFHKFMBBE;
        }
        return message;
    }
    toObject() {
        const data: {
            fish_id?: number;
            fish_pool_entity_id?: number;
            fish_pool_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            fish_pool_gadget_id?: number;
            Unk2700_HIPFHKFMBBE?: number;
        } = {};
        if (this.fish_id != null) {
            data.fish_id = this.fish_id;
        }
        if (this.fish_pool_entity_id != null) {
            data.fish_pool_entity_id = this.fish_pool_entity_id;
        }
        if (this.fish_pool_pos != null) {
            data.fish_pool_pos = this.fish_pool_pos.toObject();
        }
        if (this.fish_pool_gadget_id != null) {
            data.fish_pool_gadget_id = this.fish_pool_gadget_id;
        }
        if (this.Unk2700_HIPFHKFMBBE != null) {
            data.Unk2700_HIPFHKFMBBE = this.Unk2700_HIPFHKFMBBE;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fish_id != 0)
            writer.writeUint32(1, this.fish_id);
        if (this.fish_pool_entity_id != 0)
            writer.writeUint32(2, this.fish_pool_entity_id);
        if (this.has_fish_pool_pos)
            writer.writeMessage(3, this.fish_pool_pos, () => this.fish_pool_pos.serialize(writer));
        if (this.fish_pool_gadget_id != 0)
            writer.writeUint32(4, this.fish_pool_gadget_id);
        if (this.Unk2700_HIPFHKFMBBE != 0)
            writer.writeUint32(5, this.Unk2700_HIPFHKFMBBE);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneFishInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneFishInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fish_id = reader.readUint32();
                    break;
                case 2:
                    message.fish_pool_entity_id = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.fish_pool_pos, () => message.fish_pool_pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 4:
                    message.fish_pool_gadget_id = reader.readUint32();
                    break;
                case 5:
                    message.Unk2700_HIPFHKFMBBE = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneFishInfo {
        return SceneFishInfo.deserialize(bytes);
    }
}
