/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CreateEntityInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CreateGadgetInfo";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class CreateEntityInfo extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4], [13]];
    constructor(data?: any[] | ({
        level?: number;
        pos?: dependency_2.Vector;
        rot?: dependency_2.Vector;
        scene_id?: number;
        room_id?: number;
        client_unique_id?: number;
    } & (({
        monster_id?: number;
        npc_id?: never;
        gadget_id?: never;
        item_id?: never;
    } | {
        monster_id?: never;
        npc_id?: number;
        gadget_id?: never;
        item_id?: never;
    } | {
        monster_id?: never;
        npc_id?: never;
        gadget_id?: number;
        item_id?: never;
    } | {
        monster_id?: never;
        npc_id?: never;
        gadget_id?: never;
        item_id?: number;
    }) | ({
        gadget?: dependency_1.CreateGadgetInfo;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("rot" in data && data.rot != undefined) {
                this.rot = data.rot;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("room_id" in data && data.room_id != undefined) {
                this.room_id = data.room_id;
            }
            if ("client_unique_id" in data && data.client_unique_id != undefined) {
                this.client_unique_id = data.client_unique_id;
            }
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("npc_id" in data && data.npc_id != undefined) {
                this.npc_id = data.npc_id;
            }
            if ("gadget_id" in data && data.gadget_id != undefined) {
                this.gadget_id = data.gadget_id;
            }
            if ("item_id" in data && data.item_id != undefined) {
                this.item_id = data.item_id;
            }
            if ("gadget" in data && data.gadget != undefined) {
                this.gadget = data.gadget;
            }
        }
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 6) as dependency_2.Vector;
    }
    set pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get rot() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 7) as dependency_2.Vector;
    }
    set rot(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_rot() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get room_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set room_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get client_unique_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set client_unique_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set monster_id(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_monster_id() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get npc_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set npc_id(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_npc_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set gadget_id(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_gadget_id() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get item_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set item_id(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_item_id() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get gadget() {
        return pb_1.Message.getWrapperField(this, dependency_1.CreateGadgetInfo, 13) as dependency_1.CreateGadgetInfo;
    }
    set gadget(value: dependency_1.CreateGadgetInfo) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[1], value);
    }
    get has_gadget() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get entity() {
        const cases: {
            [index: number]: "none" | "monster_id" | "npc_id" | "gadget_id" | "item_id";
        } = {
            0: "none",
            1: "monster_id",
            2: "npc_id",
            3: "gadget_id",
            4: "item_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
    }
    get entity_create_info() {
        const cases: {
            [index: number]: "none" | "gadget";
        } = {
            0: "none",
            13: "gadget"
        };
        return cases[pb_1.Message.computeOneofCase(this, [13])];
    }
    static fromObject(data: {
        level?: number;
        pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        rot?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        scene_id?: number;
        room_id?: number;
        client_unique_id?: number;
        monster_id?: number;
        npc_id?: number;
        gadget_id?: number;
        item_id?: number;
        gadget?: ReturnType<typeof dependency_1.CreateGadgetInfo.prototype.toObject>;
    }): CreateEntityInfo {
        const message = new CreateEntityInfo({});
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.pos != null) {
            message.pos = dependency_2.Vector.fromObject(data.pos);
        }
        if (data.rot != null) {
            message.rot = dependency_2.Vector.fromObject(data.rot);
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.room_id != null) {
            message.room_id = data.room_id;
        }
        if (data.client_unique_id != null) {
            message.client_unique_id = data.client_unique_id;
        }
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.npc_id != null) {
            message.npc_id = data.npc_id;
        }
        if (data.gadget_id != null) {
            message.gadget_id = data.gadget_id;
        }
        if (data.item_id != null) {
            message.item_id = data.item_id;
        }
        if (data.gadget != null) {
            message.gadget = dependency_1.CreateGadgetInfo.fromObject(data.gadget);
        }
        return message;
    }
    toObject() {
        const data: {
            level?: number;
            pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            rot?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            scene_id?: number;
            room_id?: number;
            client_unique_id?: number;
            monster_id?: number;
            npc_id?: number;
            gadget_id?: number;
            item_id?: number;
            gadget?: ReturnType<typeof dependency_1.CreateGadgetInfo.prototype.toObject>;
        } = {};
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.rot != null) {
            data.rot = this.rot.toObject();
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.room_id != null) {
            data.room_id = this.room_id;
        }
        if (this.client_unique_id != null) {
            data.client_unique_id = this.client_unique_id;
        }
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.npc_id != null) {
            data.npc_id = this.npc_id;
        }
        if (this.gadget_id != null) {
            data.gadget_id = this.gadget_id;
        }
        if (this.item_id != null) {
            data.item_id = this.item_id;
        }
        if (this.gadget != null) {
            data.gadget = this.gadget.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.level != 0)
            writer.writeUint32(5, this.level);
        if (this.has_pos)
            writer.writeMessage(6, this.pos, () => this.pos.serialize(writer));
        if (this.has_rot)
            writer.writeMessage(7, this.rot, () => this.rot.serialize(writer));
        if (this.scene_id != 0)
            writer.writeUint32(10, this.scene_id);
        if (this.room_id != 0)
            writer.writeUint32(11, this.room_id);
        if (this.client_unique_id != 0)
            writer.writeUint32(12, this.client_unique_id);
        if (this.has_monster_id)
            writer.writeUint32(1, this.monster_id);
        if (this.has_npc_id)
            writer.writeUint32(2, this.npc_id);
        if (this.has_gadget_id)
            writer.writeUint32(3, this.gadget_id);
        if (this.has_item_id)
            writer.writeUint32(4, this.item_id);
        if (this.has_gadget)
            writer.writeMessage(13, this.gadget, () => this.gadget.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateEntityInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateEntityInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.level = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.pos, () => message.pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.rot, () => message.rot = dependency_2.Vector.deserialize(reader));
                    break;
                case 10:
                    message.scene_id = reader.readUint32();
                    break;
                case 11:
                    message.room_id = reader.readUint32();
                    break;
                case 12:
                    message.client_unique_id = reader.readUint32();
                    break;
                case 1:
                    message.monster_id = reader.readUint32();
                    break;
                case 2:
                    message.npc_id = reader.readUint32();
                    break;
                case 3:
                    message.gadget_id = reader.readUint32();
                    break;
                case 4:
                    message.item_id = reader.readUint32();
                    break;
                case 13:
                    reader.readMessage(message.gadget, () => message.gadget = dependency_1.CreateGadgetInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateEntityInfo {
        return CreateEntityInfo.deserialize(bytes);
    }
}
