"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AvatarEnterSceneInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvatarEnterSceneInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarEnterSceneInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./AbilitySyncStateInfo");
const dependency_2 = require("./ServerBuff");
const pb_1 = require("google-protobuf");
class AvatarEnterSceneInfo extends pb_1.Message {
    constructor(data) {
        super();
        _AvatarEnterSceneInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14, 5], __classPrivateFieldGet(this, _AvatarEnterSceneInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("server_buff_list" in data && data.server_buff_list != undefined) {
                this.server_buff_list = data.server_buff_list;
            }
            if ("avatar_entity_id" in data && data.avatar_entity_id != undefined) {
                this.avatar_entity_id = data.avatar_entity_id;
            }
            if ("weapon_ability_info" in data && data.weapon_ability_info != undefined) {
                this.weapon_ability_info = data.weapon_ability_info;
            }
            if ("weapon_entity_id" in data && data.weapon_entity_id != undefined) {
                this.weapon_entity_id = data.weapon_entity_id;
            }
            if ("avatar_ability_info" in data && data.avatar_ability_info != undefined) {
                this.avatar_ability_info = data.avatar_ability_info;
            }
            if ("avatar_guid" in data && data.avatar_guid != undefined) {
                this.avatar_guid = data.avatar_guid;
            }
            if ("weapon_guid" in data && data.weapon_guid != undefined) {
                this.weapon_guid = data.weapon_guid;
            }
            if ("buff_id_list" in data && data.buff_id_list != undefined) {
                this.buff_id_list = data.buff_id_list;
            }
        }
    }
    get server_buff_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ServerBuff, 14);
    }
    set server_buff_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get avatar_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set avatar_entity_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get weapon_ability_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AbilitySyncStateInfo, 12);
    }
    set weapon_ability_info(value) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_weapon_ability_info() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get weapon_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set weapon_entity_id(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get avatar_ability_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AbilitySyncStateInfo, 2);
    }
    set avatar_ability_info(value) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_avatar_ability_info() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get avatar_guid() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set avatar_guid(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get weapon_guid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set weapon_guid(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get buff_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []);
    }
    set buff_id_list(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new AvatarEnterSceneInfo({});
        if (data.server_buff_list != null) {
            message.server_buff_list = data.server_buff_list.map(item => dependency_2.ServerBuff.fromObject(item));
        }
        if (data.avatar_entity_id != null) {
            message.avatar_entity_id = data.avatar_entity_id;
        }
        if (data.weapon_ability_info != null) {
            message.weapon_ability_info = dependency_1.AbilitySyncStateInfo.fromObject(data.weapon_ability_info);
        }
        if (data.weapon_entity_id != null) {
            message.weapon_entity_id = data.weapon_entity_id;
        }
        if (data.avatar_ability_info != null) {
            message.avatar_ability_info = dependency_1.AbilitySyncStateInfo.fromObject(data.avatar_ability_info);
        }
        if (data.avatar_guid != null) {
            message.avatar_guid = data.avatar_guid;
        }
        if (data.weapon_guid != null) {
            message.weapon_guid = data.weapon_guid;
        }
        if (data.buff_id_list != null) {
            message.buff_id_list = data.buff_id_list;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.server_buff_list != null) {
            data.server_buff_list = this.server_buff_list.map((item) => item.toObject());
        }
        if (this.avatar_entity_id != null) {
            data.avatar_entity_id = this.avatar_entity_id;
        }
        if (this.weapon_ability_info != null) {
            data.weapon_ability_info = this.weapon_ability_info.toObject();
        }
        if (this.weapon_entity_id != null) {
            data.weapon_entity_id = this.weapon_entity_id;
        }
        if (this.avatar_ability_info != null) {
            data.avatar_ability_info = this.avatar_ability_info.toObject();
        }
        if (this.avatar_guid != null) {
            data.avatar_guid = this.avatar_guid;
        }
        if (this.weapon_guid != null) {
            data.weapon_guid = this.weapon_guid;
        }
        if (this.buff_id_list != null) {
            data.buff_id_list = this.buff_id_list;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.server_buff_list.length)
            writer.writeRepeatedMessage(14, this.server_buff_list, (item) => item.serialize(writer));
        if (this.avatar_entity_id != 0)
            writer.writeUint32(7, this.avatar_entity_id);
        if (this.has_weapon_ability_info)
            writer.writeMessage(12, this.weapon_ability_info, () => this.weapon_ability_info.serialize(writer));
        if (this.weapon_entity_id != 0)
            writer.writeUint32(10, this.weapon_entity_id);
        if (this.has_avatar_ability_info)
            writer.writeMessage(2, this.avatar_ability_info, () => this.avatar_ability_info.serialize(writer));
        if (this.avatar_guid != 0)
            writer.writeUint64(13, this.avatar_guid);
        if (this.weapon_guid != 0)
            writer.writeUint64(9, this.weapon_guid);
        if (this.buff_id_list.length)
            writer.writePackedUint32(5, this.buff_id_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarEnterSceneInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    reader.readMessage(message.server_buff_list, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_2.ServerBuff.deserialize(reader), dependency_2.ServerBuff));
                    break;
                case 7:
                    message.avatar_entity_id = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.weapon_ability_info, () => message.weapon_ability_info = dependency_1.AbilitySyncStateInfo.deserialize(reader));
                    break;
                case 10:
                    message.weapon_entity_id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.avatar_ability_info, () => message.avatar_ability_info = dependency_1.AbilitySyncStateInfo.deserialize(reader));
                    break;
                case 13:
                    message.avatar_guid = reader.readUint64();
                    break;
                case 9:
                    message.weapon_guid = reader.readUint64();
                    break;
                case 5:
                    message.buff_id_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AvatarEnterSceneInfo.deserialize(bytes);
    }
}
exports.AvatarEnterSceneInfo = AvatarEnterSceneInfo;
_AvatarEnterSceneInfo_one_of_decls = new WeakMap();
