"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CodexTypeData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodexTypeData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CodexTypeData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./CodexType");
const pb_1 = require("google-protobuf");
class CodexTypeData extends pb_1.Message {
    constructor(data) {
        super();
        _CodexTypeData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14, 5], __classPrivateFieldGet(this, _CodexTypeData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("codex_id_list" in data && data.codex_id_list != undefined) {
                this.codex_id_list = data.codex_id_list;
            }
            if ("weapon_max_promote_level_map" in data && data.weapon_max_promote_level_map != undefined) {
                this.weapon_max_promote_level_map = data.weapon_max_promote_level_map;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("have_viewed_list" in data && data.have_viewed_list != undefined) {
                this.have_viewed_list = data.have_viewed_list;
            }
        }
        if (!this.weapon_max_promote_level_map)
            this.weapon_max_promote_level_map = new Map();
    }
    get codex_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []);
    }
    set codex_id_list(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get weapon_max_promote_level_map() {
        return pb_1.Message.getField(this, 4);
    }
    set weapon_max_promote_level_map(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 13, dependency_1.CodexType.CODEX_TYPE_NONE);
    }
    set type(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get have_viewed_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []);
    }
    set have_viewed_list(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new CodexTypeData({});
        if (data.codex_id_list != null) {
            message.codex_id_list = data.codex_id_list;
        }
        if (typeof data.weapon_max_promote_level_map == "object") {
            message.weapon_max_promote_level_map = new Map(Object.entries(data.weapon_max_promote_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.have_viewed_list != null) {
            message.have_viewed_list = data.have_viewed_list;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.codex_id_list != null) {
            data.codex_id_list = this.codex_id_list;
        }
        if (this.weapon_max_promote_level_map.size > 0) {
            data.weapon_max_promote_level_map = (Object.fromEntries)(this.weapon_max_promote_level_map);
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.have_viewed_list != null) {
            data.have_viewed_list = this.have_viewed_list;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.codex_id_list.length)
            writer.writePackedUint32(14, this.codex_id_list);
        for (const [key, value] of this.weapon_max_promote_level_map) {
            writer.writeMessage(4, this.weapon_max_promote_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.type != dependency_1.CodexType.CODEX_TYPE_NONE)
            writer.writeEnum(13, this.type);
        if (this.have_viewed_list.length)
            writer.writePackedBool(5, this.have_viewed_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodexTypeData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.codex_id_list = reader.readPackedUint32();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.weapon_max_promote_level_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 13:
                    message.type = reader.readEnum();
                    break;
                case 5:
                    message.have_viewed_list = reader.readPackedBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return CodexTypeData.deserialize(bytes);
    }
}
exports.CodexTypeData = CodexTypeData;
_CodexTypeData_one_of_decls = new WeakMap();
