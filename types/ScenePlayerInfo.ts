/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ScenePlayerInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./OnlinePlayerInfo";
import * as pb_1 from "google-protobuf";
export class ScenePlayerInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        scene_id?: number;
        peer_id?: number;
        online_player_info?: dependency_1.OnlinePlayerInfo;
        is_connected?: boolean;
        name?: string;
        uid?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("peer_id" in data && data.peer_id != undefined) {
                this.peer_id = data.peer_id;
            }
            if ("online_player_info" in data && data.online_player_info != undefined) {
                this.online_player_info = data.online_player_info;
            }
            if ("is_connected" in data && data.is_connected != undefined) {
                this.is_connected = data.is_connected;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
        }
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get peer_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set peer_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get online_player_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.OnlinePlayerInfo, 13) as dependency_1.OnlinePlayerInfo;
    }
    set online_player_info(value: dependency_1.OnlinePlayerInfo) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_online_player_info() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get is_connected() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set is_connected(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        scene_id?: number;
        peer_id?: number;
        online_player_info?: ReturnType<typeof dependency_1.OnlinePlayerInfo.prototype.toObject>;
        is_connected?: boolean;
        name?: string;
        uid?: number;
    }): ScenePlayerInfo {
        const message = new ScenePlayerInfo({});
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.peer_id != null) {
            message.peer_id = data.peer_id;
        }
        if (data.online_player_info != null) {
            message.online_player_info = dependency_1.OnlinePlayerInfo.fromObject(data.online_player_info);
        }
        if (data.is_connected != null) {
            message.is_connected = data.is_connected;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        return message;
    }
    toObject() {
        const data: {
            scene_id?: number;
            peer_id?: number;
            online_player_info?: ReturnType<typeof dependency_1.OnlinePlayerInfo.prototype.toObject>;
            is_connected?: boolean;
            name?: string;
            uid?: number;
        } = {};
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.peer_id != null) {
            data.peer_id = this.peer_id;
        }
        if (this.online_player_info != null) {
            data.online_player_info = this.online_player_info.toObject();
        }
        if (this.is_connected != null) {
            data.is_connected = this.is_connected;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.scene_id != 0)
            writer.writeUint32(10, this.scene_id);
        if (this.peer_id != 0)
            writer.writeUint32(6, this.peer_id);
        if (this.has_online_player_info)
            writer.writeMessage(13, this.online_player_info, () => this.online_player_info.serialize(writer));
        if (this.is_connected != false)
            writer.writeBool(2, this.is_connected);
        if (this.name.length)
            writer.writeString(15, this.name);
        if (this.uid != 0)
            writer.writeUint32(8, this.uid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScenePlayerInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScenePlayerInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.scene_id = reader.readUint32();
                    break;
                case 6:
                    message.peer_id = reader.readUint32();
                    break;
                case 13:
                    reader.readMessage(message.online_player_info, () => message.online_player_info = dependency_1.OnlinePlayerInfo.deserialize(reader));
                    break;
                case 2:
                    message.is_connected = reader.readBool();
                    break;
                case 15:
                    message.name = reader.readString();
                    break;
                case 8:
                    message.uid = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ScenePlayerInfo {
        return ScenePlayerInfo.deserialize(bytes);
    }
}
