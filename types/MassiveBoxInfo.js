"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MassiveBoxInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MassiveBoxInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MassiveBoxInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Vector");
const pb_1 = require("google-protobuf");
class MassiveBoxInfo extends pb_1.Message {
    constructor(data) {
        super();
        _MassiveBoxInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MassiveBoxInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("center" in data && data.center != undefined) {
                this.center = data.center;
            }
            if ("extents" in data && data.extents != undefined) {
                this.extents = data.extents;
            }
            if ("up" in data && data.up != undefined) {
                this.up = data.up;
            }
            if ("forward" in data && data.forward != undefined) {
                this.forward = data.forward;
            }
            if ("right" in data && data.right != undefined) {
                this.right = data.right;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set config_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get center() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3);
    }
    set center(value) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_center() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get extents() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 4);
    }
    set extents(value) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_extents() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get up() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 5);
    }
    set up(value) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_up() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get forward() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 6);
    }
    set forward(value) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_forward() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get right() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 7);
    }
    set right(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_right() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data) {
        const message = new MassiveBoxInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.center != null) {
            message.center = dependency_1.Vector.fromObject(data.center);
        }
        if (data.extents != null) {
            message.extents = dependency_1.Vector.fromObject(data.extents);
        }
        if (data.up != null) {
            message.up = dependency_1.Vector.fromObject(data.up);
        }
        if (data.forward != null) {
            message.forward = dependency_1.Vector.fromObject(data.forward);
        }
        if (data.right != null) {
            message.right = dependency_1.Vector.fromObject(data.right);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.center != null) {
            data.center = this.center.toObject();
        }
        if (this.extents != null) {
            data.extents = this.extents.toObject();
        }
        if (this.up != null) {
            data.up = this.up.toObject();
        }
        if (this.forward != null) {
            data.forward = this.forward.toObject();
        }
        if (this.right != null) {
            data.right = this.right.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.config_id != 0)
            writer.writeUint32(2, this.config_id);
        if (this.has_center)
            writer.writeMessage(3, this.center, () => this.center.serialize(writer));
        if (this.has_extents)
            writer.writeMessage(4, this.extents, () => this.extents.serialize(writer));
        if (this.has_up)
            writer.writeMessage(5, this.up, () => this.up.serialize(writer));
        if (this.has_forward)
            writer.writeMessage(6, this.forward, () => this.forward.serialize(writer));
        if (this.has_right)
            writer.writeMessage(7, this.right, () => this.right.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassiveBoxInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.config_id = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.center, () => message.center = dependency_1.Vector.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.extents, () => message.extents = dependency_1.Vector.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.up, () => message.up = dependency_1.Vector.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.forward, () => message.forward = dependency_1.Vector.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.right, () => message.right = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MassiveBoxInfo.deserialize(bytes);
    }
}
exports.MassiveBoxInfo = MassiveBoxInfo;
_MassiveBoxInfo_one_of_decls = new WeakMap();
