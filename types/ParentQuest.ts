// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "ParentQuest.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ChildQuest } from "./ChildQuest";
import { ParentQuestRandomInfo } from "./ParentQuestRandomInfo";
import { InferencePageInfo } from "./InferencePageInfo";
/**
 * @generated from protobuf message ParentQuest
 */
export interface ParentQuest {
    /**
     * @generated from protobuf field: repeated InferencePageInfo inference_page_list = 5;
     */
    inferencePageList: InferencePageInfo[];
    /**
     * @generated from protobuf field: repeated int32 quest_var = 7;
     */
    questVar: number[];
    /**
     * @generated from protobuf field: uint64 video_key = 11;
     */
    videoKey: bigint;
    /**
     * @generated from protobuf field: uint32 parent_quest_state = 15;
     */
    parentQuestState: number;
    /**
     * @generated from protobuf field: ParentQuestRandomInfo random_info = 9;
     */
    randomInfo?: ParentQuestRandomInfo;
    /**
     * @generated from protobuf field: uint32 parent_quest_id = 3;
     */
    parentQuestId: number;
    /**
     * @generated from protobuf field: bool is_random = 12;
     */
    isRandom: boolean;
    /**
     * @generated from protobuf field: repeated ChildQuest child_quest_list = 8;
     */
    childQuestList: ChildQuest[];
    /**
     * @generated from protobuf field: bool is_finished = 1;
     */
    isFinished: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> time_var_map = 2;
     */
    timeVarMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 quest_var_seq = 14;
     */
    questVarSeq: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ParentQuest$Type extends MessageType<ParentQuest> {
    constructor() {
        super("ParentQuest", [
            { no: 5, name: "inference_page_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InferencePageInfo },
            { no: 7, name: "quest_var", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "video_key", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "parent_quest_state", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "random_info", kind: "message", T: () => ParentQuestRandomInfo },
            { no: 3, name: "parent_quest_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_random", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "child_quest_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChildQuest },
            { no: 1, name: "is_finished", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "time_var_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 14, name: "quest_var_seq", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ParentQuest>): ParentQuest {
        const message = { inferencePageList: [], questVar: [], videoKey: 0n, parentQuestState: 0, parentQuestId: 0, isRandom: false, childQuestList: [], isFinished: false, timeVarMap: {}, questVarSeq: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParentQuest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParentQuest): ParentQuest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated InferencePageInfo inference_page_list */ 5:
                    message.inferencePageList.push(InferencePageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 quest_var */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.questVar.push(reader.int32());
                    else
                        message.questVar.push(reader.int32());
                    break;
                case /* uint64 video_key */ 11:
                    message.videoKey = reader.uint64().toBigInt();
                    break;
                case /* uint32 parent_quest_state */ 15:
                    message.parentQuestState = reader.uint32();
                    break;
                case /* ParentQuestRandomInfo random_info */ 9:
                    message.randomInfo = ParentQuestRandomInfo.internalBinaryRead(reader, reader.uint32(), options, message.randomInfo);
                    break;
                case /* uint32 parent_quest_id */ 3:
                    message.parentQuestId = reader.uint32();
                    break;
                case /* bool is_random */ 12:
                    message.isRandom = reader.bool();
                    break;
                case /* repeated ChildQuest child_quest_list */ 8:
                    message.childQuestList.push(ChildQuest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_finished */ 1:
                    message.isFinished = reader.bool();
                    break;
                case /* map<uint32, uint32> time_var_map */ 2:
                    this.binaryReadMap2(message.timeVarMap, reader, options);
                    break;
                case /* uint32 quest_var_seq */ 14:
                    message.questVarSeq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ParentQuest["timeVarMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ParentQuest["timeVarMap"] | undefined, val: ParentQuest["timeVarMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ParentQuest.time_var_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ParentQuest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated InferencePageInfo inference_page_list = 5; */
        for (let i = 0; i < message.inferencePageList.length; i++)
            InferencePageInfo.internalBinaryWrite(message.inferencePageList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 quest_var = 7; */
        if (message.questVar.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.questVar.length; i++)
                writer.int32(message.questVar[i]);
            writer.join();
        }
        /* uint64 video_key = 11; */
        if (message.videoKey !== 0n)
            writer.tag(11, WireType.Varint).uint64(message.videoKey);
        /* uint32 parent_quest_state = 15; */
        if (message.parentQuestState !== 0)
            writer.tag(15, WireType.Varint).uint32(message.parentQuestState);
        /* ParentQuestRandomInfo random_info = 9; */
        if (message.randomInfo)
            ParentQuestRandomInfo.internalBinaryWrite(message.randomInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* uint32 parent_quest_id = 3; */
        if (message.parentQuestId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.parentQuestId);
        /* bool is_random = 12; */
        if (message.isRandom !== false)
            writer.tag(12, WireType.Varint).bool(message.isRandom);
        /* repeated ChildQuest child_quest_list = 8; */
        for (let i = 0; i < message.childQuestList.length; i++)
            ChildQuest.internalBinaryWrite(message.childQuestList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* bool is_finished = 1; */
        if (message.isFinished !== false)
            writer.tag(1, WireType.Varint).bool(message.isFinished);
        /* map<uint32, uint32> time_var_map = 2; */
        for (let k of Object.keys(message.timeVarMap))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.timeVarMap[k as any]).join();
        /* uint32 quest_var_seq = 14; */
        if (message.questVarSeq !== 0)
            writer.tag(14, WireType.Varint).uint32(message.questVarSeq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ParentQuest
 */
export const ParentQuest = new ParentQuest$Type();
