/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ClientReportNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ClientReportNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        report_type?: string;
        report_value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("report_type" in data && data.report_type != undefined) {
                this.report_type = data.report_type;
            }
            if ("report_value" in data && data.report_value != undefined) {
                this.report_value = data.report_value;
            }
        }
    }
    get report_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set report_type(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get report_value() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set report_value(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        report_type?: string;
        report_value?: string;
    }): ClientReportNotify {
        const message = new ClientReportNotify({});
        if (data.report_type != null) {
            message.report_type = data.report_type;
        }
        if (data.report_value != null) {
            message.report_value = data.report_value;
        }
        return message;
    }
    toObject() {
        const data: {
            report_type?: string;
            report_value?: string;
        } = {};
        if (this.report_type != null) {
            data.report_type = this.report_type;
        }
        if (this.report_value != null) {
            data.report_value = this.report_value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.report_type.length)
            writer.writeString(1, this.report_type);
        if (this.report_value.length)
            writer.writeString(4, this.report_value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientReportNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientReportNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.report_type = reader.readString();
                    break;
                case 4:
                    message.report_value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientReportNotify {
        return ClientReportNotify.deserialize(bytes);
    }
}
