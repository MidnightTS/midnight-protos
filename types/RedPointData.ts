// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "RedPointData.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.RedPointData
 */
export interface RedPointData {
    /**
     * @generated from protobuf field: optional uint32 red_point_type = 1;
     */
    redPointType?: number;
    /**
     * @generated from protobuf field: optional bool is_show = 2;
     */
    isShow?: boolean;
    /**
     * @generated from protobuf field: optional uint32 content_id = 3;
     */
    contentId?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class RedPointData$Type extends MessageType<RedPointData> {
    constructor() {
        super("com.midnights.game.RedPointData", [
            { no: 1, name: "red_point_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "content_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RedPointData>): RedPointData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RedPointData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RedPointData): RedPointData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 red_point_type */ 1:
                    message.redPointType = reader.uint32();
                    break;
                case /* optional bool is_show */ 2:
                    message.isShow = reader.bool();
                    break;
                case /* optional uint32 content_id */ 3:
                    message.contentId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RedPointData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 red_point_type = 1; */
        if (message.redPointType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.redPointType);
        /* optional bool is_show = 2; */
        if (message.isShow !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isShow);
        /* optional uint32 content_id = 3; */
        if (message.contentId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.contentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RedPointData
 */
export const RedPointData = new RedPointData$Type();
