/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EntityClientData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class EntityClientData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        wind_change_scene_time?: number;
        windmill_sync_angle?: number;
        wind_change_target_level?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("wind_change_scene_time" in data && data.wind_change_scene_time != undefined) {
                this.wind_change_scene_time = data.wind_change_scene_time;
            }
            if ("windmill_sync_angle" in data && data.windmill_sync_angle != undefined) {
                this.windmill_sync_angle = data.windmill_sync_angle;
            }
            if ("wind_change_target_level" in data && data.wind_change_target_level != undefined) {
                this.wind_change_target_level = data.wind_change_target_level;
            }
        }
    }
    get wind_change_scene_time() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set wind_change_scene_time(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get windmill_sync_angle() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set windmill_sync_angle(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get wind_change_target_level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set wind_change_target_level(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        wind_change_scene_time?: number;
        windmill_sync_angle?: number;
        wind_change_target_level?: number;
    }): EntityClientData {
        const message = new EntityClientData({});
        if (data.wind_change_scene_time != null) {
            message.wind_change_scene_time = data.wind_change_scene_time;
        }
        if (data.windmill_sync_angle != null) {
            message.windmill_sync_angle = data.windmill_sync_angle;
        }
        if (data.wind_change_target_level != null) {
            message.wind_change_target_level = data.wind_change_target_level;
        }
        return message;
    }
    toObject() {
        const data: {
            wind_change_scene_time?: number;
            windmill_sync_angle?: number;
            wind_change_target_level?: number;
        } = {};
        if (this.wind_change_scene_time != null) {
            data.wind_change_scene_time = this.wind_change_scene_time;
        }
        if (this.windmill_sync_angle != null) {
            data.windmill_sync_angle = this.windmill_sync_angle;
        }
        if (this.wind_change_target_level != null) {
            data.wind_change_target_level = this.wind_change_target_level;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.wind_change_scene_time != 0)
            writer.writeUint32(1, this.wind_change_scene_time);
        if (this.windmill_sync_angle != 0)
            writer.writeFloat(2, this.windmill_sync_angle);
        if (this.wind_change_target_level != 0)
            writer.writeInt32(3, this.wind_change_target_level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityClientData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityClientData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.wind_change_scene_time = reader.readUint32();
                    break;
                case 2:
                    message.windmill_sync_angle = reader.readFloat();
                    break;
                case 3:
                    message.wind_change_target_level = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityClientData {
        return EntityClientData.deserialize(bytes);
    }
}
