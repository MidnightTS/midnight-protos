/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetCityReputationMapInfoRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GetCityReputationMapInfoRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        retcode?: number;
        is_new_hunting?: boolean;
        is_new_request?: boolean;
        unlock_hunting_city_list?: number[];
        reward_city_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("is_new_hunting" in data && data.is_new_hunting != undefined) {
                this.is_new_hunting = data.is_new_hunting;
            }
            if ("is_new_request" in data && data.is_new_request != undefined) {
                this.is_new_request = data.is_new_request;
            }
            if ("unlock_hunting_city_list" in data && data.unlock_hunting_city_list != undefined) {
                this.unlock_hunting_city_list = data.unlock_hunting_city_list;
            }
            if ("reward_city_list" in data && data.reward_city_list != undefined) {
                this.reward_city_list = data.reward_city_list;
            }
        }
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_new_hunting() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_new_hunting(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_new_request() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set is_new_request(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get unlock_hunting_city_list() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set unlock_hunting_city_list(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get reward_city_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set reward_city_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        retcode?: number;
        is_new_hunting?: boolean;
        is_new_request?: boolean;
        unlock_hunting_city_list?: number[];
        reward_city_list?: number[];
    }): GetCityReputationMapInfoRsp {
        const message = new GetCityReputationMapInfoRsp({});
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.is_new_hunting != null) {
            message.is_new_hunting = data.is_new_hunting;
        }
        if (data.is_new_request != null) {
            message.is_new_request = data.is_new_request;
        }
        if (data.unlock_hunting_city_list != null) {
            message.unlock_hunting_city_list = data.unlock_hunting_city_list;
        }
        if (data.reward_city_list != null) {
            message.reward_city_list = data.reward_city_list;
        }
        return message;
    }
    toObject() {
        const data: {
            retcode?: number;
            is_new_hunting?: boolean;
            is_new_request?: boolean;
            unlock_hunting_city_list?: number[];
            reward_city_list?: number[];
        } = {};
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.is_new_hunting != null) {
            data.is_new_hunting = this.is_new_hunting;
        }
        if (this.is_new_request != null) {
            data.is_new_request = this.is_new_request;
        }
        if (this.unlock_hunting_city_list != null) {
            data.unlock_hunting_city_list = this.unlock_hunting_city_list;
        }
        if (this.reward_city_list != null) {
            data.reward_city_list = this.reward_city_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.retcode != 0)
            writer.writeInt32(11, this.retcode);
        if (this.is_new_hunting != false)
            writer.writeBool(10, this.is_new_hunting);
        if (this.is_new_request != false)
            writer.writeBool(2, this.is_new_request);
        if (this.unlock_hunting_city_list.length)
            writer.writePackedUint32(9, this.unlock_hunting_city_list);
        if (this.reward_city_list.length)
            writer.writePackedUint32(3, this.reward_city_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCityReputationMapInfoRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCityReputationMapInfoRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.retcode = reader.readInt32();
                    break;
                case 10:
                    message.is_new_hunting = reader.readBool();
                    break;
                case 2:
                    message.is_new_request = reader.readBool();
                    break;
                case 9:
                    message.unlock_hunting_city_list = reader.readPackedUint32();
                    break;
                case 3:
                    message.reward_city_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetCityReputationMapInfoRsp {
        return GetCityReputationMapInfoRsp.deserialize(bytes);
    }
}
