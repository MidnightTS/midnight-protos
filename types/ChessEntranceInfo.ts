/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChessEntranceInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ChessMonsterInfo";
import * as pb_1 from "google-protobuf";
export class ChessEntranceInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        monster_info_list?: dependency_1.ChessMonsterInfo[];
        entrance_index?: number;
        entrance_point_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("monster_info_list" in data && data.monster_info_list != undefined) {
                this.monster_info_list = data.monster_info_list;
            }
            if ("entrance_index" in data && data.entrance_index != undefined) {
                this.entrance_index = data.entrance_index;
            }
            if ("entrance_point_id" in data && data.entrance_point_id != undefined) {
                this.entrance_point_id = data.entrance_point_id;
            }
        }
    }
    get monster_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ChessMonsterInfo, 14) as dependency_1.ChessMonsterInfo[];
    }
    set monster_info_list(value: dependency_1.ChessMonsterInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get entrance_index() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set entrance_index(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get entrance_point_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set entrance_point_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        monster_info_list?: ReturnType<typeof dependency_1.ChessMonsterInfo.prototype.toObject>[];
        entrance_index?: number;
        entrance_point_id?: number;
    }): ChessEntranceInfo {
        const message = new ChessEntranceInfo({});
        if (data.monster_info_list != null) {
            message.monster_info_list = data.monster_info_list.map(item => dependency_1.ChessMonsterInfo.fromObject(item));
        }
        if (data.entrance_index != null) {
            message.entrance_index = data.entrance_index;
        }
        if (data.entrance_point_id != null) {
            message.entrance_point_id = data.entrance_point_id;
        }
        return message;
    }
    toObject() {
        const data: {
            monster_info_list?: ReturnType<typeof dependency_1.ChessMonsterInfo.prototype.toObject>[];
            entrance_index?: number;
            entrance_point_id?: number;
        } = {};
        if (this.monster_info_list != null) {
            data.monster_info_list = this.monster_info_list.map((item: dependency_1.ChessMonsterInfo) => item.toObject());
        }
        if (this.entrance_index != null) {
            data.entrance_index = this.entrance_index;
        }
        if (this.entrance_point_id != null) {
            data.entrance_point_id = this.entrance_point_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.monster_info_list.length)
            writer.writeRepeatedMessage(14, this.monster_info_list, (item: dependency_1.ChessMonsterInfo) => item.serialize(writer));
        if (this.entrance_index != 0)
            writer.writeUint32(15, this.entrance_index);
        if (this.entrance_point_id != 0)
            writer.writeUint32(8, this.entrance_point_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChessEntranceInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChessEntranceInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    reader.readMessage(message.monster_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_1.ChessMonsterInfo.deserialize(reader), dependency_1.ChessMonsterInfo));
                    break;
                case 15:
                    message.entrance_index = reader.readUint32();
                    break;
                case 8:
                    message.entrance_point_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChessEntranceInfo {
        return ChessEntranceInfo.deserialize(bytes);
    }
}
