"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SaveMainCoopReq_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveMainCoopReq = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SaveMainCoopReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class SaveMainCoopReq extends pb_1.Message {
    constructor(data) {
        super();
        _SaveMainCoopReq_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SaveMainCoopReq_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("normal_var_map" in data && data.normal_var_map != undefined) {
                this.normal_var_map = data.normal_var_map;
            }
            if ("self_confidence" in data && data.self_confidence != undefined) {
                this.self_confidence = data.self_confidence;
            }
            if ("save_point_id" in data && data.save_point_id != undefined) {
                this.save_point_id = data.save_point_id;
            }
            if ("temp_var_map" in data && data.temp_var_map != undefined) {
                this.temp_var_map = data.temp_var_map;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
        if (!this.normal_var_map)
            this.normal_var_map = new Map();
        if (!this.temp_var_map)
            this.temp_var_map = new Map();
    }
    get normal_var_map() {
        return pb_1.Message.getField(this, 15);
    }
    set normal_var_map(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get self_confidence() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set self_confidence(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get save_point_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set save_point_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get temp_var_map() {
        return pb_1.Message.getField(this, 8);
    }
    set temp_var_map(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new SaveMainCoopReq({});
        if (typeof data.normal_var_map == "object") {
            message.normal_var_map = new Map(Object.entries(data.normal_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.self_confidence != null) {
            message.self_confidence = data.self_confidence;
        }
        if (data.save_point_id != null) {
            message.save_point_id = data.save_point_id;
        }
        if (typeof data.temp_var_map == "object") {
            message.temp_var_map = new Map(Object.entries(data.temp_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.normal_var_map.size > 0) {
            data.normal_var_map = (Object.fromEntries)(this.normal_var_map);
        }
        if (this.self_confidence != null) {
            data.self_confidence = this.self_confidence;
        }
        if (this.save_point_id != null) {
            data.save_point_id = this.save_point_id;
        }
        if (this.temp_var_map.size > 0) {
            data.temp_var_map = (Object.fromEntries)(this.temp_var_map);
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.normal_var_map) {
            writer.writeMessage(15, this.normal_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.self_confidence != 0)
            writer.writeUint32(2, this.self_confidence);
        if (this.save_point_id != 0)
            writer.writeUint32(1, this.save_point_id);
        for (const [key, value] of this.temp_var_map) {
            writer.writeMessage(8, this.temp_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.id != 0)
            writer.writeUint32(3, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveMainCoopReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.normal_var_map, reader, reader.readUint32, reader.readInt32));
                    break;
                case 2:
                    message.self_confidence = reader.readUint32();
                    break;
                case 1:
                    message.save_point_id = reader.readUint32();
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.temp_var_map, reader, reader.readUint32, reader.readInt32));
                    break;
                case 3:
                    message.id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SaveMainCoopReq.deserialize(bytes);
    }
}
exports.SaveMainCoopReq = SaveMainCoopReq;
_SaveMainCoopReq_one_of_decls = new WeakMap();
