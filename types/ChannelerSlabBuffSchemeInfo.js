"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChannelerSlabBuffSchemeInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelerSlabBuffSchemeInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabBuffSchemeInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class ChannelerSlabBuffSchemeInfo extends pb_1.Message {
    constructor(data) {
        super();
        _ChannelerSlabBuffSchemeInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ChannelerSlabBuffSchemeInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("slot_map" in data && data.slot_map != undefined) {
                this.slot_map = data.slot_map;
            }
            if ("total_energy" in data && data.total_energy != undefined) {
                this.total_energy = data.total_energy;
            }
            if ("self_energy" in data && data.self_energy != undefined) {
                this.self_energy = data.self_energy;
            }
        }
        if (!this.slot_map)
            this.slot_map = new Map();
    }
    get slot_map() {
        return pb_1.Message.getField(this, 9);
    }
    set slot_map(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get total_energy() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set total_energy(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get self_energy() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set self_energy(value) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data) {
        const message = new ChannelerSlabBuffSchemeInfo({});
        if (typeof data.slot_map == "object") {
            message.slot_map = new Map(Object.entries(data.slot_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.total_energy != null) {
            message.total_energy = data.total_energy;
        }
        if (data.self_energy != null) {
            message.self_energy = data.self_energy;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.slot_map.size > 0) {
            data.slot_map = (Object.fromEntries)(this.slot_map);
        }
        if (this.total_energy != null) {
            data.total_energy = this.total_energy;
        }
        if (this.self_energy != null) {
            data.self_energy = this.self_energy;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.slot_map) {
            writer.writeMessage(9, this.slot_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.total_energy != 0)
            writer.writeUint32(13, this.total_energy);
        if (this.self_energy != 0)
            writer.writeUint32(15, this.self_energy);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabBuffSchemeInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.slot_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 13:
                    message.total_energy = reader.readUint32();
                    break;
                case 15:
                    message.self_energy = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ChannelerSlabBuffSchemeInfo.deserialize(bytes);
    }
}
exports.ChannelerSlabBuffSchemeInfo = ChannelerSlabBuffSchemeInfo;
_ChannelerSlabBuffSchemeInfo_one_of_decls = new WeakMap();
