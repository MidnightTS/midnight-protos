"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FleurFairPlayerStatInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FleurFairPlayerStatInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FleurFairPlayerStatInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ProfilePicture");
const pb_1 = require("google-protobuf");
class FleurFairPlayerStatInfo extends pb_1.Message {
    constructor(data) {
        super();
        _FleurFairPlayerStatInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _FleurFairPlayerStatInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("stat_id" in data && data.stat_id != undefined) {
                this.stat_id = data.stat_id;
            }
            if ("head_image" in data && data.head_image != undefined) {
                this.head_image = data.head_image;
            }
            if ("nick_name" in data && data.nick_name != undefined) {
                this.nick_name = data.nick_name;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, "");
    }
    set online_id(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProfilePicture, 1);
    }
    set profile_picture(value) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get stat_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set stat_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get head_image() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set head_image(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get nick_name() {
        return pb_1.Message.getFieldWithDefault(this, 15, "");
    }
    set nick_name(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set param(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new FleurFairPlayerStatInfo({});
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_1.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.stat_id != null) {
            message.stat_id = data.stat_id;
        }
        if (data.head_image != null) {
            message.head_image = data.head_image;
        }
        if (data.nick_name != null) {
            message.nick_name = data.nick_name;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.stat_id != null) {
            data.stat_id = this.stat_id;
        }
        if (this.head_image != null) {
            data.head_image = this.head_image;
        }
        if (this.nick_name != null) {
            data.nick_name = this.nick_name;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.online_id.length)
            writer.writeString(11, this.online_id);
        if (this.uid != 0)
            writer.writeUint32(8, this.uid);
        if (this.has_profile_picture)
            writer.writeMessage(1, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.stat_id != 0)
            writer.writeUint32(3, this.stat_id);
        if (this.head_image != 0)
            writer.writeUint32(6, this.head_image);
        if (this.nick_name.length)
            writer.writeString(15, this.nick_name);
        if (this.param != 0)
            writer.writeInt32(5, this.param);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FleurFairPlayerStatInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.online_id = reader.readString();
                    break;
                case 8:
                    message.uid = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_1.ProfilePicture.deserialize(reader));
                    break;
                case 3:
                    message.stat_id = reader.readUint32();
                    break;
                case 6:
                    message.head_image = reader.readUint32();
                    break;
                case 15:
                    message.nick_name = reader.readString();
                    break;
                case 5:
                    message.param = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return FleurFairPlayerStatInfo.deserialize(bytes);
    }
}
exports.FleurFairPlayerStatInfo = FleurFairPlayerStatInfo;
_FleurFairPlayerStatInfo_one_of_decls = new WeakMap();
