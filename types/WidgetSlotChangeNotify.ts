/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WidgetSlotChangeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./WidgetSlotData";
import * as dependency_2 from "./WidgetSlotOp";
import * as pb_1 from "google-protobuf";
export class WidgetSlotChangeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        op?: dependency_2.WidgetSlotOp;
        slot?: dependency_1.WidgetSlotData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("op" in data && data.op != undefined) {
                this.op = data.op;
            }
            if ("slot" in data && data.slot != undefined) {
                this.slot = data.slot;
            }
        }
    }
    get op() {
        return pb_1.Message.getFieldWithDefault(this, 11, dependency_2.WidgetSlotOp.WIDGET_SLOT_OP_ATTACH) as dependency_2.WidgetSlotOp;
    }
    set op(value: dependency_2.WidgetSlotOp) {
        pb_1.Message.setField(this, 11, value);
    }
    get slot() {
        return pb_1.Message.getWrapperField(this, dependency_1.WidgetSlotData, 8) as dependency_1.WidgetSlotData;
    }
    set slot(value: dependency_1.WidgetSlotData) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_slot() {
        return pb_1.Message.getField(this, 8) != null;
    }
    static fromObject(data: {
        op?: dependency_2.WidgetSlotOp;
        slot?: ReturnType<typeof dependency_1.WidgetSlotData.prototype.toObject>;
    }): WidgetSlotChangeNotify {
        const message = new WidgetSlotChangeNotify({});
        if (data.op != null) {
            message.op = data.op;
        }
        if (data.slot != null) {
            message.slot = dependency_1.WidgetSlotData.fromObject(data.slot);
        }
        return message;
    }
    toObject() {
        const data: {
            op?: dependency_2.WidgetSlotOp;
            slot?: ReturnType<typeof dependency_1.WidgetSlotData.prototype.toObject>;
        } = {};
        if (this.op != null) {
            data.op = this.op;
        }
        if (this.slot != null) {
            data.slot = this.slot.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.op != dependency_2.WidgetSlotOp.WIDGET_SLOT_OP_ATTACH)
            writer.writeEnum(11, this.op);
        if (this.has_slot)
            writer.writeMessage(8, this.slot, () => this.slot.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WidgetSlotChangeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetSlotChangeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.op = reader.readEnum();
                    break;
                case 8:
                    reader.readMessage(message.slot, () => message.slot = dependency_1.WidgetSlotData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WidgetSlotChangeNotify {
        return WidgetSlotChangeNotify.deserialize(bytes);
    }
}
