"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChessActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChessActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChessActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class ChessActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _ChessActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _ChessActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("is_teach_dungeon_finished" in data && data.is_teach_dungeon_finished != undefined) {
                this.is_teach_dungeon_finished = data.is_teach_dungeon_finished;
            }
            if ("content_close_time" in data && data.content_close_time != undefined) {
                this.content_close_time = data.content_close_time;
            }
            if ("obtained_exp" in data && data.obtained_exp != undefined) {
                this.obtained_exp = data.obtained_exp;
            }
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("available_exp" in data && data.available_exp != undefined) {
                this.available_exp = data.available_exp;
            }
            if ("exp" in data && data.exp != undefined) {
                this.exp = data.exp;
            }
            if ("finished_map_id_list" in data && data.finished_map_id_list != undefined) {
                this.finished_map_id_list = data.finished_map_id_list;
            }
            if ("punish_over_time" in data && data.punish_over_time != undefined) {
                this.punish_over_time = data.punish_over_time;
            }
        }
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set level(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_teach_dungeon_finished() {
        return pb_1.Message.getFieldWithDefault(this, 9, false);
    }
    set is_teach_dungeon_finished(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get content_close_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set content_close_time(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get obtained_exp() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set obtained_exp(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 5, false);
    }
    set is_content_closed(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get available_exp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set available_exp(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get exp() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set exp(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get finished_map_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 1, []);
    }
    set finished_map_id_list(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get punish_over_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set punish_over_time(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new ChessActivityDetailInfo({});
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.is_teach_dungeon_finished != null) {
            message.is_teach_dungeon_finished = data.is_teach_dungeon_finished;
        }
        if (data.content_close_time != null) {
            message.content_close_time = data.content_close_time;
        }
        if (data.obtained_exp != null) {
            message.obtained_exp = data.obtained_exp;
        }
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (data.available_exp != null) {
            message.available_exp = data.available_exp;
        }
        if (data.exp != null) {
            message.exp = data.exp;
        }
        if (data.finished_map_id_list != null) {
            message.finished_map_id_list = data.finished_map_id_list;
        }
        if (data.punish_over_time != null) {
            message.punish_over_time = data.punish_over_time;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.is_teach_dungeon_finished != null) {
            data.is_teach_dungeon_finished = this.is_teach_dungeon_finished;
        }
        if (this.content_close_time != null) {
            data.content_close_time = this.content_close_time;
        }
        if (this.obtained_exp != null) {
            data.obtained_exp = this.obtained_exp;
        }
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.available_exp != null) {
            data.available_exp = this.available_exp;
        }
        if (this.exp != null) {
            data.exp = this.exp;
        }
        if (this.finished_map_id_list != null) {
            data.finished_map_id_list = this.finished_map_id_list;
        }
        if (this.punish_over_time != null) {
            data.punish_over_time = this.punish_over_time;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.level != 0)
            writer.writeUint32(4, this.level);
        if (this.is_teach_dungeon_finished != false)
            writer.writeBool(9, this.is_teach_dungeon_finished);
        if (this.content_close_time != 0)
            writer.writeUint32(14, this.content_close_time);
        if (this.obtained_exp != 0)
            writer.writeUint32(8, this.obtained_exp);
        if (this.is_content_closed != false)
            writer.writeBool(5, this.is_content_closed);
        if (this.available_exp != 0)
            writer.writeUint32(2, this.available_exp);
        if (this.exp != 0)
            writer.writeUint32(13, this.exp);
        if (this.finished_map_id_list.length)
            writer.writePackedUint32(1, this.finished_map_id_list);
        if (this.punish_over_time != 0)
            writer.writeUint32(3, this.punish_over_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChessActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.level = reader.readUint32();
                    break;
                case 9:
                    message.is_teach_dungeon_finished = reader.readBool();
                    break;
                case 14:
                    message.content_close_time = reader.readUint32();
                    break;
                case 8:
                    message.obtained_exp = reader.readUint32();
                    break;
                case 5:
                    message.is_content_closed = reader.readBool();
                    break;
                case 2:
                    message.available_exp = reader.readUint32();
                    break;
                case 13:
                    message.exp = reader.readUint32();
                    break;
                case 1:
                    message.finished_map_id_list = reader.readPackedUint32();
                    break;
                case 3:
                    message.punish_over_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ChessActivityDetailInfo.deserialize(bytes);
    }
}
exports.ChessActivityDetailInfo = ChessActivityDetailInfo;
_ChessActivityDetailInfo_one_of_decls = new WeakMap();
