/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AbilityInvokeEntry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AbilityInvokeArgument";
import * as dependency_2 from "./AbilityInvokeEntryHead";
import * as dependency_3 from "./ForwardType";
import * as pb_1 from "google-protobuf";
export class AbilityInvokeEntry extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        argument_type?: dependency_1.AbilityInvokeArgument;
        head?: dependency_2.AbilityInvokeEntryHead;
        forward_peer?: number;
        event_id?: number;
        forward_type?: dependency_3.ForwardType;
        ability_data?: Uint8Array;
        total_tick_time?: number;
        entity_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("argument_type" in data && data.argument_type != undefined) {
                this.argument_type = data.argument_type;
            }
            if ("head" in data && data.head != undefined) {
                this.head = data.head;
            }
            if ("forward_peer" in data && data.forward_peer != undefined) {
                this.forward_peer = data.forward_peer;
            }
            if ("event_id" in data && data.event_id != undefined) {
                this.event_id = data.event_id;
            }
            if ("forward_type" in data && data.forward_type != undefined) {
                this.forward_type = data.forward_type;
            }
            if ("ability_data" in data && data.ability_data != undefined) {
                this.ability_data = data.ability_data;
            }
            if ("total_tick_time" in data && data.total_tick_time != undefined) {
                this.total_tick_time = data.total_tick_time;
            }
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
        }
    }
    get argument_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.AbilityInvokeArgument.ABILITY_INVOKE_ARGUMENT_NONE) as dependency_1.AbilityInvokeArgument;
    }
    set argument_type(value: dependency_1.AbilityInvokeArgument) {
        pb_1.Message.setField(this, 1, value);
    }
    get head() {
        return pb_1.Message.getWrapperField(this, dependency_2.AbilityInvokeEntryHead, 2) as dependency_2.AbilityInvokeEntryHead;
    }
    set head(value: dependency_2.AbilityInvokeEntryHead) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_head() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get forward_peer() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set forward_peer(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get event_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set event_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get forward_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_3.ForwardType.FORWARD_TYPE_LOCAL) as dependency_3.ForwardType;
    }
    set forward_type(value: dependency_3.ForwardType) {
        pb_1.Message.setField(this, 3, value);
    }
    get ability_data() {
        return pb_1.Message.getFieldWithDefault(this, 15, new Uint8Array()) as Uint8Array;
    }
    set ability_data(value: Uint8Array) {
        pb_1.Message.setField(this, 15, value);
    }
    get total_tick_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set total_tick_time(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set entity_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        argument_type?: dependency_1.AbilityInvokeArgument;
        head?: ReturnType<typeof dependency_2.AbilityInvokeEntryHead.prototype.toObject>;
        forward_peer?: number;
        event_id?: number;
        forward_type?: dependency_3.ForwardType;
        ability_data?: Uint8Array;
        total_tick_time?: number;
        entity_id?: number;
    }): AbilityInvokeEntry {
        const message = new AbilityInvokeEntry({});
        if (data.argument_type != null) {
            message.argument_type = data.argument_type;
        }
        if (data.head != null) {
            message.head = dependency_2.AbilityInvokeEntryHead.fromObject(data.head);
        }
        if (data.forward_peer != null) {
            message.forward_peer = data.forward_peer;
        }
        if (data.event_id != null) {
            message.event_id = data.event_id;
        }
        if (data.forward_type != null) {
            message.forward_type = data.forward_type;
        }
        if (data.ability_data != null) {
            message.ability_data = data.ability_data;
        }
        if (data.total_tick_time != null) {
            message.total_tick_time = data.total_tick_time;
        }
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        return message;
    }
    toObject() {
        const data: {
            argument_type?: dependency_1.AbilityInvokeArgument;
            head?: ReturnType<typeof dependency_2.AbilityInvokeEntryHead.prototype.toObject>;
            forward_peer?: number;
            event_id?: number;
            forward_type?: dependency_3.ForwardType;
            ability_data?: Uint8Array;
            total_tick_time?: number;
            entity_id?: number;
        } = {};
        if (this.argument_type != null) {
            data.argument_type = this.argument_type;
        }
        if (this.head != null) {
            data.head = this.head.toObject();
        }
        if (this.forward_peer != null) {
            data.forward_peer = this.forward_peer;
        }
        if (this.event_id != null) {
            data.event_id = this.event_id;
        }
        if (this.forward_type != null) {
            data.forward_type = this.forward_type;
        }
        if (this.ability_data != null) {
            data.ability_data = this.ability_data;
        }
        if (this.total_tick_time != null) {
            data.total_tick_time = this.total_tick_time;
        }
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.argument_type != dependency_1.AbilityInvokeArgument.ABILITY_INVOKE_ARGUMENT_NONE)
            writer.writeEnum(1, this.argument_type);
        if (this.has_head)
            writer.writeMessage(2, this.head, () => this.head.serialize(writer));
        if (this.forward_peer != 0)
            writer.writeUint32(4, this.forward_peer);
        if (this.event_id != 0)
            writer.writeUint32(12, this.event_id);
        if (this.forward_type != dependency_3.ForwardType.FORWARD_TYPE_LOCAL)
            writer.writeEnum(3, this.forward_type);
        if (this.ability_data.length)
            writer.writeBytes(15, this.ability_data);
        if (this.total_tick_time != 0)
            writer.writeDouble(14, this.total_tick_time);
        if (this.entity_id != 0)
            writer.writeUint32(9, this.entity_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AbilityInvokeEntry {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbilityInvokeEntry();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.argument_type = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.head, () => message.head = dependency_2.AbilityInvokeEntryHead.deserialize(reader));
                    break;
                case 4:
                    message.forward_peer = reader.readUint32();
                    break;
                case 12:
                    message.event_id = reader.readUint32();
                    break;
                case 3:
                    message.forward_type = reader.readEnum();
                    break;
                case 15:
                    message.ability_data = reader.readBytes();
                    break;
                case 14:
                    message.total_tick_time = reader.readDouble();
                    break;
                case 9:
                    message.entity_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AbilityInvokeEntry {
        return AbilityInvokeEntry.deserialize(bytes);
    }
}
