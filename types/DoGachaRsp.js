"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DoGachaRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DoGachaRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DoGachaRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./GachaItem");
const pb_1 = require("google-protobuf");
class DoGachaRsp extends pb_1.Message {
    constructor(data) {
        super();
        _DoGachaRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], __classPrivateFieldGet(this, _DoGachaRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("Unk3100_JKILPCKLNPI" in data && data.Unk3100_JKILPCKLNPI != undefined) {
                this.Unk3100_JKILPCKLNPI = data.Unk3100_JKILPCKLNPI;
            }
            if ("cost_item_num" in data && data.cost_item_num != undefined) {
                this.cost_item_num = data.cost_item_num;
            }
            if ("wish_max_progress" in data && data.wish_max_progress != undefined) {
                this.wish_max_progress = data.wish_max_progress;
            }
            if ("wish_item_id" in data && data.wish_item_id != undefined) {
                this.wish_item_id = data.wish_item_id;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("ten_cost_item_num" in data && data.ten_cost_item_num != undefined) {
                this.ten_cost_item_num = data.ten_cost_item_num;
            }
            if ("wish_progress" in data && data.wish_progress != undefined) {
                this.wish_progress = data.wish_progress;
            }
            if ("gacha_item_list" in data && data.gacha_item_list != undefined) {
                this.gacha_item_list = data.gacha_item_list;
            }
            if ("ten_cost_item_id" in data && data.ten_cost_item_id != undefined) {
                this.ten_cost_item_id = data.ten_cost_item_id;
            }
            if ("gacha_times" in data && data.gacha_times != undefined) {
                this.gacha_times = data.gacha_times;
            }
            if ("Unk2700_LEEPELHDING" in data && data.Unk2700_LEEPELHDING != undefined) {
                this.Unk2700_LEEPELHDING = data.Unk2700_LEEPELHDING;
            }
            if ("Unk3100_IDBLFJDHHPI" in data && data.Unk3100_IDBLFJDHHPI != undefined) {
                this.Unk3100_IDBLFJDHHPI = data.Unk3100_IDBLFJDHHPI;
            }
            if ("gacha_type" in data && data.gacha_type != undefined) {
                this.gacha_type = data.gacha_type;
            }
            if ("gacha_times_limit" in data && data.gacha_times_limit != undefined) {
                this.gacha_times_limit = data.gacha_times_limit;
            }
            if ("cost_item_id" in data && data.cost_item_id != undefined) {
                this.cost_item_id = data.cost_item_id;
            }
            if ("Unk2700_OJKKHDLEDCI" in data && data.Unk2700_OJKKHDLEDCI != undefined) {
                this.Unk2700_OJKKHDLEDCI = data.Unk2700_OJKKHDLEDCI;
            }
            if ("left_gacha_times" in data && data.left_gacha_times != undefined) {
                this.left_gacha_times = data.left_gacha_times;
            }
            if ("new_gacha_random" in data && data.new_gacha_random != undefined) {
                this.new_gacha_random = data.new_gacha_random;
            }
            if ("gacha_schedule_id" in data && data.gacha_schedule_id != undefined) {
                this.gacha_schedule_id = data.gacha_schedule_id;
            }
        }
    }
    get Unk3100_JKILPCKLNPI() {
        return pb_1.Message.getFieldWithDefault(this, 155, 0);
    }
    set Unk3100_JKILPCKLNPI(value) {
        pb_1.Message.setField(this, 155, value);
    }
    get cost_item_num() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set cost_item_num(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get wish_max_progress() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set wish_max_progress(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get wish_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set wish_item_id(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get ten_cost_item_num() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set ten_cost_item_num(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get wish_progress() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set wish_progress(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get gacha_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.GachaItem, 15);
    }
    set gacha_item_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get ten_cost_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set ten_cost_item_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get gacha_times() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set gacha_times(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get Unk2700_LEEPELHDING() {
        return pb_1.Message.getFieldWithDefault(this, 1435, false);
    }
    set Unk2700_LEEPELHDING(value) {
        pb_1.Message.setField(this, 1435, value);
    }
    get Unk3100_IDBLFJDHHPI() {
        return pb_1.Message.getFieldWithDefault(this, 1868, false);
    }
    set Unk3100_IDBLFJDHHPI(value) {
        pb_1.Message.setField(this, 1868, value);
    }
    get gacha_type() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set gacha_type(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get gacha_times_limit() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set gacha_times_limit(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get cost_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set cost_item_id(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get Unk2700_OJKKHDLEDCI() {
        return pb_1.Message.getFieldWithDefault(this, 1240, 0);
    }
    set Unk2700_OJKKHDLEDCI(value) {
        pb_1.Message.setField(this, 1240, value);
    }
    get left_gacha_times() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set left_gacha_times(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get new_gacha_random() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set new_gacha_random(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get gacha_schedule_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set gacha_schedule_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new DoGachaRsp({});
        if (data.Unk3100_JKILPCKLNPI != null) {
            message.Unk3100_JKILPCKLNPI = data.Unk3100_JKILPCKLNPI;
        }
        if (data.cost_item_num != null) {
            message.cost_item_num = data.cost_item_num;
        }
        if (data.wish_max_progress != null) {
            message.wish_max_progress = data.wish_max_progress;
        }
        if (data.wish_item_id != null) {
            message.wish_item_id = data.wish_item_id;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.ten_cost_item_num != null) {
            message.ten_cost_item_num = data.ten_cost_item_num;
        }
        if (data.wish_progress != null) {
            message.wish_progress = data.wish_progress;
        }
        if (data.gacha_item_list != null) {
            message.gacha_item_list = data.gacha_item_list.map(item => dependency_1.GachaItem.fromObject(item));
        }
        if (data.ten_cost_item_id != null) {
            message.ten_cost_item_id = data.ten_cost_item_id;
        }
        if (data.gacha_times != null) {
            message.gacha_times = data.gacha_times;
        }
        if (data.Unk2700_LEEPELHDING != null) {
            message.Unk2700_LEEPELHDING = data.Unk2700_LEEPELHDING;
        }
        if (data.Unk3100_IDBLFJDHHPI != null) {
            message.Unk3100_IDBLFJDHHPI = data.Unk3100_IDBLFJDHHPI;
        }
        if (data.gacha_type != null) {
            message.gacha_type = data.gacha_type;
        }
        if (data.gacha_times_limit != null) {
            message.gacha_times_limit = data.gacha_times_limit;
        }
        if (data.cost_item_id != null) {
            message.cost_item_id = data.cost_item_id;
        }
        if (data.Unk2700_OJKKHDLEDCI != null) {
            message.Unk2700_OJKKHDLEDCI = data.Unk2700_OJKKHDLEDCI;
        }
        if (data.left_gacha_times != null) {
            message.left_gacha_times = data.left_gacha_times;
        }
        if (data.new_gacha_random != null) {
            message.new_gacha_random = data.new_gacha_random;
        }
        if (data.gacha_schedule_id != null) {
            message.gacha_schedule_id = data.gacha_schedule_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.Unk3100_JKILPCKLNPI != null) {
            data.Unk3100_JKILPCKLNPI = this.Unk3100_JKILPCKLNPI;
        }
        if (this.cost_item_num != null) {
            data.cost_item_num = this.cost_item_num;
        }
        if (this.wish_max_progress != null) {
            data.wish_max_progress = this.wish_max_progress;
        }
        if (this.wish_item_id != null) {
            data.wish_item_id = this.wish_item_id;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.ten_cost_item_num != null) {
            data.ten_cost_item_num = this.ten_cost_item_num;
        }
        if (this.wish_progress != null) {
            data.wish_progress = this.wish_progress;
        }
        if (this.gacha_item_list != null) {
            data.gacha_item_list = this.gacha_item_list.map((item) => item.toObject());
        }
        if (this.ten_cost_item_id != null) {
            data.ten_cost_item_id = this.ten_cost_item_id;
        }
        if (this.gacha_times != null) {
            data.gacha_times = this.gacha_times;
        }
        if (this.Unk2700_LEEPELHDING != null) {
            data.Unk2700_LEEPELHDING = this.Unk2700_LEEPELHDING;
        }
        if (this.Unk3100_IDBLFJDHHPI != null) {
            data.Unk3100_IDBLFJDHHPI = this.Unk3100_IDBLFJDHHPI;
        }
        if (this.gacha_type != null) {
            data.gacha_type = this.gacha_type;
        }
        if (this.gacha_times_limit != null) {
            data.gacha_times_limit = this.gacha_times_limit;
        }
        if (this.cost_item_id != null) {
            data.cost_item_id = this.cost_item_id;
        }
        if (this.Unk2700_OJKKHDLEDCI != null) {
            data.Unk2700_OJKKHDLEDCI = this.Unk2700_OJKKHDLEDCI;
        }
        if (this.left_gacha_times != null) {
            data.left_gacha_times = this.left_gacha_times;
        }
        if (this.new_gacha_random != null) {
            data.new_gacha_random = this.new_gacha_random;
        }
        if (this.gacha_schedule_id != null) {
            data.gacha_schedule_id = this.gacha_schedule_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.Unk3100_JKILPCKLNPI != 0)
            writer.writeUint32(155, this.Unk3100_JKILPCKLNPI);
        if (this.cost_item_num != 0)
            writer.writeUint32(10, this.cost_item_num);
        if (this.wish_max_progress != 0)
            writer.writeUint32(9, this.wish_max_progress);
        if (this.wish_item_id != 0)
            writer.writeUint32(8, this.wish_item_id);
        if (this.retcode != 0)
            writer.writeInt32(13, this.retcode);
        if (this.ten_cost_item_num != 0)
            writer.writeUint32(3, this.ten_cost_item_num);
        if (this.wish_progress != 0)
            writer.writeUint32(2, this.wish_progress);
        if (this.gacha_item_list.length)
            writer.writeRepeatedMessage(15, this.gacha_item_list, (item) => item.serialize(writer));
        if (this.ten_cost_item_id != 0)
            writer.writeUint32(7, this.ten_cost_item_id);
        if (this.gacha_times != 0)
            writer.writeUint32(4, this.gacha_times);
        if (this.Unk2700_LEEPELHDING != false)
            writer.writeBool(1435, this.Unk2700_LEEPELHDING);
        if (this.Unk3100_IDBLFJDHHPI != false)
            writer.writeBool(1868, this.Unk3100_IDBLFJDHHPI);
        if (this.gacha_type != 0)
            writer.writeUint32(12, this.gacha_type);
        if (this.gacha_times_limit != 0)
            writer.writeUint32(1, this.gacha_times_limit);
        if (this.cost_item_id != 0)
            writer.writeUint32(14, this.cost_item_id);
        if (this.Unk2700_OJKKHDLEDCI != 0)
            writer.writeUint32(1240, this.Unk2700_OJKKHDLEDCI);
        if (this.left_gacha_times != 0)
            writer.writeUint32(6, this.left_gacha_times);
        if (this.new_gacha_random != 0)
            writer.writeUint32(11, this.new_gacha_random);
        if (this.gacha_schedule_id != 0)
            writer.writeUint32(5, this.gacha_schedule_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoGachaRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 155:
                    message.Unk3100_JKILPCKLNPI = reader.readUint32();
                    break;
                case 10:
                    message.cost_item_num = reader.readUint32();
                    break;
                case 9:
                    message.wish_max_progress = reader.readUint32();
                    break;
                case 8:
                    message.wish_item_id = reader.readUint32();
                    break;
                case 13:
                    message.retcode = reader.readInt32();
                    break;
                case 3:
                    message.ten_cost_item_num = reader.readUint32();
                    break;
                case 2:
                    message.wish_progress = reader.readUint32();
                    break;
                case 15:
                    reader.readMessage(message.gacha_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_1.GachaItem.deserialize(reader), dependency_1.GachaItem));
                    break;
                case 7:
                    message.ten_cost_item_id = reader.readUint32();
                    break;
                case 4:
                    message.gacha_times = reader.readUint32();
                    break;
                case 1435:
                    message.Unk2700_LEEPELHDING = reader.readBool();
                    break;
                case 1868:
                    message.Unk3100_IDBLFJDHHPI = reader.readBool();
                    break;
                case 12:
                    message.gacha_type = reader.readUint32();
                    break;
                case 1:
                    message.gacha_times_limit = reader.readUint32();
                    break;
                case 14:
                    message.cost_item_id = reader.readUint32();
                    break;
                case 1240:
                    message.Unk2700_OJKKHDLEDCI = reader.readUint32();
                    break;
                case 6:
                    message.left_gacha_times = reader.readUint32();
                    break;
                case 11:
                    message.new_gacha_random = reader.readUint32();
                    break;
                case 5:
                    message.gacha_schedule_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DoGachaRsp.deserialize(bytes);
    }
}
exports.DoGachaRsp = DoGachaRsp;
_DoGachaRsp_one_of_decls = new WeakMap();
