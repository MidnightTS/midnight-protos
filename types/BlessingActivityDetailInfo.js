"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BlessingActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlessingActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BlessingActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class BlessingActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _BlessingActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _BlessingActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cur_day_scan_type" in data && data.cur_day_scan_type != undefined) {
                this.cur_day_scan_type = data.cur_day_scan_type;
            }
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("pic_num_map" in data && data.pic_num_map != undefined) {
                this.pic_num_map = data.pic_num_map;
            }
            if ("content_close_time" in data && data.content_close_time != undefined) {
                this.content_close_time = data.content_close_time;
            }
            if ("cur_day_scan_num" in data && data.cur_day_scan_num != undefined) {
                this.cur_day_scan_num = data.cur_day_scan_num;
            }
            if ("redeem_reward_num" in data && data.redeem_reward_num != undefined) {
                this.redeem_reward_num = data.redeem_reward_num;
            }
            if ("is_activated" in data && data.is_activated != undefined) {
                this.is_activated = data.is_activated;
            }
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
        }
        if (!this.pic_num_map)
            this.pic_num_map = new Map();
    }
    get cur_day_scan_type() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set cur_day_scan_type(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 11, false);
    }
    set is_content_closed(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get pic_num_map() {
        return pb_1.Message.getField(this, 15);
    }
    set pic_num_map(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get content_close_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set content_close_time(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get cur_day_scan_num() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set cur_day_scan_num(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get redeem_reward_num() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set redeem_reward_num(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_activated() {
        return pb_1.Message.getFieldWithDefault(this, 13, false);
    }
    set is_activated(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set next_refresh_time(value) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data) {
        const message = new BlessingActivityDetailInfo({});
        if (data.cur_day_scan_type != null) {
            message.cur_day_scan_type = data.cur_day_scan_type;
        }
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (typeof data.pic_num_map == "object") {
            message.pic_num_map = new Map(Object.entries(data.pic_num_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.content_close_time != null) {
            message.content_close_time = data.content_close_time;
        }
        if (data.cur_day_scan_num != null) {
            message.cur_day_scan_num = data.cur_day_scan_num;
        }
        if (data.redeem_reward_num != null) {
            message.redeem_reward_num = data.redeem_reward_num;
        }
        if (data.is_activated != null) {
            message.is_activated = data.is_activated;
        }
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.cur_day_scan_type != null) {
            data.cur_day_scan_type = this.cur_day_scan_type;
        }
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.pic_num_map.size > 0) {
            data.pic_num_map = (Object.fromEntries)(this.pic_num_map);
        }
        if (this.content_close_time != null) {
            data.content_close_time = this.content_close_time;
        }
        if (this.cur_day_scan_num != null) {
            data.cur_day_scan_num = this.cur_day_scan_num;
        }
        if (this.redeem_reward_num != null) {
            data.redeem_reward_num = this.redeem_reward_num;
        }
        if (this.is_activated != null) {
            data.is_activated = this.is_activated;
        }
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cur_day_scan_type != 0)
            writer.writeUint32(9, this.cur_day_scan_type);
        if (this.is_content_closed != false)
            writer.writeBool(11, this.is_content_closed);
        for (const [key, value] of this.pic_num_map) {
            writer.writeMessage(15, this.pic_num_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.content_close_time != 0)
            writer.writeUint32(2, this.content_close_time);
        if (this.cur_day_scan_num != 0)
            writer.writeUint32(4, this.cur_day_scan_num);
        if (this.redeem_reward_num != 0)
            writer.writeUint32(1, this.redeem_reward_num);
        if (this.is_activated != false)
            writer.writeBool(13, this.is_activated);
        if (this.next_refresh_time != 0)
            writer.writeUint32(6, this.next_refresh_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlessingActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.cur_day_scan_type = reader.readUint32();
                    break;
                case 11:
                    message.is_content_closed = reader.readBool();
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.pic_num_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 2:
                    message.content_close_time = reader.readUint32();
                    break;
                case 4:
                    message.cur_day_scan_num = reader.readUint32();
                    break;
                case 1:
                    message.redeem_reward_num = reader.readUint32();
                    break;
                case 13:
                    message.is_activated = reader.readBool();
                    break;
                case 6:
                    message.next_refresh_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return BlessingActivityDetailInfo.deserialize(bytes);
    }
}
exports.BlessingActivityDetailInfo = BlessingActivityDetailInfo;
_BlessingActivityDetailInfo_one_of_decls = new WeakMap();
