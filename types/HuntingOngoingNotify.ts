/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HuntingOngoingNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HuntingPair";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class HuntingOngoingNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hunting_pair?: dependency_1.HuntingPair;
        is_started?: boolean;
        next_position?: dependency_2.Vector;
        finish_clue_count?: number;
        is_final?: boolean;
        fail_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hunting_pair" in data && data.hunting_pair != undefined) {
                this.hunting_pair = data.hunting_pair;
            }
            if ("is_started" in data && data.is_started != undefined) {
                this.is_started = data.is_started;
            }
            if ("next_position" in data && data.next_position != undefined) {
                this.next_position = data.next_position;
            }
            if ("finish_clue_count" in data && data.finish_clue_count != undefined) {
                this.finish_clue_count = data.finish_clue_count;
            }
            if ("is_final" in data && data.is_final != undefined) {
                this.is_final = data.is_final;
            }
            if ("fail_time" in data && data.fail_time != undefined) {
                this.fail_time = data.fail_time;
            }
        }
    }
    get hunting_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.HuntingPair, 15) as dependency_1.HuntingPair;
    }
    set hunting_pair(value: dependency_1.HuntingPair) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_hunting_pair() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get is_started() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set is_started(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get next_position() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 3) as dependency_2.Vector;
    }
    set next_position(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_next_position() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get finish_clue_count() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set finish_clue_count(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_final() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set is_final(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get fail_time() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set fail_time(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        hunting_pair?: ReturnType<typeof dependency_1.HuntingPair.prototype.toObject>;
        is_started?: boolean;
        next_position?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        finish_clue_count?: number;
        is_final?: boolean;
        fail_time?: number;
    }): HuntingOngoingNotify {
        const message = new HuntingOngoingNotify({});
        if (data.hunting_pair != null) {
            message.hunting_pair = dependency_1.HuntingPair.fromObject(data.hunting_pair);
        }
        if (data.is_started != null) {
            message.is_started = data.is_started;
        }
        if (data.next_position != null) {
            message.next_position = dependency_2.Vector.fromObject(data.next_position);
        }
        if (data.finish_clue_count != null) {
            message.finish_clue_count = data.finish_clue_count;
        }
        if (data.is_final != null) {
            message.is_final = data.is_final;
        }
        if (data.fail_time != null) {
            message.fail_time = data.fail_time;
        }
        return message;
    }
    toObject() {
        const data: {
            hunting_pair?: ReturnType<typeof dependency_1.HuntingPair.prototype.toObject>;
            is_started?: boolean;
            next_position?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            finish_clue_count?: number;
            is_final?: boolean;
            fail_time?: number;
        } = {};
        if (this.hunting_pair != null) {
            data.hunting_pair = this.hunting_pair.toObject();
        }
        if (this.is_started != null) {
            data.is_started = this.is_started;
        }
        if (this.next_position != null) {
            data.next_position = this.next_position.toObject();
        }
        if (this.finish_clue_count != null) {
            data.finish_clue_count = this.finish_clue_count;
        }
        if (this.is_final != null) {
            data.is_final = this.is_final;
        }
        if (this.fail_time != null) {
            data.fail_time = this.fail_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_hunting_pair)
            writer.writeMessage(15, this.hunting_pair, () => this.hunting_pair.serialize(writer));
        if (this.is_started != false)
            writer.writeBool(8, this.is_started);
        if (this.has_next_position)
            writer.writeMessage(3, this.next_position, () => this.next_position.serialize(writer));
        if (this.finish_clue_count != 0)
            writer.writeUint32(10, this.finish_clue_count);
        if (this.is_final != false)
            writer.writeBool(14, this.is_final);
        if (this.fail_time != 0)
            writer.writeUint32(7, this.fail_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HuntingOngoingNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HuntingOngoingNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    reader.readMessage(message.hunting_pair, () => message.hunting_pair = dependency_1.HuntingPair.deserialize(reader));
                    break;
                case 8:
                    message.is_started = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.next_position, () => message.next_position = dependency_2.Vector.deserialize(reader));
                    break;
                case 10:
                    message.finish_clue_count = reader.readUint32();
                    break;
                case 14:
                    message.is_final = reader.readBool();
                    break;
                case 7:
                    message.fail_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HuntingOngoingNotify {
        return HuntingOngoingNotify.deserialize(bytes);
    }
}
