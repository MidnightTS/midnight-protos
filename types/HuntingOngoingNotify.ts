// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "HuntingOngoingNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./Vector";
import { HuntingPair } from "./HuntingPair";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 4318;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message HuntingOngoingNotify
 */
export interface HuntingOngoingNotify {
    /**
     * @generated from protobuf field: HuntingPair hunting_pair = 11;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: uint32 finish_clue_count = 7;
     */
    finishClueCount: number;
    /**
     * @generated from protobuf field: Vector next_position = 2;
     */
    nextPosition?: Vector;
    /**
     * @generated from protobuf field: bool is_final = 5;
     */
    isFinal: boolean;
    /**
     * @generated from protobuf field: bool is_started = 13;
     */
    isStarted: boolean;
    /**
     * @generated from protobuf field: uint32 fail_time = 4;
     */
    failTime: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class HuntingOngoingNotify$Type extends MessageType<HuntingOngoingNotify> {
    constructor() {
        super("HuntingOngoingNotify", [
            { no: 11, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 7, name: "finish_clue_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "next_position", kind: "message", T: () => Vector },
            { no: 5, name: "is_final", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "is_started", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "fail_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HuntingOngoingNotify>): HuntingOngoingNotify {
        const message = { finishClueCount: 0, isFinal: false, isStarted: false, failTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingOngoingNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingOngoingNotify): HuntingOngoingNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* HuntingPair hunting_pair */ 11:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* uint32 finish_clue_count */ 7:
                    message.finishClueCount = reader.uint32();
                    break;
                case /* Vector next_position */ 2:
                    message.nextPosition = Vector.internalBinaryRead(reader, reader.uint32(), options, message.nextPosition);
                    break;
                case /* bool is_final */ 5:
                    message.isFinal = reader.bool();
                    break;
                case /* bool is_started */ 13:
                    message.isStarted = reader.bool();
                    break;
                case /* uint32 fail_time */ 4:
                    message.failTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingOngoingNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* HuntingPair hunting_pair = 11; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* uint32 finish_clue_count = 7; */
        if (message.finishClueCount !== 0)
            writer.tag(7, WireType.Varint).uint32(message.finishClueCount);
        /* Vector next_position = 2; */
        if (message.nextPosition)
            Vector.internalBinaryWrite(message.nextPosition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool is_final = 5; */
        if (message.isFinal !== false)
            writer.tag(5, WireType.Varint).bool(message.isFinal);
        /* bool is_started = 13; */
        if (message.isStarted !== false)
            writer.tag(13, WireType.Varint).bool(message.isStarted);
        /* uint32 fail_time = 4; */
        if (message.failTime !== 0)
            writer.tag(4, WireType.Varint).uint32(message.failTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HuntingOngoingNotify
 */
export const HuntingOngoingNotify = new HuntingOngoingNotify$Type();
