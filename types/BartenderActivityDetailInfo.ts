// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "BartenderActivityDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BartenderTaskInfo } from "./BartenderTaskInfo";
import { BartenderLevelInfo } from "./BartenderLevelInfo";
/**
 * @generated from protobuf message BartenderActivityDetailInfo
 */
export interface BartenderActivityDetailInfo {
    /**
     * @generated from protobuf field: bool is_content_closed = 15;
     */
    isContentClosed: boolean;
    /**
     * @generated from protobuf field: repeated BartenderLevelInfo unlock_level_list = 10;
     */
    unlockLevelList: BartenderLevelInfo[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_item_list = 3;
     */
    unlockItemList: number[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_formula_list = 6;
     */
    unlockFormulaList: number[];
    /**
     * @generated from protobuf field: repeated BartenderTaskInfo unlock_task_list = 5;
     */
    unlockTaskList: BartenderTaskInfo[];
    /**
     * @generated from protobuf field: bool is_develop_module_open = 9;
     */
    isDevelopModuleOpen: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class BartenderActivityDetailInfo$Type extends MessageType<BartenderActivityDetailInfo> {
    constructor() {
        super("BartenderActivityDetailInfo", [
            { no: 15, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "unlock_level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BartenderLevelInfo },
            { no: 3, name: "unlock_item_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "unlock_formula_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "unlock_task_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BartenderTaskInfo },
            { no: 9, name: "is_develop_module_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderActivityDetailInfo>): BartenderActivityDetailInfo {
        const message = { isContentClosed: false, unlockLevelList: [], unlockItemList: [], unlockFormulaList: [], unlockTaskList: [], isDevelopModuleOpen: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderActivityDetailInfo): BartenderActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_content_closed */ 15:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated BartenderLevelInfo unlock_level_list */ 10:
                    message.unlockLevelList.push(BartenderLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 unlock_item_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockItemList.push(reader.uint32());
                    else
                        message.unlockItemList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_formula_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockFormulaList.push(reader.uint32());
                    else
                        message.unlockFormulaList.push(reader.uint32());
                    break;
                case /* repeated BartenderTaskInfo unlock_task_list */ 5:
                    message.unlockTaskList.push(BartenderTaskInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_develop_module_open */ 9:
                    message.isDevelopModuleOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_content_closed = 15; */
        if (message.isContentClosed !== false)
            writer.tag(15, WireType.Varint).bool(message.isContentClosed);
        /* repeated BartenderLevelInfo unlock_level_list = 10; */
        for (let i = 0; i < message.unlockLevelList.length; i++)
            BartenderLevelInfo.internalBinaryWrite(message.unlockLevelList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 unlock_item_list = 3; */
        if (message.unlockItemList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockItemList.length; i++)
                writer.uint32(message.unlockItemList[i]);
            writer.join();
        }
        /* repeated uint32 unlock_formula_list = 6; */
        if (message.unlockFormulaList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockFormulaList.length; i++)
                writer.uint32(message.unlockFormulaList[i]);
            writer.join();
        }
        /* repeated BartenderTaskInfo unlock_task_list = 5; */
        for (let i = 0; i < message.unlockTaskList.length; i++)
            BartenderTaskInfo.internalBinaryWrite(message.unlockTaskList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool is_develop_module_open = 9; */
        if (message.isDevelopModuleOpen !== false)
            writer.tag(9, WireType.Varint).bool(message.isDevelopModuleOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BartenderActivityDetailInfo
 */
export const BartenderActivityDetailInfo = new BartenderActivityDetailInfo$Type();
