// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "AbilityMixinWindSeedSpawner.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./Vector";
/**
 * @generated from protobuf message AbilityMixinWindSeedSpawner
 */
export interface AbilityMixinWindSeedSpawner {
    /**
     * @generated from protobuf oneof: cmd
     */
    cmd: {
        oneofKind: "addSignal";
        /**
         * @generated from protobuf field: AbilityMixinWindSeedSpawner.AddSignal add_signal = 8;
         */
        addSignal: AbilityMixinWindSeedSpawner_AddSignal;
    } | {
        oneofKind: "refreshSeed";
        /**
         * @generated from protobuf field: AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed = 12;
         */
        refreshSeed: AbilityMixinWindSeedSpawner_RefreshSeed;
    } | {
        oneofKind: "catchSeed";
        /**
         * @generated from protobuf field: AbilityMixinWindSeedSpawner.CatchSeed catch_seed = 14;
         */
        catchSeed: AbilityMixinWindSeedSpawner_CatchSeed;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message AbilityMixinWindSeedSpawner.AddSignal
 */
export interface AbilityMixinWindSeedSpawner_AddSignal {
}
/**
 * @generated from protobuf message AbilityMixinWindSeedSpawner.RefreshSeed
 */
export interface AbilityMixinWindSeedSpawner_RefreshSeed {
    /**
     * @generated from protobuf field: repeated Vector pos_list = 10;
     */
    posList: Vector[];
}
/**
 * @generated from protobuf message AbilityMixinWindSeedSpawner.CatchSeed
 */
export interface AbilityMixinWindSeedSpawner_CatchSeed {
    /**
     * @generated from protobuf field: uint32 entity_id = 13;
     */
    entityId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner$Type extends MessageType<AbilityMixinWindSeedSpawner> {
    constructor() {
        super("AbilityMixinWindSeedSpawner", [
            { no: 8, name: "add_signal", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_AddSignal },
            { no: 12, name: "refresh_seed", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_RefreshSeed },
            { no: 14, name: "catch_seed", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_CatchSeed }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner>): AbilityMixinWindSeedSpawner {
        const message = { cmd: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner): AbilityMixinWindSeedSpawner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* AbilityMixinWindSeedSpawner.AddSignal add_signal */ 8:
                    message.cmd = {
                        oneofKind: "addSignal",
                        addSignal: AbilityMixinWindSeedSpawner_AddSignal.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).addSignal)
                    };
                    break;
                case /* AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed */ 12:
                    message.cmd = {
                        oneofKind: "refreshSeed",
                        refreshSeed: AbilityMixinWindSeedSpawner_RefreshSeed.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).refreshSeed)
                    };
                    break;
                case /* AbilityMixinWindSeedSpawner.CatchSeed catch_seed */ 14:
                    message.cmd = {
                        oneofKind: "catchSeed",
                        catchSeed: AbilityMixinWindSeedSpawner_CatchSeed.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).catchSeed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* AbilityMixinWindSeedSpawner.AddSignal add_signal = 8; */
        if (message.cmd.oneofKind === "addSignal")
            AbilityMixinWindSeedSpawner_AddSignal.internalBinaryWrite(message.cmd.addSignal, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed = 12; */
        if (message.cmd.oneofKind === "refreshSeed")
            AbilityMixinWindSeedSpawner_RefreshSeed.internalBinaryWrite(message.cmd.refreshSeed, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* AbilityMixinWindSeedSpawner.CatchSeed catch_seed = 14; */
        if (message.cmd.oneofKind === "catchSeed")
            AbilityMixinWindSeedSpawner_CatchSeed.internalBinaryWrite(message.cmd.catchSeed, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityMixinWindSeedSpawner
 */
export const AbilityMixinWindSeedSpawner = new AbilityMixinWindSeedSpawner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_AddSignal$Type extends MessageType<AbilityMixinWindSeedSpawner_AddSignal> {
    constructor() {
        super("AbilityMixinWindSeedSpawner.AddSignal", []);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_AddSignal>): AbilityMixinWindSeedSpawner_AddSignal {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_AddSignal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_AddSignal): AbilityMixinWindSeedSpawner_AddSignal {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_AddSignal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityMixinWindSeedSpawner.AddSignal
 */
export const AbilityMixinWindSeedSpawner_AddSignal = new AbilityMixinWindSeedSpawner_AddSignal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_RefreshSeed$Type extends MessageType<AbilityMixinWindSeedSpawner_RefreshSeed> {
    constructor() {
        super("AbilityMixinWindSeedSpawner.RefreshSeed", [
            { no: 10, name: "pos_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_RefreshSeed>): AbilityMixinWindSeedSpawner_RefreshSeed {
        const message = { posList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_RefreshSeed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_RefreshSeed): AbilityMixinWindSeedSpawner_RefreshSeed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Vector pos_list */ 10:
                    message.posList.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_RefreshSeed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Vector pos_list = 10; */
        for (let i = 0; i < message.posList.length; i++)
            Vector.internalBinaryWrite(message.posList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityMixinWindSeedSpawner.RefreshSeed
 */
export const AbilityMixinWindSeedSpawner_RefreshSeed = new AbilityMixinWindSeedSpawner_RefreshSeed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_CatchSeed$Type extends MessageType<AbilityMixinWindSeedSpawner_CatchSeed> {
    constructor() {
        super("AbilityMixinWindSeedSpawner.CatchSeed", [
            { no: 13, name: "entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_CatchSeed>): AbilityMixinWindSeedSpawner_CatchSeed {
        const message = { entityId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_CatchSeed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_CatchSeed): AbilityMixinWindSeedSpawner_CatchSeed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_CatchSeed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 entity_id = 13; */
        if (message.entityId !== 0)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityMixinWindSeedSpawner.CatchSeed
 */
export const AbilityMixinWindSeedSpawner_CatchSeed = new AbilityMixinWindSeedSpawner_CatchSeed$Type();
