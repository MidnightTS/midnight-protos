/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: OnlinePlayerInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MpSettingType";
import * as dependency_2 from "./ProfilePicture";
import * as pb_1 from "google-protobuf";
export class OnlinePlayerInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        nickname?: string;
        player_level?: number;
        avatar_id?: number;
        mp_setting_type?: dependency_1.MpSettingType;
        cur_player_num_in_world?: number;
        world_level?: number;
        online_id?: string;
        name_card_id?: number;
        blacklist_uid_list?: number[];
        signature?: string;
        profile_picture?: dependency_2.ProfilePicture;
        psn_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("player_level" in data && data.player_level != undefined) {
                this.player_level = data.player_level;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("mp_setting_type" in data && data.mp_setting_type != undefined) {
                this.mp_setting_type = data.mp_setting_type;
            }
            if ("cur_player_num_in_world" in data && data.cur_player_num_in_world != undefined) {
                this.cur_player_num_in_world = data.cur_player_num_in_world;
            }
            if ("world_level" in data && data.world_level != undefined) {
                this.world_level = data.world_level;
            }
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
            if ("name_card_id" in data && data.name_card_id != undefined) {
                this.name_card_id = data.name_card_id;
            }
            if ("blacklist_uid_list" in data && data.blacklist_uid_list != undefined) {
                this.blacklist_uid_list = data.blacklist_uid_list;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("psn_id" in data && data.psn_id != undefined) {
                this.psn_id = data.psn_id;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get player_level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set player_level(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get mp_setting_type() {
        return pb_1.Message.getFieldWithDefault(this, 5, dependency_1.MpSettingType.MP_SETTING_TYPE_NO_ENTER) as dependency_1.MpSettingType;
    }
    set mp_setting_type(value: dependency_1.MpSettingType) {
        pb_1.Message.setField(this, 5, value);
    }
    get cur_player_num_in_world() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set cur_player_num_in_world(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get world_level() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set world_level(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set online_id(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get name_card_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set name_card_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get blacklist_uid_list() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
    }
    set blacklist_uid_list(value: number[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get signature() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set signature(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_2.ProfilePicture, 12) as dependency_2.ProfilePicture;
    }
    set profile_picture(value: dependency_2.ProfilePicture) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get psn_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set psn_id(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        uid?: number;
        nickname?: string;
        player_level?: number;
        avatar_id?: number;
        mp_setting_type?: dependency_1.MpSettingType;
        cur_player_num_in_world?: number;
        world_level?: number;
        online_id?: string;
        name_card_id?: number;
        blacklist_uid_list?: number[];
        signature?: string;
        profile_picture?: ReturnType<typeof dependency_2.ProfilePicture.prototype.toObject>;
        psn_id?: string;
    }): OnlinePlayerInfo {
        const message = new OnlinePlayerInfo({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.player_level != null) {
            message.player_level = data.player_level;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.mp_setting_type != null) {
            message.mp_setting_type = data.mp_setting_type;
        }
        if (data.cur_player_num_in_world != null) {
            message.cur_player_num_in_world = data.cur_player_num_in_world;
        }
        if (data.world_level != null) {
            message.world_level = data.world_level;
        }
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        if (data.name_card_id != null) {
            message.name_card_id = data.name_card_id;
        }
        if (data.blacklist_uid_list != null) {
            message.blacklist_uid_list = data.blacklist_uid_list;
        }
        if (data.signature != null) {
            message.signature = data.signature;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_2.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.psn_id != null) {
            message.psn_id = data.psn_id;
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            nickname?: string;
            player_level?: number;
            avatar_id?: number;
            mp_setting_type?: dependency_1.MpSettingType;
            cur_player_num_in_world?: number;
            world_level?: number;
            online_id?: string;
            name_card_id?: number;
            blacklist_uid_list?: number[];
            signature?: string;
            profile_picture?: ReturnType<typeof dependency_2.ProfilePicture.prototype.toObject>;
            psn_id?: string;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.player_level != null) {
            data.player_level = this.player_level;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.mp_setting_type != null) {
            data.mp_setting_type = this.mp_setting_type;
        }
        if (this.cur_player_num_in_world != null) {
            data.cur_player_num_in_world = this.cur_player_num_in_world;
        }
        if (this.world_level != null) {
            data.world_level = this.world_level;
        }
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        if (this.name_card_id != null) {
            data.name_card_id = this.name_card_id;
        }
        if (this.blacklist_uid_list != null) {
            data.blacklist_uid_list = this.blacklist_uid_list;
        }
        if (this.signature != null) {
            data.signature = this.signature;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.psn_id != null) {
            data.psn_id = this.psn_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(1, this.uid);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.player_level != 0)
            writer.writeUint32(3, this.player_level);
        if (this.avatar_id != 0)
            writer.writeUint32(4, this.avatar_id);
        if (this.mp_setting_type != dependency_1.MpSettingType.MP_SETTING_TYPE_NO_ENTER)
            writer.writeEnum(5, this.mp_setting_type);
        if (this.cur_player_num_in_world != 0)
            writer.writeUint32(6, this.cur_player_num_in_world);
        if (this.world_level != 0)
            writer.writeUint32(7, this.world_level);
        if (this.online_id.length)
            writer.writeString(8, this.online_id);
        if (this.name_card_id != 0)
            writer.writeUint32(9, this.name_card_id);
        if (this.blacklist_uid_list.length)
            writer.writePackedUint32(10, this.blacklist_uid_list);
        if (this.signature.length)
            writer.writeString(11, this.signature);
        if (this.has_profile_picture)
            writer.writeMessage(12, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.psn_id.length)
            writer.writeString(13, this.psn_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlinePlayerInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OnlinePlayerInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uid = reader.readUint32();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.player_level = reader.readUint32();
                    break;
                case 4:
                    message.avatar_id = reader.readUint32();
                    break;
                case 5:
                    message.mp_setting_type = reader.readEnum();
                    break;
                case 6:
                    message.cur_player_num_in_world = reader.readUint32();
                    break;
                case 7:
                    message.world_level = reader.readUint32();
                    break;
                case 8:
                    message.online_id = reader.readString();
                    break;
                case 9:
                    message.name_card_id = reader.readUint32();
                    break;
                case 10:
                    message.blacklist_uid_list = reader.readPackedUint32();
                    break;
                case 11:
                    message.signature = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_2.ProfilePicture.deserialize(reader));
                    break;
                case 13:
                    message.psn_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OnlinePlayerInfo {
        return OnlinePlayerInfo.deserialize(bytes);
    }
}
