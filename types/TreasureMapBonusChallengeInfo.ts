/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TreasureMapBonusChallengeInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class TreasureMapBonusChallengeInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_done?: boolean;
        config_id?: number;
        is_active?: boolean;
        fragment_map?: Map<number, boolean>;
        solution_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_done" in data && data.is_done != undefined) {
                this.is_done = data.is_done;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
            if ("fragment_map" in data && data.fragment_map != undefined) {
                this.fragment_map = data.fragment_map;
            }
            if ("solution_id" in data && data.solution_id != undefined) {
                this.solution_id = data.solution_id;
            }
        }
        if (!this.fragment_map)
            this.fragment_map = new Map();
    }
    get is_done() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_done(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set config_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_active(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get fragment_map() {
        return pb_1.Message.getField(this, 12) as any as Map<number, boolean>;
    }
    set fragment_map(value: Map<number, boolean>) {
        pb_1.Message.setField(this, 12, value as any);
    }
    get solution_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set solution_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        is_done?: boolean;
        config_id?: number;
        is_active?: boolean;
        fragment_map?: {
            [key: number]: boolean;
        };
        solution_id?: number;
    }): TreasureMapBonusChallengeInfo {
        const message = new TreasureMapBonusChallengeInfo({});
        if (data.is_done != null) {
            message.is_done = data.is_done;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        if (typeof data.fragment_map == "object") {
            message.fragment_map = new Map(Object.entries(data.fragment_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.solution_id != null) {
            message.solution_id = data.solution_id;
        }
        return message;
    }
    toObject() {
        const data: {
            is_done?: boolean;
            config_id?: number;
            is_active?: boolean;
            fragment_map?: {
                [key: number]: boolean;
            };
            solution_id?: number;
        } = {};
        if (this.is_done != null) {
            data.is_done = this.is_done;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        if (this.fragment_map.size > 0) {
            data.fragment_map = (Object.fromEntries)(this.fragment_map);
        }
        if (this.solution_id != null) {
            data.solution_id = this.solution_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_done != false)
            writer.writeBool(5, this.is_done);
        if (this.config_id != 0)
            writer.writeUint32(10, this.config_id);
        if (this.is_active != false)
            writer.writeBool(1, this.is_active);
        for (const [key, value] of this.fragment_map) {
            writer.writeMessage(12, this.fragment_map, () => {
                writer.writeUint32(1, key);
                writer.writeBool(2, value);
            });
        }
        if (this.solution_id != 0)
            writer.writeUint32(8, this.solution_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TreasureMapBonusChallengeInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TreasureMapBonusChallengeInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.is_done = reader.readBool();
                    break;
                case 10:
                    message.config_id = reader.readUint32();
                    break;
                case 1:
                    message.is_active = reader.readBool();
                    break;
                case 12:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fragment_map as any, reader, reader.readUint32, reader.readBool));
                    break;
                case 8:
                    message.solution_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TreasureMapBonusChallengeInfo {
        return TreasureMapBonusChallengeInfo.deserialize(bytes);
    }
}
