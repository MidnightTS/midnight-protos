/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChangeAvatarReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class ChangeAvatarReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        move_pos?: dependency_1.Vector;
        skill_id?: number;
        guid?: number;
        is_move?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("move_pos" in data && data.move_pos != undefined) {
                this.move_pos = data.move_pos;
            }
            if ("skill_id" in data && data.skill_id != undefined) {
                this.skill_id = data.skill_id;
            }
            if ("guid" in data && data.guid != undefined) {
                this.guid = data.guid;
            }
            if ("is_move" in data && data.is_move != undefined) {
                this.is_move = data.is_move;
            }
        }
    }
    get move_pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 15) as dependency_1.Vector;
    }
    set move_pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_move_pos() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get skill_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set skill_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get guid() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set guid(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_move() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_move(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        move_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        skill_id?: number;
        guid?: number;
        is_move?: boolean;
    }): ChangeAvatarReq {
        const message = new ChangeAvatarReq({});
        if (data.move_pos != null) {
            message.move_pos = dependency_1.Vector.fromObject(data.move_pos);
        }
        if (data.skill_id != null) {
            message.skill_id = data.skill_id;
        }
        if (data.guid != null) {
            message.guid = data.guid;
        }
        if (data.is_move != null) {
            message.is_move = data.is_move;
        }
        return message;
    }
    toObject() {
        const data: {
            move_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            skill_id?: number;
            guid?: number;
            is_move?: boolean;
        } = {};
        if (this.move_pos != null) {
            data.move_pos = this.move_pos.toObject();
        }
        if (this.skill_id != null) {
            data.skill_id = this.skill_id;
        }
        if (this.guid != null) {
            data.guid = this.guid;
        }
        if (this.is_move != null) {
            data.is_move = this.is_move;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_move_pos)
            writer.writeMessage(15, this.move_pos, () => this.move_pos.serialize(writer));
        if (this.skill_id != 0)
            writer.writeUint32(2, this.skill_id);
        if (this.guid != 0)
            writer.writeUint64(7, this.guid);
        if (this.is_move != false)
            writer.writeBool(10, this.is_move);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeAvatarReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeAvatarReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    reader.readMessage(message.move_pos, () => message.move_pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 2:
                    message.skill_id = reader.readUint32();
                    break;
                case 7:
                    message.guid = reader.readUint64();
                    break;
                case 10:
                    message.is_move = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChangeAvatarReq {
        return ChangeAvatarReq.deserialize(bytes);
    }
}
