"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ForgeQueueDataNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForgeQueueDataNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ForgeQueueDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ForgeQueueData");
const pb_1 = require("google-protobuf");
class ForgeQueueDataNotify extends pb_1.Message {
    constructor(data) {
        super();
        _ForgeQueueDataNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], __classPrivateFieldGet(this, _ForgeQueueDataNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("forge_queue_map" in data && data.forge_queue_map != undefined) {
                this.forge_queue_map = data.forge_queue_map;
            }
            if ("removed_forge_queue_list" in data && data.removed_forge_queue_list != undefined) {
                this.removed_forge_queue_list = data.removed_forge_queue_list;
            }
        }
        if (!this.forge_queue_map)
            this.forge_queue_map = new Map();
    }
    get forge_queue_map() {
        return pb_1.Message.getField(this, 7);
    }
    set forge_queue_map(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get removed_forge_queue_list() {
        return pb_1.Message.getFieldWithDefault(this, 6, []);
    }
    set removed_forge_queue_list(value) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data) {
        const message = new ForgeQueueDataNotify({});
        if (typeof data.forge_queue_map == "object") {
            message.forge_queue_map = new Map(Object.entries(data.forge_queue_map).map(([key, value]) => [Number(key), dependency_1.ForgeQueueData.fromObject(value)]));
        }
        if (data.removed_forge_queue_list != null) {
            message.removed_forge_queue_list = data.removed_forge_queue_list;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.forge_queue_map.size > 0) {
            data.forge_queue_map = (Object.fromEntries)((Array.from)(this.forge_queue_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.removed_forge_queue_list != null) {
            data.removed_forge_queue_list = this.removed_forge_queue_list;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.forge_queue_map) {
            writer.writeMessage(7, this.forge_queue_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.removed_forge_queue_list.length)
            writer.writePackedUint32(6, this.removed_forge_queue_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgeQueueDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.forge_queue_map, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.ForgeQueueData.deserialize(reader));
                        return value;
                    }));
                    break;
                case 6:
                    message.removed_forge_queue_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ForgeQueueDataNotify.deserialize(bytes);
    }
}
exports.ForgeQueueDataNotify = ForgeQueueDataNotify;
_ForgeQueueDataNotify_one_of_decls = new WeakMap();
