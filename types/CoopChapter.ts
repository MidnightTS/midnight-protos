// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "CoopChapter.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CoopCg } from "./CoopCg";
import { CoopReward } from "./CoopReward";
import { CoopPoint } from "./CoopPoint";
/**
 * @generated from protobuf message CoopChapter
 */
export interface CoopChapter {
    /**
     * @generated from protobuf field: uint32 id = 9;
     */
    id: number;
    /**
     * @generated from protobuf field: repeated CoopPoint coop_point_list = 12;
     */
    coopPointList: CoopPoint[];
    /**
     * @generated from protobuf field: repeated uint32 finish_dialog_list = 6;
     */
    finishDialogList: number[];
    /**
     * @generated from protobuf field: CoopChapter.State state = 7;
     */
    state: CoopChapter_State;
    /**
     * @generated from protobuf field: uint32 total_end_count = 11;
     */
    totalEndCount: number;
    /**
     * @generated from protobuf field: repeated CoopReward coop_reward_list = 3;
     */
    coopRewardList: CoopReward[];
    /**
     * @generated from protobuf field: repeated uint32 lock_reason_list = 4;
     */
    lockReasonList: number[];
    /**
     * @generated from protobuf field: repeated CoopCg coop_cg_list = 2;
     */
    coopCgList: CoopCg[];
    /**
     * @generated from protobuf field: map<uint32, uint32> seen_ending_map = 15;
     */
    seenEndingMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 finished_end_count = 8;
     */
    finishedEndCount: number;
}
/**
 * @generated from protobuf enum CoopChapter.State
 */
export enum CoopChapter_State {
    /**
     * @generated from protobuf enum value: STATE_CLOSE = 0;
     */
    CLOSE = 0,
    /**
     * @generated from protobuf enum value: STATE_COND_NOT_MEET = 1;
     */
    COND_NOT_MEET = 1,
    /**
     * @generated from protobuf enum value: STATE_COND_MEET = 2;
     */
    COND_MEET = 2,
    /**
     * @generated from protobuf enum value: STATE_ACCEPT = 3;
     */
    ACCEPT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class CoopChapter$Type extends MessageType<CoopChapter> {
    constructor() {
        super("CoopChapter", [
            { no: 9, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "coop_point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CoopPoint },
            { no: 6, name: "finish_dialog_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "state", kind: "enum", T: () => ["CoopChapter.State", CoopChapter_State, "STATE_"] },
            { no: 11, name: "total_end_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "coop_reward_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CoopReward },
            { no: 4, name: "lock_reason_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "coop_cg_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CoopCg },
            { no: 15, name: "seen_ending_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 8, name: "finished_end_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CoopChapter>): CoopChapter {
        const message = { id: 0, coopPointList: [], finishDialogList: [], state: 0, totalEndCount: 0, coopRewardList: [], lockReasonList: [], coopCgList: [], seenEndingMap: {}, finishedEndCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CoopChapter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoopChapter): CoopChapter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 9:
                    message.id = reader.uint32();
                    break;
                case /* repeated CoopPoint coop_point_list */ 12:
                    message.coopPointList.push(CoopPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 finish_dialog_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishDialogList.push(reader.uint32());
                    else
                        message.finishDialogList.push(reader.uint32());
                    break;
                case /* CoopChapter.State state */ 7:
                    message.state = reader.int32();
                    break;
                case /* uint32 total_end_count */ 11:
                    message.totalEndCount = reader.uint32();
                    break;
                case /* repeated CoopReward coop_reward_list */ 3:
                    message.coopRewardList.push(CoopReward.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 lock_reason_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lockReasonList.push(reader.uint32());
                    else
                        message.lockReasonList.push(reader.uint32());
                    break;
                case /* repeated CoopCg coop_cg_list */ 2:
                    message.coopCgList.push(CoopCg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, uint32> seen_ending_map */ 15:
                    this.binaryReadMap15(message.seenEndingMap, reader, options);
                    break;
                case /* uint32 finished_end_count */ 8:
                    message.finishedEndCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: CoopChapter["seenEndingMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CoopChapter["seenEndingMap"] | undefined, val: CoopChapter["seenEndingMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field CoopChapter.seen_ending_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: CoopChapter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 9; */
        if (message.id !== 0)
            writer.tag(9, WireType.Varint).uint32(message.id);
        /* repeated CoopPoint coop_point_list = 12; */
        for (let i = 0; i < message.coopPointList.length; i++)
            CoopPoint.internalBinaryWrite(message.coopPointList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 finish_dialog_list = 6; */
        if (message.finishDialogList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishDialogList.length; i++)
                writer.uint32(message.finishDialogList[i]);
            writer.join();
        }
        /* CoopChapter.State state = 7; */
        if (message.state !== 0)
            writer.tag(7, WireType.Varint).int32(message.state);
        /* uint32 total_end_count = 11; */
        if (message.totalEndCount !== 0)
            writer.tag(11, WireType.Varint).uint32(message.totalEndCount);
        /* repeated CoopReward coop_reward_list = 3; */
        for (let i = 0; i < message.coopRewardList.length; i++)
            CoopReward.internalBinaryWrite(message.coopRewardList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 lock_reason_list = 4; */
        if (message.lockReasonList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lockReasonList.length; i++)
                writer.uint32(message.lockReasonList[i]);
            writer.join();
        }
        /* repeated CoopCg coop_cg_list = 2; */
        for (let i = 0; i < message.coopCgList.length; i++)
            CoopCg.internalBinaryWrite(message.coopCgList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> seen_ending_map = 15; */
        for (let k of Object.keys(message.seenEndingMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.seenEndingMap[k as any]).join();
        /* uint32 finished_end_count = 8; */
        if (message.finishedEndCount !== 0)
            writer.tag(8, WireType.Varint).uint32(message.finishedEndCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CoopChapter
 */
export const CoopChapter = new CoopChapter$Type();
