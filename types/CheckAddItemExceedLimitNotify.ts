/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CheckAddItemExceedLimitNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class CheckAddItemExceedLimitNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_drop?: boolean;
        msg_type?: CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType;
        exceeded_item_type_list?: number[];
        exceeded_item_list?: number[];
        reason?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 12], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_drop" in data && data.is_drop != undefined) {
                this.is_drop = data.is_drop;
            }
            if ("msg_type" in data && data.msg_type != undefined) {
                this.msg_type = data.msg_type;
            }
            if ("exceeded_item_type_list" in data && data.exceeded_item_type_list != undefined) {
                this.exceeded_item_type_list = data.exceeded_item_type_list;
            }
            if ("exceeded_item_list" in data && data.exceeded_item_list != undefined) {
                this.exceeded_item_list = data.exceeded_item_list;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get is_drop() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_drop(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get msg_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_TYPE_DEFAULT) as CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType;
    }
    set msg_type(value: CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType) {
        pb_1.Message.setField(this, 4, value);
    }
    get exceeded_item_type_list() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
    }
    set exceeded_item_type_list(value: number[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get exceeded_item_list() {
        return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
    }
    set exceeded_item_list(value: number[]) {
        pb_1.Message.setField(this, 12, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set reason(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        is_drop?: boolean;
        msg_type?: CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType;
        exceeded_item_type_list?: number[];
        exceeded_item_list?: number[];
        reason?: number;
    }): CheckAddItemExceedLimitNotify {
        const message = new CheckAddItemExceedLimitNotify({});
        if (data.is_drop != null) {
            message.is_drop = data.is_drop;
        }
        if (data.msg_type != null) {
            message.msg_type = data.msg_type;
        }
        if (data.exceeded_item_type_list != null) {
            message.exceeded_item_type_list = data.exceeded_item_type_list;
        }
        if (data.exceeded_item_list != null) {
            message.exceeded_item_list = data.exceeded_item_list;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            is_drop?: boolean;
            msg_type?: CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType;
            exceeded_item_type_list?: number[];
            exceeded_item_list?: number[];
            reason?: number;
        } = {};
        if (this.is_drop != null) {
            data.is_drop = this.is_drop;
        }
        if (this.msg_type != null) {
            data.msg_type = this.msg_type;
        }
        if (this.exceeded_item_type_list != null) {
            data.exceeded_item_type_list = this.exceeded_item_type_list;
        }
        if (this.exceeded_item_list != null) {
            data.exceeded_item_list = this.exceeded_item_list;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_drop != false)
            writer.writeBool(5, this.is_drop);
        if (this.msg_type != CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType.ITEM_EXCEED_LIMIT_MSG_TYPE_DEFAULT)
            writer.writeEnum(4, this.msg_type);
        if (this.exceeded_item_type_list.length)
            writer.writePackedUint32(10, this.exceeded_item_type_list);
        if (this.exceeded_item_list.length)
            writer.writePackedUint32(12, this.exceeded_item_list);
        if (this.reason != 0)
            writer.writeUint32(14, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckAddItemExceedLimitNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckAddItemExceedLimitNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.is_drop = reader.readBool();
                    break;
                case 4:
                    message.msg_type = reader.readEnum();
                    break;
                case 10:
                    message.exceeded_item_type_list = reader.readPackedUint32();
                    break;
                case 12:
                    message.exceeded_item_list = reader.readPackedUint32();
                    break;
                case 14:
                    message.reason = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckAddItemExceedLimitNotify {
        return CheckAddItemExceedLimitNotify.deserialize(bytes);
    }
}
export namespace CheckAddItemExceedLimitNotify {
    export enum ItemExceedLimitMsgType {
        ITEM_EXCEED_LIMIT_MSG_TYPE_DEFAULT = 0,
        ITEM_EXCEED_LIMIT_MSG_TYPE_TEXT = 1,
        ITEM_EXCEED_LIMIT_MSG_TYPE_DIALOG = 2,
        ITEM_EXCEED_LIMIT_MSG_TYPE_Unk2700_BONLGEEEBBF = 3
    }
}
