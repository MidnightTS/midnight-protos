// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_tower.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.TowerTeam
 */
export interface TowerTeam {
    /**
     * @generated from protobuf field: optional uint32 tower_team_id = 3;
     */
    towerTeamId?: number;
    /**
     * @generated from protobuf field: repeated uint64 avatar_guid_list = 14;
     */
    avatarGuidList: bigint[];
}
/**
 * @generated from protobuf message com.midnights.game.TowerLevelRecord
 */
export interface TowerLevelRecord {
    /**
     * @generated from protobuf field: repeated uint32 satisfied_cond_list = 13;
     */
    satisfiedCondList: number[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TowerFloorRecord
 */
export interface TowerFloorRecord {
    /**
     * @generated from protobuf field: optional uint32 floor_star_reward_progress = 15;
     */
    floorStarRewardProgress?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> passed_level_map = 8;
     */
    passedLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 floor_id = 12;
     */
    floorId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerLevelRecord passed_level_record_list = 2;
     */
    passedLevelRecordList: TowerLevelRecord[];
}
/**
 * @generated from protobuf message com.midnights.game.TowerCurLevelRecord
 */
export interface TowerCurLevelRecord {
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerTeam tower_team_list = 8;
     */
    towerTeamList: TowerTeam[];
    /**
     * @generated from protobuf field: optional bool is_empty = 6;
     */
    isEmpty?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 buff_id_list = 4;
     */
    buffIdList: number[];
    /**
     * @generated from protobuf field: optional bool is_upper_part = 2;
     */
    isUpperPart?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_level_index = 1;
     */
    curLevelIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_floor_id = 15;
     */
    curFloorId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TowerBriefDataNotify
 */
export interface TowerBriefDataNotify {
    /**
     * @generated from protobuf field: optional uint32 total_star_num = 11;
     */
    totalStarNum?: number;
    /**
     * @generated from protobuf field: optional uint32 last_floor_index = 8;
     */
    lastFloorIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_start_time = 15;
     */
    scheduleStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 next_schedule_change_time = 6;
     */
    nextScheduleChangeTime?: number;
    /**
     * @generated from protobuf field: optional bool is_finished_entrance_floor = 14;
     */
    isFinishedEntranceFloor?: boolean;
    /**
     * @generated from protobuf field: optional uint32 last_level_index = 4;
     */
    lastLevelIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 tower_schedule_id = 5;
     */
    towerScheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerBriefDataNotify.CmdId
 */
export enum TowerBriefDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2472;
     */
    CMD_ID = 2472,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerFloorRecordChangeNotify
 */
export interface TowerFloorRecordChangeNotify {
    /**
     * @generated from protobuf field: optional bool is_finished_entrance_floor = 11;
     */
    isFinishedEntranceFloor?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerFloorRecord tower_floor_record_list = 8;
     */
    towerFloorRecordList: TowerFloorRecord[];
}
/**
 * @generated from protobuf enum com.midnights.game.TowerFloorRecordChangeNotify.CmdId
 */
export enum TowerFloorRecordChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2498;
     */
    CMD_ID = 2498,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerCurLevelRecordChangeNotify
 */
export interface TowerCurLevelRecordChangeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerCurLevelRecord cur_level_record = 10;
     */
    curLevelRecord?: TowerCurLevelRecord;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerCurLevelRecordChangeNotify.CmdId
 */
export enum TowerCurLevelRecordChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2412;
     */
    CMD_ID = 2412,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerDailyRewardProgressChangeNotify
 */
export interface TowerDailyRewardProgressChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 daily_floor_id = 15;
     */
    dailyFloorId?: number;
    /**
     * @generated from protobuf field: optional uint32 daily_level_index = 9;
     */
    dailyLevelIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerDailyRewardProgressChangeNotify.CmdId
 */
export enum TowerDailyRewardProgressChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2435;
     */
    CMD_ID = 2435,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerTeamSelectReq
 */
export interface TowerTeamSelectReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerTeam tower_team_list = 11;
     */
    towerTeamList: TowerTeam[];
    /**
     * @generated from protobuf field: optional uint32 floor_id = 10;
     */
    floorId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerTeamSelectReq.CmdId
 */
export enum TowerTeamSelectReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2421;
     */
    CMD_ID = 2421,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerTeamSelectRsp
 */
export interface TowerTeamSelectRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerTeamSelectRsp.CmdId
 */
export enum TowerTeamSelectRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2403;
     */
    CMD_ID = 2403,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerAllDataReq
 */
export interface TowerAllDataReq {
    /**
     * @generated from protobuf field: optional bool is_interact = 2;
     */
    isInteract?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerAllDataReq.CmdId
 */
export enum TowerAllDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2490;
     */
    CMD_ID = 2490,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerMonthlyBrief
 */
export interface TowerMonthlyBrief {
    /**
     * @generated from protobuf field: optional uint32 tower_schedule_id = 15;
     */
    towerScheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 best_floor_index = 6;
     */
    bestFloorIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 best_level_index = 3;
     */
    bestLevelIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 total_star_count = 12;
     */
    totalStarCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TowerAllDataRsp
 */
export interface TowerAllDataRsp {
    /**
     * @generated from protobuf field: optional uint32 tower_schedule_id = 10;
     */
    towerScheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 daily_level_index = 9;
     */
    dailyLevelIndex?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> skip_floor_granted_reward_item_map = 12;
     */
    skipFloorGrantedRewardItemMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional bool is_first_interact = 3;
     */
    isFirstInteract?: boolean;
    /**
     * @generated from protobuf field: optional bool is_finished_entrance_floor = 1;
     */
    isFinishedEntranceFloor?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerFloorRecord tower_floor_record_list = 5;
     */
    towerFloorRecordList: TowerFloorRecord[];
    /**
     * @generated from protobuf field: optional uint32 daily_floor_id = 11;
     */
    dailyFloorId?: number;
    /**
     * @generated from protobuf field: optional uint32 commemorative_reward_id = 13;
     */
    commemorativeRewardId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerMonthlyBrief last_schedule_monthly_brief = 1222;
     */
    lastScheduleMonthlyBrief?: TowerMonthlyBrief;
    /**
     * @generated from protobuf field: optional uint32 next_schedule_change_time = 6;
     */
    nextScheduleChangeTime?: number;
    /**
     * @generated from protobuf field: optional uint32 valid_tower_record_num = 7;
     */
    validTowerRecordNum?: number;
    /**
     * @generated from protobuf field: optional uint32 skip_to_floor_index = 2;
     */
    skipToFloorIndex?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> floor_open_time_map = 4;
     */
    floorOpenTimeMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerCurLevelRecord cur_level_record = 15;
     */
    curLevelRecord?: TowerCurLevelRecord;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_start_time = 914;
     */
    scheduleStartTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerMonthlyBrief monthly_brief = 14;
     */
    monthlyBrief?: TowerMonthlyBrief;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerAllDataRsp.CmdId
 */
export enum TowerAllDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2473;
     */
    CMD_ID = 2473,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerEnterLevelReq
 */
export interface TowerEnterLevelReq {
    /**
     * @generated from protobuf field: optional uint32 enter_point_id = 3;
     */
    enterPointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerEnterLevelReq.CmdId
 */
export enum TowerEnterLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2431;
     */
    CMD_ID = 2431,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerEnterLevelRsp
 */
export interface TowerEnterLevelRsp {
    /**
     * @generated from protobuf field: repeated uint32 tower_buff_id_list = 10;
     */
    towerBuffIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 level_index = 14;
     */
    levelIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 floor_id = 5;
     */
    floorId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerEnterLevelRsp.CmdId
 */
export enum TowerEnterLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2475;
     */
    CMD_ID = 2475,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerBuffSelectReq
 */
export interface TowerBuffSelectReq {
    /**
     * @generated from protobuf field: optional uint32 tower_buff_id = 5;
     */
    towerBuffId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerBuffSelectReq.CmdId
 */
export enum TowerBuffSelectReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2448;
     */
    CMD_ID = 2448,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerBuffSelectRsp
 */
export interface TowerBuffSelectRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 tower_buff_id = 13;
     */
    towerBuffId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerBuffSelectRsp.CmdId
 */
export enum TowerBuffSelectRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2497;
     */
    CMD_ID = 2497,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerSurrenderReq
 */
export interface TowerSurrenderReq {
}
/**
 * @generated from protobuf enum com.midnights.game.TowerSurrenderReq.CmdId
 */
export enum TowerSurrenderReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2422;
     */
    CMD_ID = 2422,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerSurrenderRsp
 */
export interface TowerSurrenderRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerSurrenderRsp.CmdId
 */
export enum TowerSurrenderRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2465;
     */
    CMD_ID = 2465,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerGetFloorStarRewardReq
 */
export interface TowerGetFloorStarRewardReq {
    /**
     * @generated from protobuf field: optional uint32 floor_id = 15;
     */
    floorId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerGetFloorStarRewardReq.CmdId
 */
export enum TowerGetFloorStarRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2404;
     */
    CMD_ID = 2404,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerGetFloorStarRewardRsp
 */
export interface TowerGetFloorStarRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 floor_id = 9;
     */
    floorId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TowerGetFloorStarRewardRsp.CmdId
 */
export enum TowerGetFloorStarRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2493;
     */
    CMD_ID = 2493,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerLevelEndNotify
 */
export interface TowerLevelEndNotify {
    /**
     * @generated from protobuf field: optional uint32 next_floor_id = 4;
     */
    nextFloorId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam reward_item_list = 12;
     */
    rewardItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 continue_state = 15;
     */
    continueState?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 5;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 finished_star_cond_list = 6;
     */
    finishedStarCondList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TowerLevelEndNotify.CmdId
 */
export enum TowerLevelEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2495;
     */
    CMD_ID = 2495,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.TowerLevelEndNotify.ContinueStateType
 */
export enum TowerLevelEndNotify_ContinueStateType {
    /**
     * @generated from protobuf enum value: CONTINUE_STATE_CAN_NOT_CONTINUE = 0;
     */
    CONTINUE_STATE_CAN_NOT_CONTINUE = 0,
    /**
     * @generated from protobuf enum value: CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL = 1;
     */
    CONTINUE_STATE_CAN_ENTER_NEXT_LEVEL = 1,
    /**
     * @generated from protobuf enum value: CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR = 2;
     */
    CONTINUE_STATE_CAN_ENTER_NEXT_FLOOR = 2
}
/**
 * @generated from protobuf message com.midnights.game.TowerLevelStarCondData
 */
export interface TowerLevelStarCondData {
    /**
     * @generated from protobuf field: optional bool is_fail = 15;
     */
    isFail?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cond_value = 9;
     */
    condValue?: number;
    /**
     * @generated from protobuf field: optional bool is_pause = 13;
     */
    isPause?: boolean;
    /**
     * @generated from protobuf field: optional uint32 star_cond_index = 6;
     */
    starCondIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TowerLevelStarCondNotify
 */
export interface TowerLevelStarCondNotify {
    /**
     * @generated from protobuf field: optional uint32 level_index = 14;
     */
    levelIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 floor_id = 11;
     */
    floorId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerLevelStarCondData cond_data_list = 9;
     */
    condDataList: TowerLevelStarCondData[];
}
/**
 * @generated from protobuf enum com.midnights.game.TowerLevelStarCondNotify.CmdId
 */
export enum TowerLevelStarCondNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2406;
     */
    CMD_ID = 2406,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerMiddleLevelChangeTeamNotify
 */
export interface TowerMiddleLevelChangeTeamNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.TowerMiddleLevelChangeTeamNotify.CmdId
 */
export enum TowerMiddleLevelChangeTeamNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2434;
     */
    CMD_ID = 2434,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerFightRecordPair
 */
export interface TowerFightRecordPair {
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 1;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional uint32 data = 3;
     */
    data?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TowerMonthlyCombatRecord
 */
export interface TowerMonthlyCombatRecord {
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerFightRecordPair most_kill_avatar_pair = 14;
     */
    mostKillAvatarPair?: TowerFightRecordPair;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerFightRecordPair most_cast_normal_skill_avatar_pair = 8;
     */
    mostCastNormalSkillAvatarPair?: TowerFightRecordPair;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerFightRecordPair most_reveal_avatar_list = 6;
     */
    mostRevealAvatarList: TowerFightRecordPair[];
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerFightRecordPair most_cast_energy_skill_avatar_pair = 4;
     */
    mostCastEnergySkillAvatarPair?: TowerFightRecordPair;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerFightRecordPair highest_dps_avatr_pair = 12;
     */
    highestDpsAvatrPair?: TowerFightRecordPair;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerFightRecordPair most_take_damage_avatar_pair = 9;
     */
    mostTakeDamageAvatarPair?: TowerFightRecordPair;
}
/**
 * @generated from protobuf message com.midnights.game.TowerMonthlyDetail
 */
export interface TowerMonthlyDetail {
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerMonthlyCombatRecord monthly_combat_record = 2;
     */
    monthlyCombatRecord?: TowerMonthlyCombatRecord;
    /**
     * @generated from protobuf field: optional com.midnights.game.TowerMonthlyBrief monthly_brief = 12;
     */
    monthlyBrief?: TowerMonthlyBrief;
}
/**
 * @generated from protobuf message com.midnights.game.TowerRecordHandbookReq
 */
export interface TowerRecordHandbookReq {
}
/**
 * @generated from protobuf enum com.midnights.game.TowerRecordHandbookReq.CmdId
 */
export enum TowerRecordHandbookReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2450;
     */
    CMD_ID = 2450,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TowerRecordHandbookRsp
 */
export interface TowerRecordHandbookRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TowerMonthlyDetail monthly_detail_list = 14;
     */
    monthlyDetailList: TowerMonthlyDetail[];
}
/**
 * @generated from protobuf enum com.midnights.game.TowerRecordHandbookRsp.CmdId
 */
export enum TowerRecordHandbookRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2443;
     */
    CMD_ID = 2443,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class TowerTeam$Type extends MessageType<TowerTeam> {
    constructor() {
        super("com.midnights.game.TowerTeam", [
            { no: 3, name: "tower_team_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TowerTeam>): TowerTeam {
        const message = { avatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerTeam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerTeam): TowerTeam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tower_team_id */ 3:
                    message.towerTeamId = reader.uint32();
                    break;
                case /* repeated uint64 avatar_guid_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.avatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tower_team_id = 3; */
        if (message.towerTeamId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.towerTeamId);
        /* repeated uint64 avatar_guid_list = 14; */
        for (let i = 0; i < message.avatarGuidList.length; i++)
            writer.tag(14, WireType.Varint).uint64(message.avatarGuidList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerTeam
 */
export const TowerTeam = new TowerTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerLevelRecord$Type extends MessageType<TowerLevelRecord> {
    constructor() {
        super("com.midnights.game.TowerLevelRecord", [
            { no: 13, name: "satisfied_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerLevelRecord>): TowerLevelRecord {
        const message = { satisfiedCondList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerLevelRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerLevelRecord): TowerLevelRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 satisfied_cond_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.satisfiedCondList.push(reader.uint32());
                    else
                        message.satisfiedCondList.push(reader.uint32());
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerLevelRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 satisfied_cond_list = 13; */
        for (let i = 0; i < message.satisfiedCondList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.satisfiedCondList[i]);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerLevelRecord
 */
export const TowerLevelRecord = new TowerLevelRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerFloorRecord$Type extends MessageType<TowerFloorRecord> {
    constructor() {
        super("com.midnights.game.TowerFloorRecord", [
            { no: 15, name: "floor_star_reward_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "passed_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "passed_level_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerLevelRecord }
        ]);
    }
    create(value?: PartialMessage<TowerFloorRecord>): TowerFloorRecord {
        const message = { passedLevelMap: {}, passedLevelRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerFloorRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerFloorRecord): TowerFloorRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 floor_star_reward_progress */ 15:
                    message.floorStarRewardProgress = reader.uint32();
                    break;
                case /* map<uint32, uint32> passed_level_map */ 8:
                    this.binaryReadMap8(message.passedLevelMap, reader, options);
                    break;
                case /* optional uint32 floor_id */ 12:
                    message.floorId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TowerLevelRecord passed_level_record_list */ 2:
                    message.passedLevelRecordList.push(TowerLevelRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: TowerFloorRecord["passedLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TowerFloorRecord["passedLevelMap"] | undefined, val: TowerFloorRecord["passedLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.TowerFloorRecord.passed_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: TowerFloorRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 floor_star_reward_progress = 15; */
        if (message.floorStarRewardProgress !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.floorStarRewardProgress);
        /* map<uint32, uint32> passed_level_map = 8; */
        for (let k of Object.keys(message.passedLevelMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.passedLevelMap[k as any]).join();
        /* optional uint32 floor_id = 12; */
        if (message.floorId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.floorId);
        /* repeated com.midnights.game.TowerLevelRecord passed_level_record_list = 2; */
        for (let i = 0; i < message.passedLevelRecordList.length; i++)
            TowerLevelRecord.internalBinaryWrite(message.passedLevelRecordList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerFloorRecord
 */
export const TowerFloorRecord = new TowerFloorRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerCurLevelRecord$Type extends MessageType<TowerCurLevelRecord> {
    constructor() {
        super("com.midnights.game.TowerCurLevelRecord", [
            { no: 8, name: "tower_team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerTeam },
            { no: 6, name: "is_empty", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_upper_part", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "cur_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "cur_floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerCurLevelRecord>): TowerCurLevelRecord {
        const message = { towerTeamList: [], buffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerCurLevelRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerCurLevelRecord): TowerCurLevelRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TowerTeam tower_team_list */ 8:
                    message.towerTeamList.push(TowerTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_empty */ 6:
                    message.isEmpty = reader.bool();
                    break;
                case /* repeated uint32 buff_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* optional bool is_upper_part */ 2:
                    message.isUpperPart = reader.bool();
                    break;
                case /* optional uint32 cur_level_index */ 1:
                    message.curLevelIndex = reader.uint32();
                    break;
                case /* optional uint32 cur_floor_id */ 15:
                    message.curFloorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerCurLevelRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.TowerTeam tower_team_list = 8; */
        for (let i = 0; i < message.towerTeamList.length; i++)
            TowerTeam.internalBinaryWrite(message.towerTeamList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_empty = 6; */
        if (message.isEmpty !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isEmpty);
        /* repeated uint32 buff_id_list = 4; */
        for (let i = 0; i < message.buffIdList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.buffIdList[i]);
        /* optional bool is_upper_part = 2; */
        if (message.isUpperPart !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isUpperPart);
        /* optional uint32 cur_level_index = 1; */
        if (message.curLevelIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.curLevelIndex);
        /* optional uint32 cur_floor_id = 15; */
        if (message.curFloorId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.curFloorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerCurLevelRecord
 */
export const TowerCurLevelRecord = new TowerCurLevelRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerBriefDataNotify$Type extends MessageType<TowerBriefDataNotify> {
    constructor() {
        super("com.midnights.game.TowerBriefDataNotify", [
            { no: 11, name: "total_star_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "last_floor_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "schedule_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "next_schedule_change_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_finished_entrance_floor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "last_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "tower_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerBriefDataNotify>): TowerBriefDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerBriefDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerBriefDataNotify): TowerBriefDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_star_num */ 11:
                    message.totalStarNum = reader.uint32();
                    break;
                case /* optional uint32 last_floor_index */ 8:
                    message.lastFloorIndex = reader.uint32();
                    break;
                case /* optional uint32 schedule_start_time */ 15:
                    message.scheduleStartTime = reader.uint32();
                    break;
                case /* optional uint32 next_schedule_change_time */ 6:
                    message.nextScheduleChangeTime = reader.uint32();
                    break;
                case /* optional bool is_finished_entrance_floor */ 14:
                    message.isFinishedEntranceFloor = reader.bool();
                    break;
                case /* optional uint32 last_level_index */ 4:
                    message.lastLevelIndex = reader.uint32();
                    break;
                case /* optional uint32 tower_schedule_id */ 5:
                    message.towerScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerBriefDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_star_num = 11; */
        if (message.totalStarNum !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.totalStarNum);
        /* optional uint32 last_floor_index = 8; */
        if (message.lastFloorIndex !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.lastFloorIndex);
        /* optional uint32 schedule_start_time = 15; */
        if (message.scheduleStartTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scheduleStartTime);
        /* optional uint32 next_schedule_change_time = 6; */
        if (message.nextScheduleChangeTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.nextScheduleChangeTime);
        /* optional bool is_finished_entrance_floor = 14; */
        if (message.isFinishedEntranceFloor !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isFinishedEntranceFloor);
        /* optional uint32 last_level_index = 4; */
        if (message.lastLevelIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.lastLevelIndex);
        /* optional uint32 tower_schedule_id = 5; */
        if (message.towerScheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.towerScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerBriefDataNotify
 */
export const TowerBriefDataNotify = new TowerBriefDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerFloorRecordChangeNotify$Type extends MessageType<TowerFloorRecordChangeNotify> {
    constructor() {
        super("com.midnights.game.TowerFloorRecordChangeNotify", [
            { no: 11, name: "is_finished_entrance_floor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "tower_floor_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerFloorRecord }
        ]);
    }
    create(value?: PartialMessage<TowerFloorRecordChangeNotify>): TowerFloorRecordChangeNotify {
        const message = { towerFloorRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerFloorRecordChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerFloorRecordChangeNotify): TowerFloorRecordChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished_entrance_floor */ 11:
                    message.isFinishedEntranceFloor = reader.bool();
                    break;
                case /* repeated com.midnights.game.TowerFloorRecord tower_floor_record_list */ 8:
                    message.towerFloorRecordList.push(TowerFloorRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerFloorRecordChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished_entrance_floor = 11; */
        if (message.isFinishedEntranceFloor !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isFinishedEntranceFloor);
        /* repeated com.midnights.game.TowerFloorRecord tower_floor_record_list = 8; */
        for (let i = 0; i < message.towerFloorRecordList.length; i++)
            TowerFloorRecord.internalBinaryWrite(message.towerFloorRecordList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerFloorRecordChangeNotify
 */
export const TowerFloorRecordChangeNotify = new TowerFloorRecordChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerCurLevelRecordChangeNotify$Type extends MessageType<TowerCurLevelRecordChangeNotify> {
    constructor() {
        super("com.midnights.game.TowerCurLevelRecordChangeNotify", [
            { no: 10, name: "cur_level_record", kind: "message", T: () => TowerCurLevelRecord }
        ]);
    }
    create(value?: PartialMessage<TowerCurLevelRecordChangeNotify>): TowerCurLevelRecordChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerCurLevelRecordChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerCurLevelRecordChangeNotify): TowerCurLevelRecordChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TowerCurLevelRecord cur_level_record */ 10:
                    message.curLevelRecord = TowerCurLevelRecord.internalBinaryRead(reader, reader.uint32(), options, message.curLevelRecord);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerCurLevelRecordChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TowerCurLevelRecord cur_level_record = 10; */
        if (message.curLevelRecord)
            TowerCurLevelRecord.internalBinaryWrite(message.curLevelRecord, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerCurLevelRecordChangeNotify
 */
export const TowerCurLevelRecordChangeNotify = new TowerCurLevelRecordChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerDailyRewardProgressChangeNotify$Type extends MessageType<TowerDailyRewardProgressChangeNotify> {
    constructor() {
        super("com.midnights.game.TowerDailyRewardProgressChangeNotify", [
            { no: 15, name: "daily_floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "daily_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerDailyRewardProgressChangeNotify>): TowerDailyRewardProgressChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerDailyRewardProgressChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerDailyRewardProgressChangeNotify): TowerDailyRewardProgressChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 daily_floor_id */ 15:
                    message.dailyFloorId = reader.uint32();
                    break;
                case /* optional uint32 daily_level_index */ 9:
                    message.dailyLevelIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerDailyRewardProgressChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 daily_floor_id = 15; */
        if (message.dailyFloorId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dailyFloorId);
        /* optional uint32 daily_level_index = 9; */
        if (message.dailyLevelIndex !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.dailyLevelIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerDailyRewardProgressChangeNotify
 */
export const TowerDailyRewardProgressChangeNotify = new TowerDailyRewardProgressChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerTeamSelectReq$Type extends MessageType<TowerTeamSelectReq> {
    constructor() {
        super("com.midnights.game.TowerTeamSelectReq", [
            { no: 11, name: "tower_team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerTeam },
            { no: 10, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerTeamSelectReq>): TowerTeamSelectReq {
        const message = { towerTeamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerTeamSelectReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerTeamSelectReq): TowerTeamSelectReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TowerTeam tower_team_list */ 11:
                    message.towerTeamList.push(TowerTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 floor_id */ 10:
                    message.floorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerTeamSelectReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.TowerTeam tower_team_list = 11; */
        for (let i = 0; i < message.towerTeamList.length; i++)
            TowerTeam.internalBinaryWrite(message.towerTeamList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 floor_id = 10; */
        if (message.floorId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerTeamSelectReq
 */
export const TowerTeamSelectReq = new TowerTeamSelectReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerTeamSelectRsp$Type extends MessageType<TowerTeamSelectRsp> {
    constructor() {
        super("com.midnights.game.TowerTeamSelectRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerTeamSelectRsp>): TowerTeamSelectRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerTeamSelectRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerTeamSelectRsp): TowerTeamSelectRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerTeamSelectRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerTeamSelectRsp
 */
export const TowerTeamSelectRsp = new TowerTeamSelectRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerAllDataReq$Type extends MessageType<TowerAllDataReq> {
    constructor() {
        super("com.midnights.game.TowerAllDataReq", [
            { no: 2, name: "is_interact", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TowerAllDataReq>): TowerAllDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerAllDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerAllDataReq): TowerAllDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_interact */ 2:
                    message.isInteract = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerAllDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_interact = 2; */
        if (message.isInteract !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isInteract);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerAllDataReq
 */
export const TowerAllDataReq = new TowerAllDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerMonthlyBrief$Type extends MessageType<TowerMonthlyBrief> {
    constructor() {
        super("com.midnights.game.TowerMonthlyBrief", [
            { no: 15, name: "tower_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "best_floor_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "best_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_star_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerMonthlyBrief>): TowerMonthlyBrief {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerMonthlyBrief>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerMonthlyBrief): TowerMonthlyBrief {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tower_schedule_id */ 15:
                    message.towerScheduleId = reader.uint32();
                    break;
                case /* optional uint32 best_floor_index */ 6:
                    message.bestFloorIndex = reader.uint32();
                    break;
                case /* optional uint32 best_level_index */ 3:
                    message.bestLevelIndex = reader.uint32();
                    break;
                case /* optional uint32 total_star_count */ 12:
                    message.totalStarCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerMonthlyBrief, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tower_schedule_id = 15; */
        if (message.towerScheduleId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.towerScheduleId);
        /* optional uint32 best_floor_index = 6; */
        if (message.bestFloorIndex !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.bestFloorIndex);
        /* optional uint32 best_level_index = 3; */
        if (message.bestLevelIndex !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bestLevelIndex);
        /* optional uint32 total_star_count = 12; */
        if (message.totalStarCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.totalStarCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerMonthlyBrief
 */
export const TowerMonthlyBrief = new TowerMonthlyBrief$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerAllDataRsp$Type extends MessageType<TowerAllDataRsp> {
    constructor() {
        super("com.midnights.game.TowerAllDataRsp", [
            { no: 10, name: "tower_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "daily_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "skip_floor_granted_reward_item_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 3, name: "is_first_interact", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "is_finished_entrance_floor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "tower_floor_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerFloorRecord },
            { no: 11, name: "daily_floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "commemorative_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1222, name: "last_schedule_monthly_brief", kind: "message", T: () => TowerMonthlyBrief },
            { no: 6, name: "next_schedule_change_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "valid_tower_record_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "skip_to_floor_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "floor_open_time_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "cur_level_record", kind: "message", T: () => TowerCurLevelRecord },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 914, name: "schedule_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "monthly_brief", kind: "message", T: () => TowerMonthlyBrief }
        ]);
    }
    create(value?: PartialMessage<TowerAllDataRsp>): TowerAllDataRsp {
        const message = { skipFloorGrantedRewardItemMap: {}, towerFloorRecordList: [], floorOpenTimeMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerAllDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerAllDataRsp): TowerAllDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tower_schedule_id */ 10:
                    message.towerScheduleId = reader.uint32();
                    break;
                case /* optional uint32 daily_level_index */ 9:
                    message.dailyLevelIndex = reader.uint32();
                    break;
                case /* map<uint32, uint32> skip_floor_granted_reward_item_map */ 12:
                    this.binaryReadMap12(message.skipFloorGrantedRewardItemMap, reader, options);
                    break;
                case /* optional bool is_first_interact */ 3:
                    message.isFirstInteract = reader.bool();
                    break;
                case /* optional bool is_finished_entrance_floor */ 1:
                    message.isFinishedEntranceFloor = reader.bool();
                    break;
                case /* repeated com.midnights.game.TowerFloorRecord tower_floor_record_list */ 5:
                    message.towerFloorRecordList.push(TowerFloorRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 daily_floor_id */ 11:
                    message.dailyFloorId = reader.uint32();
                    break;
                case /* optional uint32 commemorative_reward_id */ 13:
                    message.commemorativeRewardId = reader.uint32();
                    break;
                case /* optional com.midnights.game.TowerMonthlyBrief last_schedule_monthly_brief */ 1222:
                    message.lastScheduleMonthlyBrief = TowerMonthlyBrief.internalBinaryRead(reader, reader.uint32(), options, message.lastScheduleMonthlyBrief);
                    break;
                case /* optional uint32 next_schedule_change_time */ 6:
                    message.nextScheduleChangeTime = reader.uint32();
                    break;
                case /* optional uint32 valid_tower_record_num */ 7:
                    message.validTowerRecordNum = reader.uint32();
                    break;
                case /* optional uint32 skip_to_floor_index */ 2:
                    message.skipToFloorIndex = reader.uint32();
                    break;
                case /* map<uint32, uint32> floor_open_time_map */ 4:
                    this.binaryReadMap4(message.floorOpenTimeMap, reader, options);
                    break;
                case /* optional com.midnights.game.TowerCurLevelRecord cur_level_record */ 15:
                    message.curLevelRecord = TowerCurLevelRecord.internalBinaryRead(reader, reader.uint32(), options, message.curLevelRecord);
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_start_time */ 914:
                    message.scheduleStartTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.TowerMonthlyBrief monthly_brief */ 14:
                    message.monthlyBrief = TowerMonthlyBrief.internalBinaryRead(reader, reader.uint32(), options, message.monthlyBrief);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: TowerAllDataRsp["skipFloorGrantedRewardItemMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TowerAllDataRsp["skipFloorGrantedRewardItemMap"] | undefined, val: TowerAllDataRsp["skipFloorGrantedRewardItemMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.TowerAllDataRsp.skip_floor_granted_reward_item_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap4(map: TowerAllDataRsp["floorOpenTimeMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TowerAllDataRsp["floorOpenTimeMap"] | undefined, val: TowerAllDataRsp["floorOpenTimeMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.TowerAllDataRsp.floor_open_time_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: TowerAllDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tower_schedule_id = 10; */
        if (message.towerScheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.towerScheduleId);
        /* optional uint32 daily_level_index = 9; */
        if (message.dailyLevelIndex !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.dailyLevelIndex);
        /* map<uint32, uint32> skip_floor_granted_reward_item_map = 12; */
        for (let k of Object.keys(message.skipFloorGrantedRewardItemMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skipFloorGrantedRewardItemMap[k as any]).join();
        /* optional bool is_first_interact = 3; */
        if (message.isFirstInteract !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFirstInteract);
        /* optional bool is_finished_entrance_floor = 1; */
        if (message.isFinishedEntranceFloor !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isFinishedEntranceFloor);
        /* repeated com.midnights.game.TowerFloorRecord tower_floor_record_list = 5; */
        for (let i = 0; i < message.towerFloorRecordList.length; i++)
            TowerFloorRecord.internalBinaryWrite(message.towerFloorRecordList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 daily_floor_id = 11; */
        if (message.dailyFloorId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dailyFloorId);
        /* optional uint32 commemorative_reward_id = 13; */
        if (message.commemorativeRewardId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.commemorativeRewardId);
        /* optional com.midnights.game.TowerMonthlyBrief last_schedule_monthly_brief = 1222; */
        if (message.lastScheduleMonthlyBrief)
            TowerMonthlyBrief.internalBinaryWrite(message.lastScheduleMonthlyBrief, writer.tag(1222, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 next_schedule_change_time = 6; */
        if (message.nextScheduleChangeTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.nextScheduleChangeTime);
        /* optional uint32 valid_tower_record_num = 7; */
        if (message.validTowerRecordNum !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.validTowerRecordNum);
        /* optional uint32 skip_to_floor_index = 2; */
        if (message.skipToFloorIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.skipToFloorIndex);
        /* map<uint32, uint32> floor_open_time_map = 4; */
        for (let k of Object.keys(message.floorOpenTimeMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.floorOpenTimeMap[k as any]).join();
        /* optional com.midnights.game.TowerCurLevelRecord cur_level_record = 15; */
        if (message.curLevelRecord)
            TowerCurLevelRecord.internalBinaryWrite(message.curLevelRecord, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_start_time = 914; */
        if (message.scheduleStartTime !== undefined)
            writer.tag(914, WireType.Varint).uint32(message.scheduleStartTime);
        /* optional com.midnights.game.TowerMonthlyBrief monthly_brief = 14; */
        if (message.monthlyBrief)
            TowerMonthlyBrief.internalBinaryWrite(message.monthlyBrief, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerAllDataRsp
 */
export const TowerAllDataRsp = new TowerAllDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerEnterLevelReq$Type extends MessageType<TowerEnterLevelReq> {
    constructor() {
        super("com.midnights.game.TowerEnterLevelReq", [
            { no: 3, name: "enter_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerEnterLevelReq>): TowerEnterLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerEnterLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerEnterLevelReq): TowerEnterLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_point_id */ 3:
                    message.enterPointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerEnterLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_point_id = 3; */
        if (message.enterPointId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.enterPointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerEnterLevelReq
 */
export const TowerEnterLevelReq = new TowerEnterLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerEnterLevelRsp$Type extends MessageType<TowerEnterLevelRsp> {
    constructor() {
        super("com.midnights.game.TowerEnterLevelRsp", [
            { no: 10, name: "tower_buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerEnterLevelRsp>): TowerEnterLevelRsp {
        const message = { towerBuffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerEnterLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerEnterLevelRsp): TowerEnterLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 tower_buff_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.towerBuffIdList.push(reader.uint32());
                    else
                        message.towerBuffIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level_index */ 14:
                    message.levelIndex = reader.uint32();
                    break;
                case /* optional uint32 floor_id */ 5:
                    message.floorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerEnterLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 tower_buff_id_list = 10; */
        for (let i = 0; i < message.towerBuffIdList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.towerBuffIdList[i]);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 level_index = 14; */
        if (message.levelIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelIndex);
        /* optional uint32 floor_id = 5; */
        if (message.floorId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerEnterLevelRsp
 */
export const TowerEnterLevelRsp = new TowerEnterLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerBuffSelectReq$Type extends MessageType<TowerBuffSelectReq> {
    constructor() {
        super("com.midnights.game.TowerBuffSelectReq", [
            { no: 5, name: "tower_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerBuffSelectReq>): TowerBuffSelectReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerBuffSelectReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerBuffSelectReq): TowerBuffSelectReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tower_buff_id */ 5:
                    message.towerBuffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerBuffSelectReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tower_buff_id = 5; */
        if (message.towerBuffId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.towerBuffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerBuffSelectReq
 */
export const TowerBuffSelectReq = new TowerBuffSelectReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerBuffSelectRsp$Type extends MessageType<TowerBuffSelectRsp> {
    constructor() {
        super("com.midnights.game.TowerBuffSelectRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "tower_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerBuffSelectRsp>): TowerBuffSelectRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerBuffSelectRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerBuffSelectRsp): TowerBuffSelectRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 tower_buff_id */ 13:
                    message.towerBuffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerBuffSelectRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 tower_buff_id = 13; */
        if (message.towerBuffId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.towerBuffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerBuffSelectRsp
 */
export const TowerBuffSelectRsp = new TowerBuffSelectRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerSurrenderReq$Type extends MessageType<TowerSurrenderReq> {
    constructor() {
        super("com.midnights.game.TowerSurrenderReq", []);
    }
    create(value?: PartialMessage<TowerSurrenderReq>): TowerSurrenderReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerSurrenderReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerSurrenderReq): TowerSurrenderReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TowerSurrenderReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerSurrenderReq
 */
export const TowerSurrenderReq = new TowerSurrenderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerSurrenderRsp$Type extends MessageType<TowerSurrenderRsp> {
    constructor() {
        super("com.midnights.game.TowerSurrenderRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerSurrenderRsp>): TowerSurrenderRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerSurrenderRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerSurrenderRsp): TowerSurrenderRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerSurrenderRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerSurrenderRsp
 */
export const TowerSurrenderRsp = new TowerSurrenderRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerGetFloorStarRewardReq$Type extends MessageType<TowerGetFloorStarRewardReq> {
    constructor() {
        super("com.midnights.game.TowerGetFloorStarRewardReq", [
            { no: 15, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerGetFloorStarRewardReq>): TowerGetFloorStarRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerGetFloorStarRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerGetFloorStarRewardReq): TowerGetFloorStarRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 floor_id */ 15:
                    message.floorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerGetFloorStarRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 floor_id = 15; */
        if (message.floorId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerGetFloorStarRewardReq
 */
export const TowerGetFloorStarRewardReq = new TowerGetFloorStarRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerGetFloorStarRewardRsp$Type extends MessageType<TowerGetFloorStarRewardRsp> {
    constructor() {
        super("com.midnights.game.TowerGetFloorStarRewardRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerGetFloorStarRewardRsp>): TowerGetFloorStarRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerGetFloorStarRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerGetFloorStarRewardRsp): TowerGetFloorStarRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 floor_id */ 9:
                    message.floorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerGetFloorStarRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 floor_id = 9; */
        if (message.floorId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.floorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerGetFloorStarRewardRsp
 */
export const TowerGetFloorStarRewardRsp = new TowerGetFloorStarRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerLevelEndNotify$Type extends MessageType<TowerLevelEndNotify> {
    constructor() {
        super("com.midnights.game.TowerLevelEndNotify", [
            { no: 4, name: "next_floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "reward_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 15, name: "continue_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "finished_star_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerLevelEndNotify>): TowerLevelEndNotify {
        const message = { rewardItemList: [], finishedStarCondList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerLevelEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerLevelEndNotify): TowerLevelEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 next_floor_id */ 4:
                    message.nextFloorId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam reward_item_list */ 12:
                    message.rewardItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 continue_state */ 15:
                    message.continueState = reader.uint32();
                    break;
                case /* optional bool is_success */ 5:
                    message.isSuccess = reader.bool();
                    break;
                case /* repeated uint32 finished_star_cond_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedStarCondList.push(reader.uint32());
                    else
                        message.finishedStarCondList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerLevelEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 next_floor_id = 4; */
        if (message.nextFloorId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.nextFloorId);
        /* repeated com.midnights.game.ItemParam reward_item_list = 12; */
        for (let i = 0; i < message.rewardItemList.length; i++)
            ItemParam.internalBinaryWrite(message.rewardItemList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 continue_state = 15; */
        if (message.continueState !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.continueState);
        /* optional bool is_success = 5; */
        if (message.isSuccess !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSuccess);
        /* repeated uint32 finished_star_cond_list = 6; */
        for (let i = 0; i < message.finishedStarCondList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.finishedStarCondList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerLevelEndNotify
 */
export const TowerLevelEndNotify = new TowerLevelEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerLevelStarCondData$Type extends MessageType<TowerLevelStarCondData> {
    constructor() {
        super("com.midnights.game.TowerLevelStarCondData", [
            { no: 15, name: "is_fail", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cond_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_pause", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "star_cond_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerLevelStarCondData>): TowerLevelStarCondData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerLevelStarCondData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerLevelStarCondData): TowerLevelStarCondData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_fail */ 15:
                    message.isFail = reader.bool();
                    break;
                case /* optional uint32 cond_value */ 9:
                    message.condValue = reader.uint32();
                    break;
                case /* optional bool is_pause */ 13:
                    message.isPause = reader.bool();
                    break;
                case /* optional uint32 star_cond_index */ 6:
                    message.starCondIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerLevelStarCondData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_fail = 15; */
        if (message.isFail !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isFail);
        /* optional uint32 cond_value = 9; */
        if (message.condValue !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.condValue);
        /* optional bool is_pause = 13; */
        if (message.isPause !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isPause);
        /* optional uint32 star_cond_index = 6; */
        if (message.starCondIndex !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.starCondIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerLevelStarCondData
 */
export const TowerLevelStarCondData = new TowerLevelStarCondData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerLevelStarCondNotify$Type extends MessageType<TowerLevelStarCondNotify> {
    constructor() {
        super("com.midnights.game.TowerLevelStarCondNotify", [
            { no: 14, name: "level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "floor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cond_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerLevelStarCondData }
        ]);
    }
    create(value?: PartialMessage<TowerLevelStarCondNotify>): TowerLevelStarCondNotify {
        const message = { condDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerLevelStarCondNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerLevelStarCondNotify): TowerLevelStarCondNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_index */ 14:
                    message.levelIndex = reader.uint32();
                    break;
                case /* optional uint32 floor_id */ 11:
                    message.floorId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TowerLevelStarCondData cond_data_list */ 9:
                    message.condDataList.push(TowerLevelStarCondData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerLevelStarCondNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_index = 14; */
        if (message.levelIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelIndex);
        /* optional uint32 floor_id = 11; */
        if (message.floorId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.floorId);
        /* repeated com.midnights.game.TowerLevelStarCondData cond_data_list = 9; */
        for (let i = 0; i < message.condDataList.length; i++)
            TowerLevelStarCondData.internalBinaryWrite(message.condDataList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerLevelStarCondNotify
 */
export const TowerLevelStarCondNotify = new TowerLevelStarCondNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerMiddleLevelChangeTeamNotify$Type extends MessageType<TowerMiddleLevelChangeTeamNotify> {
    constructor() {
        super("com.midnights.game.TowerMiddleLevelChangeTeamNotify", []);
    }
    create(value?: PartialMessage<TowerMiddleLevelChangeTeamNotify>): TowerMiddleLevelChangeTeamNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerMiddleLevelChangeTeamNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerMiddleLevelChangeTeamNotify): TowerMiddleLevelChangeTeamNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TowerMiddleLevelChangeTeamNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerMiddleLevelChangeTeamNotify
 */
export const TowerMiddleLevelChangeTeamNotify = new TowerMiddleLevelChangeTeamNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerFightRecordPair$Type extends MessageType<TowerFightRecordPair> {
    constructor() {
        super("com.midnights.game.TowerFightRecordPair", [
            { no: 1, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TowerFightRecordPair>): TowerFightRecordPair {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerFightRecordPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerFightRecordPair): TowerFightRecordPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 avatar_id */ 1:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional uint32 data */ 3:
                    message.data = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerFightRecordPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 avatar_id = 1; */
        if (message.avatarId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.avatarId);
        /* optional uint32 data = 3; */
        if (message.data !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerFightRecordPair
 */
export const TowerFightRecordPair = new TowerFightRecordPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerMonthlyCombatRecord$Type extends MessageType<TowerMonthlyCombatRecord> {
    constructor() {
        super("com.midnights.game.TowerMonthlyCombatRecord", [
            { no: 14, name: "most_kill_avatar_pair", kind: "message", T: () => TowerFightRecordPair },
            { no: 8, name: "most_cast_normal_skill_avatar_pair", kind: "message", T: () => TowerFightRecordPair },
            { no: 6, name: "most_reveal_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerFightRecordPair },
            { no: 4, name: "most_cast_energy_skill_avatar_pair", kind: "message", T: () => TowerFightRecordPair },
            { no: 12, name: "highest_dps_avatr_pair", kind: "message", T: () => TowerFightRecordPair },
            { no: 9, name: "most_take_damage_avatar_pair", kind: "message", T: () => TowerFightRecordPair }
        ]);
    }
    create(value?: PartialMessage<TowerMonthlyCombatRecord>): TowerMonthlyCombatRecord {
        const message = { mostRevealAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerMonthlyCombatRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerMonthlyCombatRecord): TowerMonthlyCombatRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TowerFightRecordPair most_kill_avatar_pair */ 14:
                    message.mostKillAvatarPair = TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options, message.mostKillAvatarPair);
                    break;
                case /* optional com.midnights.game.TowerFightRecordPair most_cast_normal_skill_avatar_pair */ 8:
                    message.mostCastNormalSkillAvatarPair = TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options, message.mostCastNormalSkillAvatarPair);
                    break;
                case /* repeated com.midnights.game.TowerFightRecordPair most_reveal_avatar_list */ 6:
                    message.mostRevealAvatarList.push(TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.TowerFightRecordPair most_cast_energy_skill_avatar_pair */ 4:
                    message.mostCastEnergySkillAvatarPair = TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options, message.mostCastEnergySkillAvatarPair);
                    break;
                case /* optional com.midnights.game.TowerFightRecordPair highest_dps_avatr_pair */ 12:
                    message.highestDpsAvatrPair = TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options, message.highestDpsAvatrPair);
                    break;
                case /* optional com.midnights.game.TowerFightRecordPair most_take_damage_avatar_pair */ 9:
                    message.mostTakeDamageAvatarPair = TowerFightRecordPair.internalBinaryRead(reader, reader.uint32(), options, message.mostTakeDamageAvatarPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerMonthlyCombatRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TowerFightRecordPair most_kill_avatar_pair = 14; */
        if (message.mostKillAvatarPair)
            TowerFightRecordPair.internalBinaryWrite(message.mostKillAvatarPair, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.TowerFightRecordPair most_cast_normal_skill_avatar_pair = 8; */
        if (message.mostCastNormalSkillAvatarPair)
            TowerFightRecordPair.internalBinaryWrite(message.mostCastNormalSkillAvatarPair, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.TowerFightRecordPair most_reveal_avatar_list = 6; */
        for (let i = 0; i < message.mostRevealAvatarList.length; i++)
            TowerFightRecordPair.internalBinaryWrite(message.mostRevealAvatarList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.TowerFightRecordPair most_cast_energy_skill_avatar_pair = 4; */
        if (message.mostCastEnergySkillAvatarPair)
            TowerFightRecordPair.internalBinaryWrite(message.mostCastEnergySkillAvatarPair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.TowerFightRecordPair highest_dps_avatr_pair = 12; */
        if (message.highestDpsAvatrPair)
            TowerFightRecordPair.internalBinaryWrite(message.highestDpsAvatrPair, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.TowerFightRecordPair most_take_damage_avatar_pair = 9; */
        if (message.mostTakeDamageAvatarPair)
            TowerFightRecordPair.internalBinaryWrite(message.mostTakeDamageAvatarPair, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerMonthlyCombatRecord
 */
export const TowerMonthlyCombatRecord = new TowerMonthlyCombatRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerMonthlyDetail$Type extends MessageType<TowerMonthlyDetail> {
    constructor() {
        super("com.midnights.game.TowerMonthlyDetail", [
            { no: 2, name: "monthly_combat_record", kind: "message", T: () => TowerMonthlyCombatRecord },
            { no: 12, name: "monthly_brief", kind: "message", T: () => TowerMonthlyBrief }
        ]);
    }
    create(value?: PartialMessage<TowerMonthlyDetail>): TowerMonthlyDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerMonthlyDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerMonthlyDetail): TowerMonthlyDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TowerMonthlyCombatRecord monthly_combat_record */ 2:
                    message.monthlyCombatRecord = TowerMonthlyCombatRecord.internalBinaryRead(reader, reader.uint32(), options, message.monthlyCombatRecord);
                    break;
                case /* optional com.midnights.game.TowerMonthlyBrief monthly_brief */ 12:
                    message.monthlyBrief = TowerMonthlyBrief.internalBinaryRead(reader, reader.uint32(), options, message.monthlyBrief);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerMonthlyDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TowerMonthlyCombatRecord monthly_combat_record = 2; */
        if (message.monthlyCombatRecord)
            TowerMonthlyCombatRecord.internalBinaryWrite(message.monthlyCombatRecord, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.TowerMonthlyBrief monthly_brief = 12; */
        if (message.monthlyBrief)
            TowerMonthlyBrief.internalBinaryWrite(message.monthlyBrief, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerMonthlyDetail
 */
export const TowerMonthlyDetail = new TowerMonthlyDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerRecordHandbookReq$Type extends MessageType<TowerRecordHandbookReq> {
    constructor() {
        super("com.midnights.game.TowerRecordHandbookReq", []);
    }
    create(value?: PartialMessage<TowerRecordHandbookReq>): TowerRecordHandbookReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerRecordHandbookReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerRecordHandbookReq): TowerRecordHandbookReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TowerRecordHandbookReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerRecordHandbookReq
 */
export const TowerRecordHandbookReq = new TowerRecordHandbookReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TowerRecordHandbookRsp$Type extends MessageType<TowerRecordHandbookRsp> {
    constructor() {
        super("com.midnights.game.TowerRecordHandbookRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "monthly_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TowerMonthlyDetail }
        ]);
    }
    create(value?: PartialMessage<TowerRecordHandbookRsp>): TowerRecordHandbookRsp {
        const message = { monthlyDetailList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TowerRecordHandbookRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TowerRecordHandbookRsp): TowerRecordHandbookRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.TowerMonthlyDetail monthly_detail_list */ 14:
                    message.monthlyDetailList.push(TowerMonthlyDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TowerRecordHandbookRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.TowerMonthlyDetail monthly_detail_list = 14; */
        for (let i = 0; i < message.monthlyDetailList.length; i++)
            TowerMonthlyDetail.internalBinaryWrite(message.monthlyDetailList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TowerRecordHandbookRsp
 */
export const TowerRecordHandbookRsp = new TowerRecordHandbookRsp$Type();
