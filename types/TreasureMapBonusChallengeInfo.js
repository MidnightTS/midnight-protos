"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TreasureMapBonusChallengeInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreasureMapBonusChallengeInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TreasureMapBonusChallengeInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class TreasureMapBonusChallengeInfo extends pb_1.Message {
    constructor(data) {
        super();
        _TreasureMapBonusChallengeInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TreasureMapBonusChallengeInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_done" in data && data.is_done != undefined) {
                this.is_done = data.is_done;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
            if ("fragment_map" in data && data.fragment_map != undefined) {
                this.fragment_map = data.fragment_map;
            }
            if ("solution_id" in data && data.solution_id != undefined) {
                this.solution_id = data.solution_id;
            }
        }
        if (!this.fragment_map)
            this.fragment_map = new Map();
    }
    get is_done() {
        return pb_1.Message.getFieldWithDefault(this, 5, false);
    }
    set is_done(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set config_id(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 1, false);
    }
    set is_active(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get fragment_map() {
        return pb_1.Message.getField(this, 12);
    }
    set fragment_map(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get solution_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set solution_id(value) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data) {
        const message = new TreasureMapBonusChallengeInfo({});
        if (data.is_done != null) {
            message.is_done = data.is_done;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        if (typeof data.fragment_map == "object") {
            message.fragment_map = new Map(Object.entries(data.fragment_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.solution_id != null) {
            message.solution_id = data.solution_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_done != null) {
            data.is_done = this.is_done;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        if (this.fragment_map.size > 0) {
            data.fragment_map = (Object.fromEntries)(this.fragment_map);
        }
        if (this.solution_id != null) {
            data.solution_id = this.solution_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_done != false)
            writer.writeBool(5, this.is_done);
        if (this.config_id != 0)
            writer.writeUint32(10, this.config_id);
        if (this.is_active != false)
            writer.writeBool(1, this.is_active);
        for (const [key, value] of this.fragment_map) {
            writer.writeMessage(12, this.fragment_map, () => {
                writer.writeUint32(1, key);
                writer.writeBool(2, value);
            });
        }
        if (this.solution_id != 0)
            writer.writeUint32(8, this.solution_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TreasureMapBonusChallengeInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.is_done = reader.readBool();
                    break;
                case 10:
                    message.config_id = reader.readUint32();
                    break;
                case 1:
                    message.is_active = reader.readBool();
                    break;
                case 12:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fragment_map, reader, reader.readUint32, reader.readBool));
                    break;
                case 8:
                    message.solution_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return TreasureMapBonusChallengeInfo.deserialize(bytes);
    }
}
exports.TreasureMapBonusChallengeInfo = TreasureMapBonusChallengeInfo;
_TreasureMapBonusChallengeInfo_one_of_decls = new WeakMap();
