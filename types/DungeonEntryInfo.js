"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DungeonEntryInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DungeonEntryInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DungeonEntryInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./WeeklyBossResinDiscountInfo");
const pb_1 = require("google-protobuf");
class DungeonEntryInfo extends pb_1.Message {
    constructor(data) {
        super();
        _DungeonEntryInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _DungeonEntryInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("end_time" in data && data.end_time != undefined) {
                this.end_time = data.end_time;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("boss_chest_num" in data && data.boss_chest_num != undefined) {
                this.boss_chest_num = data.boss_chest_num;
            }
            if ("max_boss_chest_num" in data && data.max_boss_chest_num != undefined) {
                this.max_boss_chest_num = data.max_boss_chest_num;
            }
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
            if ("weekly_boss_resin_discount_info" in data && data.weekly_boss_resin_discount_info != undefined) {
                this.weekly_boss_resin_discount_info = data.weekly_boss_resin_discount_info;
            }
            if ("start_time" in data && data.start_time != undefined) {
                this.start_time = data.start_time;
            }
            if ("is_passed" in data && data.is_passed != undefined) {
                this.is_passed = data.is_passed;
            }
            if ("left_times" in data && data.left_times != undefined) {
                this.left_times = data.left_times;
            }
        }
    }
    get end_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set end_time(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set dungeon_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get boss_chest_num() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set boss_chest_num(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get max_boss_chest_num() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set max_boss_chest_num(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set next_refresh_time(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get weekly_boss_resin_discount_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.WeeklyBossResinDiscountInfo, 9);
    }
    set weekly_boss_resin_discount_info(value) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_weekly_boss_resin_discount_info() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get start_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set start_time(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get is_passed() {
        return pb_1.Message.getFieldWithDefault(this, 4, false);
    }
    set is_passed(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get left_times() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set left_times(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new DungeonEntryInfo({});
        if (data.end_time != null) {
            message.end_time = data.end_time;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.boss_chest_num != null) {
            message.boss_chest_num = data.boss_chest_num;
        }
        if (data.max_boss_chest_num != null) {
            message.max_boss_chest_num = data.max_boss_chest_num;
        }
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        if (data.weekly_boss_resin_discount_info != null) {
            message.weekly_boss_resin_discount_info = dependency_1.WeeklyBossResinDiscountInfo.fromObject(data.weekly_boss_resin_discount_info);
        }
        if (data.start_time != null) {
            message.start_time = data.start_time;
        }
        if (data.is_passed != null) {
            message.is_passed = data.is_passed;
        }
        if (data.left_times != null) {
            message.left_times = data.left_times;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.end_time != null) {
            data.end_time = this.end_time;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.boss_chest_num != null) {
            data.boss_chest_num = this.boss_chest_num;
        }
        if (this.max_boss_chest_num != null) {
            data.max_boss_chest_num = this.max_boss_chest_num;
        }
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        if (this.weekly_boss_resin_discount_info != null) {
            data.weekly_boss_resin_discount_info = this.weekly_boss_resin_discount_info.toObject();
        }
        if (this.start_time != null) {
            data.start_time = this.start_time;
        }
        if (this.is_passed != null) {
            data.is_passed = this.is_passed;
        }
        if (this.left_times != null) {
            data.left_times = this.left_times;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.end_time != 0)
            writer.writeUint32(6, this.end_time);
        if (this.dungeon_id != 0)
            writer.writeUint32(5, this.dungeon_id);
        if (this.boss_chest_num != 0)
            writer.writeUint32(12, this.boss_chest_num);
        if (this.max_boss_chest_num != 0)
            writer.writeUint32(13, this.max_boss_chest_num);
        if (this.next_refresh_time != 0)
            writer.writeUint32(11, this.next_refresh_time);
        if (this.has_weekly_boss_resin_discount_info)
            writer.writeMessage(9, this.weekly_boss_resin_discount_info, () => this.weekly_boss_resin_discount_info.serialize(writer));
        if (this.start_time != 0)
            writer.writeUint32(15, this.start_time);
        if (this.is_passed != false)
            writer.writeBool(4, this.is_passed);
        if (this.left_times != 0)
            writer.writeUint32(7, this.left_times);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DungeonEntryInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.end_time = reader.readUint32();
                    break;
                case 5:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 12:
                    message.boss_chest_num = reader.readUint32();
                    break;
                case 13:
                    message.max_boss_chest_num = reader.readUint32();
                    break;
                case 11:
                    message.next_refresh_time = reader.readUint32();
                    break;
                case 9:
                    reader.readMessage(message.weekly_boss_resin_discount_info, () => message.weekly_boss_resin_discount_info = dependency_1.WeeklyBossResinDiscountInfo.deserialize(reader));
                    break;
                case 15:
                    message.start_time = reader.readUint32();
                    break;
                case 4:
                    message.is_passed = reader.readBool();
                    break;
                case 7:
                    message.left_times = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return DungeonEntryInfo.deserialize(bytes);
    }
}
exports.DungeonEntryInfo = DungeonEntryInfo;
_DungeonEntryInfo_one_of_decls = new WeakMap();
