// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "BrickBreakerSettleNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Uint32Pair } from "./Uint32Pair";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 23886;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message BrickBreakerSettleNotify
 */
export interface BrickBreakerSettleNotify {
    /**
     * @generated from protobuf field: uint32 time = 5;
     */
    time: number;
    /**
     * @generated from protobuf field: bool is_single_mode = 15;
     */
    isSingleMode: boolean;
    /**
     * @generated from protobuf field: bool is_dungeon = 2;
     */
    isDungeon: boolean;
    /**
     * @generated from protobuf field: uint32 score = 7;
     */
    score: number;
    /**
     * @generated from protobuf field: uint32 combo = 12;
     */
    combo: number;
    /**
     * @generated from protobuf field: uint32 level_id = 11;
     */
    levelId: number;
    /**
     * @generated from protobuf field: BrickBreakerSettleNotify.SettleReason reason = 1;
     */
    reason: BrickBreakerSettleNotify_SettleReason;
    /**
     * @generated from protobuf field: bool is_new_record = 3;
     */
    isNewRecord: boolean;
    /**
     * @generated from protobuf field: uint32 gallery_id = 13;
     */
    galleryId: number;
    /**
     * @generated from protobuf field: repeated Uint32Pair update_skill_list = 4;
     */
    updateSkillList: Uint32Pair[];
}
/**
 * @generated from protobuf enum BrickBreakerSettleNotify.SettleReason
 */
export enum BrickBreakerSettleNotify_SettleReason {
    /**
     * @generated from protobuf enum value: SETTLE_REASON_TIME_OUT = 0;
     */
    TIME_OUT = 0,
    /**
     * @generated from protobuf enum value: SETTLE_REASON_PLAY_END = 1;
     */
    PLAY_END = 1,
    /**
     * @generated from protobuf enum value: SETTLE_REASON_PLAYER_QUIT = 2;
     */
    PLAYER_QUIT = 2,
    /**
     * @generated from protobuf enum value: SETTLE_REASON_LIFE_COUNT = 3;
     */
    LIFE_COUNT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class BrickBreakerSettleNotify$Type extends MessageType<BrickBreakerSettleNotify> {
    constructor() {
        super("BrickBreakerSettleNotify", [
            { no: 5, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_single_mode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_dungeon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "combo", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "level_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "reason", kind: "enum", T: () => ["BrickBreakerSettleNotify.SettleReason", BrickBreakerSettleNotify_SettleReason, "SETTLE_REASON_"] },
            { no: 3, name: "is_new_record", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "gallery_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "update_skill_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Uint32Pair }
        ]);
    }
    create(value?: PartialMessage<BrickBreakerSettleNotify>): BrickBreakerSettleNotify {
        const message = { time: 0, isSingleMode: false, isDungeon: false, score: 0, combo: 0, levelId: 0, reason: 0, isNewRecord: false, galleryId: 0, updateSkillList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrickBreakerSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrickBreakerSettleNotify): BrickBreakerSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 time */ 5:
                    message.time = reader.uint32();
                    break;
                case /* bool is_single_mode */ 15:
                    message.isSingleMode = reader.bool();
                    break;
                case /* bool is_dungeon */ 2:
                    message.isDungeon = reader.bool();
                    break;
                case /* uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* uint32 combo */ 12:
                    message.combo = reader.uint32();
                    break;
                case /* uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                case /* BrickBreakerSettleNotify.SettleReason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* bool is_new_record */ 3:
                    message.isNewRecord = reader.bool();
                    break;
                case /* uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* repeated Uint32Pair update_skill_list */ 4:
                    message.updateSkillList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BrickBreakerSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 time = 5; */
        if (message.time !== 0)
            writer.tag(5, WireType.Varint).uint32(message.time);
        /* bool is_single_mode = 15; */
        if (message.isSingleMode !== false)
            writer.tag(15, WireType.Varint).bool(message.isSingleMode);
        /* bool is_dungeon = 2; */
        if (message.isDungeon !== false)
            writer.tag(2, WireType.Varint).bool(message.isDungeon);
        /* uint32 score = 7; */
        if (message.score !== 0)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* uint32 combo = 12; */
        if (message.combo !== 0)
            writer.tag(12, WireType.Varint).uint32(message.combo);
        /* uint32 level_id = 11; */
        if (message.levelId !== 0)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        /* BrickBreakerSettleNotify.SettleReason reason = 1; */
        if (message.reason !== 0)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* bool is_new_record = 3; */
        if (message.isNewRecord !== false)
            writer.tag(3, WireType.Varint).bool(message.isNewRecord);
        /* uint32 gallery_id = 13; */
        if (message.galleryId !== 0)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* repeated Uint32Pair update_skill_list = 4; */
        for (let i = 0; i < message.updateSkillList.length; i++)
            Uint32Pair.internalBinaryWrite(message.updateSkillList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrickBreakerSettleNotify
 */
export const BrickBreakerSettleNotify = new BrickBreakerSettleNotify$Type();
