"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CrucibleActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrucibleActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CrucibleActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./CrucibleBattleUidInfo");
const dependency_2 = require("./Vector");
const pb_1 = require("google-protobuf");
class CrucibleActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _CrucibleActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], __classPrivateFieldGet(this, _CrucibleActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cost_time" in data && data.cost_time != undefined) {
                this.cost_time = data.cost_time;
            }
            if ("battle_world_level" in data && data.battle_world_level != undefined) {
                this.battle_world_level = data.battle_world_level;
            }
            if ("uid_info_list" in data && data.uid_info_list != undefined) {
                this.uid_info_list = data.uid_info_list;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
        }
    }
    get cost_time() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set cost_time(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get battle_world_level() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set battle_world_level(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get uid_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.CrucibleBattleUidInfo, 3);
    }
    set uid_info_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 9);
    }
    set pos(value) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data) {
        const message = new CrucibleActivityDetailInfo({});
        if (data.cost_time != null) {
            message.cost_time = data.cost_time;
        }
        if (data.battle_world_level != null) {
            message.battle_world_level = data.battle_world_level;
        }
        if (data.uid_info_list != null) {
            message.uid_info_list = data.uid_info_list.map(item => dependency_1.CrucibleBattleUidInfo.fromObject(item));
        }
        if (data.pos != null) {
            message.pos = dependency_2.Vector.fromObject(data.pos);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.cost_time != null) {
            data.cost_time = this.cost_time;
        }
        if (this.battle_world_level != null) {
            data.battle_world_level = this.battle_world_level;
        }
        if (this.uid_info_list != null) {
            data.uid_info_list = this.uid_info_list.map((item) => item.toObject());
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cost_time != 0)
            writer.writeUint32(5, this.cost_time);
        if (this.battle_world_level != 0)
            writer.writeUint32(12, this.battle_world_level);
        if (this.uid_info_list.length)
            writer.writeRepeatedMessage(3, this.uid_info_list, (item) => item.serialize(writer));
        if (this.has_pos)
            writer.writeMessage(9, this.pos, () => this.pos.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CrucibleActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.cost_time = reader.readUint32();
                    break;
                case 12:
                    message.battle_world_level = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.uid_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.CrucibleBattleUidInfo.deserialize(reader), dependency_1.CrucibleBattleUidInfo));
                    break;
                case 9:
                    reader.readMessage(message.pos, () => message.pos = dependency_2.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return CrucibleActivityDetailInfo.deserialize(bytes);
    }
}
exports.CrucibleActivityDetailInfo = CrucibleActivityDetailInfo;
_CrucibleActivityDetailInfo_one_of_decls = new WeakMap();
