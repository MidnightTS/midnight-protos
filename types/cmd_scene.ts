// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_scene.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MapAreaInfo } from "./define";
import { Route } from "./define";
import { MonsterRoute } from "./define";
import { MapMarkTipsInfo } from "./define";
import { VectorPlane } from "./define";
import { PlayTeamEntityInfo } from "./define";
import { EntityClientData } from "./define";
import { PlayerWidgetInfo } from "./cmd_widget";
import { PropValue } from "./define";
import { MapMarkPoint } from "./define";
import { EntityMoveInfo } from "./define";
import { PlayerDieType } from "./define";
import { AbilityControlBlock } from "./define";
import { AbilitySyncStateInfo } from "./define";
import { ServerBuff } from "./define";
import { PlatformInfo } from "./define";
import { OnlinePlayerInfo } from "./define";
import { CreateEntityInfo } from "./define";
import { MotionInfo } from "./define";
import { SceneEntityInfo } from "./define";
import { Vector } from "./define";
/**
 * @generated from protobuf message com.midnights.game.PlayerEnterSceneNotify
 */
export interface PlayerEnterSceneNotify {
    /**
     * @generated from protobuf field: optional uint32 prev_scene_id = 6;
     */
    prevSceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 12;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_ui = 1732;
     */
    isSkipUi?: boolean;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 15;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.EnterType type = 13;
     */
    type?: EnterType;
    /**
     * @generated from protobuf field: optional uint64 scene_begin_time = 14;
     */
    sceneBeginTime?: bigint;
    /**
     * @generated from protobuf field: optional uint32 world_level = 11;
     */
    worldLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 world_type = 1490;
     */
    worldType?: number;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 4;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional bool is_first_login_enter_scene = 3;
     */
    isFirstLoginEnterScene?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 scene_tag_id_list = 5;
     */
    sceneTagIdList: number[];
    /**
     * @generated from protobuf field: optional string scene_transaction = 1842;
     */
    sceneTransaction?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector prev_pos = 8;
     */
    prevPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 enter_reason = 1828;
     */
    enterReason?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 7;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 2;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerEnterSceneNotify.CmdId
 */
export enum PlayerEnterSceneNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 272;
     */
    CMD_ID = 272,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LeaveSceneReq
 */
export interface LeaveSceneReq {
}
/**
 * @generated from protobuf enum com.midnights.game.LeaveSceneReq.CmdId
 */
export enum LeaveSceneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 298;
     */
    CMD_ID = 298,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LeaveSceneRsp
 */
export interface LeaveSceneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LeaveSceneRsp.CmdId
 */
export enum LeaveSceneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 212;
     */
    CMD_ID = 212,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneInitFinishReq
 */
export interface SceneInitFinishReq {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 11;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneInitFinishReq.CmdId
 */
export enum SceneInitFinishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 235;
     */
    CMD_ID = 235,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneInitFinishRsp
 */
export interface SceneInitFinishRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 8;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneInitFinishRsp.CmdId
 */
export enum SceneInitFinishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 207;
     */
    CMD_ID = 207,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityAppearNotify
 */
export interface SceneEntityAppearNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.VisionType appear_type = 15;
     */
    appearType?: VisionType;
    /**
     * @generated from protobuf field: optional uint32 param = 9;
     */
    param?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneEntityInfo entity_list = 5;
     */
    entityList: SceneEntityInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityAppearNotify.CmdId
 */
export enum SceneEntityAppearNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 221;
     */
    CMD_ID = 221,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityDisappearNotify
 */
export interface SceneEntityDisappearNotify {
    /**
     * @generated from protobuf field: optional uint32 param = 6;
     */
    param?: number;
    /**
     * @generated from protobuf field: repeated uint32 entity_list = 1;
     */
    entityList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.VisionType disappear_type = 2;
     */
    disappearType?: VisionType;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityDisappearNotify.CmdId
 */
export enum SceneEntityDisappearNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 203;
     */
    CMD_ID = 203,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityMoveReq
 */
export interface SceneEntityMoveReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo motion_info = 7;
     */
    motionInfo?: MotionInfo;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 4;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 reliable_seq = 15;
     */
    reliableSeq?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityMoveReq.CmdId
 */
export enum SceneEntityMoveReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 290;
     */
    CMD_ID = 290,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_IS_RELIABLE = 0,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityMoveRsp
 */
export interface SceneEntityMoveRsp {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 4;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo fail_motion = 1;
     */
    failMotion?: MotionInfo;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 10;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 reliable_seq = 6;
     */
    reliableSeq?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityMoveRsp.CmdId
 */
export enum SceneEntityMoveRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 273;
     */
    CMD_ID = 273,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneAvatarStaminaStepReq
 */
export interface SceneAvatarStaminaStepReq {
    /**
     * @generated from protobuf field: optional bool use_client_rot = 15;
     */
    useClientRot?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 7;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneAvatarStaminaStepReq.CmdId
 */
export enum SceneAvatarStaminaStepReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 299;
     */
    CMD_ID = 299,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneAvatarStaminaStepRsp
 */
export interface SceneAvatarStaminaStepRsp {
    /**
     * @generated from protobuf field: optional bool use_client_rot = 9;
     */
    useClientRot?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 11;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneAvatarStaminaStepRsp.CmdId
 */
export enum SceneAvatarStaminaStepRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 231;
     */
    CMD_ID = 231,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityMoveNotify
 */
export interface SceneEntityMoveNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo motion_info = 6;
     */
    motionInfo?: MotionInfo;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 15;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 reliable_seq = 2;
     */
    reliableSeq?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityMoveNotify.CmdId
 */
export enum SceneEntityMoveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 275;
     */
    CMD_ID = 275,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VehicleLocationInfo
 */
export interface VehicleLocationInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 14;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional float cur_hp = 11;
     */
    curHp?: number;
    /**
     * @generated from protobuf field: optional uint32 owner_uid = 5;
     */
    ownerUid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 1;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 3;
     */
    uidList: number[];
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 13;
     */
    gadgetId?: number;
    /**
     * @generated from protobuf field: optional float max_hp = 6;
     */
    maxHp?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayerLocationNotify
 */
export interface ScenePlayerLocationNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.VehicleLocationInfo vehicle_loc_list = 3;
     */
    vehicleLocList: VehicleLocationInfo[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 9;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerLocationInfo player_loc_list = 14;
     */
    playerLocList: PlayerLocationInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayerLocationNotify.CmdId
 */
export enum ScenePlayerLocationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 248;
     */
    CMD_ID = 248,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetScenePointReq
 */
export interface GetScenePointReq {
    /**
     * @generated from protobuf field: optional uint32 belong_uid = 10;
     */
    belongUid?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetScenePointReq.CmdId
 */
export enum GetScenePointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 297;
     */
    CMD_ID = 297,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CityInfo
 */
export interface CityInfo {
    /**
     * @generated from protobuf field: optional uint32 city_id = 15;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional uint32 crystal_num = 3;
     */
    crystalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 4;
     */
    level?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetScenePointRsp
 */
export interface GetScenePointRsp {
    /**
     * @generated from protobuf field: repeated uint32 not_explored_dungeon_entry_list = 11;
     */
    notExploredDungeonEntryList: number[];
    /**
     * @generated from protobuf field: repeated uint32 to_be_explore_dungeon_entry_list = 15;
     */
    toBeExploreDungeonEntryList: number[];
    /**
     * @generated from protobuf field: repeated uint32 locked_point_list = 2;
     */
    lockedPointList: number[];
    /**
     * @generated from protobuf field: repeated uint32 unhide_point_list = 5;
     */
    unhidePointList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 belong_uid = 12;
     */
    belongUid?: number;
    /**
     * @generated from protobuf field: repeated uint32 unlocked_point_list = 13;
     */
    unlockedPointList: number[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_area_list = 1;
     */
    unlockAreaList: number[];
    /**
     * @generated from protobuf field: repeated uint32 hide_point_list = 4;
     */
    hidePointList: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 14;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated uint32 not_interact_dungeon_entry_list = 6;
     */
    notInteractDungeonEntryList: number[];
    /**
     * @generated from protobuf field: repeated uint32 group_unlimit_point_list = 10;
     */
    groupUnlimitPointList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetScenePointRsp.CmdId
 */
export enum GetScenePointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 281;
     */
    CMD_ID = 281,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterTransPointRegionNotify
 */
export interface EnterTransPointRegionNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 8;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 6;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterTransPointRegionNotify.CmdId
 */
export enum EnterTransPointRegionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 205;
     */
    CMD_ID = 205,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExitTransPointRegionNotify
 */
export interface ExitTransPointRegionNotify {
    /**
     * @generated from protobuf field: optional uint32 point_id = 1;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 7;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExitTransPointRegionNotify.CmdId
 */
export enum ExitTransPointRegionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 282;
     */
    CMD_ID = 282,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePointUnlockNotify
 */
export interface ScenePointUnlockNotify {
    /**
     * @generated from protobuf field: repeated uint32 point_list = 13;
     */
    pointList: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 6;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated uint32 unhide_point_list = 12;
     */
    unhidePointList: number[];
    /**
     * @generated from protobuf field: repeated uint32 hide_point_list = 1;
     */
    hidePointList: number[];
    /**
     * @generated from protobuf field: repeated uint32 locked_point_list = 8;
     */
    lockedPointList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePointUnlockNotify.CmdId
 */
export enum ScenePointUnlockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 247;
     */
    CMD_ID = 247,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneTransToPointReq
 */
export interface SceneTransToPointReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 13;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 1;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneTransToPointReq.CmdId
 */
export enum SceneTransToPointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 239;
     */
    CMD_ID = 239,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneTransToPointRsp
 */
export interface SceneTransToPointRsp {
    /**
     * @generated from protobuf field: optional uint32 point_id = 14;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 3;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneTransToPointRsp.CmdId
 */
export enum SceneTransToPointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 253;
     */
    CMD_ID = 253,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityJumpNotify
 */
export interface EntityJumpNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.EntityJumpNotify.Type jump_type = 9;
     */
    jumpType?: EntityJumpNotify_Type;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 8;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 12;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EntityJumpNotify.Type
 */
export enum EntityJumpNotify_Type {
    /**
     * @generated from protobuf enum value: NULL = 0;
     */
    NULL = 0,
    /**
     * @generated from protobuf enum value: ACTIVE = 1;
     */
    ACTIVE = 1,
    /**
     * @generated from protobuf enum value: PASSIVE = 2;
     */
    PASSIVE = 2
}
/**
 * @generated from protobuf enum com.midnights.game.EntityJumpNotify.CmdId
 */
export enum EntityJumpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 222;
     */
    CMD_ID = 222,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetSceneAreaReq
 */
export interface GetSceneAreaReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 belong_uid = 7;
     */
    belongUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetSceneAreaReq.CmdId
 */
export enum GetSceneAreaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 265;
     */
    CMD_ID = 265,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetSceneAreaRsp
 */
export interface GetSceneAreaRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CityInfo city_info_list = 13;
     */
    cityInfoList: CityInfo[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 15;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated uint32 area_id_list = 9;
     */
    areaIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetSceneAreaRsp.CmdId
 */
export enum GetSceneAreaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 204;
     */
    CMD_ID = 204,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneAreaUnlockNotify
 */
export interface SceneAreaUnlockNotify {
    /**
     * @generated from protobuf field: repeated uint32 area_list = 10;
     */
    areaList: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 9;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneAreaUnlockNotify.CmdId
 */
export enum SceneAreaUnlockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 293;
     */
    CMD_ID = 293,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityDrownReq
 */
export interface SceneEntityDrownReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 10;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityDrownReq.CmdId
 */
export enum SceneEntityDrownReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 227;
     */
    CMD_ID = 227,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityDrownRsp
 */
export interface SceneEntityDrownRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityDrownRsp.CmdId
 */
export enum SceneEntityDrownRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 294;
     */
    CMD_ID = 294,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneCreateEntityReq
 */
export interface SceneCreateEntityReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.CreateEntityInfo entity = 1;
     */
    entity?: CreateEntityInfo;
    /**
     * @generated from protobuf field: optional bool is_destroy_when_disconnect = 10;
     */
    isDestroyWhenDisconnect?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.CreateReason reason = 3;
     */
    reason?: CreateReason;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneCreateEntityReq.CmdId
 */
export enum SceneCreateEntityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 288;
     */
    CMD_ID = 288,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneCreateEntityRsp
 */
export interface SceneCreateEntityRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CreateEntityInfo entity = 10;
     */
    entity?: CreateEntityInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneCreateEntityRsp.CmdId
 */
export enum SceneCreateEntityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 226;
     */
    CMD_ID = 226,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneDestroyEntityReq
 */
export interface SceneDestroyEntityReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 7;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneDestroyEntityReq.CmdId
 */
export enum SceneDestroyEntityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 263;
     */
    CMD_ID = 263,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneDestroyEntityRsp
 */
export interface SceneDestroyEntityRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 7;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneDestroyEntityRsp.CmdId
 */
export enum SceneDestroyEntityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 295;
     */
    CMD_ID = 295,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneForceUnlockNotify
 */
export interface SceneForceUnlockNotify {
    /**
     * @generated from protobuf field: optional bool is_add = 10;
     */
    isAdd?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 force_id_list = 2;
     */
    forceIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneForceUnlockNotify.CmdId
 */
export enum SceneForceUnlockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 206;
     */
    CMD_ID = 206,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneForceLockNotify
 */
export interface SceneForceLockNotify {
    /**
     * @generated from protobuf field: repeated uint32 force_id_list = 9;
     */
    forceIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneForceLockNotify.CmdId
 */
export enum SceneForceLockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 234;
     */
    CMD_ID = 234,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterWorldAreaReq
 */
export interface EnterWorldAreaReq {
    /**
     * @generated from protobuf field: optional uint32 area_type = 8;
     */
    areaType?: number;
    /**
     * @generated from protobuf field: optional uint32 area_id = 1;
     */
    areaId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterWorldAreaReq.CmdId
 */
export enum EnterWorldAreaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 250;
     */
    CMD_ID = 250,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterWorldAreaRsp
 */
export interface EnterWorldAreaRsp {
    /**
     * @generated from protobuf field: optional uint32 area_type = 1;
     */
    areaType?: number;
    /**
     * @generated from protobuf field: optional uint32 area_id = 7;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterWorldAreaRsp.CmdId
 */
export enum EnterWorldAreaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 243;
     */
    CMD_ID = 243,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityForceSyncReq
 */
export interface EntityForceSyncReq {
    /**
     * @generated from protobuf field: optional uint32 room_id = 1;
     */
    roomId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo motion_info = 11;
     */
    motionInfo?: MotionInfo;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 13;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 12;
     */
    sceneTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EntityForceSyncReq.CmdId
 */
export enum EntityForceSyncReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 274;
     */
    CMD_ID = 274,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityForceSyncRsp
 */
export interface EntityForceSyncRsp {
    /**
     * @generated from protobuf field: optional uint32 scene_time = 14;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 6;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo fail_motion = 8;
     */
    failMotion?: MotionInfo;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EntityForceSyncRsp.CmdId
 */
export enum EntityForceSyncRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 276;
     */
    CMD_ID = 276,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetAreaExplorePointReq
 */
export interface GetAreaExplorePointReq {
    /**
     * @generated from protobuf field: repeated uint32 area_id_list = 14;
     */
    areaIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetAreaExplorePointReq.CmdId
 */
export enum GetAreaExplorePointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 241;
     */
    CMD_ID = 241,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetAreaExplorePointRsp
 */
export interface GetAreaExplorePointRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 area_id_list = 11;
     */
    areaIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 explore_point_list = 4;
     */
    explorePointList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetAreaExplorePointRsp.CmdId
 */
export enum GetAreaExplorePointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 249;
     */
    CMD_ID = 249,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientTransmitReq
 */
export interface ClientTransmitReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 2;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.TransmitReason reason = 14;
     */
    reason?: TransmitReason;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 1;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 9;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientTransmitReq.CmdId
 */
export enum ClientTransmitReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 291;
     */
    CMD_ID = 291,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientTransmitRsp
 */
export interface ClientTransmitRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.TransmitReason reason = 3;
     */
    reason?: TransmitReason;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientTransmitRsp.CmdId
 */
export enum ClientTransmitRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 224;
     */
    CMD_ID = 224,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterSceneWeatherAreaNotify
 */
export interface EnterSceneWeatherAreaNotify {
    /**
     * @generated from protobuf field: optional uint32 weather_gadget_id = 13;
     */
    weatherGadgetId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterSceneWeatherAreaNotify.CmdId
 */
export enum EnterSceneWeatherAreaNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 256;
     */
    CMD_ID = 256,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExitSceneWeatherAreaNotify
 */
export interface ExitSceneWeatherAreaNotify {
    /**
     * @generated from protobuf field: optional uint32 weather_gadget_id = 2;
     */
    weatherGadgetId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExitSceneWeatherAreaNotify.CmdId
 */
export enum ExitSceneWeatherAreaNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 242;
     */
    CMD_ID = 242,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneAreaWeatherNotify
 */
export interface SceneAreaWeatherNotify {
    /**
     * @generated from protobuf field: optional uint32 weather_area_id = 1;
     */
    weatherAreaId?: number;
    /**
     * @generated from protobuf field: optional uint32 weather_gadget_id = 9;
     */
    weatherGadgetId?: number;
    /**
     * @generated from protobuf field: optional uint32 climate_type = 14;
     */
    climateType?: number;
    /**
     * @generated from protobuf field: optional float trans_duration = 15;
     */
    transDuration?: number;
    /**
     * @generated from protobuf field: map<uint32, string> weather_value_map = 10;
     */
    weatherValueMap: {
        [key: number]: string;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.SceneAreaWeatherNotify.CmdId
 */
export enum SceneAreaWeatherNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 230;
     */
    CMD_ID = 230,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayerInfo
 */
export interface ScenePlayerInfo {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 10;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 peer_id = 6;
     */
    peerId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo online_player_info = 13;
     */
    onlinePlayerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: optional bool is_connected = 2;
     */
    isConnected?: boolean;
    /**
     * @generated from protobuf field: optional string name = 15;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional uint32 uid = 8;
     */
    uid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayerInfoNotify
 */
export interface ScenePlayerInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ScenePlayerInfo player_info_list = 5;
     */
    playerInfoList: ScenePlayerInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayerInfoNotify.CmdId
 */
export enum ScenePlayerInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 267;
     */
    CMD_ID = 267,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLocationInfo
 */
export interface PlayerLocationInfo {
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 3;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 13;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerWorldLocationInfo
 */
export interface PlayerWorldLocationInfo {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 1;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerLocationInfo player_loc = 12;
     */
    playerLoc?: PlayerLocationInfo;
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerLocationNotify
 */
export interface WorldPlayerLocationNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerWorldLocationInfo player_world_loc_list = 8;
     */
    playerWorldLocList: PlayerWorldLocationInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerLocationInfo player_loc_list = 15;
     */
    playerLocList: PlayerLocationInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerLocationNotify.CmdId
 */
export enum WorldPlayerLocationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 258;
     */
    CMD_ID = 258,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BeginCameraSceneLookNotify
 */
export interface BeginCameraSceneLookNotify {
    /**
     * @generated from protobuf field: optional uint32 blend_type = 1154;
     */
    blendType?: number;
    /**
     * @generated from protobuf field: optional float custom_radius = 7;
     */
    customRadius?: number;
    /**
     * @generated from protobuf field: optional bool is_set_screenXY = 5;
     */
    isSetScreenXY?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector look_pos = 4;
     */
    lookPos?: Vector;
    /**
     * @generated from protobuf field: optional bool is_recover_keep_current = 11;
     */
    isRecoverKeepCurrent?: boolean;
    /**
     * @generated from protobuf field: optional bool is_abs_follow_pos = 1375;
     */
    isAbsFollowPos?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.BeginCameraSceneLookNotify.KeepRotType keep_rot_type = 6;
     */
    keepRotType?: BeginCameraSceneLookNotify_KeepRotType;
    /**
     * @generated from protobuf field: optional bool is_change_play_mode = 9;
     */
    isChangePlayMode?: boolean;
    /**
     * @generated from protobuf field: optional uint32 disable_protect = 1103;
     */
    disableProtect?: number;
    /**
     * @generated from protobuf field: optional float screen_y = 15;
     */
    screenY?: number;
    /**
     * @generated from protobuf field: optional bool is_set_follow_pos = 13;
     */
    isSetFollowPos?: boolean;
    /**
     * @generated from protobuf field: optional bool is_force = 12;
     */
    isForce?: boolean;
    /**
     * @generated from protobuf field: optional float blend_duration = 1758;
     */
    blendDuration?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1327;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional float screen_x = 3;
     */
    screenX?: number;
    /**
     * @generated from protobuf field: optional bool is_force_walk = 10;
     */
    isForceWalk?: boolean;
    /**
     * @generated from protobuf field: repeated string other_params = 1;
     */
    otherParams: string[];
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector follow_pos = 8;
     */
    followPos?: Vector;
    /**
     * @generated from protobuf field: optional bool is_allow_input = 2;
     */
    isAllowInput?: boolean;
    /**
     * @generated from protobuf field: optional float duration = 14;
     */
    duration?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BeginCameraSceneLookNotify.KeepRotType
 */
export enum BeginCameraSceneLookNotify_KeepRotType {
    /**
     * @generated from protobuf enum value: KEEP_ROT_X = 0;
     */
    KEEP_ROT_X = 0,
    /**
     * @generated from protobuf enum value: KEEP_ROT_XY = 1;
     */
    KEEP_ROT_XY = 1
}
/**
 * @generated from protobuf enum com.midnights.game.BeginCameraSceneLookNotify.CmdId
 */
export enum BeginCameraSceneLookNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 270;
     */
    CMD_ID = 270,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EndCameraSceneLookNotify
 */
export interface EndCameraSceneLookNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.EndCameraSceneLookNotify.CmdId
 */
export enum EndCameraSceneLookNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 217;
     */
    CMD_ID = 217,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MarkEntityInMinMapNotify
 */
export interface MarkEntityInMinMapNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 4;
     */
    position?: Vector;
    /**
     * @generated from protobuf field: optional uint32 monster_id = 7;
     */
    monsterId?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 14;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MarkEntityInMinMapNotify.CmdId
 */
export enum MarkEntityInMinMapNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 202;
     */
    CMD_ID = 202,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UnmarkEntityInMinMapNotify
 */
export interface UnmarkEntityInMinMapNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UnmarkEntityInMinMapNotify.CmdId
 */
export enum UnmarkEntityInMinMapNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 219;
     */
    CMD_ID = 219,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExecuteGroupTriggerReq
 */
export interface ExecuteGroupTriggerReq {
    /**
     * @generated from protobuf field: optional string source_name = 15;
     */
    sourceName?: string;
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 12;
     */
    targetEntityId?: number;
    /**
     * @generated from protobuf field: optional int32 param2 = 8;
     */
    param2?: number;
    /**
     * @generated from protobuf field: optional uint32 source_entity_id = 4;
     */
    sourceEntityId?: number;
    /**
     * @generated from protobuf field: optional int32 param3 = 10;
     */
    param3?: number;
    /**
     * @generated from protobuf field: optional int32 param1 = 9;
     */
    param1?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExecuteGroupTriggerReq.CmdId
 */
export enum ExecuteGroupTriggerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 257;
     */
    CMD_ID = 257,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExecuteGroupTriggerRsp
 */
export interface ExecuteGroupTriggerRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExecuteGroupTriggerRsp.CmdId
 */
export enum ExecuteGroupTriggerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 300;
     */
    CMD_ID = 300,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LevelupCityReq
 */
export interface LevelupCityReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 area_id = 3;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 item_num = 14;
     */
    itemNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LevelupCityReq.CmdId
 */
export enum LevelupCityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 216;
     */
    CMD_ID = 216,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LevelupCityRsp
 */
export interface LevelupCityRsp {
    /**
     * @generated from protobuf field: optional uint32 area_id = 9;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CityInfo city_info = 6;
     */
    cityInfo?: CityInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.LevelupCityRsp.CmdId
 */
export enum LevelupCityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 287;
     */
    CMD_ID = 287,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoutePointChangeInfo
 */
export interface RoutePointChangeInfo {
    /**
     * @generated from protobuf field: optional float wait_time = 6;
     */
    waitTime?: number;
    /**
     * @generated from protobuf field: optional float target_velocity = 14;
     */
    targetVelocity?: number;
    /**
     * @generated from protobuf field: optional uint32 point_index = 11;
     */
    pointIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneRouteChangeInfo
 */
export interface SceneRouteChangeInfo {
    /**
     * @generated from protobuf field: optional bool is_forward = 12;
     */
    isForward?: boolean;
    /**
     * @generated from protobuf field: optional uint32 route_id = 15;
     */
    routeId?: number;
    /**
     * @generated from protobuf field: optional uint32 type = 4;
     */
    type?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RoutePointChangeInfo point_list = 1;
     */
    pointList: RoutePointChangeInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.SceneRouteChangeNotify
 */
export interface SceneRouteChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 12;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 11;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneRouteChangeInfo route_list = 2;
     */
    routeList: SceneRouteChangeInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneRouteChangeNotify.CmdId
 */
export enum SceneRouteChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 240;
     */
    CMD_ID = 240,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlatformStartRouteNotify
 */
export interface PlatformStartRouteNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlatformInfo platform = 15;
     */
    platform?: PlatformInfo;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 12;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlatformStartRouteNotify.CmdId
 */
export enum PlatformStartRouteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 218;
     */
    CMD_ID = 218,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlatformStopRouteNotify
 */
export interface PlatformStopRouteNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_time = 9;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 12;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlatformInfo platform = 8;
     */
    platform?: PlatformInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.PlatformStopRouteNotify.CmdId
 */
export enum PlatformStopRouteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 266;
     */
    CMD_ID = 266,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlatformChangeRouteNotify
 */
export interface PlatformChangeRouteNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlatformInfo platform = 1;
     */
    platform?: PlatformInfo;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 8;
     */
    sceneTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlatformChangeRouteNotify.CmdId
 */
export enum PlatformChangeRouteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 268;
     */
    CMD_ID = 268,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayerSoundNotify
 */
export interface ScenePlayerSoundNotify {
    /**
     * @generated from protobuf field: optional string sound_name = 4;
     */
    soundName?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ScenePlayerSoundNotify.PlaySoundType play_type = 8;
     */
    playType?: ScenePlayerSoundNotify_PlaySoundType;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector play_pos = 3;
     */
    playPos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayerSoundNotify.PlaySoundType
 */
export enum ScenePlayerSoundNotify_PlaySoundType {
    /**
     * @generated from protobuf enum value: PLAY_SOUND_NONE = 0;
     */
    PLAY_SOUND_NONE = 0,
    /**
     * @generated from protobuf enum value: PLAY_SOUND_START = 1;
     */
    PLAY_SOUND_START = 1,
    /**
     * @generated from protobuf enum value: PLAY_SOUND_STOP = 2;
     */
    PLAY_SOUND_STOP = 2
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayerSoundNotify.CmdId
 */
export enum ScenePlayerSoundNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 233;
     */
    CMD_ID = 233,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PersonalSceneJumpReq
 */
export interface PersonalSceneJumpReq {
    /**
     * @generated from protobuf field: optional uint32 point_id = 4;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PersonalSceneJumpReq.CmdId
 */
export enum PersonalSceneJumpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 284;
     */
    CMD_ID = 284,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PersonalSceneJumpRsp
 */
export interface PersonalSceneJumpRsp {
    /**
     * @generated from protobuf field: optional uint32 dest_scene_id = 5;
     */
    destSceneId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector dest_pos = 11;
     */
    destPos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.PersonalSceneJumpRsp.CmdId
 */
export enum PersonalSceneJumpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 280;
     */
    CMD_ID = 280,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SealBattleBeginNotify
 */
export interface SealBattleBeginNotify {
    /**
     * @generated from protobuf field: optional uint32 seal_max_progress = 9;
     */
    sealMaxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 seal_entity_id = 1;
     */
    sealEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 seal_radius = 12;
     */
    sealRadius?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SealBattleType battle_type = 14;
     */
    battleType?: SealBattleType;
}
/**
 * @generated from protobuf enum com.midnights.game.SealBattleBeginNotify.CmdId
 */
export enum SealBattleBeginNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 289;
     */
    CMD_ID = 289,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SealBattleEndNotify
 */
export interface SealBattleEndNotify {
    /**
     * @generated from protobuf field: optional bool is_win = 4;
     */
    isWin?: boolean;
    /**
     * @generated from protobuf field: optional uint32 seal_entity_id = 15;
     */
    sealEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SealBattleEndNotify.CmdId
 */
export enum SealBattleEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 259;
     */
    CMD_ID = 259,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SealBattleProgressNotify
 */
export interface SealBattleProgressNotify {
    /**
     * @generated from protobuf field: optional uint32 seal_entity_id = 9;
     */
    sealEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_progress = 10;
     */
    maxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 seal_radius = 4;
     */
    sealRadius?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 5;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 2;
     */
    endTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SealBattleProgressNotify.CmdId
 */
export enum SealBattleProgressNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 232;
     */
    CMD_ID = 232,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientPauseNotify
 */
export interface ClientPauseNotify {
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientPauseNotify.CmdId
 */
export enum ClientPauseNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 260;
     */
    CMD_ID = 260,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AvatarEnterSceneInfo
 */
export interface AvatarEnterSceneInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ServerBuff server_buff_list = 14;
     */
    serverBuffList: ServerBuff[];
    /**
     * @generated from protobuf field: optional uint32 avatar_entity_id = 7;
     */
    avatarEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilitySyncStateInfo weapon_ability_info = 12;
     */
    weaponAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: optional uint32 weapon_entity_id = 10;
     */
    weaponEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilitySyncStateInfo avatar_ability_info = 2;
     */
    avatarAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 13;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 weapon_guid = 9;
     */
    weaponGuid?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 buff_id_list = 5;
     */
    buffIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.TeamEnterSceneInfo
 */
export interface TeamEnterSceneInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityControlBlock ability_control_block = 7;
     */
    abilityControlBlock?: AbilityControlBlock;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilitySyncStateInfo team_ability_info = 10;
     */
    teamAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: optional uint32 team_entity_id = 15;
     */
    teamEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MPLevelEntityInfo
 */
export interface MPLevelEntityInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilitySyncStateInfo ability_info = 2;
     */
    abilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 authority_peer_id = 3;
     */
    authorityPeerId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerEnterSceneInfoNotify
 */
export interface PlayerEnterSceneInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.TeamEnterSceneInfo team_enter_info = 8;
     */
    teamEnterInfo?: TeamEnterSceneInfo;
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 12;
     */
    enterSceneToken?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.AvatarEnterSceneInfo avatar_enter_info = 7;
     */
    avatarEnterInfo: AvatarEnterSceneInfo[];
    /**
     * @generated from protobuf field: optional uint32 cur_avatar_entity_id = 6;
     */
    curAvatarEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MPLevelEntityInfo mp_level_entity_info = 5;
     */
    mpLevelEntityInfo?: MPLevelEntityInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerEnterSceneInfoNotify.CmdId
 */
export enum PlayerEnterSceneInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 214;
     */
    CMD_ID = 214,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.JoinPlayerSceneReq
 */
export interface JoinPlayerSceneReq {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 12;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.JoinPlayerSceneReq.CmdId
 */
export enum JoinPlayerSceneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 292;
     */
    CMD_ID = 292,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.JoinPlayerSceneRsp
 */
export interface JoinPlayerSceneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.JoinPlayerSceneRsp.CmdId
 */
export enum JoinPlayerSceneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 220;
     */
    CMD_ID = 220,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneKickPlayerReq
 */
export interface SceneKickPlayerReq {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 6;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneKickPlayerReq.CmdId
 */
export enum SceneKickPlayerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 264;
     */
    CMD_ID = 264,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneKickPlayerRsp
 */
export interface SceneKickPlayerRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 10;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneKickPlayerRsp.CmdId
 */
export enum SceneKickPlayerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 238;
     */
    CMD_ID = 238,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneKickPlayerNotify
 */
export interface SceneKickPlayerNotify {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 8;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional uint32 kicker_uid = 9;
     */
    kickerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneKickPlayerNotify.CmdId
 */
export enum SceneKickPlayerNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 211;
     */
    CMD_ID = 211,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.HitClientTrivialNotify
 */
export interface HitClientTrivialNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 11;
     */
    position?: Vector;
    /**
     * @generated from protobuf field: optional uint32 owner_entity_id = 12;
     */
    ownerEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.HitClientTrivialNotify.CmdId
 */
export enum HitClientTrivialNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 244;
     */
    CMD_ID = 244,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BackMyWorldReq
 */
export interface BackMyWorldReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BackMyWorldReq.CmdId
 */
export enum BackMyWorldReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 286;
     */
    CMD_ID = 286,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BackMyWorldRsp
 */
export interface BackMyWorldRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BackMyWorldRsp.CmdId
 */
export enum BackMyWorldRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 201;
     */
    CMD_ID = 201,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeeMonsterReq
 */
export interface SeeMonsterReq {
    /**
     * @generated from protobuf field: optional uint32 monster_id = 7;
     */
    monsterId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeeMonsterReq.CmdId
 */
export enum SeeMonsterReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 228;
     */
    CMD_ID = 228,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeeMonsterRsp
 */
export interface SeeMonsterRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeeMonsterRsp.CmdId
 */
export enum SeeMonsterRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 251;
     */
    CMD_ID = 251,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AddSeenMonsterNotify
 */
export interface AddSeenMonsterNotify {
    /**
     * @generated from protobuf field: repeated uint32 monster_id_list = 12;
     */
    monsterIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.AddSeenMonsterNotify.CmdId
 */
export enum AddSeenMonsterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 223;
     */
    CMD_ID = 223,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AllSeenMonsterNotify
 */
export interface AllSeenMonsterNotify {
    /**
     * @generated from protobuf field: repeated uint32 monster_id_list = 4;
     */
    monsterIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.AllSeenMonsterNotify.CmdId
 */
export enum AllSeenMonsterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 271;
     */
    CMD_ID = 271,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneTimeNotify
 */
export interface SceneTimeNotify {
    /**
     * @generated from protobuf field: optional uint64 scene_time = 14;
     */
    sceneTime?: bigint;
    /**
     * @generated from protobuf field: optional bool is_paused = 1;
     */
    isPaused?: boolean;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 7;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneTimeNotify.CmdId
 */
export enum SceneTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 245;
     */
    CMD_ID = 245,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterSceneReadyReq
 */
export interface EnterSceneReadyReq {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 9;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterSceneReadyReq.CmdId
 */
export enum EnterSceneReadyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 208;
     */
    CMD_ID = 208,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterSceneReadyRsp
 */
export interface EnterSceneReadyRsp {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 1;
     */
    enterSceneToken?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterSceneReadyRsp.CmdId
 */
export enum EnterSceneReadyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 209;
     */
    CMD_ID = 209,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterScenePeerNotify
 */
export interface EnterScenePeerNotify {
    /**
     * @generated from protobuf field: optional uint32 dest_scene_id = 12;
     */
    destSceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 11;
     */
    enterSceneToken?: number;
    /**
     * @generated from protobuf field: optional uint32 host_peer_id = 14;
     */
    hostPeerId?: number;
    /**
     * @generated from protobuf field: optional uint32 peer_id = 1;
     */
    peerId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterScenePeerNotify.CmdId
 */
export enum EnterScenePeerNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 252;
     */
    CMD_ID = 252,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterSceneDoneReq
 */
export interface EnterSceneDoneReq {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 11;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterSceneDoneReq.CmdId
 */
export enum EnterSceneDoneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 277;
     */
    CMD_ID = 277,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterSceneDoneRsp
 */
export interface EnterSceneDoneRsp {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 15;
     */
    enterSceneToken?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterSceneDoneRsp.CmdId
 */
export enum EnterSceneDoneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 237;
     */
    CMD_ID = 237,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerDieNotify
 */
export interface WorldPlayerDieNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerDieType die_type = 12;
     */
    dieType?: PlayerDieType;
    /**
     * @generated from protobuf field: optional uint32 murderer_entity_id = 15;
     */
    murdererEntityId?: number;
    /**
     * @generated from protobuf oneof: entity
     */
    entity: {
        oneofKind: "monsterId";
        /**
         * @generated from protobuf field: uint32 monster_id = 8;
         */
        monsterId: number;
    } | {
        oneofKind: "gadgetId";
        /**
         * @generated from protobuf field: uint32 gadget_id = 4;
         */
        gadgetId: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerDieNotify.CmdId
 */
export enum WorldPlayerDieNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 285;
     */
    CMD_ID = 285,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerReviveReq
 */
export interface WorldPlayerReviveReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerReviveReq.CmdId
 */
export enum WorldPlayerReviveReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 225;
     */
    CMD_ID = 225,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerReviveRsp
 */
export interface WorldPlayerReviveRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerReviveRsp.CmdId
 */
export enum WorldPlayerReviveRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 278;
     */
    CMD_ID = 278,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.JoinPlayerFailNotify
 */
export interface JoinPlayerFailNotify {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.JoinPlayerFailNotify.CmdId
 */
export enum JoinPlayerFailNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 236;
     */
    CMD_ID = 236,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetSceneWeatherAreaReq
 */
export interface SetSceneWeatherAreaReq {
    /**
     * @generated from protobuf field: optional uint32 weather_gadget_id = 13;
     */
    weatherGadgetId?: number;
    /**
     * @generated from protobuf field: map<uint32, string> weather_value_map = 4;
     */
    weatherValueMap: {
        [key: number]: string;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.SetSceneWeatherAreaReq.CmdId
 */
export enum SetSceneWeatherAreaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 254;
     */
    CMD_ID = 254,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetSceneWeatherAreaRsp
 */
export interface SetSceneWeatherAreaRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetSceneWeatherAreaRsp.CmdId
 */
export enum SetSceneWeatherAreaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 283;
     */
    CMD_ID = 283,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExecuteGadgetLuaReq
 */
export interface ExecuteGadgetLuaReq {
    /**
     * @generated from protobuf field: optional uint32 source_entity_id = 12;
     */
    sourceEntityId?: number;
    /**
     * @generated from protobuf field: optional int32 param3 = 1;
     */
    param3?: number;
    /**
     * @generated from protobuf field: optional int32 param1 = 5;
     */
    param1?: number;
    /**
     * @generated from protobuf field: optional int32 param2 = 14;
     */
    param2?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExecuteGadgetLuaReq.CmdId
 */
export enum ExecuteGadgetLuaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 269;
     */
    CMD_ID = 269,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExecuteGadgetLuaRsp
 */
export interface ExecuteGadgetLuaRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExecuteGadgetLuaRsp.CmdId
 */
export enum ExecuteGadgetLuaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 210;
     */
    CMD_ID = 210,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CutSceneExtraParam
 */
export interface CutSceneExtraParam {
    /**
     * @generated from protobuf field: repeated double detail_param_list = 1;
     */
    detailParamList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.CutSceneBeginNotify
 */
export interface CutSceneBeginNotify {
    /**
     * @generated from protobuf field: optional bool is_wait_others = 9;
     */
    isWaitOthers?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cutscene_id = 14;
     */
    cutsceneId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CutSceneExtraParam extra_param_list = 3;
     */
    extraParamList: CutSceneExtraParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.CutSceneBeginNotify.CmdId
 */
export enum CutSceneBeginNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 296;
     */
    CMD_ID = 296,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CutSceneFinishNotify
 */
export interface CutSceneFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 cutscene_id = 12;
     */
    cutsceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CutSceneFinishNotify.CmdId
 */
export enum CutSceneFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 262;
     */
    CMD_ID = 262,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CutSceneEndNotify
 */
export interface CutSceneEndNotify {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cutscene_id = 14;
     */
    cutsceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CutSceneEndNotify.CmdId
 */
export enum CutSceneEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 215;
     */
    CMD_ID = 215,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientScriptEventNotify
 */
export interface ClientScriptEventNotify {
    /**
     * @generated from protobuf field: repeated int32 param_list = 9;
     */
    paramList: number[];
    /**
     * @generated from protobuf field: optional uint32 source_entity_id = 14;
     */
    sourceEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 event_type = 10;
     */
    eventType?: number;
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 13;
     */
    targetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientScriptEventNotify.CmdId
 */
export enum ClientScriptEventNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 213;
     */
    CMD_ID = 213,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntitiesMovesReq
 */
export interface SceneEntitiesMovesReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityMoveInfo entity_move_info_list = 14;
     */
    entityMoveInfoList: EntityMoveInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntitiesMovesReq.CmdId
 */
export enum SceneEntitiesMovesReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 279;
     */
    CMD_ID = 279,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_IS_RELIABLE = 0,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityMoveFailInfo
 */
export interface EntityMoveFailInfo {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_time = 9;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo fail_motion = 14;
     */
    failMotion?: MotionInfo;
    /**
     * @generated from protobuf field: optional uint32 reliable_seq = 4;
     */
    reliableSeq?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 10;
     */
    entityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntitiesMovesRsp
 */
export interface SceneEntitiesMovesRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityMoveFailInfo entity_move_fail_info_list = 11;
     */
    entityMoveFailInfoList: EntityMoveFailInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntitiesMovesRsp.CmdId
 */
export enum SceneEntitiesMovesRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 255;
     */
    CMD_ID = 255,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_IS_RELIABLE = 0
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntitiesMoveCombineNotify
 */
export interface SceneEntitiesMoveCombineNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityMoveInfo entity_move_info_list = 8;
     */
    entityMoveInfoList: EntityMoveInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntitiesMoveCombineNotify.CmdId
 */
export enum SceneEntitiesMoveCombineNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3387;
     */
    CMD_ID = 3387,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_IS_RELIABLE = 0
}
/**
 * @generated from protobuf message com.midnights.game.UnlockTransPointReq
 */
export interface UnlockTransPointReq {
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 10;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UnlockTransPointReq.CmdId
 */
export enum UnlockTransPointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3035;
     */
    CMD_ID = 3035,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UnlockTransPointRsp
 */
export interface UnlockTransPointRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UnlockTransPointRsp.CmdId
 */
export enum UnlockTransPointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3426;
     */
    CMD_ID = 3426,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneWeatherForcastReq
 */
export interface SceneWeatherForcastReq {
    /**
     * @generated from protobuf field: optional uint32 weather_area_id = 15;
     */
    weatherAreaId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneWeatherForcastReq.CmdId
 */
export enum SceneWeatherForcastReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3110;
     */
    CMD_ID = 3110,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneWeatherForcastRsp
 */
export interface SceneWeatherForcastRsp {
    /**
     * @generated from protobuf field: optional uint64 next_climate_time = 14;
     */
    nextClimateTime?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 forcast_climate_list = 2;
     */
    forcastClimateList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneWeatherForcastRsp.CmdId
 */
export enum SceneWeatherForcastRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3012;
     */
    CMD_ID = 3012,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MarkMapReq
 */
export interface MarkMapReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MapMarkPoint mark = 8;
     */
    mark?: MapMarkPoint;
    /**
     * @generated from protobuf field: optional com.midnights.game.MapMarkPoint old = 6;
     */
    old?: MapMarkPoint;
    /**
     * @generated from protobuf field: optional com.midnights.game.MarkMapReq.Operation op = 9;
     */
    op?: MarkMapReq_Operation;
}
/**
 * @generated from protobuf enum com.midnights.game.MarkMapReq.Operation
 */
export enum MarkMapReq_Operation {
    /**
     * @generated from protobuf enum value: ADD = 0;
     */
    ADD = 0,
    /**
     * @generated from protobuf enum value: MOD = 1;
     */
    MOD = 1,
    /**
     * @generated from protobuf enum value: DEL = 2;
     */
    DEL = 2,
    /**
     * @generated from protobuf enum value: GET = 3;
     */
    GET = 3
}
/**
 * @generated from protobuf enum com.midnights.game.MarkMapReq.CmdId
 */
export enum MarkMapReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3466;
     */
    CMD_ID = 3466,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MarkMapRsp
 */
export interface MarkMapRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MapMarkPoint mark_list = 8;
     */
    markList: MapMarkPoint[];
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MarkMapRsp.CmdId
 */
export enum MarkMapRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3079;
     */
    CMD_ID = 3079,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AllMarkPointNotify
 */
export interface AllMarkPointNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MapMarkPoint mark_list = 7;
     */
    markList: MapMarkPoint[];
}
/**
 * @generated from protobuf enum com.midnights.game.AllMarkPointNotify.CmdId
 */
export enum AllMarkPointNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3283;
     */
    CMD_ID = 3283,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldDataNotify
 */
export interface WorldDataNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.PropValue> world_prop_map = 9;
     */
    worldPropMap: {
        [key: number]: PropValue;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.WorldDataNotify.CmdId
 */
export enum WorldDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3308;
     */
    CMD_ID = 3308,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.WorldDataNotify.DataType
 */
export enum WorldDataNotify_DataType {
    /**
     * @generated from protobuf enum value: DATA_NONE = 0;
     */
    DATA_NONE = 0,
    /**
     * @generated from protobuf enum value: WORLD_LEVEL = 1;
     */
    WORLD_LEVEL = 1,
    /**
     * @generated from protobuf enum value: IS_IN_MP_MODE = 2;
     */
    IS_IN_MP_MODE = 2
}
/**
 * @generated from protobuf message com.midnights.game.EntityMoveRoomNotify
 */
export interface EntityMoveRoomNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 dest_room_id = 9;
     */
    destRoomId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EntityMoveRoomNotify.CmdId
 */
export enum EntityMoveRoomNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3178;
     */
    CMD_ID = 3178,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerInfoNotify
 */
export interface WorldPlayerInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list = 8;
     */
    playerWidgetInfoList: PlayerWidgetInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.OnlinePlayerInfo player_info_list = 14;
     */
    playerInfoList: OnlinePlayerInfo[];
    /**
     * @generated from protobuf field: repeated uint32 player_uid_list = 11;
     */
    playerUidList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerInfoNotify.CmdId
 */
export enum WorldPlayerInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3116;
     */
    CMD_ID = 3116,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PostEnterSceneReq
 */
export interface PostEnterSceneReq {
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 12;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PostEnterSceneReq.CmdId
 */
export enum PostEnterSceneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3312;
     */
    CMD_ID = 3312,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PostEnterSceneRsp
 */
export interface PostEnterSceneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 enter_scene_token = 12;
     */
    enterSceneToken?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PostEnterSceneRsp.CmdId
 */
export enum PostEnterSceneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3184;
     */
    CMD_ID = 3184,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChatInfo
 */
export interface ChatInfo {
    /**
     * @generated from protobuf field: optional uint32 time = 13;
     */
    time?: number;
    /**
     * @generated from protobuf field: optional uint32 sequence = 10;
     */
    sequence?: number;
    /**
     * @generated from protobuf field: optional uint32 to_uid = 7;
     */
    toUid?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional bool is_read = 5;
     */
    isRead?: boolean;
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "text";
        /**
         * @generated from protobuf field: string text = 1946;
         */
        text: string;
    } | {
        oneofKind: "icon";
        /**
         * @generated from protobuf field: uint32 icon = 914;
         */
        icon: number;
    } | {
        oneofKind: "systemHint";
        /**
         * @generated from protobuf field: com.midnights.game.ChatInfo.SystemHint system_hint = 1753;
         */
        systemHint: ChatInfo_SystemHint;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.ChatInfo.SystemHint
 */
export interface ChatInfo_SystemHint {
    /**
     * @generated from protobuf field: optional uint32 type = 14;
     */
    type?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChatInfo.SystemHintType
 */
export enum ChatInfo_SystemHintType {
    /**
     * @generated from protobuf enum value: CHAT_NONE = 0;
     */
    CHAT_NONE = 0,
    /**
     * @generated from protobuf enum value: CHAT_ENTER_WORLD = 1;
     */
    CHAT_ENTER_WORLD = 1,
    /**
     * @generated from protobuf enum value: CHAT_LEAVE_WORLD = 2;
     */
    CHAT_LEAVE_WORLD = 2
}
/**
 * @generated from protobuf message com.midnights.game.PlayerChatReq
 */
export interface PlayerChatReq {
    /**
     * @generated from protobuf field: optional uint32 channel_id = 13;
     */
    channelId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ChatInfo chat_info = 15;
     */
    chatInfo?: ChatInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerChatReq.CmdId
 */
export enum PlayerChatReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3185;
     */
    CMD_ID = 3185,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerChatRsp
 */
export interface PlayerChatRsp {
    /**
     * @generated from protobuf field: optional uint32 chat_forbidden_endtime = 15;
     */
    chatForbiddenEndtime?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerChatRsp.CmdId
 */
export enum PlayerChatRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3228;
     */
    CMD_ID = 3228,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerChatNotify
 */
export interface PlayerChatNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ChatInfo chat_info = 3;
     */
    chatInfo?: ChatInfo;
    /**
     * @generated from protobuf field: optional uint32 channel_id = 6;
     */
    channelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerChatNotify.CmdId
 */
export enum PlayerChatNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3010;
     */
    CMD_ID = 3010,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerChatCDNotify
 */
export interface PlayerChatCDNotify {
    /**
     * @generated from protobuf field: optional uint32 over_time = 15;
     */
    overTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerChatCDNotify.CmdId
 */
export enum PlayerChatCDNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3367;
     */
    CMD_ID = 3367,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChatHistoryNotify
 */
export interface ChatHistoryNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChatInfo chat_info = 9;
     */
    chatInfo: ChatInfo[];
    /**
     * @generated from protobuf field: optional uint32 channel_id = 12;
     */
    channelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChatHistoryNotify.CmdId
 */
export enum ChatHistoryNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3496;
     */
    CMD_ID = 3496,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneDataNotify
 */
export interface SceneDataNotify {
    /**
     * @generated from protobuf field: repeated string level_config_name_list = 15;
     */
    levelConfigNameList: string[];
    /**
     * @generated from protobuf field: repeated uint32 scene_tag_id_list = 8;
     */
    sceneTagIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneDataNotify.CmdId
 */
export enum SceneDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3203;
     */
    CMD_ID = 3203,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryToBeExploreNotify
 */
export interface DungeonEntryToBeExploreNotify {
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_scene_point_id = 2;
     */
    dungeonEntryScenePointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_config_id = 10;
     */
    dungeonEntryConfigId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonEntryToBeExploreNotify.CmdId
 */
export enum DungeonEntryToBeExploreNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3147;
     */
    CMD_ID = 3147,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetDungeonEntryExploreConditionReq
 */
export interface GetDungeonEntryExploreConditionReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 6;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_config_id = 2;
     */
    dungeonEntryConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_scene_point_id = 4;
     */
    dungeonEntryScenePointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetDungeonEntryExploreConditionReq.CmdId
 */
export enum GetDungeonEntryExploreConditionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3165;
     */
    CMD_ID = 3165,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryCond
 */
export interface DungeonEntryCond {
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonEntryBlockReason cond_reason = 7;
     */
    condReason?: DungeonEntryBlockReason;
    /**
     * @generated from protobuf field: optional uint32 param1 = 8;
     */
    param1?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetDungeonEntryExploreConditionRsp
 */
export interface GetDungeonEntryExploreConditionRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonEntryCond dungeon_entry_cond = 5;
     */
    dungeonEntryCond?: DungeonEntryCond;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetDungeonEntryExploreConditionRsp.CmdId
 */
export enum GetDungeonEntryExploreConditionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3269;
     */
    CMD_ID = 3269,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UnfreezeGroupLimitNotify
 */
export interface UnfreezeGroupLimitNotify {
    /**
     * @generated from protobuf field: optional uint32 point_id = 9;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 11;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UnfreezeGroupLimitNotify.CmdId
 */
export enum UnfreezeGroupLimitNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3220;
     */
    CMD_ID = 3220,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetEntityClientDataNotify
 */
export interface SetEntityClientDataNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 14;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.EntityClientData entity_client_data = 9;
     */
    entityClientData?: EntityClientData;
}
/**
 * @generated from protobuf enum com.midnights.game.SetEntityClientDataNotify.CmdId
 */
export enum SetEntityClientDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3146;
     */
    CMD_ID = 3146,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GroupSuiteNotify
 */
export interface GroupSuiteNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> group_map = 3;
     */
    groupMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GroupSuiteNotify.CmdId
 */
export enum GroupSuiteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3257;
     */
    CMD_ID = 3257,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GroupUnloadNotify
 */
export interface GroupUnloadNotify {
    /**
     * @generated from protobuf field: repeated uint32 group_list = 10;
     */
    groupList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GroupUnloadNotify.CmdId
 */
export enum GroupUnloadNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3344;
     */
    CMD_ID = 3344,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MonsterAIConfigHashNotify
 */
export interface MonsterAIConfigHashNotify {
    /**
     * @generated from protobuf field: optional uint32 job_id = 10;
     */
    jobId?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 hash_value = 11;
     */
    hashValue?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MonsterAIConfigHashNotify.CmdId
 */
export enum MonsterAIConfigHashNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3039;
     */
    CMD_ID = 3039,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ShowTemplateReminderNotify
 */
export interface ShowTemplateReminderNotify {
    /**
     * @generated from protobuf field: optional bool is_revoke = 1;
     */
    isRevoke?: boolean;
    /**
     * @generated from protobuf field: optional uint32 template_reminder_id = 14;
     */
    templateReminderId?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_uid_list = 3;
     */
    paramUidList: number[];
    /**
     * @generated from protobuf field: repeated int32 param_list = 10;
     */
    paramList: number[];
    /**
     * @generated from protobuf field: optional bool is_need_cache = 15;
     */
    isNeedCache?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ShowTemplateReminderNotify.CmdId
 */
export enum ShowTemplateReminderNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3491;
     */
    CMD_ID = 3491,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ShowCommonTipsNotify
 */
export interface ShowCommonTipsNotify {
    /**
     * @generated from protobuf field: optional string content = 8;
     */
    content?: string;
    /**
     * @generated from protobuf field: optional string title = 13;
     */
    title?: string;
    /**
     * @generated from protobuf field: optional uint32 close_time = 4;
     */
    closeTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ShowCommonTipsNotify.CmdId
 */
export enum ShowCommonTipsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3352;
     */
    CMD_ID = 3352,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CloseCommonTipsNotify
 */
export interface CloseCommonTipsNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.CloseCommonTipsNotify.CmdId
 */
export enum CloseCommonTipsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3194;
     */
    CMD_ID = 3194,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeWorldToSingleModeNotify
 */
export interface ChangeWorldToSingleModeNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeWorldToSingleModeNotify.CmdId
 */
export enum ChangeWorldToSingleModeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3006;
     */
    CMD_ID = 3006,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SyncScenePlayTeamEntityNotify
 */
export interface SyncScenePlayTeamEntityNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 2;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayTeamEntityInfo entity_info_list = 3;
     */
    entityInfoList: PlayTeamEntityInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SyncScenePlayTeamEntityNotify.CmdId
 */
export enum SyncScenePlayTeamEntityNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3333;
     */
    CMD_ID = 3333,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DelScenePlayTeamEntityNotify
 */
export interface DelScenePlayTeamEntityNotify {
    /**
     * @generated from protobuf field: repeated uint32 del_entity_id_list = 2;
     */
    delEntityIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DelScenePlayTeamEntityNotify.CmdId
 */
export enum DelScenePlayTeamEntityNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3318;
     */
    CMD_ID = 3318,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CylinderRegionSize
 */
export interface CylinderRegionSize {
    /**
     * @generated from protobuf field: optional float radius = 8;
     */
    radius?: number;
    /**
     * @generated from protobuf field: optional float height = 7;
     */
    height?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PolygonRegionSize
 */
export interface PolygonRegionSize {
    /**
     * @generated from protobuf field: repeated com.midnights.game.VectorPlane point_list = 5;
     */
    pointList: VectorPlane[];
    /**
     * @generated from protobuf field: optional float height = 9;
     */
    height?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerEyePointStateNotify
 */
export interface PlayerEyePointStateNotify {
    /**
     * @generated from protobuf field: optional uint32 region_entity_id = 15;
     */
    regionEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector eye_point_pos = 1;
     */
    eyePointPos?: Vector;
    /**
     * @generated from protobuf field: optional bool is_use_eye_point = 3;
     */
    isUseEyePoint?: boolean;
    /**
     * @generated from protobuf field: optional uint32 region_config_id = 7;
     */
    regionConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 region_shape = 12;
     */
    regionShape?: number;
    /**
     * @generated from protobuf field: optional bool is_filter_stream_pos = 2;
     */
    isFilterStreamPos?: boolean;
    /**
     * @generated from protobuf field: optional int32 fix_lod_level = 5;
     */
    fixLodLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 region_group_id = 4;
     */
    regionGroupId?: number;
    /**
     * @generated from protobuf oneof: region_size
     */
    regionSize: {
        oneofKind: "sphereRadius";
        /**
         * @generated from protobuf field: float sphere_radius = 255;
         */
        sphereRadius: number;
    } | {
        oneofKind: "cubicSize";
        /**
         * @generated from protobuf field: com.midnights.game.Vector cubic_size = 1823;
         */
        cubicSize: Vector;
    } | {
        oneofKind: "cylinderSize";
        /**
         * @generated from protobuf field: com.midnights.game.CylinderRegionSize cylinder_size = 1862;
         */
        cylinderSize: CylinderRegionSize;
    } | {
        oneofKind: "polygonSize";
        /**
         * @generated from protobuf field: com.midnights.game.PolygonRegionSize polygon_size = 877;
         */
        polygonSize: PolygonRegionSize;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerEyePointStateNotify.CmdId
 */
export enum PlayerEyePointStateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3051;
     */
    CMD_ID = 3051,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetMapMarkTipsReq
 */
export interface GetMapMarkTipsReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetMapMarkTipsReq.CmdId
 */
export enum GetMapMarkTipsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3463;
     */
    CMD_ID = 3463,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetMapMarkTipsRsp
 */
export interface GetMapMarkTipsRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MapMarkTipsInfo mark_tips_list = 11;
     */
    markTipsList: MapMarkTipsInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetMapMarkTipsRsp.CmdId
 */
export enum GetMapMarkTipsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3327;
     */
    CMD_ID = 3327,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeWorldToSingleModeReq
 */
export interface ChangeWorldToSingleModeReq {
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeWorldToSingleModeReq.CmdId
 */
export enum ChangeWorldToSingleModeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3066;
     */
    CMD_ID = 3066,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeWorldToSingleModeRsp
 */
export interface ChangeWorldToSingleModeRsp {
    /**
     * @generated from protobuf field: optional uint32 quit_mp_valid_time = 15;
     */
    quitMpValidTime?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeWorldToSingleModeRsp.CmdId
 */
export enum ChangeWorldToSingleModeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3282;
     */
    CMD_ID = 3282,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetWorldMpInfoReq
 */
export interface GetWorldMpInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetWorldMpInfoReq.CmdId
 */
export enum GetWorldMpInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3391;
     */
    CMD_ID = 3391,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetWorldMpInfoRsp
 */
export interface GetWorldMpInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_in_mp_mode = 1;
     */
    isInMpMode?: boolean;
    /**
     * @generated from protobuf field: optional uint32 quit_mp_valid_time = 9;
     */
    quitMpValidTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetWorldMpInfoRsp.CmdId
 */
export enum GetWorldMpInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3320;
     */
    CMD_ID = 3320,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityConfigHashEntry
 */
export interface EntityConfigHashEntry {
    /**
     * @generated from protobuf field: optional uint32 job_id = 13;
     */
    jobId?: number;
    /**
     * @generated from protobuf field: optional int32 hash_value = 6;
     */
    hashValue?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EntityConfigHashNotify
 */
export interface EntityConfigHashNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityConfigHashEntry ability_entry_list = 3;
     */
    abilityEntryList: EntityConfigHashEntry[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityConfigHashEntry avatar_entry_list = 15;
     */
    avatarEntryList: EntityConfigHashEntry[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityConfigHashEntry combat_entry_list = 8;
     */
    combatEntryList: EntityConfigHashEntry[];
}
/**
 * @generated from protobuf enum com.midnights.game.EntityConfigHashNotify.CmdId
 */
export enum EntityConfigHashNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3189;
     */
    CMD_ID = 3189,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForceDragAvatarNotify
 */
export interface ForceDragAvatarNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_time = 3;
     */
    sceneTime?: number;
    /**
     * @generated from protobuf field: optional uint64 delta_time_ms = 1;
     */
    deltaTimeMs?: bigint;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MotionInfo motion_info = 10;
     */
    motionInfo?: MotionInfo;
    /**
     * @generated from protobuf field: optional bool is_first_valid = 8;
     */
    isFirstValid?: boolean;
    /**
     * @generated from protobuf field: optional uint64 last_move_time_ms = 12;
     */
    lastMoveTimeMs?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.ForceDragAvatarNotify.CmdId
 */
export enum ForceDragAvatarNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3235;
     */
    CMD_ID = 3235,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MonsterPointArrayRouteUpdateNotify
 */
export interface MonsterPointArrayRouteUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 7;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MonsterRoute monster_route = 5;
     */
    monsterRoute?: MonsterRoute;
}
/**
 * @generated from protobuf enum com.midnights.game.MonsterPointArrayRouteUpdateNotify.CmdId
 */
export enum MonsterPointArrayRouteUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3410;
     */
    CMD_ID = 3410,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForceDragBackTransferNotify
 */
export interface ForceDragBackTransferNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.ForceDragBackTransferNotify.CmdId
 */
export enum ForceDragBackTransferNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3145;
     */
    CMD_ID = 3145,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetScenePerformanceReq
 */
export interface GetScenePerformanceReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetScenePerformanceReq.CmdId
 */
export enum GetScenePerformanceReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3419;
     */
    CMD_ID = 3419,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetScenePerformanceRsp
 */
export interface GetScenePerformanceRsp {
    /**
     * @generated from protobuf field: optional uint32 monster_num = 9;
     */
    monsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 gather_num_insight = 1;
     */
    gatherNumInsight?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_num = 6;
     */
    gadgetNum?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dynamic_group_num = 12;
     */
    dynamicGroupNum?: number;
    /**
     * @generated from protobuf field: optional uint32 group_num = 2;
     */
    groupNum?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 4;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 entity_num = 8;
     */
    entityNum?: number;
    /**
     * @generated from protobuf field: optional uint32 gather_num = 13;
     */
    gatherNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetScenePerformanceRsp.CmdId
 */
export enum GetScenePerformanceRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3137;
     */
    CMD_ID = 3137,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneAudioNotify
 */
export interface SceneAudioNotify {
    /**
     * @generated from protobuf field: repeated float param2 = 14;
     */
    param2: number[];
    /**
     * @generated from protobuf field: optional int32 type = 3;
     */
    type?: number;
    /**
     * @generated from protobuf field: repeated string param3 = 11;
     */
    param3: string[];
    /**
     * @generated from protobuf field: optional uint32 source_uid = 6;
     */
    sourceUid?: number;
    /**
     * @generated from protobuf field: repeated uint32 param1 = 4;
     */
    param1: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneAudioNotify.CmdId
 */
export enum SceneAudioNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3166;
     */
    CMD_ID = 3166,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.HitTreeNotify
 */
export interface HitTreeNotify {
    /**
     * @generated from protobuf field: optional uint32 tree_type = 11;
     */
    treeType?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector tree_pos = 2;
     */
    treePos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector drop_pos = 8;
     */
    dropPos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.HitTreeNotify.CmdId
 */
export enum HitTreeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3019;
     */
    CMD_ID = 3019,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityTagChangeNotify
 */
export interface EntityTagChangeNotify {
    /**
     * @generated from protobuf field: optional string tag = 2;
     */
    tag?: string;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional bool is_add = 10;
     */
    isAdd?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.EntityTagChangeNotify.CmdId
 */
export enum EntityTagChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3316;
     */
    CMD_ID = 3316,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AvatarFollowRouteNotify
 */
export interface AvatarFollowRouteNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 4;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 template_id = 6;
     */
    templateId?: number;
    /**
     * @generated from protobuf field: optional uint32 start_scene_time_ms = 8;
     */
    startSceneTimeMs?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Route route = 2;
     */
    route?: Route;
    /**
     * @generated from protobuf field: optional string client_params = 13;
     */
    clientParams?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.AvatarFollowRouteNotify.CmdId
 */
export enum AvatarFollowRouteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3458;
     */
    CMD_ID = 3458,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneEntityUpdateNotify
 */
export interface SceneEntityUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 param = 10;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.VisionType appear_type = 13;
     */
    appearType?: VisionType;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneEntityInfo entity_list = 5;
     */
    entityList: SceneEntityInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.SceneEntityUpdateNotify.CmdId
 */
export enum SceneEntityUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3412;
     */
    CMD_ID = 3412,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientHashDebugNotify
 */
export interface ClientHashDebugNotify {
    /**
     * @generated from protobuf field: optional uint32 job_id = 12;
     */
    jobId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientHashDebugNotify.CmdId
 */
export enum ClientHashDebugNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3086;
     */
    CMD_ID = 3086,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerWorldSceneInfo
 */
export interface PlayerWorldSceneInfo {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 11;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated uint32 scene_tag_id_list = 8;
     */
    sceneTagIdList: number[];
    /**
     * @generated from protobuf field: optional bool is_locked = 12;
     */
    isLocked?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerWorldSceneInfoListNotify
 */
export interface PlayerWorldSceneInfoListNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerWorldSceneInfo info_list = 5;
     */
    infoList: PlayerWorldSceneInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerWorldSceneInfoListNotify.CmdId
 */
export enum PlayerWorldSceneInfoListNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3129;
     */
    CMD_ID = 3129,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LuaEnvironmentEffectNotify
 */
export interface LuaEnvironmentEffectNotify {
    /**
     * @generated from protobuf field: optional uint32 type = 1;
     */
    type?: number;
    /**
     * @generated from protobuf field: repeated int32 int_param_list = 12;
     */
    intParamList: number[];
    /**
     * @generated from protobuf field: optional string effect_alias = 3;
     */
    effectAlias?: string;
    /**
     * @generated from protobuf field: repeated float float_param_list = 14;
     */
    floatParamList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.LuaEnvironmentEffectNotify.CmdId
 */
export enum LuaEnvironmentEffectNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3408;
     */
    CMD_ID = 3408,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientLoadingCostumeVerificationNotify
 */
export interface ClientLoadingCostumeVerificationNotify {
    /**
     * @generated from protobuf field: optional uint32 costume_id = 9;
     */
    costumeId?: number;
    /**
     * @generated from protobuf field: optional uint64 prefab_hash = 2;
     */
    prefabHash?: bigint;
    /**
     * @generated from protobuf field: optional uint64 guid = 14;
     */
    guid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientLoadingCostumeVerificationNotify.CmdId
 */
export enum ClientLoadingCostumeVerificationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3487;
     */
    CMD_ID = 3487,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ShowClientGuideNotify
 */
export interface ShowClientGuideNotify {
    /**
     * @generated from protobuf field: optional string guide_name = 7;
     */
    guideName?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.ShowClientGuideNotify.CmdId
 */
export enum ShowClientGuideNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3005;
     */
    CMD_ID = 3005,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ShowClientTutorialNotify
 */
export interface ShowClientTutorialNotify {
    /**
     * @generated from protobuf field: optional uint32 tutorial_id = 2;
     */
    tutorialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ShowClientTutorialNotify.CmdId
 */
export enum ShowClientTutorialNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3305;
     */
    CMD_ID = 3305,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetMapAreaReq
 */
export interface GetMapAreaReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetMapAreaReq.CmdId
 */
export enum GetMapAreaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3108;
     */
    CMD_ID = 3108,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetMapAreaRsp
 */
export interface GetMapAreaRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MapAreaInfo map_area_info_list = 9;
     */
    mapAreaInfoList: MapAreaInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetMapAreaRsp.CmdId
 */
export enum GetMapAreaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3328;
     */
    CMD_ID = 3328,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MapAreaChangeNotify
 */
export interface MapAreaChangeNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MapAreaInfo map_area_info_list = 3;
     */
    mapAreaInfoList: MapAreaInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.MapAreaChangeNotify.CmdId
 */
export enum MapAreaChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3378;
     */
    CMD_ID = 3378,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LeaveWorldNotify
 */
export interface LeaveWorldNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.LeaveWorldNotify.CmdId
 */
export enum LeaveWorldNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3017;
     */
    CMD_ID = 3017,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GuestBeginEnterSceneNotify
 */
export interface GuestBeginEnterSceneNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 8;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GuestBeginEnterSceneNotify.CmdId
 */
export enum GuestBeginEnterSceneNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3031;
     */
    CMD_ID = 3031,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GuestPostEnterSceneNotify
 */
export interface GuestPostEnterSceneNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 4;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GuestPostEnterSceneNotify.CmdId
 */
export enum GuestPostEnterSceneNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3144;
     */
    CMD_ID = 3144,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LevelTagDataNotify
 */
export interface LevelTagDataNotify {
    /**
     * @generated from protobuf field: repeated uint32 level_tag_id_list = 9;
     */
    levelTagIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.LevelTagDataNotify.CmdId
 */
export enum LevelTagDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3314;
     */
    CMD_ID = 3314,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StopReminderNotify
 */
export interface StopReminderNotify {
    /**
     * @generated from protobuf field: optional uint32 reminder_id = 15;
     */
    reminderId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StopReminderNotify.CmdId
 */
export enum StopReminderNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3004;
     */
    CMD_ID = 3004,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AreaPlayInfoNotify
 */
export interface AreaPlayInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 detail_play_type = 14;
     */
    detailPlayType?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AreaPlayType area_play_type = 11;
     */
    areaPlayType?: AreaPlayType;
}
/**
 * @generated from protobuf enum com.midnights.game.AreaPlayInfoNotify.CmdId
 */
export enum AreaPlayInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3323;
     */
    CMD_ID = 3323,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckGroupReplacedReq
 */
export interface CheckGroupReplacedReq {
    /**
     * @generated from protobuf field: repeated uint32 group_id_list = 7;
     */
    groupIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.CheckGroupReplacedReq.CmdId
 */
export enum CheckGroupReplacedReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3113;
     */
    CMD_ID = 3113,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckGroupReplacedRsp
 */
export interface CheckGroupReplacedRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 replaced_group_id_list = 6;
     */
    replacedGroupIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.CheckGroupReplacedRsp.CmdId
 */
export enum CheckGroupReplacedRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3152;
     */
    CMD_ID = 3152,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DeathZoneObserveNotify
 */
export interface DeathZoneObserveNotify {
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 14;
     */
    targetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 source_entity_id = 12;
     */
    sourceEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DeathZoneObserveNotify.CmdId
 */
export enum DeathZoneObserveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3475;
     */
    CMD_ID = 3475,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.HitTreeInfo
 */
export interface HitTreeInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector tree_pos = 12;
     */
    treePos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 tree_type = 8;
     */
    treeType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WorldChestOpenNotify
 */
export interface WorldChestOpenNotify {
    /**
     * @generated from protobuf field: optional uint32 group_id = 6;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 9;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 12;
     */
    configId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WorldChestOpenNotify.CmdId
 */
export enum WorldChestOpenNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3295;
     */
    CMD_ID = 3295,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetQuickHitTreeReq
 */
export interface WidgetQuickHitTreeReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.HitTreeInfo hit_tree_info_list = 5;
     */
    hitTreeInfoList: HitTreeInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetQuickHitTreeReq.CmdId
 */
export enum WidgetQuickHitTreeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3345;
     */
    CMD_ID = 3345,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetQuickHitTreeRsp
 */
export interface WidgetQuickHitTreeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetQuickHitTreeRsp.CmdId
 */
export enum WidgetQuickHitTreeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3336;
     */
    CMD_ID = 3336,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BeginCameraSceneLookWithTemplateNotify
 */
export interface BeginCameraSceneLookWithTemplateNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector look_pos = 8;
     */
    lookPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 template_id = 5;
     */
    templateId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector follow_pos = 2;
     */
    followPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 12;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: repeated string other_params = 13;
     */
    otherParams: string[];
    /**
     * @generated from protobuf field: optional com.midnights.game.BeginCameraSceneLookWithTemplateNotify.FollowType follow_type = 9;
     */
    followType?: BeginCameraSceneLookWithTemplateNotify_FollowType;
}
/**
 * @generated from protobuf enum com.midnights.game.BeginCameraSceneLookWithTemplateNotify.FollowType
 */
export enum BeginCameraSceneLookWithTemplateNotify_FollowType {
    /**
     * @generated from protobuf enum value: FOLLOW_TYPE_INIT_FOLLOW_POS = 0;
     */
    INIT_FOLLOW_POS = 0,
    /**
     * @generated from protobuf enum value: FOLLOW_TYPE_SET_FOLLOW_POS = 1;
     */
    SET_FOLLOW_POS = 1,
    /**
     * @generated from protobuf enum value: FOLLOW_TYPE_SET_ABS_FOLLOW_POS = 2;
     */
    SET_ABS_FOLLOW_POS = 2
}
/**
 * @generated from protobuf enum com.midnights.game.BeginCameraSceneLookWithTemplateNotify.CmdId
 */
export enum BeginCameraSceneLookWithTemplateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3160;
     */
    CMD_ID = 3160,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RefreshEntityAuthNotify
 */
export interface RefreshEntityAuthNotify {
    /**
     * @generated from protobuf field: repeated uint32 entity_id_list = 7;
     */
    entityIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.RefreshEntityAuthNotify.CmdId
 */
export enum RefreshEntityAuthNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3259;
     */
    CMD_ID = 3259,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayerBackgroundAvatarRefreshNotify
 */
export interface ScenePlayerBackgroundAvatarRefreshNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneEntityInfo entity_list = 4;
     */
    entityList: SceneEntityInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.VisionType appear_type = 8;
     */
    appearType?: VisionType;
    /**
     * @generated from protobuf field: optional uint32 param = 9;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayerBackgroundAvatarRefreshNotify.CmdId
 */
export enum ScenePlayerBackgroundAvatarRefreshNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3274;
     */
    CMD_ID = 3274,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.EnterType
 */
export enum EnterType {
    /**
     * @generated from protobuf enum value: ENTER_NONE = 0;
     */
    ENTER_NONE = 0,
    /**
     * @generated from protobuf enum value: ENTER_SELF = 1;
     */
    ENTER_SELF = 1,
    /**
     * @generated from protobuf enum value: ENTER_GOTO = 2;
     */
    ENTER_GOTO = 2,
    /**
     * @generated from protobuf enum value: ENTER_JUMP = 3;
     */
    ENTER_JUMP = 3,
    /**
     * @generated from protobuf enum value: ENTER_OTHER = 4;
     */
    ENTER_OTHER = 4,
    /**
     * @generated from protobuf enum value: ENTER_BACK = 5;
     */
    ENTER_BACK = 5,
    /**
     * @generated from protobuf enum value: ENTER_DUNGEON = 6;
     */
    ENTER_DUNGEON = 6,
    /**
     * @generated from protobuf enum value: ENTER_DUNGEON_REPLAY = 7;
     */
    ENTER_DUNGEON_REPLAY = 7,
    /**
     * @generated from protobuf enum value: ENTER_GOTO_BY_PORTAL = 8;
     */
    ENTER_GOTO_BY_PORTAL = 8,
    /**
     * @generated from protobuf enum value: ENTER_SELF_HOME = 9;
     */
    ENTER_SELF_HOME = 9,
    /**
     * @generated from protobuf enum value: ENTER_OTHER_HOME = 10;
     */
    ENTER_OTHER_HOME = 10,
    /**
     * @generated from protobuf enum value: ENTER_GOTO_RECREATE = 11;
     */
    ENTER_GOTO_RECREATE = 11
}
/**
 * @generated from protobuf enum com.midnights.game.VisionType
 */
export enum VisionType {
    /**
     * @generated from protobuf enum value: VISION_NONE = 0;
     */
    VISION_NONE = 0,
    /**
     * @generated from protobuf enum value: VISION_MEET = 1;
     */
    VISION_MEET = 1,
    /**
     * @generated from protobuf enum value: VISION_REBORN = 2;
     */
    VISION_REBORN = 2,
    /**
     * @generated from protobuf enum value: VISION_REPLACE = 3;
     */
    VISION_REPLACE = 3,
    /**
     * @generated from protobuf enum value: VISION_WAYPOINT_REBORN = 4;
     */
    VISION_WAYPOINT_REBORN = 4,
    /**
     * @generated from protobuf enum value: VISION_MISS = 5;
     */
    VISION_MISS = 5,
    /**
     * @generated from protobuf enum value: VISION_DIE = 6;
     */
    VISION_DIE = 6,
    /**
     * @generated from protobuf enum value: VISION_GATHER_ESCAPE = 7;
     */
    VISION_GATHER_ESCAPE = 7,
    /**
     * @generated from protobuf enum value: VISION_REFRESH = 8;
     */
    VISION_REFRESH = 8,
    /**
     * @generated from protobuf enum value: VISION_TRANSPORT = 9;
     */
    VISION_TRANSPORT = 9,
    /**
     * @generated from protobuf enum value: VISION_REPLACE_DIE = 10;
     */
    VISION_REPLACE_DIE = 10,
    /**
     * @generated from protobuf enum value: VISION_REPLACE_NO_NOTIFY = 11;
     */
    VISION_REPLACE_NO_NOTIFY = 11,
    /**
     * @generated from protobuf enum value: VISION_BORN = 12;
     */
    VISION_BORN = 12,
    /**
     * @generated from protobuf enum value: VISION_PICKUP = 13;
     */
    VISION_PICKUP = 13,
    /**
     * @generated from protobuf enum value: VISION_REMOVE = 14;
     */
    VISION_REMOVE = 14,
    /**
     * @generated from protobuf enum value: VISION_CHANGE_COSTUME = 15;
     */
    VISION_CHANGE_COSTUME = 15,
    /**
     * @generated from protobuf enum value: VISION_FISH_REFRESH = 16;
     */
    VISION_FISH_REFRESH = 16,
    /**
     * @generated from protobuf enum value: VISION_FISH_BIG_SHOCK = 17;
     */
    VISION_FISH_BIG_SHOCK = 17,
    /**
     * @generated from protobuf enum value: VISION_FISH_QTE_SUCC = 18;
     */
    VISION_FISH_QTE_SUCC = 18,
    /**
     * @generated from protobuf enum value: VISION_CAPTURE_DISAPPEAR = 19;
     */
    VISION_CAPTURE_DISAPPEAR = 19
}
/**
 * @generated from protobuf enum com.midnights.game.CreateReason
 */
export enum CreateReason {
    /**
     * @generated from protobuf enum value: CREATE_NONE = 0;
     */
    CREATE_NONE = 0,
    /**
     * @generated from protobuf enum value: CREATE_QUEST = 1;
     */
    CREATE_QUEST = 1,
    /**
     * @generated from protobuf enum value: CREATE_ENERGY = 2;
     */
    CREATE_ENERGY = 2
}
/**
 * @generated from protobuf enum com.midnights.game.TransmitReason
 */
export enum TransmitReason {
    /**
     * @generated from protobuf enum value: TRANSMIT_NONE = 0;
     */
    TRANSMIT_NONE = 0,
    /**
     * @generated from protobuf enum value: TRANSMIT_QUEST = 1;
     */
    TRANSMIT_QUEST = 1
}
/**
 * @generated from protobuf enum com.midnights.game.SealBattleType
 */
export enum SealBattleType {
    /**
     * @generated from protobuf enum value: SEAL_BATTLE_KEEP_ALIVE = 0;
     */
    SEAL_BATTLE_KEEP_ALIVE = 0,
    /**
     * @generated from protobuf enum value: SEAL_BATTLE_KILL_MONSTER = 1;
     */
    SEAL_BATTLE_KILL_MONSTER = 1,
    /**
     * @generated from protobuf enum value: SEAL_BATTLE_ENERGY_CHARGE = 2;
     */
    SEAL_BATTLE_ENERGY_CHARGE = 2
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonEntryBlockReason
 */
export enum DungeonEntryBlockReason {
    /**
     * @generated from protobuf enum value: DUNGEON_ENTRY_REASON_NONE = 0;
     */
    DUNGEON_ENTRY_REASON_NONE = 0,
    /**
     * @generated from protobuf enum value: DUNGEON_ENTRY_REASON_LEVEL = 1;
     */
    DUNGEON_ENTRY_REASON_LEVEL = 1,
    /**
     * @generated from protobuf enum value: DUNGEON_ENTRY_REASON_QUEST = 2;
     */
    DUNGEON_ENTRY_REASON_QUEST = 2,
    /**
     * @generated from protobuf enum value: DUNGEON_ENTRY_REASON_MULIPLE = 3;
     */
    DUNGEON_ENTRY_REASON_MULIPLE = 3
}
/**
 * @generated from protobuf enum com.midnights.game.AreaPlayType
 */
export enum AreaPlayType {
    /**
     * @generated from protobuf enum value: AREA_PLAY_NONE = 0;
     */
    AREA_PLAY_NONE = 0,
    /**
     * @generated from protobuf enum value: AREA_PLAY_CLIMATE = 1;
     */
    AREA_PLAY_CLIMATE = 1,
    /**
     * @generated from protobuf enum value: AREA_PLAY_REGIONAL_PLAY = 2;
     */
    AREA_PLAY_REGIONAL_PLAY = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEnterSceneNotify$Type extends MessageType<PlayerEnterSceneNotify> {
    constructor() {
        super("com.midnights.game.PlayerEnterSceneNotify", [
            { no: 6, name: "prev_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1732, name: "is_skip_ui", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.EnterType", EnterType] },
            { no: 14, name: "scene_begin_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1490, name: "world_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_first_login_enter_scene", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scene_tag_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1842, name: "scene_transaction", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "prev_pos", kind: "message", T: () => Vector },
            { no: 1828, name: "enter_reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "pos", kind: "message", T: () => Vector },
            { no: 2, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerEnterSceneNotify>): PlayerEnterSceneNotify {
        const message = { sceneTagIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEnterSceneNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEnterSceneNotify): PlayerEnterSceneNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 prev_scene_id */ 6:
                    message.prevSceneId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional bool is_skip_ui */ 1732:
                    message.isSkipUi = reader.bool();
                    break;
                case /* optional uint32 scene_id */ 15:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional com.midnights.game.EnterType type */ 13:
                    message.type = reader.int32();
                    break;
                case /* optional uint64 scene_begin_time */ 14:
                    message.sceneBeginTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 world_level */ 11:
                    message.worldLevel = reader.uint32();
                    break;
                case /* optional uint32 world_type */ 1490:
                    message.worldType = reader.uint32();
                    break;
                case /* optional uint32 target_uid */ 4:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional bool is_first_login_enter_scene */ 3:
                    message.isFirstLoginEnterScene = reader.bool();
                    break;
                case /* repeated uint32 scene_tag_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sceneTagIdList.push(reader.uint32());
                    else
                        message.sceneTagIdList.push(reader.uint32());
                    break;
                case /* optional string scene_transaction */ 1842:
                    message.sceneTransaction = reader.string();
                    break;
                case /* optional com.midnights.game.Vector prev_pos */ 8:
                    message.prevPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.prevPos);
                    break;
                case /* optional uint32 enter_reason */ 1828:
                    message.enterReason = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 7:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 enter_scene_token */ 2:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEnterSceneNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 prev_scene_id = 6; */
        if (message.prevSceneId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.prevSceneId);
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonId);
        /* optional bool is_skip_ui = 1732; */
        if (message.isSkipUi !== undefined)
            writer.tag(1732, WireType.Varint).bool(message.isSkipUi);
        /* optional uint32 scene_id = 15; */
        if (message.sceneId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneId);
        /* optional com.midnights.game.EnterType type = 13; */
        if (message.type !== undefined)
            writer.tag(13, WireType.Varint).int32(message.type);
        /* optional uint64 scene_begin_time = 14; */
        if (message.sceneBeginTime !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.sceneBeginTime);
        /* optional uint32 world_level = 11; */
        if (message.worldLevel !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.worldLevel);
        /* optional uint32 world_type = 1490; */
        if (message.worldType !== undefined)
            writer.tag(1490, WireType.Varint).uint32(message.worldType);
        /* optional uint32 target_uid = 4; */
        if (message.targetUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.targetUid);
        /* optional bool is_first_login_enter_scene = 3; */
        if (message.isFirstLoginEnterScene !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFirstLoginEnterScene);
        /* repeated uint32 scene_tag_id_list = 5; */
        if (message.sceneTagIdList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sceneTagIdList.length; i++)
                writer.uint32(message.sceneTagIdList[i]);
            writer.join();
        }
        /* optional string scene_transaction = 1842; */
        if (message.sceneTransaction !== undefined)
            writer.tag(1842, WireType.LengthDelimited).string(message.sceneTransaction);
        /* optional com.midnights.game.Vector prev_pos = 8; */
        if (message.prevPos)
            Vector.internalBinaryWrite(message.prevPos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 enter_reason = 1828; */
        if (message.enterReason !== undefined)
            writer.tag(1828, WireType.Varint).uint32(message.enterReason);
        /* optional com.midnights.game.Vector pos = 7; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 enter_scene_token = 2; */
        if (message.enterSceneToken !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerEnterSceneNotify
 */
export const PlayerEnterSceneNotify = new PlayerEnterSceneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveSceneReq$Type extends MessageType<LeaveSceneReq> {
    constructor() {
        super("com.midnights.game.LeaveSceneReq", []);
    }
    create(value?: PartialMessage<LeaveSceneReq>): LeaveSceneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveSceneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveSceneReq): LeaveSceneReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveSceneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LeaveSceneReq
 */
export const LeaveSceneReq = new LeaveSceneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveSceneRsp$Type extends MessageType<LeaveSceneRsp> {
    constructor() {
        super("com.midnights.game.LeaveSceneRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LeaveSceneRsp>): LeaveSceneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveSceneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveSceneRsp): LeaveSceneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaveSceneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LeaveSceneRsp
 */
export const LeaveSceneRsp = new LeaveSceneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneInitFinishReq$Type extends MessageType<SceneInitFinishReq> {
    constructor() {
        super("com.midnights.game.SceneInitFinishReq", [
            { no: 11, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneInitFinishReq>): SceneInitFinishReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneInitFinishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneInitFinishReq): SceneInitFinishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 11:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneInitFinishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 11; */
        if (message.enterSceneToken !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneInitFinishReq
 */
export const SceneInitFinishReq = new SceneInitFinishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneInitFinishRsp$Type extends MessageType<SceneInitFinishRsp> {
    constructor() {
        super("com.midnights.game.SceneInitFinishRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneInitFinishRsp>): SceneInitFinishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneInitFinishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneInitFinishRsp): SceneInitFinishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 enter_scene_token */ 8:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneInitFinishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 enter_scene_token = 8; */
        if (message.enterSceneToken !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneInitFinishRsp
 */
export const SceneInitFinishRsp = new SceneInitFinishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityAppearNotify$Type extends MessageType<SceneEntityAppearNotify> {
    constructor() {
        super("com.midnights.game.SceneEntityAppearNotify", [
            { no: 15, name: "appear_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VisionType", VisionType] },
            { no: 9, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "entity_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneEntityInfo }
        ]);
    }
    create(value?: PartialMessage<SceneEntityAppearNotify>): SceneEntityAppearNotify {
        const message = { entityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityAppearNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityAppearNotify): SceneEntityAppearNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.VisionType appear_type */ 15:
                    message.appearType = reader.int32();
                    break;
                case /* optional uint32 param */ 9:
                    message.param = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SceneEntityInfo entity_list */ 5:
                    message.entityList.push(SceneEntityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityAppearNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.VisionType appear_type = 15; */
        if (message.appearType !== undefined)
            writer.tag(15, WireType.Varint).int32(message.appearType);
        /* optional uint32 param = 9; */
        if (message.param !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.param);
        /* repeated com.midnights.game.SceneEntityInfo entity_list = 5; */
        for (let i = 0; i < message.entityList.length; i++)
            SceneEntityInfo.internalBinaryWrite(message.entityList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityAppearNotify
 */
export const SceneEntityAppearNotify = new SceneEntityAppearNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityDisappearNotify$Type extends MessageType<SceneEntityDisappearNotify> {
    constructor() {
        super("com.midnights.game.SceneEntityDisappearNotify", [
            { no: 6, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "entity_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "disappear_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VisionType", VisionType] }
        ]);
    }
    create(value?: PartialMessage<SceneEntityDisappearNotify>): SceneEntityDisappearNotify {
        const message = { entityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityDisappearNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityDisappearNotify): SceneEntityDisappearNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 6:
                    message.param = reader.uint32();
                    break;
                case /* repeated uint32 entity_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.entityList.push(reader.uint32());
                    else
                        message.entityList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.VisionType disappear_type */ 2:
                    message.disappearType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityDisappearNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param = 6; */
        if (message.param !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.param);
        /* repeated uint32 entity_list = 1; */
        if (message.entityList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.entityList.length; i++)
                writer.uint32(message.entityList[i]);
            writer.join();
        }
        /* optional com.midnights.game.VisionType disappear_type = 2; */
        if (message.disappearType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.disappearType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityDisappearNotify
 */
export const SceneEntityDisappearNotify = new SceneEntityDisappearNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityMoveReq$Type extends MessageType<SceneEntityMoveReq> {
    constructor() {
        super("com.midnights.game.SceneEntityMoveReq", [
            { no: 7, name: "motion_info", kind: "message", T: () => MotionInfo },
            { no: 4, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "reliable_seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityMoveReq>): SceneEntityMoveReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityMoveReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityMoveReq): SceneEntityMoveReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MotionInfo motion_info */ 7:
                    message.motionInfo = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.motionInfo);
                    break;
                case /* optional uint32 scene_time */ 4:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 reliable_seq */ 15:
                    message.reliableSeq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityMoveReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MotionInfo motion_info = 7; */
        if (message.motionInfo)
            MotionInfo.internalBinaryWrite(message.motionInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_time = 4; */
        if (message.sceneTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        /* optional uint32 reliable_seq = 15; */
        if (message.reliableSeq !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.reliableSeq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityMoveReq
 */
export const SceneEntityMoveReq = new SceneEntityMoveReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityMoveRsp$Type extends MessageType<SceneEntityMoveRsp> {
    constructor() {
        super("com.midnights.game.SceneEntityMoveRsp", [
            { no: 4, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "fail_motion", kind: "message", T: () => MotionInfo },
            { no: 10, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "reliable_seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityMoveRsp>): SceneEntityMoveRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityMoveRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityMoveRsp): SceneEntityMoveRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 4:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MotionInfo fail_motion */ 1:
                    message.failMotion = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.failMotion);
                    break;
                case /* optional uint32 scene_time */ 10:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 reliable_seq */ 6:
                    message.reliableSeq = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityMoveRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 4; */
        if (message.entityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.MotionInfo fail_motion = 1; */
        if (message.failMotion)
            MotionInfo.internalBinaryWrite(message.failMotion, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_time = 10; */
        if (message.sceneTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 reliable_seq = 6; */
        if (message.reliableSeq !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reliableSeq);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityMoveRsp
 */
export const SceneEntityMoveRsp = new SceneEntityMoveRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneAvatarStaminaStepReq$Type extends MessageType<SceneAvatarStaminaStepReq> {
    constructor() {
        super("com.midnights.game.SceneAvatarStaminaStepReq", [
            { no: 15, name: "use_client_rot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<SceneAvatarStaminaStepReq>): SceneAvatarStaminaStepReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneAvatarStaminaStepReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneAvatarStaminaStepReq): SceneAvatarStaminaStepReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool use_client_rot */ 15:
                    message.useClientRot = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector rot */ 7:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneAvatarStaminaStepReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool use_client_rot = 15; */
        if (message.useClientRot !== undefined)
            writer.tag(15, WireType.Varint).bool(message.useClientRot);
        /* optional com.midnights.game.Vector rot = 7; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneAvatarStaminaStepReq
 */
export const SceneAvatarStaminaStepReq = new SceneAvatarStaminaStepReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneAvatarStaminaStepRsp$Type extends MessageType<SceneAvatarStaminaStepRsp> {
    constructor() {
        super("com.midnights.game.SceneAvatarStaminaStepRsp", [
            { no: 9, name: "use_client_rot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<SceneAvatarStaminaStepRsp>): SceneAvatarStaminaStepRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneAvatarStaminaStepRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneAvatarStaminaStepRsp): SceneAvatarStaminaStepRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool use_client_rot */ 9:
                    message.useClientRot = reader.bool();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 11:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneAvatarStaminaStepRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool use_client_rot = 9; */
        if (message.useClientRot !== undefined)
            writer.tag(9, WireType.Varint).bool(message.useClientRot);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.Vector rot = 11; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneAvatarStaminaStepRsp
 */
export const SceneAvatarStaminaStepRsp = new SceneAvatarStaminaStepRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityMoveNotify$Type extends MessageType<SceneEntityMoveNotify> {
    constructor() {
        super("com.midnights.game.SceneEntityMoveNotify", [
            { no: 6, name: "motion_info", kind: "message", T: () => MotionInfo },
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reliable_seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityMoveNotify>): SceneEntityMoveNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityMoveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityMoveNotify): SceneEntityMoveNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MotionInfo motion_info */ 6:
                    message.motionInfo = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.motionInfo);
                    break;
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 scene_time */ 15:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 reliable_seq */ 2:
                    message.reliableSeq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityMoveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MotionInfo motion_info = 6; */
        if (message.motionInfo)
            MotionInfo.internalBinaryWrite(message.motionInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        /* optional uint32 scene_time = 15; */
        if (message.sceneTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 reliable_seq = 2; */
        if (message.reliableSeq !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.reliableSeq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityMoveNotify
 */
export const SceneEntityMoveNotify = new SceneEntityMoveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VehicleLocationInfo$Type extends MessageType<VehicleLocationInfo> {
    constructor() {
        super("com.midnights.game.VehicleLocationInfo", [
            { no: 14, name: "rot", kind: "message", T: () => Vector },
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cur_hp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "pos", kind: "message", T: () => Vector },
            { no: 3, name: "uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "max_hp", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<VehicleLocationInfo>): VehicleLocationInfo {
        const message = { uidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VehicleLocationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleLocationInfo): VehicleLocationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 14:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional float cur_hp */ 11:
                    message.curHp = reader.float();
                    break;
                case /* optional uint32 owner_uid */ 5:
                    message.ownerUid = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 1:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* repeated uint32 uid_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                case /* optional uint32 gadget_id */ 13:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional float max_hp */ 6:
                    message.maxHp = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleLocationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 14; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        /* optional float cur_hp = 11; */
        if (message.curHp !== undefined)
            writer.tag(11, WireType.Bit32).float(message.curHp);
        /* optional uint32 owner_uid = 5; */
        if (message.ownerUid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.ownerUid);
        /* optional com.midnights.game.Vector pos = 1; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 uid_list = 3; */
        if (message.uidList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uidList.length; i++)
                writer.uint32(message.uidList[i]);
            writer.join();
        }
        /* optional uint32 gadget_id = 13; */
        if (message.gadgetId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gadgetId);
        /* optional float max_hp = 6; */
        if (message.maxHp !== undefined)
            writer.tag(6, WireType.Bit32).float(message.maxHp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VehicleLocationInfo
 */
export const VehicleLocationInfo = new VehicleLocationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerLocationNotify$Type extends MessageType<ScenePlayerLocationNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayerLocationNotify", [
            { no: 3, name: "vehicle_loc_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VehicleLocationInfo },
            { no: 9, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "player_loc_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerLocationInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerLocationNotify>): ScenePlayerLocationNotify {
        const message = { vehicleLocList: [], playerLocList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerLocationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerLocationNotify): ScenePlayerLocationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.VehicleLocationInfo vehicle_loc_list */ 3:
                    message.vehicleLocList.push(VehicleLocationInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 scene_id */ 9:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PlayerLocationInfo player_loc_list */ 14:
                    message.playerLocList.push(PlayerLocationInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerLocationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.VehicleLocationInfo vehicle_loc_list = 3; */
        for (let i = 0; i < message.vehicleLocList.length; i++)
            VehicleLocationInfo.internalBinaryWrite(message.vehicleLocList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 9; */
        if (message.sceneId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneId);
        /* repeated com.midnights.game.PlayerLocationInfo player_loc_list = 14; */
        for (let i = 0; i < message.playerLocList.length; i++)
            PlayerLocationInfo.internalBinaryWrite(message.playerLocList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayerLocationNotify
 */
export const ScenePlayerLocationNotify = new ScenePlayerLocationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetScenePointReq$Type extends MessageType<GetScenePointReq> {
    constructor() {
        super("com.midnights.game.GetScenePointReq", [
            { no: 10, name: "belong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetScenePointReq>): GetScenePointReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetScenePointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScenePointReq): GetScenePointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 belong_uid */ 10:
                    message.belongUid = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetScenePointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 belong_uid = 10; */
        if (message.belongUid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.belongUid);
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetScenePointReq
 */
export const GetScenePointReq = new GetScenePointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CityInfo$Type extends MessageType<CityInfo> {
    constructor() {
        super("com.midnights.game.CityInfo", [
            { no: 15, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "crystal_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CityInfo>): CityInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CityInfo): CityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 15:
                    message.cityId = reader.uint32();
                    break;
                case /* optional uint32 crystal_num */ 3:
                    message.crystalNum = reader.uint32();
                    break;
                case /* optional uint32 level */ 4:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 15; */
        if (message.cityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cityId);
        /* optional uint32 crystal_num = 3; */
        if (message.crystalNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.crystalNum);
        /* optional uint32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CityInfo
 */
export const CityInfo = new CityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetScenePointRsp$Type extends MessageType<GetScenePointRsp> {
    constructor() {
        super("com.midnights.game.GetScenePointRsp", [
            { no: 11, name: "not_explored_dungeon_entry_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "to_be_explore_dungeon_entry_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "locked_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "unhide_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "belong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "unlocked_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "unlock_area_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "hide_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "not_interact_dungeon_entry_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "group_unlimit_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetScenePointRsp>): GetScenePointRsp {
        const message = { notExploredDungeonEntryList: [], toBeExploreDungeonEntryList: [], lockedPointList: [], unhidePointList: [], unlockedPointList: [], unlockAreaList: [], hidePointList: [], notInteractDungeonEntryList: [], groupUnlimitPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetScenePointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScenePointRsp): GetScenePointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 not_explored_dungeon_entry_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.notExploredDungeonEntryList.push(reader.uint32());
                    else
                        message.notExploredDungeonEntryList.push(reader.uint32());
                    break;
                case /* repeated uint32 to_be_explore_dungeon_entry_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toBeExploreDungeonEntryList.push(reader.uint32());
                    else
                        message.toBeExploreDungeonEntryList.push(reader.uint32());
                    break;
                case /* repeated uint32 locked_point_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lockedPointList.push(reader.uint32());
                    else
                        message.lockedPointList.push(reader.uint32());
                    break;
                case /* repeated uint32 unhide_point_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unhidePointList.push(reader.uint32());
                    else
                        message.unhidePointList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 belong_uid */ 12:
                    message.belongUid = reader.uint32();
                    break;
                case /* repeated uint32 unlocked_point_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockedPointList.push(reader.uint32());
                    else
                        message.unlockedPointList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_area_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockAreaList.push(reader.uint32());
                    else
                        message.unlockAreaList.push(reader.uint32());
                    break;
                case /* repeated uint32 hide_point_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hidePointList.push(reader.uint32());
                    else
                        message.hidePointList.push(reader.uint32());
                    break;
                case /* optional uint32 scene_id */ 14:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated uint32 not_interact_dungeon_entry_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.notInteractDungeonEntryList.push(reader.uint32());
                    else
                        message.notInteractDungeonEntryList.push(reader.uint32());
                    break;
                case /* repeated uint32 group_unlimit_point_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupUnlimitPointList.push(reader.uint32());
                    else
                        message.groupUnlimitPointList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetScenePointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 not_explored_dungeon_entry_list = 11; */
        if (message.notExploredDungeonEntryList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.notExploredDungeonEntryList.length; i++)
                writer.uint32(message.notExploredDungeonEntryList[i]);
            writer.join();
        }
        /* repeated uint32 to_be_explore_dungeon_entry_list = 15; */
        if (message.toBeExploreDungeonEntryList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toBeExploreDungeonEntryList.length; i++)
                writer.uint32(message.toBeExploreDungeonEntryList[i]);
            writer.join();
        }
        /* repeated uint32 locked_point_list = 2; */
        if (message.lockedPointList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lockedPointList.length; i++)
                writer.uint32(message.lockedPointList[i]);
            writer.join();
        }
        /* repeated uint32 unhide_point_list = 5; */
        if (message.unhidePointList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unhidePointList.length; i++)
                writer.uint32(message.unhidePointList[i]);
            writer.join();
        }
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 belong_uid = 12; */
        if (message.belongUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.belongUid);
        /* repeated uint32 unlocked_point_list = 13; */
        if (message.unlockedPointList.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockedPointList.length; i++)
                writer.uint32(message.unlockedPointList[i]);
            writer.join();
        }
        /* repeated uint32 unlock_area_list = 1; */
        if (message.unlockAreaList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockAreaList.length; i++)
                writer.uint32(message.unlockAreaList[i]);
            writer.join();
        }
        /* repeated uint32 hide_point_list = 4; */
        if (message.hidePointList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hidePointList.length; i++)
                writer.uint32(message.hidePointList[i]);
            writer.join();
        }
        /* optional uint32 scene_id = 14; */
        if (message.sceneId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.sceneId);
        /* repeated uint32 not_interact_dungeon_entry_list = 6; */
        if (message.notInteractDungeonEntryList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.notInteractDungeonEntryList.length; i++)
                writer.uint32(message.notInteractDungeonEntryList[i]);
            writer.join();
        }
        /* repeated uint32 group_unlimit_point_list = 10; */
        if (message.groupUnlimitPointList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupUnlimitPointList.length; i++)
                writer.uint32(message.groupUnlimitPointList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetScenePointRsp
 */
export const GetScenePointRsp = new GetScenePointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterTransPointRegionNotify$Type extends MessageType<EnterTransPointRegionNotify> {
    constructor() {
        super("com.midnights.game.EnterTransPointRegionNotify", [
            { no: 8, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterTransPointRegionNotify>): EnterTransPointRegionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterTransPointRegionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterTransPointRegionNotify): EnterTransPointRegionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 8:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 6:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterTransPointRegionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 8; */
        if (message.sceneId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 point_id = 6; */
        if (message.pointId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterTransPointRegionNotify
 */
export const EnterTransPointRegionNotify = new EnterTransPointRegionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExitTransPointRegionNotify$Type extends MessageType<ExitTransPointRegionNotify> {
    constructor() {
        super("com.midnights.game.ExitTransPointRegionNotify", [
            { no: 1, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExitTransPointRegionNotify>): ExitTransPointRegionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExitTransPointRegionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExitTransPointRegionNotify): ExitTransPointRegionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 1:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 7:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExitTransPointRegionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 1; */
        if (message.pointId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.pointId);
        /* optional uint32 scene_id = 7; */
        if (message.sceneId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExitTransPointRegionNotify
 */
export const ExitTransPointRegionNotify = new ExitTransPointRegionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePointUnlockNotify$Type extends MessageType<ScenePointUnlockNotify> {
    constructor() {
        super("com.midnights.game.ScenePointUnlockNotify", [
            { no: 13, name: "point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "unhide_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "hide_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "locked_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePointUnlockNotify>): ScenePointUnlockNotify {
        const message = { pointList: [], unhidePointList: [], hidePointList: [], lockedPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePointUnlockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePointUnlockNotify): ScenePointUnlockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 point_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.pointList.push(reader.uint32());
                    else
                        message.pointList.push(reader.uint32());
                    break;
                case /* optional uint32 scene_id */ 6:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated uint32 unhide_point_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unhidePointList.push(reader.uint32());
                    else
                        message.unhidePointList.push(reader.uint32());
                    break;
                case /* repeated uint32 hide_point_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hidePointList.push(reader.uint32());
                    else
                        message.hidePointList.push(reader.uint32());
                    break;
                case /* repeated uint32 locked_point_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lockedPointList.push(reader.uint32());
                    else
                        message.lockedPointList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePointUnlockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 point_list = 13; */
        if (message.pointList.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.pointList.length; i++)
                writer.uint32(message.pointList[i]);
            writer.join();
        }
        /* optional uint32 scene_id = 6; */
        if (message.sceneId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.sceneId);
        /* repeated uint32 unhide_point_list = 12; */
        if (message.unhidePointList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unhidePointList.length; i++)
                writer.uint32(message.unhidePointList[i]);
            writer.join();
        }
        /* repeated uint32 hide_point_list = 1; */
        if (message.hidePointList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hidePointList.length; i++)
                writer.uint32(message.hidePointList[i]);
            writer.join();
        }
        /* repeated uint32 locked_point_list = 8; */
        if (message.lockedPointList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lockedPointList.length; i++)
                writer.uint32(message.lockedPointList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePointUnlockNotify
 */
export const ScenePointUnlockNotify = new ScenePointUnlockNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneTransToPointReq$Type extends MessageType<SceneTransToPointReq> {
    constructor() {
        super("com.midnights.game.SceneTransToPointReq", [
            { no: 13, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneTransToPointReq>): SceneTransToPointReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneTransToPointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneTransToPointReq): SceneTransToPointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 13:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 1:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneTransToPointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 13; */
        if (message.sceneId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 point_id = 1; */
        if (message.pointId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneTransToPointReq
 */
export const SceneTransToPointReq = new SceneTransToPointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneTransToPointRsp$Type extends MessageType<SceneTransToPointRsp> {
    constructor() {
        super("com.midnights.game.SceneTransToPointRsp", [
            { no: 14, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneTransToPointRsp>): SceneTransToPointRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneTransToPointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneTransToPointRsp): SceneTransToPointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 14:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 3:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneTransToPointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 14; */
        if (message.pointId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.pointId);
        /* optional uint32 scene_id = 3; */
        if (message.sceneId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.sceneId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneTransToPointRsp
 */
export const SceneTransToPointRsp = new SceneTransToPointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityJumpNotify$Type extends MessageType<EntityJumpNotify> {
    constructor() {
        super("com.midnights.game.EntityJumpNotify", [
            { no: 9, name: "jump_type", kind: "enum", opt: true, T: () => ["com.midnights.game.EntityJumpNotify.Type", EntityJumpNotify_Type] },
            { no: 8, name: "rot", kind: "message", T: () => Vector },
            { no: 10, name: "pos", kind: "message", T: () => Vector },
            { no: 12, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityJumpNotify>): EntityJumpNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityJumpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityJumpNotify): EntityJumpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.EntityJumpNotify.Type jump_type */ 9:
                    message.jumpType = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 8:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 entity_id */ 12:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityJumpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.EntityJumpNotify.Type jump_type = 9; */
        if (message.jumpType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.jumpType);
        /* optional com.midnights.game.Vector rot = 8; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 12; */
        if (message.entityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityJumpNotify
 */
export const EntityJumpNotify = new EntityJumpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSceneAreaReq$Type extends MessageType<GetSceneAreaReq> {
    constructor() {
        super("com.midnights.game.GetSceneAreaReq", [
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "belong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSceneAreaReq>): GetSceneAreaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSceneAreaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSceneAreaReq): GetSceneAreaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 belong_uid */ 7:
                    message.belongUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSceneAreaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 belong_uid = 7; */
        if (message.belongUid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.belongUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetSceneAreaReq
 */
export const GetSceneAreaReq = new GetSceneAreaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSceneAreaRsp$Type extends MessageType<GetSceneAreaRsp> {
    constructor() {
        super("com.midnights.game.GetSceneAreaRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "city_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CityInfo },
            { no: 15, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "area_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSceneAreaRsp>): GetSceneAreaRsp {
        const message = { cityInfoList: [], areaIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSceneAreaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSceneAreaRsp): GetSceneAreaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.CityInfo city_info_list */ 13:
                    message.cityInfoList.push(CityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 scene_id */ 15:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated uint32 area_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.areaIdList.push(reader.uint32());
                    else
                        message.areaIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSceneAreaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.CityInfo city_info_list = 13; */
        for (let i = 0; i < message.cityInfoList.length; i++)
            CityInfo.internalBinaryWrite(message.cityInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 15; */
        if (message.sceneId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneId);
        /* repeated uint32 area_id_list = 9; */
        if (message.areaIdList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.areaIdList.length; i++)
                writer.uint32(message.areaIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetSceneAreaRsp
 */
export const GetSceneAreaRsp = new GetSceneAreaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneAreaUnlockNotify$Type extends MessageType<SceneAreaUnlockNotify> {
    constructor() {
        super("com.midnights.game.SceneAreaUnlockNotify", [
            { no: 10, name: "area_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneAreaUnlockNotify>): SceneAreaUnlockNotify {
        const message = { areaList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneAreaUnlockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneAreaUnlockNotify): SceneAreaUnlockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 area_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.areaList.push(reader.uint32());
                    else
                        message.areaList.push(reader.uint32());
                    break;
                case /* optional uint32 scene_id */ 9:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneAreaUnlockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 area_list = 10; */
        if (message.areaList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.areaList.length; i++)
                writer.uint32(message.areaList[i]);
            writer.join();
        }
        /* optional uint32 scene_id = 9; */
        if (message.sceneId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneAreaUnlockNotify
 */
export const SceneAreaUnlockNotify = new SceneAreaUnlockNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityDrownReq$Type extends MessageType<SceneEntityDrownReq> {
    constructor() {
        super("com.midnights.game.SceneEntityDrownReq", [
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityDrownReq>): SceneEntityDrownReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityDrownReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityDrownReq): SceneEntityDrownReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityDrownReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityDrownReq
 */
export const SceneEntityDrownReq = new SceneEntityDrownReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityDrownRsp$Type extends MessageType<SceneEntityDrownRsp> {
    constructor() {
        super("com.midnights.game.SceneEntityDrownRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneEntityDrownRsp>): SceneEntityDrownRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityDrownRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityDrownRsp): SceneEntityDrownRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityDrownRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityDrownRsp
 */
export const SceneEntityDrownRsp = new SceneEntityDrownRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneCreateEntityReq$Type extends MessageType<SceneCreateEntityReq> {
    constructor() {
        super("com.midnights.game.SceneCreateEntityReq", [
            { no: 1, name: "entity", kind: "message", T: () => CreateEntityInfo },
            { no: 10, name: "is_destroy_when_disconnect", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.CreateReason", CreateReason] }
        ]);
    }
    create(value?: PartialMessage<SceneCreateEntityReq>): SceneCreateEntityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneCreateEntityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneCreateEntityReq): SceneCreateEntityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CreateEntityInfo entity */ 1:
                    message.entity = CreateEntityInfo.internalBinaryRead(reader, reader.uint32(), options, message.entity);
                    break;
                case /* optional bool is_destroy_when_disconnect */ 10:
                    message.isDestroyWhenDisconnect = reader.bool();
                    break;
                case /* optional com.midnights.game.CreateReason reason */ 3:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneCreateEntityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.CreateEntityInfo entity = 1; */
        if (message.entity)
            CreateEntityInfo.internalBinaryWrite(message.entity, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_destroy_when_disconnect = 10; */
        if (message.isDestroyWhenDisconnect !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isDestroyWhenDisconnect);
        /* optional com.midnights.game.CreateReason reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneCreateEntityReq
 */
export const SceneCreateEntityReq = new SceneCreateEntityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneCreateEntityRsp$Type extends MessageType<SceneCreateEntityRsp> {
    constructor() {
        super("com.midnights.game.SceneCreateEntityRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "entity", kind: "message", T: () => CreateEntityInfo }
        ]);
    }
    create(value?: PartialMessage<SceneCreateEntityRsp>): SceneCreateEntityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneCreateEntityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneCreateEntityRsp): SceneCreateEntityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 1:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CreateEntityInfo entity */ 10:
                    message.entity = CreateEntityInfo.internalBinaryRead(reader, reader.uint32(), options, message.entity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneCreateEntityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CreateEntityInfo entity = 10; */
        if (message.entity)
            CreateEntityInfo.internalBinaryWrite(message.entity, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneCreateEntityRsp
 */
export const SceneCreateEntityRsp = new SceneCreateEntityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneDestroyEntityReq$Type extends MessageType<SceneDestroyEntityReq> {
    constructor() {
        super("com.midnights.game.SceneDestroyEntityReq", [
            { no: 7, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneDestroyEntityReq>): SceneDestroyEntityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneDestroyEntityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneDestroyEntityReq): SceneDestroyEntityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 7:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneDestroyEntityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 7; */
        if (message.entityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneDestroyEntityReq
 */
export const SceneDestroyEntityReq = new SceneDestroyEntityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneDestroyEntityRsp$Type extends MessageType<SceneDestroyEntityRsp> {
    constructor() {
        super("com.midnights.game.SceneDestroyEntityRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneDestroyEntityRsp>): SceneDestroyEntityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneDestroyEntityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneDestroyEntityRsp): SceneDestroyEntityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 7:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneDestroyEntityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 7; */
        if (message.entityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneDestroyEntityRsp
 */
export const SceneDestroyEntityRsp = new SceneDestroyEntityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneForceUnlockNotify$Type extends MessageType<SceneForceUnlockNotify> {
    constructor() {
        super("com.midnights.game.SceneForceUnlockNotify", [
            { no: 10, name: "is_add", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "force_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneForceUnlockNotify>): SceneForceUnlockNotify {
        const message = { forceIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneForceUnlockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneForceUnlockNotify): SceneForceUnlockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_add */ 10:
                    message.isAdd = reader.bool();
                    break;
                case /* repeated uint32 force_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.forceIdList.push(reader.uint32());
                    else
                        message.forceIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneForceUnlockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_add = 10; */
        if (message.isAdd !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isAdd);
        /* repeated uint32 force_id_list = 2; */
        if (message.forceIdList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.forceIdList.length; i++)
                writer.uint32(message.forceIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneForceUnlockNotify
 */
export const SceneForceUnlockNotify = new SceneForceUnlockNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneForceLockNotify$Type extends MessageType<SceneForceLockNotify> {
    constructor() {
        super("com.midnights.game.SceneForceLockNotify", [
            { no: 9, name: "force_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneForceLockNotify>): SceneForceLockNotify {
        const message = { forceIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneForceLockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneForceLockNotify): SceneForceLockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 force_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.forceIdList.push(reader.uint32());
                    else
                        message.forceIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneForceLockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 force_id_list = 9; */
        if (message.forceIdList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.forceIdList.length; i++)
                writer.uint32(message.forceIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneForceLockNotify
 */
export const SceneForceLockNotify = new SceneForceLockNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterWorldAreaReq$Type extends MessageType<EnterWorldAreaReq> {
    constructor() {
        super("com.midnights.game.EnterWorldAreaReq", [
            { no: 8, name: "area_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterWorldAreaReq>): EnterWorldAreaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterWorldAreaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterWorldAreaReq): EnterWorldAreaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_type */ 8:
                    message.areaType = reader.uint32();
                    break;
                case /* optional uint32 area_id */ 1:
                    message.areaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterWorldAreaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_type = 8; */
        if (message.areaType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.areaType);
        /* optional uint32 area_id = 1; */
        if (message.areaId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterWorldAreaReq
 */
export const EnterWorldAreaReq = new EnterWorldAreaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterWorldAreaRsp$Type extends MessageType<EnterWorldAreaRsp> {
    constructor() {
        super("com.midnights.game.EnterWorldAreaRsp", [
            { no: 1, name: "area_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterWorldAreaRsp>): EnterWorldAreaRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterWorldAreaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterWorldAreaRsp): EnterWorldAreaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_type */ 1:
                    message.areaType = reader.uint32();
                    break;
                case /* optional uint32 area_id */ 7:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterWorldAreaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_type = 1; */
        if (message.areaType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.areaType);
        /* optional uint32 area_id = 7; */
        if (message.areaId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterWorldAreaRsp
 */
export const EnterWorldAreaRsp = new EnterWorldAreaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityForceSyncReq$Type extends MessageType<EntityForceSyncReq> {
    constructor() {
        super("com.midnights.game.EntityForceSyncReq", [
            { no: 1, name: "room_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "motion_info", kind: "message", T: () => MotionInfo },
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityForceSyncReq>): EntityForceSyncReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityForceSyncReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityForceSyncReq): EntityForceSyncReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 room_id */ 1:
                    message.roomId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MotionInfo motion_info */ 11:
                    message.motionInfo = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.motionInfo);
                    break;
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 scene_time */ 12:
                    message.sceneTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityForceSyncReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 room_id = 1; */
        if (message.roomId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.roomId);
        /* optional com.midnights.game.MotionInfo motion_info = 11; */
        if (message.motionInfo)
            MotionInfo.internalBinaryWrite(message.motionInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        /* optional uint32 scene_time = 12; */
        if (message.sceneTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sceneTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityForceSyncReq
 */
export const EntityForceSyncReq = new EntityForceSyncReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityForceSyncRsp$Type extends MessageType<EntityForceSyncRsp> {
    constructor() {
        super("com.midnights.game.EntityForceSyncRsp", [
            { no: 14, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "fail_motion", kind: "message", T: () => MotionInfo },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityForceSyncRsp>): EntityForceSyncRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityForceSyncRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityForceSyncRsp): EntityForceSyncRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_time */ 14:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MotionInfo fail_motion */ 8:
                    message.failMotion = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.failMotion);
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityForceSyncRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_time = 14; */
        if (message.sceneTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.MotionInfo fail_motion = 8; */
        if (message.failMotion)
            MotionInfo.internalBinaryWrite(message.failMotion, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityForceSyncRsp
 */
export const EntityForceSyncRsp = new EntityForceSyncRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAreaExplorePointReq$Type extends MessageType<GetAreaExplorePointReq> {
    constructor() {
        super("com.midnights.game.GetAreaExplorePointReq", [
            { no: 14, name: "area_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAreaExplorePointReq>): GetAreaExplorePointReq {
        const message = { areaIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAreaExplorePointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAreaExplorePointReq): GetAreaExplorePointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 area_id_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.areaIdList.push(reader.uint32());
                    else
                        message.areaIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAreaExplorePointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 area_id_list = 14; */
        if (message.areaIdList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.areaIdList.length; i++)
                writer.uint32(message.areaIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAreaExplorePointReq
 */
export const GetAreaExplorePointReq = new GetAreaExplorePointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAreaExplorePointRsp$Type extends MessageType<GetAreaExplorePointRsp> {
    constructor() {
        super("com.midnights.game.GetAreaExplorePointRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "area_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "explore_point_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAreaExplorePointRsp>): GetAreaExplorePointRsp {
        const message = { areaIdList: [], explorePointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAreaExplorePointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAreaExplorePointRsp): GetAreaExplorePointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 area_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.areaIdList.push(reader.uint32());
                    else
                        message.areaIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 explore_point_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.explorePointList.push(reader.uint32());
                    else
                        message.explorePointList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAreaExplorePointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* repeated uint32 area_id_list = 11; */
        if (message.areaIdList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.areaIdList.length; i++)
                writer.uint32(message.areaIdList[i]);
            writer.join();
        }
        /* repeated uint32 explore_point_list = 4; */
        if (message.explorePointList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.explorePointList.length; i++)
                writer.uint32(message.explorePointList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAreaExplorePointRsp
 */
export const GetAreaExplorePointRsp = new GetAreaExplorePointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientTransmitReq$Type extends MessageType<ClientTransmitReq> {
    constructor() {
        super("com.midnights.game.ClientTransmitReq", [
            { no: 2, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.TransmitReason", TransmitReason] },
            { no: 1, name: "pos", kind: "message", T: () => Vector },
            { no: 9, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<ClientTransmitReq>): ClientTransmitReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientTransmitReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientTransmitReq): ClientTransmitReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 2:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional com.midnights.game.TransmitReason reason */ 14:
                    message.reason = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 1:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 9:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientTransmitReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 2; */
        if (message.sceneId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.sceneId);
        /* optional com.midnights.game.TransmitReason reason = 14; */
        if (message.reason !== undefined)
            writer.tag(14, WireType.Varint).int32(message.reason);
        /* optional com.midnights.game.Vector pos = 1; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 9; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientTransmitReq
 */
export const ClientTransmitReq = new ClientTransmitReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientTransmitRsp$Type extends MessageType<ClientTransmitRsp> {
    constructor() {
        super("com.midnights.game.ClientTransmitRsp", [
            { no: 3, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.TransmitReason", TransmitReason] },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientTransmitRsp>): ClientTransmitRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientTransmitRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientTransmitRsp): ClientTransmitRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TransmitReason reason */ 3:
                    message.reason = reader.int32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientTransmitRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TransmitReason reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.reason);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientTransmitRsp
 */
export const ClientTransmitRsp = new ClientTransmitRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterSceneWeatherAreaNotify$Type extends MessageType<EnterSceneWeatherAreaNotify> {
    constructor() {
        super("com.midnights.game.EnterSceneWeatherAreaNotify", [
            { no: 13, name: "weather_gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterSceneWeatherAreaNotify>): EnterSceneWeatherAreaNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterSceneWeatherAreaNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterSceneWeatherAreaNotify): EnterSceneWeatherAreaNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weather_gadget_id */ 13:
                    message.weatherGadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterSceneWeatherAreaNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weather_gadget_id = 13; */
        if (message.weatherGadgetId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.weatherGadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterSceneWeatherAreaNotify
 */
export const EnterSceneWeatherAreaNotify = new EnterSceneWeatherAreaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExitSceneWeatherAreaNotify$Type extends MessageType<ExitSceneWeatherAreaNotify> {
    constructor() {
        super("com.midnights.game.ExitSceneWeatherAreaNotify", [
            { no: 2, name: "weather_gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExitSceneWeatherAreaNotify>): ExitSceneWeatherAreaNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExitSceneWeatherAreaNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExitSceneWeatherAreaNotify): ExitSceneWeatherAreaNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weather_gadget_id */ 2:
                    message.weatherGadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExitSceneWeatherAreaNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weather_gadget_id = 2; */
        if (message.weatherGadgetId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.weatherGadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExitSceneWeatherAreaNotify
 */
export const ExitSceneWeatherAreaNotify = new ExitSceneWeatherAreaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneAreaWeatherNotify$Type extends MessageType<SceneAreaWeatherNotify> {
    constructor() {
        super("com.midnights.game.SceneAreaWeatherNotify", [
            { no: 1, name: "weather_area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "weather_gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "climate_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "trans_duration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "weather_value_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<SceneAreaWeatherNotify>): SceneAreaWeatherNotify {
        const message = { weatherValueMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneAreaWeatherNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneAreaWeatherNotify): SceneAreaWeatherNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weather_area_id */ 1:
                    message.weatherAreaId = reader.uint32();
                    break;
                case /* optional uint32 weather_gadget_id */ 9:
                    message.weatherGadgetId = reader.uint32();
                    break;
                case /* optional uint32 climate_type */ 14:
                    message.climateType = reader.uint32();
                    break;
                case /* optional float trans_duration */ 15:
                    message.transDuration = reader.float();
                    break;
                case /* map<uint32, string> weather_value_map */ 10:
                    this.binaryReadMap10(message.weatherValueMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: SceneAreaWeatherNotify["weatherValueMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneAreaWeatherNotify["weatherValueMap"] | undefined, val: SceneAreaWeatherNotify["weatherValueMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneAreaWeatherNotify.weather_value_map");
            }
        }
        map[key ?? 0] = val ?? "";
    }
    internalBinaryWrite(message: SceneAreaWeatherNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weather_area_id = 1; */
        if (message.weatherAreaId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.weatherAreaId);
        /* optional uint32 weather_gadget_id = 9; */
        if (message.weatherGadgetId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.weatherGadgetId);
        /* optional uint32 climate_type = 14; */
        if (message.climateType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.climateType);
        /* optional float trans_duration = 15; */
        if (message.transDuration !== undefined)
            writer.tag(15, WireType.Bit32).float(message.transDuration);
        /* map<uint32, string> weather_value_map = 10; */
        for (let k of Object.keys(message.weatherValueMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.LengthDelimited).string(message.weatherValueMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneAreaWeatherNotify
 */
export const SceneAreaWeatherNotify = new SceneAreaWeatherNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerInfo$Type extends MessageType<ScenePlayerInfo> {
    constructor() {
        super("com.midnights.game.ScenePlayerInfo", [
            { no: 10, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "peer_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "online_player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 2, name: "is_connected", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerInfo>): ScenePlayerInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerInfo): ScenePlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 10:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 peer_id */ 6:
                    message.peerId = reader.uint32();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo online_player_info */ 13:
                    message.onlinePlayerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.onlinePlayerInfo);
                    break;
                case /* optional bool is_connected */ 2:
                    message.isConnected = reader.bool();
                    break;
                case /* optional string name */ 15:
                    message.name = reader.string();
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 10; */
        if (message.sceneId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 peer_id = 6; */
        if (message.peerId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.peerId);
        /* optional com.midnights.game.OnlinePlayerInfo online_player_info = 13; */
        if (message.onlinePlayerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.onlinePlayerInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_connected = 2; */
        if (message.isConnected !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isConnected);
        /* optional string name = 15; */
        if (message.name !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.name);
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayerInfo
 */
export const ScenePlayerInfo = new ScenePlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerInfoNotify$Type extends MessageType<ScenePlayerInfoNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayerInfoNotify", [
            { no: 5, name: "player_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerInfoNotify>): ScenePlayerInfoNotify {
        const message = { playerInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerInfoNotify): ScenePlayerInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ScenePlayerInfo player_info_list */ 5:
                    message.playerInfoList.push(ScenePlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ScenePlayerInfo player_info_list = 5; */
        for (let i = 0; i < message.playerInfoList.length; i++)
            ScenePlayerInfo.internalBinaryWrite(message.playerInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayerInfoNotify
 */
export const ScenePlayerInfoNotify = new ScenePlayerInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLocationInfo$Type extends MessageType<PlayerLocationInfo> {
    constructor() {
        super("com.midnights.game.PlayerLocationInfo", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "pos", kind: "message", T: () => Vector },
            { no: 13, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<PlayerLocationInfo>): PlayerLocationInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLocationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLocationInfo): PlayerLocationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 3:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 13:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLocationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* optional com.midnights.game.Vector pos = 3; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 13; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLocationInfo
 */
export const PlayerLocationInfo = new PlayerLocationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerWorldLocationInfo$Type extends MessageType<PlayerWorldLocationInfo> {
    constructor() {
        super("com.midnights.game.PlayerWorldLocationInfo", [
            { no: 1, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "player_loc", kind: "message", T: () => PlayerLocationInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerWorldLocationInfo>): PlayerWorldLocationInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerWorldLocationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerWorldLocationInfo): PlayerWorldLocationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 1:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlayerLocationInfo player_loc */ 12:
                    message.playerLoc = PlayerLocationInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerLoc);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerWorldLocationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 1; */
        if (message.sceneId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.sceneId);
        /* optional com.midnights.game.PlayerLocationInfo player_loc = 12; */
        if (message.playerLoc)
            PlayerLocationInfo.internalBinaryWrite(message.playerLoc, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerWorldLocationInfo
 */
export const PlayerWorldLocationInfo = new PlayerWorldLocationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerLocationNotify$Type extends MessageType<WorldPlayerLocationNotify> {
    constructor() {
        super("com.midnights.game.WorldPlayerLocationNotify", [
            { no: 8, name: "player_world_loc_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerWorldLocationInfo },
            { no: 15, name: "player_loc_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerLocationInfo }
        ]);
    }
    create(value?: PartialMessage<WorldPlayerLocationNotify>): WorldPlayerLocationNotify {
        const message = { playerWorldLocList: [], playerLocList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerLocationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerLocationNotify): WorldPlayerLocationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerWorldLocationInfo player_world_loc_list */ 8:
                    message.playerWorldLocList.push(PlayerWorldLocationInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.PlayerLocationInfo player_loc_list */ 15:
                    message.playerLocList.push(PlayerLocationInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPlayerLocationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerWorldLocationInfo player_world_loc_list = 8; */
        for (let i = 0; i < message.playerWorldLocList.length; i++)
            PlayerWorldLocationInfo.internalBinaryWrite(message.playerWorldLocList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.PlayerLocationInfo player_loc_list = 15; */
        for (let i = 0; i < message.playerLocList.length; i++)
            PlayerLocationInfo.internalBinaryWrite(message.playerLocList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerLocationNotify
 */
export const WorldPlayerLocationNotify = new WorldPlayerLocationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeginCameraSceneLookNotify$Type extends MessageType<BeginCameraSceneLookNotify> {
    constructor() {
        super("com.midnights.game.BeginCameraSceneLookNotify", [
            { no: 1154, name: "blend_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "custom_radius", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "is_set_screenXY", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "look_pos", kind: "message", T: () => Vector },
            { no: 11, name: "is_recover_keep_current", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1375, name: "is_abs_follow_pos", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "keep_rot_type", kind: "enum", opt: true, T: () => ["com.midnights.game.BeginCameraSceneLookNotify.KeepRotType", BeginCameraSceneLookNotify_KeepRotType] },
            { no: 9, name: "is_change_play_mode", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1103, name: "disable_protect", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "screen_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "is_set_follow_pos", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_force", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1758, name: "blend_duration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 1327, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "screen_x", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "is_force_walk", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "other_params", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "follow_pos", kind: "message", T: () => Vector },
            { no: 2, name: "is_allow_input", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "duration", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<BeginCameraSceneLookNotify>): BeginCameraSceneLookNotify {
        const message = { otherParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeginCameraSceneLookNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeginCameraSceneLookNotify): BeginCameraSceneLookNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 blend_type */ 1154:
                    message.blendType = reader.uint32();
                    break;
                case /* optional float custom_radius */ 7:
                    message.customRadius = reader.float();
                    break;
                case /* optional bool is_set_screenXY */ 5:
                    message.isSetScreenXY = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector look_pos */ 4:
                    message.lookPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.lookPos);
                    break;
                case /* optional bool is_recover_keep_current */ 11:
                    message.isRecoverKeepCurrent = reader.bool();
                    break;
                case /* optional bool is_abs_follow_pos */ 1375:
                    message.isAbsFollowPos = reader.bool();
                    break;
                case /* optional com.midnights.game.BeginCameraSceneLookNotify.KeepRotType keep_rot_type */ 6:
                    message.keepRotType = reader.int32();
                    break;
                case /* optional bool is_change_play_mode */ 9:
                    message.isChangePlayMode = reader.bool();
                    break;
                case /* optional uint32 disable_protect */ 1103:
                    message.disableProtect = reader.uint32();
                    break;
                case /* optional float screen_y */ 15:
                    message.screenY = reader.float();
                    break;
                case /* optional bool is_set_follow_pos */ 13:
                    message.isSetFollowPos = reader.bool();
                    break;
                case /* optional bool is_force */ 12:
                    message.isForce = reader.bool();
                    break;
                case /* optional float blend_duration */ 1758:
                    message.blendDuration = reader.float();
                    break;
                case /* optional uint32 entity_id */ 1327:
                    message.entityId = reader.uint32();
                    break;
                case /* optional float screen_x */ 3:
                    message.screenX = reader.float();
                    break;
                case /* optional bool is_force_walk */ 10:
                    message.isForceWalk = reader.bool();
                    break;
                case /* repeated string other_params */ 1:
                    message.otherParams.push(reader.string());
                    break;
                case /* optional com.midnights.game.Vector follow_pos */ 8:
                    message.followPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.followPos);
                    break;
                case /* optional bool is_allow_input */ 2:
                    message.isAllowInput = reader.bool();
                    break;
                case /* optional float duration */ 14:
                    message.duration = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeginCameraSceneLookNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 blend_type = 1154; */
        if (message.blendType !== undefined)
            writer.tag(1154, WireType.Varint).uint32(message.blendType);
        /* optional float custom_radius = 7; */
        if (message.customRadius !== undefined)
            writer.tag(7, WireType.Bit32).float(message.customRadius);
        /* optional bool is_set_screenXY = 5; */
        if (message.isSetScreenXY !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSetScreenXY);
        /* optional com.midnights.game.Vector look_pos = 4; */
        if (message.lookPos)
            Vector.internalBinaryWrite(message.lookPos, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_recover_keep_current = 11; */
        if (message.isRecoverKeepCurrent !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isRecoverKeepCurrent);
        /* optional bool is_abs_follow_pos = 1375; */
        if (message.isAbsFollowPos !== undefined)
            writer.tag(1375, WireType.Varint).bool(message.isAbsFollowPos);
        /* optional com.midnights.game.BeginCameraSceneLookNotify.KeepRotType keep_rot_type = 6; */
        if (message.keepRotType !== undefined)
            writer.tag(6, WireType.Varint).int32(message.keepRotType);
        /* optional bool is_change_play_mode = 9; */
        if (message.isChangePlayMode !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isChangePlayMode);
        /* optional uint32 disable_protect = 1103; */
        if (message.disableProtect !== undefined)
            writer.tag(1103, WireType.Varint).uint32(message.disableProtect);
        /* optional float screen_y = 15; */
        if (message.screenY !== undefined)
            writer.tag(15, WireType.Bit32).float(message.screenY);
        /* optional bool is_set_follow_pos = 13; */
        if (message.isSetFollowPos !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isSetFollowPos);
        /* optional bool is_force = 12; */
        if (message.isForce !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isForce);
        /* optional float blend_duration = 1758; */
        if (message.blendDuration !== undefined)
            writer.tag(1758, WireType.Bit32).float(message.blendDuration);
        /* optional uint32 entity_id = 1327; */
        if (message.entityId !== undefined)
            writer.tag(1327, WireType.Varint).uint32(message.entityId);
        /* optional float screen_x = 3; */
        if (message.screenX !== undefined)
            writer.tag(3, WireType.Bit32).float(message.screenX);
        /* optional bool is_force_walk = 10; */
        if (message.isForceWalk !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isForceWalk);
        /* repeated string other_params = 1; */
        for (let i = 0; i < message.otherParams.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.otherParams[i]);
        /* optional com.midnights.game.Vector follow_pos = 8; */
        if (message.followPos)
            Vector.internalBinaryWrite(message.followPos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_allow_input = 2; */
        if (message.isAllowInput !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isAllowInput);
        /* optional float duration = 14; */
        if (message.duration !== undefined)
            writer.tag(14, WireType.Bit32).float(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BeginCameraSceneLookNotify
 */
export const BeginCameraSceneLookNotify = new BeginCameraSceneLookNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EndCameraSceneLookNotify$Type extends MessageType<EndCameraSceneLookNotify> {
    constructor() {
        super("com.midnights.game.EndCameraSceneLookNotify", []);
    }
    create(value?: PartialMessage<EndCameraSceneLookNotify>): EndCameraSceneLookNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EndCameraSceneLookNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EndCameraSceneLookNotify): EndCameraSceneLookNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EndCameraSceneLookNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EndCameraSceneLookNotify
 */
export const EndCameraSceneLookNotify = new EndCameraSceneLookNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkEntityInMinMapNotify$Type extends MessageType<MarkEntityInMinMapNotify> {
    constructor() {
        super("com.midnights.game.MarkEntityInMinMapNotify", [
            { no: 4, name: "position", kind: "message", T: () => Vector },
            { no: 7, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkEntityInMinMapNotify>): MarkEntityInMinMapNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkEntityInMinMapNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkEntityInMinMapNotify): MarkEntityInMinMapNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector position */ 4:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* optional uint32 monster_id */ 7:
                    message.monsterId = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 14:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkEntityInMinMapNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector position = 4; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 monster_id = 7; */
        if (message.monsterId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.monsterId);
        /* optional uint32 entity_id = 14; */
        if (message.entityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MarkEntityInMinMapNotify
 */
export const MarkEntityInMinMapNotify = new MarkEntityInMinMapNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnmarkEntityInMinMapNotify$Type extends MessageType<UnmarkEntityInMinMapNotify> {
    constructor() {
        super("com.midnights.game.UnmarkEntityInMinMapNotify", [
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnmarkEntityInMinMapNotify>): UnmarkEntityInMinMapNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnmarkEntityInMinMapNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnmarkEntityInMinMapNotify): UnmarkEntityInMinMapNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnmarkEntityInMinMapNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnmarkEntityInMinMapNotify
 */
export const UnmarkEntityInMinMapNotify = new UnmarkEntityInMinMapNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteGroupTriggerReq$Type extends MessageType<ExecuteGroupTriggerReq> {
    constructor() {
        super("com.midnights.game.ExecuteGroupTriggerReq", [
            { no: 15, name: "source_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "param2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "source_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "param3", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "param1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteGroupTriggerReq>): ExecuteGroupTriggerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExecuteGroupTriggerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteGroupTriggerReq): ExecuteGroupTriggerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string source_name */ 15:
                    message.sourceName = reader.string();
                    break;
                case /* optional uint32 target_entity_id */ 12:
                    message.targetEntityId = reader.uint32();
                    break;
                case /* optional int32 param2 */ 8:
                    message.param2 = reader.int32();
                    break;
                case /* optional uint32 source_entity_id */ 4:
                    message.sourceEntityId = reader.uint32();
                    break;
                case /* optional int32 param3 */ 10:
                    message.param3 = reader.int32();
                    break;
                case /* optional int32 param1 */ 9:
                    message.param1 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteGroupTriggerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string source_name = 15; */
        if (message.sourceName !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.sourceName);
        /* optional uint32 target_entity_id = 12; */
        if (message.targetEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.targetEntityId);
        /* optional int32 param2 = 8; */
        if (message.param2 !== undefined)
            writer.tag(8, WireType.Varint).int32(message.param2);
        /* optional uint32 source_entity_id = 4; */
        if (message.sourceEntityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sourceEntityId);
        /* optional int32 param3 = 10; */
        if (message.param3 !== undefined)
            writer.tag(10, WireType.Varint).int32(message.param3);
        /* optional int32 param1 = 9; */
        if (message.param1 !== undefined)
            writer.tag(9, WireType.Varint).int32(message.param1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExecuteGroupTriggerReq
 */
export const ExecuteGroupTriggerReq = new ExecuteGroupTriggerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteGroupTriggerRsp$Type extends MessageType<ExecuteGroupTriggerRsp> {
    constructor() {
        super("com.midnights.game.ExecuteGroupTriggerRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteGroupTriggerRsp>): ExecuteGroupTriggerRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExecuteGroupTriggerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteGroupTriggerRsp): ExecuteGroupTriggerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteGroupTriggerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExecuteGroupTriggerRsp
 */
export const ExecuteGroupTriggerRsp = new ExecuteGroupTriggerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LevelupCityReq$Type extends MessageType<LevelupCityReq> {
    constructor() {
        super("com.midnights.game.LevelupCityReq", [
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LevelupCityReq>): LevelupCityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LevelupCityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LevelupCityReq): LevelupCityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 area_id */ 3:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 item_num */ 14:
                    message.itemNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LevelupCityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 area_id = 3; */
        if (message.areaId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.areaId);
        /* optional uint32 item_num = 14; */
        if (message.itemNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.itemNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LevelupCityReq
 */
export const LevelupCityReq = new LevelupCityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LevelupCityRsp$Type extends MessageType<LevelupCityRsp> {
    constructor() {
        super("com.midnights.game.LevelupCityRsp", [
            { no: 9, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "city_info", kind: "message", T: () => CityInfo }
        ]);
    }
    create(value?: PartialMessage<LevelupCityRsp>): LevelupCityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LevelupCityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LevelupCityRsp): LevelupCityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 9:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CityInfo city_info */ 6:
                    message.cityInfo = CityInfo.internalBinaryRead(reader, reader.uint32(), options, message.cityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LevelupCityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 9; */
        if (message.areaId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        /* optional com.midnights.game.CityInfo city_info = 6; */
        if (message.cityInfo)
            CityInfo.internalBinaryWrite(message.cityInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LevelupCityRsp
 */
export const LevelupCityRsp = new LevelupCityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoutePointChangeInfo$Type extends MessageType<RoutePointChangeInfo> {
    constructor() {
        super("com.midnights.game.RoutePointChangeInfo", [
            { no: 6, name: "wait_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "target_velocity", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "point_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoutePointChangeInfo>): RoutePointChangeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoutePointChangeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoutePointChangeInfo): RoutePointChangeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float wait_time */ 6:
                    message.waitTime = reader.float();
                    break;
                case /* optional float target_velocity */ 14:
                    message.targetVelocity = reader.float();
                    break;
                case /* optional uint32 point_index */ 11:
                    message.pointIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoutePointChangeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float wait_time = 6; */
        if (message.waitTime !== undefined)
            writer.tag(6, WireType.Bit32).float(message.waitTime);
        /* optional float target_velocity = 14; */
        if (message.targetVelocity !== undefined)
            writer.tag(14, WireType.Bit32).float(message.targetVelocity);
        /* optional uint32 point_index = 11; */
        if (message.pointIndex !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.pointIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoutePointChangeInfo
 */
export const RoutePointChangeInfo = new RoutePointChangeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneRouteChangeInfo$Type extends MessageType<SceneRouteChangeInfo> {
    constructor() {
        super("com.midnights.game.SceneRouteChangeInfo", [
            { no: 12, name: "is_forward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "route_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoutePointChangeInfo }
        ]);
    }
    create(value?: PartialMessage<SceneRouteChangeInfo>): SceneRouteChangeInfo {
        const message = { pointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneRouteChangeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneRouteChangeInfo): SceneRouteChangeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_forward */ 12:
                    message.isForward = reader.bool();
                    break;
                case /* optional uint32 route_id */ 15:
                    message.routeId = reader.uint32();
                    break;
                case /* optional uint32 type */ 4:
                    message.type = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RoutePointChangeInfo point_list */ 1:
                    message.pointList.push(RoutePointChangeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneRouteChangeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_forward = 12; */
        if (message.isForward !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isForward);
        /* optional uint32 route_id = 15; */
        if (message.routeId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.routeId);
        /* optional uint32 type = 4; */
        if (message.type !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.type);
        /* repeated com.midnights.game.RoutePointChangeInfo point_list = 1; */
        for (let i = 0; i < message.pointList.length; i++)
            RoutePointChangeInfo.internalBinaryWrite(message.pointList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneRouteChangeInfo
 */
export const SceneRouteChangeInfo = new SceneRouteChangeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneRouteChangeNotify$Type extends MessageType<SceneRouteChangeNotify> {
    constructor() {
        super("com.midnights.game.SceneRouteChangeNotify", [
            { no: 12, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "route_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneRouteChangeInfo }
        ]);
    }
    create(value?: PartialMessage<SceneRouteChangeNotify>): SceneRouteChangeNotify {
        const message = { routeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneRouteChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneRouteChangeNotify): SceneRouteChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 12:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 scene_time */ 11:
                    message.sceneTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SceneRouteChangeInfo route_list */ 2:
                    message.routeList.push(SceneRouteChangeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneRouteChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 12; */
        if (message.sceneId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 scene_time = 11; */
        if (message.sceneTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sceneTime);
        /* repeated com.midnights.game.SceneRouteChangeInfo route_list = 2; */
        for (let i = 0; i < message.routeList.length; i++)
            SceneRouteChangeInfo.internalBinaryWrite(message.routeList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneRouteChangeNotify
 */
export const SceneRouteChangeNotify = new SceneRouteChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlatformStartRouteNotify$Type extends MessageType<PlatformStartRouteNotify> {
    constructor() {
        super("com.midnights.game.PlatformStartRouteNotify", [
            { no: 15, name: "platform", kind: "message", T: () => PlatformInfo },
            { no: 12, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlatformStartRouteNotify>): PlatformStartRouteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlatformStartRouteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlatformStartRouteNotify): PlatformStartRouteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlatformInfo platform */ 15:
                    message.platform = PlatformInfo.internalBinaryRead(reader, reader.uint32(), options, message.platform);
                    break;
                case /* optional uint32 scene_time */ 12:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlatformStartRouteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlatformInfo platform = 15; */
        if (message.platform)
            PlatformInfo.internalBinaryWrite(message.platform, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_time = 12; */
        if (message.sceneTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlatformStartRouteNotify
 */
export const PlatformStartRouteNotify = new PlatformStartRouteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlatformStopRouteNotify$Type extends MessageType<PlatformStopRouteNotify> {
    constructor() {
        super("com.midnights.game.PlatformStopRouteNotify", [
            { no: 9, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "platform", kind: "message", T: () => PlatformInfo }
        ]);
    }
    create(value?: PartialMessage<PlatformStopRouteNotify>): PlatformStopRouteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlatformStopRouteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlatformStopRouteNotify): PlatformStopRouteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_time */ 9:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 12:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlatformInfo platform */ 8:
                    message.platform = PlatformInfo.internalBinaryRead(reader, reader.uint32(), options, message.platform);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlatformStopRouteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_time = 9; */
        if (message.sceneTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneTime);
        /* optional uint32 entity_id = 12; */
        if (message.entityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.PlatformInfo platform = 8; */
        if (message.platform)
            PlatformInfo.internalBinaryWrite(message.platform, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlatformStopRouteNotify
 */
export const PlatformStopRouteNotify = new PlatformStopRouteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlatformChangeRouteNotify$Type extends MessageType<PlatformChangeRouteNotify> {
    constructor() {
        super("com.midnights.game.PlatformChangeRouteNotify", [
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "platform", kind: "message", T: () => PlatformInfo },
            { no: 8, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlatformChangeRouteNotify>): PlatformChangeRouteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlatformChangeRouteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlatformChangeRouteNotify): PlatformChangeRouteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlatformInfo platform */ 1:
                    message.platform = PlatformInfo.internalBinaryRead(reader, reader.uint32(), options, message.platform);
                    break;
                case /* optional uint32 scene_time */ 8:
                    message.sceneTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlatformChangeRouteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.PlatformInfo platform = 1; */
        if (message.platform)
            PlatformInfo.internalBinaryWrite(message.platform, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_time = 8; */
        if (message.sceneTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.sceneTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlatformChangeRouteNotify
 */
export const PlatformChangeRouteNotify = new PlatformChangeRouteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerSoundNotify$Type extends MessageType<ScenePlayerSoundNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayerSoundNotify", [
            { no: 4, name: "sound_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "play_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ScenePlayerSoundNotify.PlaySoundType", ScenePlayerSoundNotify_PlaySoundType] },
            { no: 3, name: "play_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerSoundNotify>): ScenePlayerSoundNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerSoundNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerSoundNotify): ScenePlayerSoundNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string sound_name */ 4:
                    message.soundName = reader.string();
                    break;
                case /* optional com.midnights.game.ScenePlayerSoundNotify.PlaySoundType play_type */ 8:
                    message.playType = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector play_pos */ 3:
                    message.playPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.playPos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerSoundNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string sound_name = 4; */
        if (message.soundName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.soundName);
        /* optional com.midnights.game.ScenePlayerSoundNotify.PlaySoundType play_type = 8; */
        if (message.playType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.playType);
        /* optional com.midnights.game.Vector play_pos = 3; */
        if (message.playPos)
            Vector.internalBinaryWrite(message.playPos, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayerSoundNotify
 */
export const ScenePlayerSoundNotify = new ScenePlayerSoundNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PersonalSceneJumpReq$Type extends MessageType<PersonalSceneJumpReq> {
    constructor() {
        super("com.midnights.game.PersonalSceneJumpReq", [
            { no: 4, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PersonalSceneJumpReq>): PersonalSceneJumpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PersonalSceneJumpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PersonalSceneJumpReq): PersonalSceneJumpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 4:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PersonalSceneJumpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 4; */
        if (message.pointId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PersonalSceneJumpReq
 */
export const PersonalSceneJumpReq = new PersonalSceneJumpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PersonalSceneJumpRsp$Type extends MessageType<PersonalSceneJumpRsp> {
    constructor() {
        super("com.midnights.game.PersonalSceneJumpRsp", [
            { no: 5, name: "dest_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "dest_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<PersonalSceneJumpRsp>): PersonalSceneJumpRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PersonalSceneJumpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PersonalSceneJumpRsp): PersonalSceneJumpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dest_scene_id */ 5:
                    message.destSceneId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector dest_pos */ 11:
                    message.destPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.destPos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PersonalSceneJumpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dest_scene_id = 5; */
        if (message.destSceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.destSceneId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.Vector dest_pos = 11; */
        if (message.destPos)
            Vector.internalBinaryWrite(message.destPos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PersonalSceneJumpRsp
 */
export const PersonalSceneJumpRsp = new PersonalSceneJumpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SealBattleBeginNotify$Type extends MessageType<SealBattleBeginNotify> {
    constructor() {
        super("com.midnights.game.SealBattleBeginNotify", [
            { no: 9, name: "seal_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "seal_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "seal_radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "battle_type", kind: "enum", opt: true, T: () => ["com.midnights.game.SealBattleType", SealBattleType] }
        ]);
    }
    create(value?: PartialMessage<SealBattleBeginNotify>): SealBattleBeginNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SealBattleBeginNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SealBattleBeginNotify): SealBattleBeginNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seal_max_progress */ 9:
                    message.sealMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 seal_entity_id */ 1:
                    message.sealEntityId = reader.uint32();
                    break;
                case /* optional uint32 seal_radius */ 12:
                    message.sealRadius = reader.uint32();
                    break;
                case /* optional com.midnights.game.SealBattleType battle_type */ 14:
                    message.battleType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SealBattleBeginNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seal_max_progress = 9; */
        if (message.sealMaxProgress !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sealMaxProgress);
        /* optional uint32 seal_entity_id = 1; */
        if (message.sealEntityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.sealEntityId);
        /* optional uint32 seal_radius = 12; */
        if (message.sealRadius !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sealRadius);
        /* optional com.midnights.game.SealBattleType battle_type = 14; */
        if (message.battleType !== undefined)
            writer.tag(14, WireType.Varint).int32(message.battleType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SealBattleBeginNotify
 */
export const SealBattleBeginNotify = new SealBattleBeginNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SealBattleEndNotify$Type extends MessageType<SealBattleEndNotify> {
    constructor() {
        super("com.midnights.game.SealBattleEndNotify", [
            { no: 4, name: "is_win", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "seal_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SealBattleEndNotify>): SealBattleEndNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SealBattleEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SealBattleEndNotify): SealBattleEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_win */ 4:
                    message.isWin = reader.bool();
                    break;
                case /* optional uint32 seal_entity_id */ 15:
                    message.sealEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SealBattleEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_win = 4; */
        if (message.isWin !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isWin);
        /* optional uint32 seal_entity_id = 15; */
        if (message.sealEntityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sealEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SealBattleEndNotify
 */
export const SealBattleEndNotify = new SealBattleEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SealBattleProgressNotify$Type extends MessageType<SealBattleProgressNotify> {
    constructor() {
        super("com.midnights.game.SealBattleProgressNotify", [
            { no: 9, name: "seal_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "seal_radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SealBattleProgressNotify>): SealBattleProgressNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SealBattleProgressNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SealBattleProgressNotify): SealBattleProgressNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seal_entity_id */ 9:
                    message.sealEntityId = reader.uint32();
                    break;
                case /* optional uint32 max_progress */ 10:
                    message.maxProgress = reader.uint32();
                    break;
                case /* optional uint32 seal_radius */ 4:
                    message.sealRadius = reader.uint32();
                    break;
                case /* optional uint32 progress */ 5:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 2:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SealBattleProgressNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seal_entity_id = 9; */
        if (message.sealEntityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sealEntityId);
        /* optional uint32 max_progress = 10; */
        if (message.maxProgress !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.maxProgress);
        /* optional uint32 seal_radius = 4; */
        if (message.sealRadius !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sealRadius);
        /* optional uint32 progress = 5; */
        if (message.progress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.progress);
        /* optional uint32 end_time = 2; */
        if (message.endTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SealBattleProgressNotify
 */
export const SealBattleProgressNotify = new SealBattleProgressNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientPauseNotify$Type extends MessageType<ClientPauseNotify> {
    constructor() {
        super("com.midnights.game.ClientPauseNotify", [
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ClientPauseNotify>): ClientPauseNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientPauseNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPauseNotify): ClientPauseNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPauseNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientPauseNotify
 */
export const ClientPauseNotify = new ClientPauseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarEnterSceneInfo$Type extends MessageType<AvatarEnterSceneInfo> {
    constructor() {
        super("com.midnights.game.AvatarEnterSceneInfo", [
            { no: 14, name: "server_buff_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServerBuff },
            { no: 7, name: "avatar_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "weapon_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 10, name: "weapon_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "avatar_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 13, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarEnterSceneInfo>): AvatarEnterSceneInfo {
        const message = { serverBuffList: [], buffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarEnterSceneInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarEnterSceneInfo): AvatarEnterSceneInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ServerBuff server_buff_list */ 14:
                    message.serverBuffList.push(ServerBuff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 avatar_entity_id */ 7:
                    message.avatarEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilitySyncStateInfo weapon_ability_info */ 12:
                    message.weaponAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.weaponAbilityInfo);
                    break;
                case /* optional uint32 weapon_entity_id */ 10:
                    message.weaponEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilitySyncStateInfo avatar_ability_info */ 2:
                    message.avatarAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarAbilityInfo);
                    break;
                case /* optional uint64 avatar_guid */ 13:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 weapon_guid */ 9:
                    message.weaponGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint32 buff_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarEnterSceneInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ServerBuff server_buff_list = 14; */
        for (let i = 0; i < message.serverBuffList.length; i++)
            ServerBuff.internalBinaryWrite(message.serverBuffList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 avatar_entity_id = 7; */
        if (message.avatarEntityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.avatarEntityId);
        /* optional com.midnights.game.AbilitySyncStateInfo weapon_ability_info = 12; */
        if (message.weaponAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.weaponAbilityInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 weapon_entity_id = 10; */
        if (message.weaponEntityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.weaponEntityId);
        /* optional com.midnights.game.AbilitySyncStateInfo avatar_ability_info = 2; */
        if (message.avatarAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.avatarAbilityInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 avatar_guid = 13; */
        if (message.avatarGuid !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.avatarGuid);
        /* optional uint64 weapon_guid = 9; */
        if (message.weaponGuid !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.weaponGuid);
        /* repeated uint32 buff_id_list = 5; */
        if (message.buffIdList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.buffIdList.length; i++)
                writer.uint32(message.buffIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AvatarEnterSceneInfo
 */
export const AvatarEnterSceneInfo = new AvatarEnterSceneInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TeamEnterSceneInfo$Type extends MessageType<TeamEnterSceneInfo> {
    constructor() {
        super("com.midnights.game.TeamEnterSceneInfo", [
            { no: 7, name: "ability_control_block", kind: "message", T: () => AbilityControlBlock },
            { no: 10, name: "team_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 15, name: "team_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TeamEnterSceneInfo>): TeamEnterSceneInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TeamEnterSceneInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TeamEnterSceneInfo): TeamEnterSceneInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityControlBlock ability_control_block */ 7:
                    message.abilityControlBlock = AbilityControlBlock.internalBinaryRead(reader, reader.uint32(), options, message.abilityControlBlock);
                    break;
                case /* optional com.midnights.game.AbilitySyncStateInfo team_ability_info */ 10:
                    message.teamAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.teamAbilityInfo);
                    break;
                case /* optional uint32 team_entity_id */ 15:
                    message.teamEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TeamEnterSceneInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityControlBlock ability_control_block = 7; */
        if (message.abilityControlBlock)
            AbilityControlBlock.internalBinaryWrite(message.abilityControlBlock, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilitySyncStateInfo team_ability_info = 10; */
        if (message.teamAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.teamAbilityInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 team_entity_id = 15; */
        if (message.teamEntityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.teamEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TeamEnterSceneInfo
 */
export const TeamEnterSceneInfo = new TeamEnterSceneInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MPLevelEntityInfo$Type extends MessageType<MPLevelEntityInfo> {
    constructor() {
        super("com.midnights.game.MPLevelEntityInfo", [
            { no: 2, name: "ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "authority_peer_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MPLevelEntityInfo>): MPLevelEntityInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MPLevelEntityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MPLevelEntityInfo): MPLevelEntityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilitySyncStateInfo ability_info */ 2:
                    message.abilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.abilityInfo);
                    break;
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 authority_peer_id */ 3:
                    message.authorityPeerId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MPLevelEntityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilitySyncStateInfo ability_info = 2; */
        if (message.abilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.abilityInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        /* optional uint32 authority_peer_id = 3; */
        if (message.authorityPeerId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.authorityPeerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MPLevelEntityInfo
 */
export const MPLevelEntityInfo = new MPLevelEntityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEnterSceneInfoNotify$Type extends MessageType<PlayerEnterSceneInfoNotify> {
    constructor() {
        super("com.midnights.game.PlayerEnterSceneInfoNotify", [
            { no: 8, name: "team_enter_info", kind: "message", T: () => TeamEnterSceneInfo },
            { no: 12, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "avatar_enter_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AvatarEnterSceneInfo },
            { no: 6, name: "cur_avatar_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mp_level_entity_info", kind: "message", T: () => MPLevelEntityInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerEnterSceneInfoNotify>): PlayerEnterSceneInfoNotify {
        const message = { avatarEnterInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEnterSceneInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEnterSceneInfoNotify): PlayerEnterSceneInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TeamEnterSceneInfo team_enter_info */ 8:
                    message.teamEnterInfo = TeamEnterSceneInfo.internalBinaryRead(reader, reader.uint32(), options, message.teamEnterInfo);
                    break;
                case /* optional uint32 enter_scene_token */ 12:
                    message.enterSceneToken = reader.uint32();
                    break;
                case /* repeated com.midnights.game.AvatarEnterSceneInfo avatar_enter_info */ 7:
                    message.avatarEnterInfo.push(AvatarEnterSceneInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_avatar_entity_id */ 6:
                    message.curAvatarEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MPLevelEntityInfo mp_level_entity_info */ 5:
                    message.mpLevelEntityInfo = MPLevelEntityInfo.internalBinaryRead(reader, reader.uint32(), options, message.mpLevelEntityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEnterSceneInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TeamEnterSceneInfo team_enter_info = 8; */
        if (message.teamEnterInfo)
            TeamEnterSceneInfo.internalBinaryWrite(message.teamEnterInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 enter_scene_token = 12; */
        if (message.enterSceneToken !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.enterSceneToken);
        /* repeated com.midnights.game.AvatarEnterSceneInfo avatar_enter_info = 7; */
        for (let i = 0; i < message.avatarEnterInfo.length; i++)
            AvatarEnterSceneInfo.internalBinaryWrite(message.avatarEnterInfo[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_avatar_entity_id = 6; */
        if (message.curAvatarEntityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.curAvatarEntityId);
        /* optional com.midnights.game.MPLevelEntityInfo mp_level_entity_info = 5; */
        if (message.mpLevelEntityInfo)
            MPLevelEntityInfo.internalBinaryWrite(message.mpLevelEntityInfo, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerEnterSceneInfoNotify
 */
export const PlayerEnterSceneInfoNotify = new PlayerEnterSceneInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinPlayerSceneReq$Type extends MessageType<JoinPlayerSceneReq> {
    constructor() {
        super("com.midnights.game.JoinPlayerSceneReq", [
            { no: 12, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinPlayerSceneReq>): JoinPlayerSceneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinPlayerSceneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinPlayerSceneReq): JoinPlayerSceneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 12:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinPlayerSceneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 12; */
        if (message.targetUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.JoinPlayerSceneReq
 */
export const JoinPlayerSceneReq = new JoinPlayerSceneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinPlayerSceneRsp$Type extends MessageType<JoinPlayerSceneRsp> {
    constructor() {
        super("com.midnights.game.JoinPlayerSceneRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinPlayerSceneRsp>): JoinPlayerSceneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinPlayerSceneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinPlayerSceneRsp): JoinPlayerSceneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinPlayerSceneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.JoinPlayerSceneRsp
 */
export const JoinPlayerSceneRsp = new JoinPlayerSceneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneKickPlayerReq$Type extends MessageType<SceneKickPlayerReq> {
    constructor() {
        super("com.midnights.game.SceneKickPlayerReq", [
            { no: 6, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneKickPlayerReq>): SceneKickPlayerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneKickPlayerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneKickPlayerReq): SceneKickPlayerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 6:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneKickPlayerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 6; */
        if (message.targetUid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneKickPlayerReq
 */
export const SceneKickPlayerReq = new SceneKickPlayerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneKickPlayerRsp$Type extends MessageType<SceneKickPlayerRsp> {
    constructor() {
        super("com.midnights.game.SceneKickPlayerRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneKickPlayerRsp>): SceneKickPlayerRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneKickPlayerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneKickPlayerRsp): SceneKickPlayerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 target_uid */ 10:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneKickPlayerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 target_uid = 10; */
        if (message.targetUid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneKickPlayerRsp
 */
export const SceneKickPlayerRsp = new SceneKickPlayerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneKickPlayerNotify$Type extends MessageType<SceneKickPlayerNotify> {
    constructor() {
        super("com.midnights.game.SceneKickPlayerNotify", [
            { no: 8, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "kicker_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneKickPlayerNotify>): SceneKickPlayerNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneKickPlayerNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneKickPlayerNotify): SceneKickPlayerNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 8:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional uint32 kicker_uid */ 9:
                    message.kickerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneKickPlayerNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 8; */
        if (message.targetUid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.targetUid);
        /* optional uint32 kicker_uid = 9; */
        if (message.kickerUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.kickerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneKickPlayerNotify
 */
export const SceneKickPlayerNotify = new SceneKickPlayerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HitClientTrivialNotify$Type extends MessageType<HitClientTrivialNotify> {
    constructor() {
        super("com.midnights.game.HitClientTrivialNotify", [
            { no: 11, name: "position", kind: "message", T: () => Vector },
            { no: 12, name: "owner_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HitClientTrivialNotify>): HitClientTrivialNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HitClientTrivialNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HitClientTrivialNotify): HitClientTrivialNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector position */ 11:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* optional uint32 owner_entity_id */ 12:
                    message.ownerEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HitClientTrivialNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector position = 11; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 owner_entity_id = 12; */
        if (message.ownerEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.ownerEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HitClientTrivialNotify
 */
export const HitClientTrivialNotify = new HitClientTrivialNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackMyWorldReq$Type extends MessageType<BackMyWorldReq> {
    constructor() {
        super("com.midnights.game.BackMyWorldReq", []);
    }
    create(value?: PartialMessage<BackMyWorldReq>): BackMyWorldReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackMyWorldReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackMyWorldReq): BackMyWorldReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BackMyWorldReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BackMyWorldReq
 */
export const BackMyWorldReq = new BackMyWorldReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackMyWorldRsp$Type extends MessageType<BackMyWorldRsp> {
    constructor() {
        super("com.midnights.game.BackMyWorldRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BackMyWorldRsp>): BackMyWorldRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackMyWorldRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackMyWorldRsp): BackMyWorldRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackMyWorldRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BackMyWorldRsp
 */
export const BackMyWorldRsp = new BackMyWorldRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeeMonsterReq$Type extends MessageType<SeeMonsterReq> {
    constructor() {
        super("com.midnights.game.SeeMonsterReq", [
            { no: 7, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeeMonsterReq>): SeeMonsterReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeeMonsterReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeeMonsterReq): SeeMonsterReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 monster_id */ 7:
                    message.monsterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeeMonsterReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 monster_id = 7; */
        if (message.monsterId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.monsterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeeMonsterReq
 */
export const SeeMonsterReq = new SeeMonsterReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeeMonsterRsp$Type extends MessageType<SeeMonsterRsp> {
    constructor() {
        super("com.midnights.game.SeeMonsterRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeeMonsterRsp>): SeeMonsterRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeeMonsterRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeeMonsterRsp): SeeMonsterRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeeMonsterRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeeMonsterRsp
 */
export const SeeMonsterRsp = new SeeMonsterRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddSeenMonsterNotify$Type extends MessageType<AddSeenMonsterNotify> {
    constructor() {
        super("com.midnights.game.AddSeenMonsterNotify", [
            { no: 12, name: "monster_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AddSeenMonsterNotify>): AddSeenMonsterNotify {
        const message = { monsterIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddSeenMonsterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddSeenMonsterNotify): AddSeenMonsterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 monster_id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.monsterIdList.push(reader.uint32());
                    else
                        message.monsterIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddSeenMonsterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 monster_id_list = 12; */
        if (message.monsterIdList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.monsterIdList.length; i++)
                writer.uint32(message.monsterIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AddSeenMonsterNotify
 */
export const AddSeenMonsterNotify = new AddSeenMonsterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllSeenMonsterNotify$Type extends MessageType<AllSeenMonsterNotify> {
    constructor() {
        super("com.midnights.game.AllSeenMonsterNotify", [
            { no: 4, name: "monster_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AllSeenMonsterNotify>): AllSeenMonsterNotify {
        const message = { monsterIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllSeenMonsterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllSeenMonsterNotify): AllSeenMonsterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 monster_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.monsterIdList.push(reader.uint32());
                    else
                        message.monsterIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllSeenMonsterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 monster_id_list = 4; */
        if (message.monsterIdList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.monsterIdList.length; i++)
                writer.uint32(message.monsterIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AllSeenMonsterNotify
 */
export const AllSeenMonsterNotify = new AllSeenMonsterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneTimeNotify$Type extends MessageType<SceneTimeNotify> {
    constructor() {
        super("com.midnights.game.SceneTimeNotify", [
            { no: 14, name: "scene_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1, name: "is_paused", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneTimeNotify>): SceneTimeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneTimeNotify): SceneTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 scene_time */ 14:
                    message.sceneTime = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_paused */ 1:
                    message.isPaused = reader.bool();
                    break;
                case /* optional uint32 scene_id */ 7:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 scene_time = 14; */
        if (message.sceneTime !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.sceneTime);
        /* optional bool is_paused = 1; */
        if (message.isPaused !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isPaused);
        /* optional uint32 scene_id = 7; */
        if (message.sceneId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneTimeNotify
 */
export const SceneTimeNotify = new SceneTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterSceneReadyReq$Type extends MessageType<EnterSceneReadyReq> {
    constructor() {
        super("com.midnights.game.EnterSceneReadyReq", [
            { no: 9, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterSceneReadyReq>): EnterSceneReadyReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterSceneReadyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterSceneReadyReq): EnterSceneReadyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 9:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterSceneReadyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 9; */
        if (message.enterSceneToken !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterSceneReadyReq
 */
export const EnterSceneReadyReq = new EnterSceneReadyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterSceneReadyRsp$Type extends MessageType<EnterSceneReadyRsp> {
    constructor() {
        super("com.midnights.game.EnterSceneReadyRsp", [
            { no: 1, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterSceneReadyRsp>): EnterSceneReadyRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterSceneReadyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterSceneReadyRsp): EnterSceneReadyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 1:
                    message.enterSceneToken = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterSceneReadyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 1; */
        if (message.enterSceneToken !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.enterSceneToken);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterSceneReadyRsp
 */
export const EnterSceneReadyRsp = new EnterSceneReadyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterScenePeerNotify$Type extends MessageType<EnterScenePeerNotify> {
    constructor() {
        super("com.midnights.game.EnterScenePeerNotify", [
            { no: 12, name: "dest_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "host_peer_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "peer_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterScenePeerNotify>): EnterScenePeerNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterScenePeerNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterScenePeerNotify): EnterScenePeerNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dest_scene_id */ 12:
                    message.destSceneId = reader.uint32();
                    break;
                case /* optional uint32 enter_scene_token */ 11:
                    message.enterSceneToken = reader.uint32();
                    break;
                case /* optional uint32 host_peer_id */ 14:
                    message.hostPeerId = reader.uint32();
                    break;
                case /* optional uint32 peer_id */ 1:
                    message.peerId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterScenePeerNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dest_scene_id = 12; */
        if (message.destSceneId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.destSceneId);
        /* optional uint32 enter_scene_token = 11; */
        if (message.enterSceneToken !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.enterSceneToken);
        /* optional uint32 host_peer_id = 14; */
        if (message.hostPeerId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.hostPeerId);
        /* optional uint32 peer_id = 1; */
        if (message.peerId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.peerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterScenePeerNotify
 */
export const EnterScenePeerNotify = new EnterScenePeerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterSceneDoneReq$Type extends MessageType<EnterSceneDoneReq> {
    constructor() {
        super("com.midnights.game.EnterSceneDoneReq", [
            { no: 11, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterSceneDoneReq>): EnterSceneDoneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterSceneDoneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterSceneDoneReq): EnterSceneDoneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 11:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterSceneDoneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 11; */
        if (message.enterSceneToken !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterSceneDoneReq
 */
export const EnterSceneDoneReq = new EnterSceneDoneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterSceneDoneRsp$Type extends MessageType<EnterSceneDoneRsp> {
    constructor() {
        super("com.midnights.game.EnterSceneDoneRsp", [
            { no: 15, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterSceneDoneRsp>): EnterSceneDoneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterSceneDoneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterSceneDoneRsp): EnterSceneDoneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 15:
                    message.enterSceneToken = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterSceneDoneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 15; */
        if (message.enterSceneToken !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.enterSceneToken);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterSceneDoneRsp
 */
export const EnterSceneDoneRsp = new EnterSceneDoneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerDieNotify$Type extends MessageType<WorldPlayerDieNotify> {
    constructor() {
        super("com.midnights.game.WorldPlayerDieNotify", [
            { no: 12, name: "die_type", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerDieType", PlayerDieType] },
            { no: 15, name: "murderer_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "monster_id", kind: "scalar", oneof: "entity", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gadget_id", kind: "scalar", oneof: "entity", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WorldPlayerDieNotify>): WorldPlayerDieNotify {
        const message = { entity: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerDieNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerDieNotify): WorldPlayerDieNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerDieType die_type */ 12:
                    message.dieType = reader.int32();
                    break;
                case /* optional uint32 murderer_entity_id */ 15:
                    message.murdererEntityId = reader.uint32();
                    break;
                case /* uint32 monster_id */ 8:
                    message.entity = {
                        oneofKind: "monsterId",
                        monsterId: reader.uint32()
                    };
                    break;
                case /* uint32 gadget_id */ 4:
                    message.entity = {
                        oneofKind: "gadgetId",
                        gadgetId: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPlayerDieNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerDieType die_type = 12; */
        if (message.dieType !== undefined)
            writer.tag(12, WireType.Varint).int32(message.dieType);
        /* optional uint32 murderer_entity_id = 15; */
        if (message.murdererEntityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.murdererEntityId);
        /* uint32 monster_id = 8; */
        if (message.entity.oneofKind === "monsterId")
            writer.tag(8, WireType.Varint).uint32(message.entity.monsterId);
        /* uint32 gadget_id = 4; */
        if (message.entity.oneofKind === "gadgetId")
            writer.tag(4, WireType.Varint).uint32(message.entity.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerDieNotify
 */
export const WorldPlayerDieNotify = new WorldPlayerDieNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerReviveReq$Type extends MessageType<WorldPlayerReviveReq> {
    constructor() {
        super("com.midnights.game.WorldPlayerReviveReq", []);
    }
    create(value?: PartialMessage<WorldPlayerReviveReq>): WorldPlayerReviveReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerReviveReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerReviveReq): WorldPlayerReviveReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WorldPlayerReviveReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerReviveReq
 */
export const WorldPlayerReviveReq = new WorldPlayerReviveReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerReviveRsp$Type extends MessageType<WorldPlayerReviveRsp> {
    constructor() {
        super("com.midnights.game.WorldPlayerReviveRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WorldPlayerReviveRsp>): WorldPlayerReviveRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerReviveRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerReviveRsp): WorldPlayerReviveRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPlayerReviveRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerReviveRsp
 */
export const WorldPlayerReviveRsp = new WorldPlayerReviveRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinPlayerFailNotify$Type extends MessageType<JoinPlayerFailNotify> {
    constructor() {
        super("com.midnights.game.JoinPlayerFailNotify", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinPlayerFailNotify>): JoinPlayerFailNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinPlayerFailNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinPlayerFailNotify): JoinPlayerFailNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinPlayerFailNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.JoinPlayerFailNotify
 */
export const JoinPlayerFailNotify = new JoinPlayerFailNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSceneWeatherAreaReq$Type extends MessageType<SetSceneWeatherAreaReq> {
    constructor() {
        super("com.midnights.game.SetSceneWeatherAreaReq", [
            { no: 13, name: "weather_gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "weather_value_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<SetSceneWeatherAreaReq>): SetSceneWeatherAreaReq {
        const message = { weatherValueMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSceneWeatherAreaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSceneWeatherAreaReq): SetSceneWeatherAreaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weather_gadget_id */ 13:
                    message.weatherGadgetId = reader.uint32();
                    break;
                case /* map<uint32, string> weather_value_map */ 4:
                    this.binaryReadMap4(message.weatherValueMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: SetSceneWeatherAreaReq["weatherValueMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SetSceneWeatherAreaReq["weatherValueMap"] | undefined, val: SetSceneWeatherAreaReq["weatherValueMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SetSceneWeatherAreaReq.weather_value_map");
            }
        }
        map[key ?? 0] = val ?? "";
    }
    internalBinaryWrite(message: SetSceneWeatherAreaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weather_gadget_id = 13; */
        if (message.weatherGadgetId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.weatherGadgetId);
        /* map<uint32, string> weather_value_map = 4; */
        for (let k of Object.keys(message.weatherValueMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.LengthDelimited).string(message.weatherValueMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetSceneWeatherAreaReq
 */
export const SetSceneWeatherAreaReq = new SetSceneWeatherAreaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSceneWeatherAreaRsp$Type extends MessageType<SetSceneWeatherAreaRsp> {
    constructor() {
        super("com.midnights.game.SetSceneWeatherAreaRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetSceneWeatherAreaRsp>): SetSceneWeatherAreaRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetSceneWeatherAreaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSceneWeatherAreaRsp): SetSceneWeatherAreaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSceneWeatherAreaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetSceneWeatherAreaRsp
 */
export const SetSceneWeatherAreaRsp = new SetSceneWeatherAreaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteGadgetLuaReq$Type extends MessageType<ExecuteGadgetLuaReq> {
    constructor() {
        super("com.midnights.game.ExecuteGadgetLuaReq", [
            { no: 12, name: "source_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "param3", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "param1", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "param2", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteGadgetLuaReq>): ExecuteGadgetLuaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExecuteGadgetLuaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteGadgetLuaReq): ExecuteGadgetLuaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 source_entity_id */ 12:
                    message.sourceEntityId = reader.uint32();
                    break;
                case /* optional int32 param3 */ 1:
                    message.param3 = reader.int32();
                    break;
                case /* optional int32 param1 */ 5:
                    message.param1 = reader.int32();
                    break;
                case /* optional int32 param2 */ 14:
                    message.param2 = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteGadgetLuaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 source_entity_id = 12; */
        if (message.sourceEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sourceEntityId);
        /* optional int32 param3 = 1; */
        if (message.param3 !== undefined)
            writer.tag(1, WireType.Varint).int32(message.param3);
        /* optional int32 param1 = 5; */
        if (message.param1 !== undefined)
            writer.tag(5, WireType.Varint).int32(message.param1);
        /* optional int32 param2 = 14; */
        if (message.param2 !== undefined)
            writer.tag(14, WireType.Varint).int32(message.param2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExecuteGadgetLuaReq
 */
export const ExecuteGadgetLuaReq = new ExecuteGadgetLuaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteGadgetLuaRsp$Type extends MessageType<ExecuteGadgetLuaRsp> {
    constructor() {
        super("com.midnights.game.ExecuteGadgetLuaRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteGadgetLuaRsp>): ExecuteGadgetLuaRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExecuteGadgetLuaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteGadgetLuaRsp): ExecuteGadgetLuaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteGadgetLuaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExecuteGadgetLuaRsp
 */
export const ExecuteGadgetLuaRsp = new ExecuteGadgetLuaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CutSceneExtraParam$Type extends MessageType<CutSceneExtraParam> {
    constructor() {
        super("com.midnights.game.CutSceneExtraParam", [
            { no: 1, name: "detail_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<CutSceneExtraParam>): CutSceneExtraParam {
        const message = { detailParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CutSceneExtraParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CutSceneExtraParam): CutSceneExtraParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated double detail_param_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.detailParamList.push(reader.double());
                    else
                        message.detailParamList.push(reader.double());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CutSceneExtraParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated double detail_param_list = 1; */
        if (message.detailParamList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.detailParamList.length; i++)
                writer.double(message.detailParamList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CutSceneExtraParam
 */
export const CutSceneExtraParam = new CutSceneExtraParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CutSceneBeginNotify$Type extends MessageType<CutSceneBeginNotify> {
    constructor() {
        super("com.midnights.game.CutSceneBeginNotify", [
            { no: 9, name: "is_wait_others", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "cutscene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "extra_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CutSceneExtraParam }
        ]);
    }
    create(value?: PartialMessage<CutSceneBeginNotify>): CutSceneBeginNotify {
        const message = { extraParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CutSceneBeginNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CutSceneBeginNotify): CutSceneBeginNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_wait_others */ 9:
                    message.isWaitOthers = reader.bool();
                    break;
                case /* optional uint32 cutscene_id */ 14:
                    message.cutsceneId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CutSceneExtraParam extra_param_list */ 3:
                    message.extraParamList.push(CutSceneExtraParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CutSceneBeginNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_wait_others = 9; */
        if (message.isWaitOthers !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isWaitOthers);
        /* optional uint32 cutscene_id = 14; */
        if (message.cutsceneId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cutsceneId);
        /* repeated com.midnights.game.CutSceneExtraParam extra_param_list = 3; */
        for (let i = 0; i < message.extraParamList.length; i++)
            CutSceneExtraParam.internalBinaryWrite(message.extraParamList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CutSceneBeginNotify
 */
export const CutSceneBeginNotify = new CutSceneBeginNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CutSceneFinishNotify$Type extends MessageType<CutSceneFinishNotify> {
    constructor() {
        super("com.midnights.game.CutSceneFinishNotify", [
            { no: 12, name: "cutscene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CutSceneFinishNotify>): CutSceneFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CutSceneFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CutSceneFinishNotify): CutSceneFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cutscene_id */ 12:
                    message.cutsceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CutSceneFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cutscene_id = 12; */
        if (message.cutsceneId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.cutsceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CutSceneFinishNotify
 */
export const CutSceneFinishNotify = new CutSceneFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CutSceneEndNotify$Type extends MessageType<CutSceneEndNotify> {
    constructor() {
        super("com.midnights.game.CutSceneEndNotify", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "cutscene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CutSceneEndNotify>): CutSceneEndNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CutSceneEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CutSceneEndNotify): CutSceneEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cutscene_id */ 14:
                    message.cutsceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CutSceneEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 cutscene_id = 14; */
        if (message.cutsceneId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cutsceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CutSceneEndNotify
 */
export const CutSceneEndNotify = new CutSceneEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientScriptEventNotify$Type extends MessageType<ClientScriptEventNotify> {
    constructor() {
        super("com.midnights.game.ClientScriptEventNotify", [
            { no: 9, name: "param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "source_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "event_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientScriptEventNotify>): ClientScriptEventNotify {
        const message = { paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientScriptEventNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientScriptEventNotify): ClientScriptEventNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 param_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.int32());
                    else
                        message.paramList.push(reader.int32());
                    break;
                case /* optional uint32 source_entity_id */ 14:
                    message.sourceEntityId = reader.uint32();
                    break;
                case /* optional uint32 event_type */ 10:
                    message.eventType = reader.uint32();
                    break;
                case /* optional uint32 target_entity_id */ 13:
                    message.targetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientScriptEventNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 param_list = 9; */
        if (message.paramList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramList.length; i++)
                writer.int32(message.paramList[i]);
            writer.join();
        }
        /* optional uint32 source_entity_id = 14; */
        if (message.sourceEntityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.sourceEntityId);
        /* optional uint32 event_type = 10; */
        if (message.eventType !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.eventType);
        /* optional uint32 target_entity_id = 13; */
        if (message.targetEntityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.targetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientScriptEventNotify
 */
export const ClientScriptEventNotify = new ClientScriptEventNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntitiesMovesReq$Type extends MessageType<SceneEntitiesMovesReq> {
    constructor() {
        super("com.midnights.game.SceneEntitiesMovesReq", [
            { no: 14, name: "entity_move_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityMoveInfo }
        ]);
    }
    create(value?: PartialMessage<SceneEntitiesMovesReq>): SceneEntitiesMovesReq {
        const message = { entityMoveInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntitiesMovesReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntitiesMovesReq): SceneEntitiesMovesReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EntityMoveInfo entity_move_info_list */ 14:
                    message.entityMoveInfoList.push(EntityMoveInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntitiesMovesReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EntityMoveInfo entity_move_info_list = 14; */
        for (let i = 0; i < message.entityMoveInfoList.length; i++)
            EntityMoveInfo.internalBinaryWrite(message.entityMoveInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntitiesMovesReq
 */
export const SceneEntitiesMovesReq = new SceneEntitiesMovesReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityMoveFailInfo$Type extends MessageType<EntityMoveFailInfo> {
    constructor() {
        super("com.midnights.game.EntityMoveFailInfo", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "fail_motion", kind: "message", T: () => MotionInfo },
            { no: 4, name: "reliable_seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityMoveFailInfo>): EntityMoveFailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityMoveFailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityMoveFailInfo): EntityMoveFailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 scene_time */ 9:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.MotionInfo fail_motion */ 14:
                    message.failMotion = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.failMotion);
                    break;
                case /* optional uint32 reliable_seq */ 4:
                    message.reliableSeq = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityMoveFailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 scene_time = 9; */
        if (message.sceneTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneTime);
        /* optional com.midnights.game.MotionInfo fail_motion = 14; */
        if (message.failMotion)
            MotionInfo.internalBinaryWrite(message.failMotion, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reliable_seq = 4; */
        if (message.reliableSeq !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.reliableSeq);
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityMoveFailInfo
 */
export const EntityMoveFailInfo = new EntityMoveFailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntitiesMovesRsp$Type extends MessageType<SceneEntitiesMovesRsp> {
    constructor() {
        super("com.midnights.game.SceneEntitiesMovesRsp", [
            { no: 11, name: "entity_move_fail_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityMoveFailInfo }
        ]);
    }
    create(value?: PartialMessage<SceneEntitiesMovesRsp>): SceneEntitiesMovesRsp {
        const message = { entityMoveFailInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntitiesMovesRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntitiesMovesRsp): SceneEntitiesMovesRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EntityMoveFailInfo entity_move_fail_info_list */ 11:
                    message.entityMoveFailInfoList.push(EntityMoveFailInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntitiesMovesRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EntityMoveFailInfo entity_move_fail_info_list = 11; */
        for (let i = 0; i < message.entityMoveFailInfoList.length; i++)
            EntityMoveFailInfo.internalBinaryWrite(message.entityMoveFailInfoList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntitiesMovesRsp
 */
export const SceneEntitiesMovesRsp = new SceneEntitiesMovesRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntitiesMoveCombineNotify$Type extends MessageType<SceneEntitiesMoveCombineNotify> {
    constructor() {
        super("com.midnights.game.SceneEntitiesMoveCombineNotify", [
            { no: 8, name: "entity_move_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityMoveInfo }
        ]);
    }
    create(value?: PartialMessage<SceneEntitiesMoveCombineNotify>): SceneEntitiesMoveCombineNotify {
        const message = { entityMoveInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntitiesMoveCombineNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntitiesMoveCombineNotify): SceneEntitiesMoveCombineNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EntityMoveInfo entity_move_info_list */ 8:
                    message.entityMoveInfoList.push(EntityMoveInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntitiesMoveCombineNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EntityMoveInfo entity_move_info_list = 8; */
        for (let i = 0; i < message.entityMoveInfoList.length; i++)
            EntityMoveInfo.internalBinaryWrite(message.entityMoveInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntitiesMoveCombineNotify
 */
export const SceneEntitiesMoveCombineNotify = new SceneEntitiesMoveCombineNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockTransPointReq$Type extends MessageType<UnlockTransPointReq> {
    constructor() {
        super("com.midnights.game.UnlockTransPointReq", [
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnlockTransPointReq>): UnlockTransPointReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockTransPointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockTransPointReq): UnlockTransPointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 10:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockTransPointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        /* optional uint32 scene_id = 10; */
        if (message.sceneId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnlockTransPointReq
 */
export const UnlockTransPointReq = new UnlockTransPointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockTransPointRsp$Type extends MessageType<UnlockTransPointRsp> {
    constructor() {
        super("com.midnights.game.UnlockTransPointRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnlockTransPointRsp>): UnlockTransPointRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockTransPointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockTransPointRsp): UnlockTransPointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockTransPointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnlockTransPointRsp
 */
export const UnlockTransPointRsp = new UnlockTransPointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneWeatherForcastReq$Type extends MessageType<SceneWeatherForcastReq> {
    constructor() {
        super("com.midnights.game.SceneWeatherForcastReq", [
            { no: 15, name: "weather_area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneWeatherForcastReq>): SceneWeatherForcastReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneWeatherForcastReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneWeatherForcastReq): SceneWeatherForcastReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weather_area_id */ 15:
                    message.weatherAreaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneWeatherForcastReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weather_area_id = 15; */
        if (message.weatherAreaId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.weatherAreaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneWeatherForcastReq
 */
export const SceneWeatherForcastReq = new SceneWeatherForcastReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneWeatherForcastRsp$Type extends MessageType<SceneWeatherForcastRsp> {
    constructor() {
        super("com.midnights.game.SceneWeatherForcastRsp", [
            { no: 14, name: "next_climate_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "forcast_climate_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneWeatherForcastRsp>): SceneWeatherForcastRsp {
        const message = { forcastClimateList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneWeatherForcastRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneWeatherForcastRsp): SceneWeatherForcastRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 next_climate_time */ 14:
                    message.nextClimateTime = reader.uint64().toBigInt();
                    break;
                case /* repeated uint32 forcast_climate_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.forcastClimateList.push(reader.uint32());
                    else
                        message.forcastClimateList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneWeatherForcastRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 next_climate_time = 14; */
        if (message.nextClimateTime !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.nextClimateTime);
        /* repeated uint32 forcast_climate_list = 2; */
        if (message.forcastClimateList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.forcastClimateList.length; i++)
                writer.uint32(message.forcastClimateList[i]);
            writer.join();
        }
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneWeatherForcastRsp
 */
export const SceneWeatherForcastRsp = new SceneWeatherForcastRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkMapReq$Type extends MessageType<MarkMapReq> {
    constructor() {
        super("com.midnights.game.MarkMapReq", [
            { no: 8, name: "mark", kind: "message", T: () => MapMarkPoint },
            { no: 6, name: "old", kind: "message", T: () => MapMarkPoint },
            { no: 9, name: "op", kind: "enum", opt: true, T: () => ["com.midnights.game.MarkMapReq.Operation", MarkMapReq_Operation] }
        ]);
    }
    create(value?: PartialMessage<MarkMapReq>): MarkMapReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkMapReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkMapReq): MarkMapReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MapMarkPoint mark */ 8:
                    message.mark = MapMarkPoint.internalBinaryRead(reader, reader.uint32(), options, message.mark);
                    break;
                case /* optional com.midnights.game.MapMarkPoint old */ 6:
                    message.old = MapMarkPoint.internalBinaryRead(reader, reader.uint32(), options, message.old);
                    break;
                case /* optional com.midnights.game.MarkMapReq.Operation op */ 9:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkMapReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MapMarkPoint mark = 8; */
        if (message.mark)
            MapMarkPoint.internalBinaryWrite(message.mark, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.MapMarkPoint old = 6; */
        if (message.old)
            MapMarkPoint.internalBinaryWrite(message.old, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.MarkMapReq.Operation op = 9; */
        if (message.op !== undefined)
            writer.tag(9, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MarkMapReq
 */
export const MarkMapReq = new MarkMapReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkMapRsp$Type extends MessageType<MarkMapRsp> {
    constructor() {
        super("com.midnights.game.MarkMapRsp", [
            { no: 8, name: "mark_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MapMarkPoint },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkMapRsp>): MarkMapRsp {
        const message = { markList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkMapRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkMapRsp): MarkMapRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MapMarkPoint mark_list */ 8:
                    message.markList.push(MapMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkMapRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MapMarkPoint mark_list = 8; */
        for (let i = 0; i < message.markList.length; i++)
            MapMarkPoint.internalBinaryWrite(message.markList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MarkMapRsp
 */
export const MarkMapRsp = new MarkMapRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllMarkPointNotify$Type extends MessageType<AllMarkPointNotify> {
    constructor() {
        super("com.midnights.game.AllMarkPointNotify", [
            { no: 7, name: "mark_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MapMarkPoint }
        ]);
    }
    create(value?: PartialMessage<AllMarkPointNotify>): AllMarkPointNotify {
        const message = { markList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllMarkPointNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllMarkPointNotify): AllMarkPointNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MapMarkPoint mark_list */ 7:
                    message.markList.push(MapMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllMarkPointNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MapMarkPoint mark_list = 7; */
        for (let i = 0; i < message.markList.length; i++)
            MapMarkPoint.internalBinaryWrite(message.markList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AllMarkPointNotify
 */
export const AllMarkPointNotify = new AllMarkPointNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldDataNotify$Type extends MessageType<WorldDataNotify> {
    constructor() {
        super("com.midnights.game.WorldDataNotify", [
            { no: 9, name: "world_prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => PropValue } }
        ]);
    }
    create(value?: PartialMessage<WorldDataNotify>): WorldDataNotify {
        const message = { worldPropMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldDataNotify): WorldDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.PropValue> world_prop_map */ 9:
                    this.binaryReadMap9(message.worldPropMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: WorldDataNotify["worldPropMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WorldDataNotify["worldPropMap"] | undefined, val: WorldDataNotify["worldPropMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = PropValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WorldDataNotify.world_prop_map");
            }
        }
        map[key ?? 0] = val ?? PropValue.create();
    }
    internalBinaryWrite(message: WorldDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.PropValue> world_prop_map = 9; */
        for (let k of Object.keys(message.worldPropMap)) {
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            PropValue.internalBinaryWrite(message.worldPropMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldDataNotify
 */
export const WorldDataNotify = new WorldDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityMoveRoomNotify$Type extends MessageType<EntityMoveRoomNotify> {
    constructor() {
        super("com.midnights.game.EntityMoveRoomNotify", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "dest_room_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityMoveRoomNotify>): EntityMoveRoomNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityMoveRoomNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityMoveRoomNotify): EntityMoveRoomNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 dest_room_id */ 9:
                    message.destRoomId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityMoveRoomNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        /* optional uint32 dest_room_id = 9; */
        if (message.destRoomId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.destRoomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityMoveRoomNotify
 */
export const EntityMoveRoomNotify = new EntityMoveRoomNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerInfoNotify$Type extends MessageType<WorldPlayerInfoNotify> {
    constructor() {
        super("com.midnights.game.WorldPlayerInfoNotify", [
            { no: 8, name: "player_widget_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerWidgetInfo },
            { no: 14, name: "player_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OnlinePlayerInfo },
            { no: 11, name: "player_uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WorldPlayerInfoNotify>): WorldPlayerInfoNotify {
        const message = { playerWidgetInfoList: [], playerInfoList: [], playerUidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerInfoNotify): WorldPlayerInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list */ 8:
                    message.playerWidgetInfoList.push(PlayerWidgetInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.OnlinePlayerInfo player_info_list */ 14:
                    message.playerInfoList.push(OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 player_uid_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playerUidList.push(reader.uint32());
                    else
                        message.playerUidList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPlayerInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list = 8; */
        for (let i = 0; i < message.playerWidgetInfoList.length; i++)
            PlayerWidgetInfo.internalBinaryWrite(message.playerWidgetInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.OnlinePlayerInfo player_info_list = 14; */
        for (let i = 0; i < message.playerInfoList.length; i++)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 player_uid_list = 11; */
        if (message.playerUidList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.playerUidList.length; i++)
                writer.uint32(message.playerUidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerInfoNotify
 */
export const WorldPlayerInfoNotify = new WorldPlayerInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostEnterSceneReq$Type extends MessageType<PostEnterSceneReq> {
    constructor() {
        super("com.midnights.game.PostEnterSceneReq", [
            { no: 12, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PostEnterSceneReq>): PostEnterSceneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostEnterSceneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostEnterSceneReq): PostEnterSceneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_scene_token */ 12:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostEnterSceneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_scene_token = 12; */
        if (message.enterSceneToken !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PostEnterSceneReq
 */
export const PostEnterSceneReq = new PostEnterSceneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostEnterSceneRsp$Type extends MessageType<PostEnterSceneRsp> {
    constructor() {
        super("com.midnights.game.PostEnterSceneRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "enter_scene_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PostEnterSceneRsp>): PostEnterSceneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PostEnterSceneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostEnterSceneRsp): PostEnterSceneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 enter_scene_token */ 12:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostEnterSceneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 enter_scene_token = 12; */
        if (message.enterSceneToken !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PostEnterSceneRsp
 */
export const PostEnterSceneRsp = new PostEnterSceneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatInfo$Type extends MessageType<ChatInfo> {
    constructor() {
        super("com.midnights.game.ChatInfo", [
            { no: 13, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "sequence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "to_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_read", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1946, name: "text", kind: "scalar", oneof: "content", T: 9 /*ScalarType.STRING*/ },
            { no: 914, name: "icon", kind: "scalar", oneof: "content", T: 13 /*ScalarType.UINT32*/ },
            { no: 1753, name: "system_hint", kind: "message", oneof: "content", T: () => ChatInfo_SystemHint }
        ]);
    }
    create(value?: PartialMessage<ChatInfo>): ChatInfo {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatInfo): ChatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 time */ 13:
                    message.time = reader.uint32();
                    break;
                case /* optional uint32 sequence */ 10:
                    message.sequence = reader.uint32();
                    break;
                case /* optional uint32 to_uid */ 7:
                    message.toUid = reader.uint32();
                    break;
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional bool is_read */ 5:
                    message.isRead = reader.bool();
                    break;
                case /* string text */ 1946:
                    message.content = {
                        oneofKind: "text",
                        text: reader.string()
                    };
                    break;
                case /* uint32 icon */ 914:
                    message.content = {
                        oneofKind: "icon",
                        icon: reader.uint32()
                    };
                    break;
                case /* com.midnights.game.ChatInfo.SystemHint system_hint */ 1753:
                    message.content = {
                        oneofKind: "systemHint",
                        systemHint: ChatInfo_SystemHint.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).systemHint)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 time = 13; */
        if (message.time !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.time);
        /* optional uint32 sequence = 10; */
        if (message.sequence !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sequence);
        /* optional uint32 to_uid = 7; */
        if (message.toUid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.toUid);
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* optional bool is_read = 5; */
        if (message.isRead !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isRead);
        /* string text = 1946; */
        if (message.content.oneofKind === "text")
            writer.tag(1946, WireType.LengthDelimited).string(message.content.text);
        /* uint32 icon = 914; */
        if (message.content.oneofKind === "icon")
            writer.tag(914, WireType.Varint).uint32(message.content.icon);
        /* com.midnights.game.ChatInfo.SystemHint system_hint = 1753; */
        if (message.content.oneofKind === "systemHint")
            ChatInfo_SystemHint.internalBinaryWrite(message.content.systemHint, writer.tag(1753, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChatInfo
 */
export const ChatInfo = new ChatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatInfo_SystemHint$Type extends MessageType<ChatInfo_SystemHint> {
    constructor() {
        super("com.midnights.game.ChatInfo.SystemHint", [
            { no: 14, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChatInfo_SystemHint>): ChatInfo_SystemHint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatInfo_SystemHint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatInfo_SystemHint): ChatInfo_SystemHint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 type */ 14:
                    message.type = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatInfo_SystemHint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 type = 14; */
        if (message.type !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChatInfo.SystemHint
 */
export const ChatInfo_SystemHint = new ChatInfo_SystemHint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerChatReq$Type extends MessageType<PlayerChatReq> {
    constructor() {
        super("com.midnights.game.PlayerChatReq", [
            { no: 13, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "chat_info", kind: "message", T: () => ChatInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerChatReq>): PlayerChatReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerChatReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerChatReq): PlayerChatReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 channel_id */ 13:
                    message.channelId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ChatInfo chat_info */ 15:
                    message.chatInfo = ChatInfo.internalBinaryRead(reader, reader.uint32(), options, message.chatInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerChatReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 channel_id = 13; */
        if (message.channelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.channelId);
        /* optional com.midnights.game.ChatInfo chat_info = 15; */
        if (message.chatInfo)
            ChatInfo.internalBinaryWrite(message.chatInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerChatReq
 */
export const PlayerChatReq = new PlayerChatReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerChatRsp$Type extends MessageType<PlayerChatRsp> {
    constructor() {
        super("com.midnights.game.PlayerChatRsp", [
            { no: 15, name: "chat_forbidden_endtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerChatRsp>): PlayerChatRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerChatRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerChatRsp): PlayerChatRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 chat_forbidden_endtime */ 15:
                    message.chatForbiddenEndtime = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerChatRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 chat_forbidden_endtime = 15; */
        if (message.chatForbiddenEndtime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.chatForbiddenEndtime);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerChatRsp
 */
export const PlayerChatRsp = new PlayerChatRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerChatNotify$Type extends MessageType<PlayerChatNotify> {
    constructor() {
        super("com.midnights.game.PlayerChatNotify", [
            { no: 3, name: "chat_info", kind: "message", T: () => ChatInfo },
            { no: 6, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerChatNotify>): PlayerChatNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerChatNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerChatNotify): PlayerChatNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ChatInfo chat_info */ 3:
                    message.chatInfo = ChatInfo.internalBinaryRead(reader, reader.uint32(), options, message.chatInfo);
                    break;
                case /* optional uint32 channel_id */ 6:
                    message.channelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerChatNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ChatInfo chat_info = 3; */
        if (message.chatInfo)
            ChatInfo.internalBinaryWrite(message.chatInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 channel_id = 6; */
        if (message.channelId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerChatNotify
 */
export const PlayerChatNotify = new PlayerChatNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerChatCDNotify$Type extends MessageType<PlayerChatCDNotify> {
    constructor() {
        super("com.midnights.game.PlayerChatCDNotify", [
            { no: 15, name: "over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerChatCDNotify>): PlayerChatCDNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerChatCDNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerChatCDNotify): PlayerChatCDNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 over_time */ 15:
                    message.overTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerChatCDNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 over_time = 15; */
        if (message.overTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.overTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerChatCDNotify
 */
export const PlayerChatCDNotify = new PlayerChatCDNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatHistoryNotify$Type extends MessageType<ChatHistoryNotify> {
    constructor() {
        super("com.midnights.game.ChatHistoryNotify", [
            { no: 9, name: "chat_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatInfo },
            { no: 12, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChatHistoryNotify>): ChatHistoryNotify {
        const message = { chatInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChatHistoryNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatHistoryNotify): ChatHistoryNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChatInfo chat_info */ 9:
                    message.chatInfo.push(ChatInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 channel_id */ 12:
                    message.channelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatHistoryNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ChatInfo chat_info = 9; */
        for (let i = 0; i < message.chatInfo.length; i++)
            ChatInfo.internalBinaryWrite(message.chatInfo[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 channel_id = 12; */
        if (message.channelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.channelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChatHistoryNotify
 */
export const ChatHistoryNotify = new ChatHistoryNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneDataNotify$Type extends MessageType<SceneDataNotify> {
    constructor() {
        super("com.midnights.game.SceneDataNotify", [
            { no: 15, name: "level_config_name_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "scene_tag_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneDataNotify>): SceneDataNotify {
        const message = { levelConfigNameList: [], sceneTagIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneDataNotify): SceneDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string level_config_name_list */ 15:
                    message.levelConfigNameList.push(reader.string());
                    break;
                case /* repeated uint32 scene_tag_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sceneTagIdList.push(reader.uint32());
                    else
                        message.sceneTagIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string level_config_name_list = 15; */
        for (let i = 0; i < message.levelConfigNameList.length; i++)
            writer.tag(15, WireType.LengthDelimited).string(message.levelConfigNameList[i]);
        /* repeated uint32 scene_tag_id_list = 8; */
        if (message.sceneTagIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sceneTagIdList.length; i++)
                writer.uint32(message.sceneTagIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneDataNotify
 */
export const SceneDataNotify = new SceneDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryToBeExploreNotify$Type extends MessageType<DungeonEntryToBeExploreNotify> {
    constructor() {
        super("com.midnights.game.DungeonEntryToBeExploreNotify", [
            { no: 2, name: "dungeon_entry_scene_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_entry_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryToBeExploreNotify>): DungeonEntryToBeExploreNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryToBeExploreNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryToBeExploreNotify): DungeonEntryToBeExploreNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_entry_scene_point_id */ 2:
                    message.dungeonEntryScenePointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_entry_config_id */ 10:
                    message.dungeonEntryConfigId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryToBeExploreNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_entry_scene_point_id = 2; */
        if (message.dungeonEntryScenePointId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dungeonEntryScenePointId);
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 dungeon_entry_config_id = 10; */
        if (message.dungeonEntryConfigId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonEntryConfigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryToBeExploreNotify
 */
export const DungeonEntryToBeExploreNotify = new DungeonEntryToBeExploreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDungeonEntryExploreConditionReq$Type extends MessageType<GetDungeonEntryExploreConditionReq> {
    constructor() {
        super("com.midnights.game.GetDungeonEntryExploreConditionReq", [
            { no: 6, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "dungeon_entry_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_entry_scene_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDungeonEntryExploreConditionReq>): GetDungeonEntryExploreConditionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDungeonEntryExploreConditionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDungeonEntryExploreConditionReq): GetDungeonEntryExploreConditionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 6:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_entry_config_id */ 2:
                    message.dungeonEntryConfigId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_entry_scene_point_id */ 4:
                    message.dungeonEntryScenePointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDungeonEntryExploreConditionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 6; */
        if (message.sceneId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 dungeon_entry_config_id = 2; */
        if (message.dungeonEntryConfigId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dungeonEntryConfigId);
        /* optional uint32 dungeon_entry_scene_point_id = 4; */
        if (message.dungeonEntryScenePointId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonEntryScenePointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetDungeonEntryExploreConditionReq
 */
export const GetDungeonEntryExploreConditionReq = new GetDungeonEntryExploreConditionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryCond$Type extends MessageType<DungeonEntryCond> {
    constructor() {
        super("com.midnights.game.DungeonEntryCond", [
            { no: 7, name: "cond_reason", kind: "enum", opt: true, T: () => ["com.midnights.game.DungeonEntryBlockReason", DungeonEntryBlockReason] },
            { no: 8, name: "param1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryCond>): DungeonEntryCond {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryCond>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryCond): DungeonEntryCond {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DungeonEntryBlockReason cond_reason */ 7:
                    message.condReason = reader.int32();
                    break;
                case /* optional uint32 param1 */ 8:
                    message.param1 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryCond, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DungeonEntryBlockReason cond_reason = 7; */
        if (message.condReason !== undefined)
            writer.tag(7, WireType.Varint).int32(message.condReason);
        /* optional uint32 param1 = 8; */
        if (message.param1 !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.param1);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryCond
 */
export const DungeonEntryCond = new DungeonEntryCond$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDungeonEntryExploreConditionRsp$Type extends MessageType<GetDungeonEntryExploreConditionRsp> {
    constructor() {
        super("com.midnights.game.GetDungeonEntryExploreConditionRsp", [
            { no: 5, name: "dungeon_entry_cond", kind: "message", T: () => DungeonEntryCond },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDungeonEntryExploreConditionRsp>): GetDungeonEntryExploreConditionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDungeonEntryExploreConditionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDungeonEntryExploreConditionRsp): GetDungeonEntryExploreConditionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DungeonEntryCond dungeon_entry_cond */ 5:
                    message.dungeonEntryCond = DungeonEntryCond.internalBinaryRead(reader, reader.uint32(), options, message.dungeonEntryCond);
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDungeonEntryExploreConditionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DungeonEntryCond dungeon_entry_cond = 5; */
        if (message.dungeonEntryCond)
            DungeonEntryCond.internalBinaryWrite(message.dungeonEntryCond, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetDungeonEntryExploreConditionRsp
 */
export const GetDungeonEntryExploreConditionRsp = new GetDungeonEntryExploreConditionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnfreezeGroupLimitNotify$Type extends MessageType<UnfreezeGroupLimitNotify> {
    constructor() {
        super("com.midnights.game.UnfreezeGroupLimitNotify", [
            { no: 9, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnfreezeGroupLimitNotify>): UnfreezeGroupLimitNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnfreezeGroupLimitNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnfreezeGroupLimitNotify): UnfreezeGroupLimitNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 9:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 11:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnfreezeGroupLimitNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 9; */
        if (message.pointId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.pointId);
        /* optional uint32 scene_id = 11; */
        if (message.sceneId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnfreezeGroupLimitNotify
 */
export const UnfreezeGroupLimitNotify = new UnfreezeGroupLimitNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetEntityClientDataNotify$Type extends MessageType<SetEntityClientDataNotify> {
    constructor() {
        super("com.midnights.game.SetEntityClientDataNotify", [
            { no: 14, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "entity_client_data", kind: "message", T: () => EntityClientData }
        ]);
    }
    create(value?: PartialMessage<SetEntityClientDataNotify>): SetEntityClientDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetEntityClientDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetEntityClientDataNotify): SetEntityClientDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 14:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.EntityClientData entity_client_data */ 9:
                    message.entityClientData = EntityClientData.internalBinaryRead(reader, reader.uint32(), options, message.entityClientData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetEntityClientDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 14; */
        if (message.entityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.EntityClientData entity_client_data = 9; */
        if (message.entityClientData)
            EntityClientData.internalBinaryWrite(message.entityClientData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetEntityClientDataNotify
 */
export const SetEntityClientDataNotify = new SetEntityClientDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupSuiteNotify$Type extends MessageType<GroupSuiteNotify> {
    constructor() {
        super("com.midnights.game.GroupSuiteNotify", [
            { no: 3, name: "group_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GroupSuiteNotify>): GroupSuiteNotify {
        const message = { groupMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupSuiteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupSuiteNotify): GroupSuiteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> group_map */ 3:
                    this.binaryReadMap3(message.groupMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GroupSuiteNotify["groupMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GroupSuiteNotify["groupMap"] | undefined, val: GroupSuiteNotify["groupMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GroupSuiteNotify.group_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GroupSuiteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> group_map = 3; */
        for (let k of Object.keys(message.groupMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.groupMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupSuiteNotify
 */
export const GroupSuiteNotify = new GroupSuiteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupUnloadNotify$Type extends MessageType<GroupUnloadNotify> {
    constructor() {
        super("com.midnights.game.GroupUnloadNotify", [
            { no: 10, name: "group_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupUnloadNotify>): GroupUnloadNotify {
        const message = { groupList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupUnloadNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupUnloadNotify): GroupUnloadNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 group_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupList.push(reader.uint32());
                    else
                        message.groupList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupUnloadNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 group_list = 10; */
        if (message.groupList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupList.length; i++)
                writer.uint32(message.groupList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupUnloadNotify
 */
export const GroupUnloadNotify = new GroupUnloadNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonsterAIConfigHashNotify$Type extends MessageType<MonsterAIConfigHashNotify> {
    constructor() {
        super("com.midnights.game.MonsterAIConfigHashNotify", [
            { no: 10, name: "job_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "hash_value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MonsterAIConfigHashNotify>): MonsterAIConfigHashNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MonsterAIConfigHashNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonsterAIConfigHashNotify): MonsterAIConfigHashNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 job_id */ 10:
                    message.jobId = reader.uint32();
                    break;
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional int32 hash_value */ 11:
                    message.hashValue = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonsterAIConfigHashNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 job_id = 10; */
        if (message.jobId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.jobId);
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        /* optional int32 hash_value = 11; */
        if (message.hashValue !== undefined)
            writer.tag(11, WireType.Varint).int32(message.hashValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MonsterAIConfigHashNotify
 */
export const MonsterAIConfigHashNotify = new MonsterAIConfigHashNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowTemplateReminderNotify$Type extends MessageType<ShowTemplateReminderNotify> {
    constructor() {
        super("com.midnights.game.ShowTemplateReminderNotify", [
            { no: 1, name: "is_revoke", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "template_reminder_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "param_uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "is_need_cache", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ShowTemplateReminderNotify>): ShowTemplateReminderNotify {
        const message = { paramUidList: [], paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowTemplateReminderNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowTemplateReminderNotify): ShowTemplateReminderNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_revoke */ 1:
                    message.isRevoke = reader.bool();
                    break;
                case /* optional uint32 template_reminder_id */ 14:
                    message.templateReminderId = reader.uint32();
                    break;
                case /* repeated uint32 param_uid_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramUidList.push(reader.uint32());
                    else
                        message.paramUidList.push(reader.uint32());
                    break;
                case /* repeated int32 param_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.int32());
                    else
                        message.paramList.push(reader.int32());
                    break;
                case /* optional bool is_need_cache */ 15:
                    message.isNeedCache = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowTemplateReminderNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_revoke = 1; */
        if (message.isRevoke !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isRevoke);
        /* optional uint32 template_reminder_id = 14; */
        if (message.templateReminderId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.templateReminderId);
        /* repeated uint32 param_uid_list = 3; */
        if (message.paramUidList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramUidList.length; i++)
                writer.uint32(message.paramUidList[i]);
            writer.join();
        }
        /* repeated int32 param_list = 10; */
        if (message.paramList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramList.length; i++)
                writer.int32(message.paramList[i]);
            writer.join();
        }
        /* optional bool is_need_cache = 15; */
        if (message.isNeedCache !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isNeedCache);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShowTemplateReminderNotify
 */
export const ShowTemplateReminderNotify = new ShowTemplateReminderNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowCommonTipsNotify$Type extends MessageType<ShowCommonTipsNotify> {
    constructor() {
        super("com.midnights.game.ShowCommonTipsNotify", [
            { no: 8, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShowCommonTipsNotify>): ShowCommonTipsNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowCommonTipsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowCommonTipsNotify): ShowCommonTipsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string content */ 8:
                    message.content = reader.string();
                    break;
                case /* optional string title */ 13:
                    message.title = reader.string();
                    break;
                case /* optional uint32 close_time */ 4:
                    message.closeTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowCommonTipsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string content = 8; */
        if (message.content !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        /* optional string title = 13; */
        if (message.title !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.title);
        /* optional uint32 close_time = 4; */
        if (message.closeTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.closeTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShowCommonTipsNotify
 */
export const ShowCommonTipsNotify = new ShowCommonTipsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloseCommonTipsNotify$Type extends MessageType<CloseCommonTipsNotify> {
    constructor() {
        super("com.midnights.game.CloseCommonTipsNotify", []);
    }
    create(value?: PartialMessage<CloseCommonTipsNotify>): CloseCommonTipsNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloseCommonTipsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloseCommonTipsNotify): CloseCommonTipsNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CloseCommonTipsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CloseCommonTipsNotify
 */
export const CloseCommonTipsNotify = new CloseCommonTipsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeWorldToSingleModeNotify$Type extends MessageType<ChangeWorldToSingleModeNotify> {
    constructor() {
        super("com.midnights.game.ChangeWorldToSingleModeNotify", []);
    }
    create(value?: PartialMessage<ChangeWorldToSingleModeNotify>): ChangeWorldToSingleModeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeWorldToSingleModeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeWorldToSingleModeNotify): ChangeWorldToSingleModeNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChangeWorldToSingleModeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeWorldToSingleModeNotify
 */
export const ChangeWorldToSingleModeNotify = new ChangeWorldToSingleModeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncScenePlayTeamEntityNotify$Type extends MessageType<SyncScenePlayTeamEntityNotify> {
    constructor() {
        super("com.midnights.game.SyncScenePlayTeamEntityNotify", [
            { no: 2, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "entity_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayTeamEntityInfo }
        ]);
    }
    create(value?: PartialMessage<SyncScenePlayTeamEntityNotify>): SyncScenePlayTeamEntityNotify {
        const message = { entityInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncScenePlayTeamEntityNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncScenePlayTeamEntityNotify): SyncScenePlayTeamEntityNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 2:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PlayTeamEntityInfo entity_info_list */ 3:
                    message.entityInfoList.push(PlayTeamEntityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncScenePlayTeamEntityNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 2; */
        if (message.sceneId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.sceneId);
        /* repeated com.midnights.game.PlayTeamEntityInfo entity_info_list = 3; */
        for (let i = 0; i < message.entityInfoList.length; i++)
            PlayTeamEntityInfo.internalBinaryWrite(message.entityInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SyncScenePlayTeamEntityNotify
 */
export const SyncScenePlayTeamEntityNotify = new SyncScenePlayTeamEntityNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DelScenePlayTeamEntityNotify$Type extends MessageType<DelScenePlayTeamEntityNotify> {
    constructor() {
        super("com.midnights.game.DelScenePlayTeamEntityNotify", [
            { no: 2, name: "del_entity_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DelScenePlayTeamEntityNotify>): DelScenePlayTeamEntityNotify {
        const message = { delEntityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DelScenePlayTeamEntityNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DelScenePlayTeamEntityNotify): DelScenePlayTeamEntityNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 del_entity_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.delEntityIdList.push(reader.uint32());
                    else
                        message.delEntityIdList.push(reader.uint32());
                    break;
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DelScenePlayTeamEntityNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 del_entity_id_list = 2; */
        if (message.delEntityIdList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.delEntityIdList.length; i++)
                writer.uint32(message.delEntityIdList[i]);
            writer.join();
        }
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DelScenePlayTeamEntityNotify
 */
export const DelScenePlayTeamEntityNotify = new DelScenePlayTeamEntityNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CylinderRegionSize$Type extends MessageType<CylinderRegionSize> {
    constructor() {
        super("com.midnights.game.CylinderRegionSize", [
            { no: 8, name: "radius", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "height", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CylinderRegionSize>): CylinderRegionSize {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CylinderRegionSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CylinderRegionSize): CylinderRegionSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float radius */ 8:
                    message.radius = reader.float();
                    break;
                case /* optional float height */ 7:
                    message.height = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CylinderRegionSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float radius = 8; */
        if (message.radius !== undefined)
            writer.tag(8, WireType.Bit32).float(message.radius);
        /* optional float height = 7; */
        if (message.height !== undefined)
            writer.tag(7, WireType.Bit32).float(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CylinderRegionSize
 */
export const CylinderRegionSize = new CylinderRegionSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PolygonRegionSize$Type extends MessageType<PolygonRegionSize> {
    constructor() {
        super("com.midnights.game.PolygonRegionSize", [
            { no: 5, name: "point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VectorPlane },
            { no: 9, name: "height", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PolygonRegionSize>): PolygonRegionSize {
        const message = { pointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PolygonRegionSize>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PolygonRegionSize): PolygonRegionSize {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.VectorPlane point_list */ 5:
                    message.pointList.push(VectorPlane.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional float height */ 9:
                    message.height = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PolygonRegionSize, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.VectorPlane point_list = 5; */
        for (let i = 0; i < message.pointList.length; i++)
            VectorPlane.internalBinaryWrite(message.pointList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional float height = 9; */
        if (message.height !== undefined)
            writer.tag(9, WireType.Bit32).float(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PolygonRegionSize
 */
export const PolygonRegionSize = new PolygonRegionSize$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEyePointStateNotify$Type extends MessageType<PlayerEyePointStateNotify> {
    constructor() {
        super("com.midnights.game.PlayerEyePointStateNotify", [
            { no: 15, name: "region_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "eye_point_pos", kind: "message", T: () => Vector },
            { no: 3, name: "is_use_eye_point", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "region_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "region_shape", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_filter_stream_pos", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "fix_lod_level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "region_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 255, name: "sphere_radius", kind: "scalar", oneof: "regionSize", T: 2 /*ScalarType.FLOAT*/ },
            { no: 1823, name: "cubic_size", kind: "message", oneof: "regionSize", T: () => Vector },
            { no: 1862, name: "cylinder_size", kind: "message", oneof: "regionSize", T: () => CylinderRegionSize },
            { no: 877, name: "polygon_size", kind: "message", oneof: "regionSize", T: () => PolygonRegionSize }
        ]);
    }
    create(value?: PartialMessage<PlayerEyePointStateNotify>): PlayerEyePointStateNotify {
        const message = { regionSize: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEyePointStateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEyePointStateNotify): PlayerEyePointStateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 region_entity_id */ 15:
                    message.regionEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector eye_point_pos */ 1:
                    message.eyePointPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.eyePointPos);
                    break;
                case /* optional bool is_use_eye_point */ 3:
                    message.isUseEyePoint = reader.bool();
                    break;
                case /* optional uint32 region_config_id */ 7:
                    message.regionConfigId = reader.uint32();
                    break;
                case /* optional uint32 region_shape */ 12:
                    message.regionShape = reader.uint32();
                    break;
                case /* optional bool is_filter_stream_pos */ 2:
                    message.isFilterStreamPos = reader.bool();
                    break;
                case /* optional int32 fix_lod_level */ 5:
                    message.fixLodLevel = reader.int32();
                    break;
                case /* optional uint32 region_group_id */ 4:
                    message.regionGroupId = reader.uint32();
                    break;
                case /* float sphere_radius */ 255:
                    message.regionSize = {
                        oneofKind: "sphereRadius",
                        sphereRadius: reader.float()
                    };
                    break;
                case /* com.midnights.game.Vector cubic_size */ 1823:
                    message.regionSize = {
                        oneofKind: "cubicSize",
                        cubicSize: Vector.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).cubicSize)
                    };
                    break;
                case /* com.midnights.game.CylinderRegionSize cylinder_size */ 1862:
                    message.regionSize = {
                        oneofKind: "cylinderSize",
                        cylinderSize: CylinderRegionSize.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).cylinderSize)
                    };
                    break;
                case /* com.midnights.game.PolygonRegionSize polygon_size */ 877:
                    message.regionSize = {
                        oneofKind: "polygonSize",
                        polygonSize: PolygonRegionSize.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).polygonSize)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEyePointStateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 region_entity_id = 15; */
        if (message.regionEntityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.regionEntityId);
        /* optional com.midnights.game.Vector eye_point_pos = 1; */
        if (message.eyePointPos)
            Vector.internalBinaryWrite(message.eyePointPos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_use_eye_point = 3; */
        if (message.isUseEyePoint !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isUseEyePoint);
        /* optional uint32 region_config_id = 7; */
        if (message.regionConfigId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.regionConfigId);
        /* optional uint32 region_shape = 12; */
        if (message.regionShape !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.regionShape);
        /* optional bool is_filter_stream_pos = 2; */
        if (message.isFilterStreamPos !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isFilterStreamPos);
        /* optional int32 fix_lod_level = 5; */
        if (message.fixLodLevel !== undefined)
            writer.tag(5, WireType.Varint).int32(message.fixLodLevel);
        /* optional uint32 region_group_id = 4; */
        if (message.regionGroupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.regionGroupId);
        /* float sphere_radius = 255; */
        if (message.regionSize.oneofKind === "sphereRadius")
            writer.tag(255, WireType.Bit32).float(message.regionSize.sphereRadius);
        /* com.midnights.game.Vector cubic_size = 1823; */
        if (message.regionSize.oneofKind === "cubicSize")
            Vector.internalBinaryWrite(message.regionSize.cubicSize, writer.tag(1823, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CylinderRegionSize cylinder_size = 1862; */
        if (message.regionSize.oneofKind === "cylinderSize")
            CylinderRegionSize.internalBinaryWrite(message.regionSize.cylinderSize, writer.tag(1862, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PolygonRegionSize polygon_size = 877; */
        if (message.regionSize.oneofKind === "polygonSize")
            PolygonRegionSize.internalBinaryWrite(message.regionSize.polygonSize, writer.tag(877, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerEyePointStateNotify
 */
export const PlayerEyePointStateNotify = new PlayerEyePointStateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapMarkTipsReq$Type extends MessageType<GetMapMarkTipsReq> {
    constructor() {
        super("com.midnights.game.GetMapMarkTipsReq", []);
    }
    create(value?: PartialMessage<GetMapMarkTipsReq>): GetMapMarkTipsReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMapMarkTipsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMapMarkTipsReq): GetMapMarkTipsReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMapMarkTipsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMapMarkTipsReq
 */
export const GetMapMarkTipsReq = new GetMapMarkTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapMarkTipsRsp$Type extends MessageType<GetMapMarkTipsRsp> {
    constructor() {
        super("com.midnights.game.GetMapMarkTipsRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "mark_tips_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MapMarkTipsInfo }
        ]);
    }
    create(value?: PartialMessage<GetMapMarkTipsRsp>): GetMapMarkTipsRsp {
        const message = { markTipsList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMapMarkTipsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMapMarkTipsRsp): GetMapMarkTipsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.MapMarkTipsInfo mark_tips_list */ 11:
                    message.markTipsList.push(MapMarkTipsInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMapMarkTipsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.MapMarkTipsInfo mark_tips_list = 11; */
        for (let i = 0; i < message.markTipsList.length; i++)
            MapMarkTipsInfo.internalBinaryWrite(message.markTipsList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMapMarkTipsRsp
 */
export const GetMapMarkTipsRsp = new GetMapMarkTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeWorldToSingleModeReq$Type extends MessageType<ChangeWorldToSingleModeReq> {
    constructor() {
        super("com.midnights.game.ChangeWorldToSingleModeReq", []);
    }
    create(value?: PartialMessage<ChangeWorldToSingleModeReq>): ChangeWorldToSingleModeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeWorldToSingleModeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeWorldToSingleModeReq): ChangeWorldToSingleModeReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChangeWorldToSingleModeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeWorldToSingleModeReq
 */
export const ChangeWorldToSingleModeReq = new ChangeWorldToSingleModeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeWorldToSingleModeRsp$Type extends MessageType<ChangeWorldToSingleModeRsp> {
    constructor() {
        super("com.midnights.game.ChangeWorldToSingleModeRsp", [
            { no: 15, name: "quit_mp_valid_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeWorldToSingleModeRsp>): ChangeWorldToSingleModeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeWorldToSingleModeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeWorldToSingleModeRsp): ChangeWorldToSingleModeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quit_mp_valid_time */ 15:
                    message.quitMpValidTime = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeWorldToSingleModeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quit_mp_valid_time = 15; */
        if (message.quitMpValidTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.quitMpValidTime);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeWorldToSingleModeRsp
 */
export const ChangeWorldToSingleModeRsp = new ChangeWorldToSingleModeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWorldMpInfoReq$Type extends MessageType<GetWorldMpInfoReq> {
    constructor() {
        super("com.midnights.game.GetWorldMpInfoReq", []);
    }
    create(value?: PartialMessage<GetWorldMpInfoReq>): GetWorldMpInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWorldMpInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWorldMpInfoReq): GetWorldMpInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetWorldMpInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetWorldMpInfoReq
 */
export const GetWorldMpInfoReq = new GetWorldMpInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWorldMpInfoRsp$Type extends MessageType<GetWorldMpInfoRsp> {
    constructor() {
        super("com.midnights.game.GetWorldMpInfoRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "is_in_mp_mode", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "quit_mp_valid_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetWorldMpInfoRsp>): GetWorldMpInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWorldMpInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWorldMpInfoRsp): GetWorldMpInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_in_mp_mode */ 1:
                    message.isInMpMode = reader.bool();
                    break;
                case /* optional uint32 quit_mp_valid_time */ 9:
                    message.quitMpValidTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWorldMpInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional bool is_in_mp_mode = 1; */
        if (message.isInMpMode !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isInMpMode);
        /* optional uint32 quit_mp_valid_time = 9; */
        if (message.quitMpValidTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.quitMpValidTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetWorldMpInfoRsp
 */
export const GetWorldMpInfoRsp = new GetWorldMpInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityConfigHashEntry$Type extends MessageType<EntityConfigHashEntry> {
    constructor() {
        super("com.midnights.game.EntityConfigHashEntry", [
            { no: 13, name: "job_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "hash_value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EntityConfigHashEntry>): EntityConfigHashEntry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityConfigHashEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityConfigHashEntry): EntityConfigHashEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 job_id */ 13:
                    message.jobId = reader.uint32();
                    break;
                case /* optional int32 hash_value */ 6:
                    message.hashValue = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityConfigHashEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 job_id = 13; */
        if (message.jobId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.jobId);
        /* optional int32 hash_value = 6; */
        if (message.hashValue !== undefined)
            writer.tag(6, WireType.Varint).int32(message.hashValue);
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityConfigHashEntry
 */
export const EntityConfigHashEntry = new EntityConfigHashEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityConfigHashNotify$Type extends MessageType<EntityConfigHashNotify> {
    constructor() {
        super("com.midnights.game.EntityConfigHashNotify", [
            { no: 3, name: "ability_entry_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityConfigHashEntry },
            { no: 15, name: "avatar_entry_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityConfigHashEntry },
            { no: 8, name: "combat_entry_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EntityConfigHashEntry }
        ]);
    }
    create(value?: PartialMessage<EntityConfigHashNotify>): EntityConfigHashNotify {
        const message = { abilityEntryList: [], avatarEntryList: [], combatEntryList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityConfigHashNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityConfigHashNotify): EntityConfigHashNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EntityConfigHashEntry ability_entry_list */ 3:
                    message.abilityEntryList.push(EntityConfigHashEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.EntityConfigHashEntry avatar_entry_list */ 15:
                    message.avatarEntryList.push(EntityConfigHashEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.EntityConfigHashEntry combat_entry_list */ 8:
                    message.combatEntryList.push(EntityConfigHashEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityConfigHashNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EntityConfigHashEntry ability_entry_list = 3; */
        for (let i = 0; i < message.abilityEntryList.length; i++)
            EntityConfigHashEntry.internalBinaryWrite(message.abilityEntryList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.EntityConfigHashEntry avatar_entry_list = 15; */
        for (let i = 0; i < message.avatarEntryList.length; i++)
            EntityConfigHashEntry.internalBinaryWrite(message.avatarEntryList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.EntityConfigHashEntry combat_entry_list = 8; */
        for (let i = 0; i < message.combatEntryList.length; i++)
            EntityConfigHashEntry.internalBinaryWrite(message.combatEntryList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityConfigHashNotify
 */
export const EntityConfigHashNotify = new EntityConfigHashNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForceDragAvatarNotify$Type extends MessageType<ForceDragAvatarNotify> {
    constructor() {
        super("com.midnights.game.ForceDragAvatarNotify", [
            { no: 3, name: "scene_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "delta_time_ms", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "motion_info", kind: "message", T: () => MotionInfo },
            { no: 8, name: "is_first_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "last_move_time_ms", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ForceDragAvatarNotify>): ForceDragAvatarNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForceDragAvatarNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForceDragAvatarNotify): ForceDragAvatarNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_time */ 3:
                    message.sceneTime = reader.uint32();
                    break;
                case /* optional uint64 delta_time_ms */ 1:
                    message.deltaTimeMs = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MotionInfo motion_info */ 10:
                    message.motionInfo = MotionInfo.internalBinaryRead(reader, reader.uint32(), options, message.motionInfo);
                    break;
                case /* optional bool is_first_valid */ 8:
                    message.isFirstValid = reader.bool();
                    break;
                case /* optional uint64 last_move_time_ms */ 12:
                    message.lastMoveTimeMs = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForceDragAvatarNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_time = 3; */
        if (message.sceneTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.sceneTime);
        /* optional uint64 delta_time_ms = 1; */
        if (message.deltaTimeMs !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.deltaTimeMs);
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.MotionInfo motion_info = 10; */
        if (message.motionInfo)
            MotionInfo.internalBinaryWrite(message.motionInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_first_valid = 8; */
        if (message.isFirstValid !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isFirstValid);
        /* optional uint64 last_move_time_ms = 12; */
        if (message.lastMoveTimeMs !== undefined)
            writer.tag(12, WireType.Varint).uint64(message.lastMoveTimeMs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForceDragAvatarNotify
 */
export const ForceDragAvatarNotify = new ForceDragAvatarNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MonsterPointArrayRouteUpdateNotify$Type extends MessageType<MonsterPointArrayRouteUpdateNotify> {
    constructor() {
        super("com.midnights.game.MonsterPointArrayRouteUpdateNotify", [
            { no: 7, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "monster_route", kind: "message", T: () => MonsterRoute }
        ]);
    }
    create(value?: PartialMessage<MonsterPointArrayRouteUpdateNotify>): MonsterPointArrayRouteUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MonsterPointArrayRouteUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MonsterPointArrayRouteUpdateNotify): MonsterPointArrayRouteUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 7:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MonsterRoute monster_route */ 5:
                    message.monsterRoute = MonsterRoute.internalBinaryRead(reader, reader.uint32(), options, message.monsterRoute);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MonsterPointArrayRouteUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 7; */
        if (message.entityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.MonsterRoute monster_route = 5; */
        if (message.monsterRoute)
            MonsterRoute.internalBinaryWrite(message.monsterRoute, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MonsterPointArrayRouteUpdateNotify
 */
export const MonsterPointArrayRouteUpdateNotify = new MonsterPointArrayRouteUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForceDragBackTransferNotify$Type extends MessageType<ForceDragBackTransferNotify> {
    constructor() {
        super("com.midnights.game.ForceDragBackTransferNotify", []);
    }
    create(value?: PartialMessage<ForceDragBackTransferNotify>): ForceDragBackTransferNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForceDragBackTransferNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForceDragBackTransferNotify): ForceDragBackTransferNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ForceDragBackTransferNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForceDragBackTransferNotify
 */
export const ForceDragBackTransferNotify = new ForceDragBackTransferNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetScenePerformanceReq$Type extends MessageType<GetScenePerformanceReq> {
    constructor() {
        super("com.midnights.game.GetScenePerformanceReq", []);
    }
    create(value?: PartialMessage<GetScenePerformanceReq>): GetScenePerformanceReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetScenePerformanceReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScenePerformanceReq): GetScenePerformanceReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetScenePerformanceReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetScenePerformanceReq
 */
export const GetScenePerformanceReq = new GetScenePerformanceReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetScenePerformanceRsp$Type extends MessageType<GetScenePerformanceRsp> {
    constructor() {
        super("com.midnights.game.GetScenePerformanceRsp", [
            { no: 9, name: "monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "gather_num_insight", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "gadget_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "dynamic_group_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "pos", kind: "message", T: () => Vector },
            { no: 8, name: "entity_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gather_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetScenePerformanceRsp>): GetScenePerformanceRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetScenePerformanceRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetScenePerformanceRsp): GetScenePerformanceRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 monster_num */ 9:
                    message.monsterNum = reader.uint32();
                    break;
                case /* optional uint32 gather_num_insight */ 1:
                    message.gatherNumInsight = reader.uint32();
                    break;
                case /* optional uint32 gadget_num */ 6:
                    message.gadgetNum = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dynamic_group_num */ 12:
                    message.dynamicGroupNum = reader.uint32();
                    break;
                case /* optional uint32 group_num */ 2:
                    message.groupNum = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 4:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 entity_num */ 8:
                    message.entityNum = reader.uint32();
                    break;
                case /* optional uint32 gather_num */ 13:
                    message.gatherNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetScenePerformanceRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 monster_num = 9; */
        if (message.monsterNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.monsterNum);
        /* optional uint32 gather_num_insight = 1; */
        if (message.gatherNumInsight !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.gatherNumInsight);
        /* optional uint32 gadget_num = 6; */
        if (message.gadgetNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.gadgetNum);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 dynamic_group_num = 12; */
        if (message.dynamicGroupNum !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dynamicGroupNum);
        /* optional uint32 group_num = 2; */
        if (message.groupNum !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupNum);
        /* optional com.midnights.game.Vector pos = 4; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_num = 8; */
        if (message.entityNum !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityNum);
        /* optional uint32 gather_num = 13; */
        if (message.gatherNum !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gatherNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetScenePerformanceRsp
 */
export const GetScenePerformanceRsp = new GetScenePerformanceRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneAudioNotify$Type extends MessageType<SceneAudioNotify> {
    constructor() {
        super("com.midnights.game.SceneAudioNotify", [
            { no: 14, name: "param2", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "param3", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "source_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "param1", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneAudioNotify>): SceneAudioNotify {
        const message = { param2: [], param3: [], param1: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneAudioNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneAudioNotify): SceneAudioNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated float param2 */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.param2.push(reader.float());
                    else
                        message.param2.push(reader.float());
                    break;
                case /* optional int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* repeated string param3 */ 11:
                    message.param3.push(reader.string());
                    break;
                case /* optional uint32 source_uid */ 6:
                    message.sourceUid = reader.uint32();
                    break;
                case /* repeated uint32 param1 */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.param1.push(reader.uint32());
                    else
                        message.param1.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneAudioNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated float param2 = 14; */
        if (message.param2.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.param2.length; i++)
                writer.float(message.param2[i]);
            writer.join();
        }
        /* optional int32 type = 3; */
        if (message.type !== undefined)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* repeated string param3 = 11; */
        for (let i = 0; i < message.param3.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.param3[i]);
        /* optional uint32 source_uid = 6; */
        if (message.sourceUid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.sourceUid);
        /* repeated uint32 param1 = 4; */
        if (message.param1.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.param1.length; i++)
                writer.uint32(message.param1[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneAudioNotify
 */
export const SceneAudioNotify = new SceneAudioNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HitTreeNotify$Type extends MessageType<HitTreeNotify> {
    constructor() {
        super("com.midnights.game.HitTreeNotify", [
            { no: 11, name: "tree_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "tree_pos", kind: "message", T: () => Vector },
            { no: 8, name: "drop_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<HitTreeNotify>): HitTreeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HitTreeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HitTreeNotify): HitTreeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tree_type */ 11:
                    message.treeType = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector tree_pos */ 2:
                    message.treePos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.treePos);
                    break;
                case /* optional com.midnights.game.Vector drop_pos */ 8:
                    message.dropPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.dropPos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HitTreeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tree_type = 11; */
        if (message.treeType !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.treeType);
        /* optional com.midnights.game.Vector tree_pos = 2; */
        if (message.treePos)
            Vector.internalBinaryWrite(message.treePos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector drop_pos = 8; */
        if (message.dropPos)
            Vector.internalBinaryWrite(message.dropPos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HitTreeNotify
 */
export const HitTreeNotify = new HitTreeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityTagChangeNotify$Type extends MessageType<EntityTagChangeNotify> {
    constructor() {
        super("com.midnights.game.EntityTagChangeNotify", [
            { no: 2, name: "tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_add", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<EntityTagChangeNotify>): EntityTagChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityTagChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityTagChangeNotify): EntityTagChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string tag */ 2:
                    message.tag = reader.string();
                    break;
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                case /* optional bool is_add */ 10:
                    message.isAdd = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityTagChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string tag = 2; */
        if (message.tag !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.tag);
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        /* optional bool is_add = 10; */
        if (message.isAdd !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isAdd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityTagChangeNotify
 */
export const EntityTagChangeNotify = new EntityTagChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarFollowRouteNotify$Type extends MessageType<AvatarFollowRouteNotify> {
    constructor() {
        super("com.midnights.game.AvatarFollowRouteNotify", [
            { no: 4, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "template_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "start_scene_time_ms", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "route", kind: "message", T: () => Route },
            { no: 13, name: "client_params", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarFollowRouteNotify>): AvatarFollowRouteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarFollowRouteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarFollowRouteNotify): AvatarFollowRouteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 4:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 template_id */ 6:
                    message.templateId = reader.uint32();
                    break;
                case /* optional uint32 start_scene_time_ms */ 8:
                    message.startSceneTimeMs = reader.uint32();
                    break;
                case /* optional com.midnights.game.Route route */ 2:
                    message.route = Route.internalBinaryRead(reader, reader.uint32(), options, message.route);
                    break;
                case /* optional string client_params */ 13:
                    message.clientParams = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarFollowRouteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 4; */
        if (message.entityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.entityId);
        /* optional uint32 template_id = 6; */
        if (message.templateId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.templateId);
        /* optional uint32 start_scene_time_ms = 8; */
        if (message.startSceneTimeMs !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.startSceneTimeMs);
        /* optional com.midnights.game.Route route = 2; */
        if (message.route)
            Route.internalBinaryWrite(message.route, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string client_params = 13; */
        if (message.clientParams !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.clientParams);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AvatarFollowRouteNotify
 */
export const AvatarFollowRouteNotify = new AvatarFollowRouteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneEntityUpdateNotify$Type extends MessageType<SceneEntityUpdateNotify> {
    constructor() {
        super("com.midnights.game.SceneEntityUpdateNotify", [
            { no: 10, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "appear_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VisionType", VisionType] },
            { no: 5, name: "entity_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneEntityInfo }
        ]);
    }
    create(value?: PartialMessage<SceneEntityUpdateNotify>): SceneEntityUpdateNotify {
        const message = { entityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneEntityUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneEntityUpdateNotify): SceneEntityUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 10:
                    message.param = reader.uint32();
                    break;
                case /* optional com.midnights.game.VisionType appear_type */ 13:
                    message.appearType = reader.int32();
                    break;
                case /* repeated com.midnights.game.SceneEntityInfo entity_list */ 5:
                    message.entityList.push(SceneEntityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneEntityUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param = 10; */
        if (message.param !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.param);
        /* optional com.midnights.game.VisionType appear_type = 13; */
        if (message.appearType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.appearType);
        /* repeated com.midnights.game.SceneEntityInfo entity_list = 5; */
        for (let i = 0; i < message.entityList.length; i++)
            SceneEntityInfo.internalBinaryWrite(message.entityList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneEntityUpdateNotify
 */
export const SceneEntityUpdateNotify = new SceneEntityUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientHashDebugNotify$Type extends MessageType<ClientHashDebugNotify> {
    constructor() {
        super("com.midnights.game.ClientHashDebugNotify", [
            { no: 12, name: "job_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientHashDebugNotify>): ClientHashDebugNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientHashDebugNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientHashDebugNotify): ClientHashDebugNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 job_id */ 12:
                    message.jobId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientHashDebugNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 job_id = 12; */
        if (message.jobId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientHashDebugNotify
 */
export const ClientHashDebugNotify = new ClientHashDebugNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerWorldSceneInfo$Type extends MessageType<PlayerWorldSceneInfo> {
    constructor() {
        super("com.midnights.game.PlayerWorldSceneInfo", [
            { no: 11, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "scene_tag_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerWorldSceneInfo>): PlayerWorldSceneInfo {
        const message = { sceneTagIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerWorldSceneInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerWorldSceneInfo): PlayerWorldSceneInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 11:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated uint32 scene_tag_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sceneTagIdList.push(reader.uint32());
                    else
                        message.sceneTagIdList.push(reader.uint32());
                    break;
                case /* optional bool is_locked */ 12:
                    message.isLocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerWorldSceneInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 11; */
        if (message.sceneId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sceneId);
        /* repeated uint32 scene_tag_id_list = 8; */
        if (message.sceneTagIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sceneTagIdList.length; i++)
                writer.uint32(message.sceneTagIdList[i]);
            writer.join();
        }
        /* optional bool is_locked = 12; */
        if (message.isLocked !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isLocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerWorldSceneInfo
 */
export const PlayerWorldSceneInfo = new PlayerWorldSceneInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerWorldSceneInfoListNotify$Type extends MessageType<PlayerWorldSceneInfoListNotify> {
    constructor() {
        super("com.midnights.game.PlayerWorldSceneInfoListNotify", [
            { no: 5, name: "info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerWorldSceneInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerWorldSceneInfoListNotify>): PlayerWorldSceneInfoListNotify {
        const message = { infoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerWorldSceneInfoListNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerWorldSceneInfoListNotify): PlayerWorldSceneInfoListNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerWorldSceneInfo info_list */ 5:
                    message.infoList.push(PlayerWorldSceneInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerWorldSceneInfoListNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerWorldSceneInfo info_list = 5; */
        for (let i = 0; i < message.infoList.length; i++)
            PlayerWorldSceneInfo.internalBinaryWrite(message.infoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerWorldSceneInfoListNotify
 */
export const PlayerWorldSceneInfoListNotify = new PlayerWorldSceneInfoListNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuaEnvironmentEffectNotify$Type extends MessageType<LuaEnvironmentEffectNotify> {
    constructor() {
        super("com.midnights.game.LuaEnvironmentEffectNotify", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "int_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "effect_alias", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "float_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<LuaEnvironmentEffectNotify>): LuaEnvironmentEffectNotify {
        const message = { intParamList: [], floatParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuaEnvironmentEffectNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuaEnvironmentEffectNotify): LuaEnvironmentEffectNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* repeated int32 int_param_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.intParamList.push(reader.int32());
                    else
                        message.intParamList.push(reader.int32());
                    break;
                case /* optional string effect_alias */ 3:
                    message.effectAlias = reader.string();
                    break;
                case /* repeated float float_param_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.floatParamList.push(reader.float());
                    else
                        message.floatParamList.push(reader.float());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuaEnvironmentEffectNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* repeated int32 int_param_list = 12; */
        if (message.intParamList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.intParamList.length; i++)
                writer.int32(message.intParamList[i]);
            writer.join();
        }
        /* optional string effect_alias = 3; */
        if (message.effectAlias !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.effectAlias);
        /* repeated float float_param_list = 14; */
        if (message.floatParamList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.floatParamList.length; i++)
                writer.float(message.floatParamList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuaEnvironmentEffectNotify
 */
export const LuaEnvironmentEffectNotify = new LuaEnvironmentEffectNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientLoadingCostumeVerificationNotify$Type extends MessageType<ClientLoadingCostumeVerificationNotify> {
    constructor() {
        super("com.midnights.game.ClientLoadingCostumeVerificationNotify", [
            { no: 9, name: "costume_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "prefab_hash", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ClientLoadingCostumeVerificationNotify>): ClientLoadingCostumeVerificationNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientLoadingCostumeVerificationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientLoadingCostumeVerificationNotify): ClientLoadingCostumeVerificationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 costume_id */ 9:
                    message.costumeId = reader.uint32();
                    break;
                case /* optional uint64 prefab_hash */ 2:
                    message.prefabHash = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 guid */ 14:
                    message.guid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientLoadingCostumeVerificationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 costume_id = 9; */
        if (message.costumeId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.costumeId);
        /* optional uint64 prefab_hash = 2; */
        if (message.prefabHash !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.prefabHash);
        /* optional uint64 guid = 14; */
        if (message.guid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.guid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientLoadingCostumeVerificationNotify
 */
export const ClientLoadingCostumeVerificationNotify = new ClientLoadingCostumeVerificationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowClientGuideNotify$Type extends MessageType<ShowClientGuideNotify> {
    constructor() {
        super("com.midnights.game.ShowClientGuideNotify", [
            { no: 7, name: "guide_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShowClientGuideNotify>): ShowClientGuideNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowClientGuideNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowClientGuideNotify): ShowClientGuideNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string guide_name */ 7:
                    message.guideName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowClientGuideNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string guide_name = 7; */
        if (message.guideName !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.guideName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShowClientGuideNotify
 */
export const ShowClientGuideNotify = new ShowClientGuideNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowClientTutorialNotify$Type extends MessageType<ShowClientTutorialNotify> {
    constructor() {
        super("com.midnights.game.ShowClientTutorialNotify", [
            { no: 2, name: "tutorial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ShowClientTutorialNotify>): ShowClientTutorialNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowClientTutorialNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowClientTutorialNotify): ShowClientTutorialNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 tutorial_id */ 2:
                    message.tutorialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowClientTutorialNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 tutorial_id = 2; */
        if (message.tutorialId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.tutorialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShowClientTutorialNotify
 */
export const ShowClientTutorialNotify = new ShowClientTutorialNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapAreaReq$Type extends MessageType<GetMapAreaReq> {
    constructor() {
        super("com.midnights.game.GetMapAreaReq", []);
    }
    create(value?: PartialMessage<GetMapAreaReq>): GetMapAreaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMapAreaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMapAreaReq): GetMapAreaReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMapAreaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMapAreaReq
 */
export const GetMapAreaReq = new GetMapAreaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMapAreaRsp$Type extends MessageType<GetMapAreaRsp> {
    constructor() {
        super("com.midnights.game.GetMapAreaRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "map_area_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MapAreaInfo }
        ]);
    }
    create(value?: PartialMessage<GetMapAreaRsp>): GetMapAreaRsp {
        const message = { mapAreaInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMapAreaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMapAreaRsp): GetMapAreaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.MapAreaInfo map_area_info_list */ 9:
                    message.mapAreaInfoList.push(MapAreaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMapAreaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.MapAreaInfo map_area_info_list = 9; */
        for (let i = 0; i < message.mapAreaInfoList.length; i++)
            MapAreaInfo.internalBinaryWrite(message.mapAreaInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMapAreaRsp
 */
export const GetMapAreaRsp = new GetMapAreaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapAreaChangeNotify$Type extends MessageType<MapAreaChangeNotify> {
    constructor() {
        super("com.midnights.game.MapAreaChangeNotify", [
            { no: 3, name: "map_area_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MapAreaInfo }
        ]);
    }
    create(value?: PartialMessage<MapAreaChangeNotify>): MapAreaChangeNotify {
        const message = { mapAreaInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MapAreaChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MapAreaChangeNotify): MapAreaChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MapAreaInfo map_area_info_list */ 3:
                    message.mapAreaInfoList.push(MapAreaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MapAreaChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MapAreaInfo map_area_info_list = 3; */
        for (let i = 0; i < message.mapAreaInfoList.length; i++)
            MapAreaInfo.internalBinaryWrite(message.mapAreaInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MapAreaChangeNotify
 */
export const MapAreaChangeNotify = new MapAreaChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveWorldNotify$Type extends MessageType<LeaveWorldNotify> {
    constructor() {
        super("com.midnights.game.LeaveWorldNotify", []);
    }
    create(value?: PartialMessage<LeaveWorldNotify>): LeaveWorldNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveWorldNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveWorldNotify): LeaveWorldNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveWorldNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LeaveWorldNotify
 */
export const LeaveWorldNotify = new LeaveWorldNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestBeginEnterSceneNotify$Type extends MessageType<GuestBeginEnterSceneNotify> {
    constructor() {
        super("com.midnights.game.GuestBeginEnterSceneNotify", [
            { no: 8, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GuestBeginEnterSceneNotify>): GuestBeginEnterSceneNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestBeginEnterSceneNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestBeginEnterSceneNotify): GuestBeginEnterSceneNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 8:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestBeginEnterSceneNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 8; */
        if (message.sceneId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GuestBeginEnterSceneNotify
 */
export const GuestBeginEnterSceneNotify = new GuestBeginEnterSceneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuestPostEnterSceneNotify$Type extends MessageType<GuestPostEnterSceneNotify> {
    constructor() {
        super("com.midnights.game.GuestPostEnterSceneNotify", [
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GuestPostEnterSceneNotify>): GuestPostEnterSceneNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GuestPostEnterSceneNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuestPostEnterSceneNotify): GuestPostEnterSceneNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 4:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuestPostEnterSceneNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 uid = 4; */
        if (message.uid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GuestPostEnterSceneNotify
 */
export const GuestPostEnterSceneNotify = new GuestPostEnterSceneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LevelTagDataNotify$Type extends MessageType<LevelTagDataNotify> {
    constructor() {
        super("com.midnights.game.LevelTagDataNotify", [
            { no: 9, name: "level_tag_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LevelTagDataNotify>): LevelTagDataNotify {
        const message = { levelTagIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LevelTagDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LevelTagDataNotify): LevelTagDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 level_tag_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.levelTagIdList.push(reader.uint32());
                    else
                        message.levelTagIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LevelTagDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 level_tag_id_list = 9; */
        if (message.levelTagIdList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.levelTagIdList.length; i++)
                writer.uint32(message.levelTagIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LevelTagDataNotify
 */
export const LevelTagDataNotify = new LevelTagDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReminderNotify$Type extends MessageType<StopReminderNotify> {
    constructor() {
        super("com.midnights.game.StopReminderNotify", [
            { no: 15, name: "reminder_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StopReminderNotify>): StopReminderNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StopReminderNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReminderNotify): StopReminderNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reminder_id */ 15:
                    message.reminderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReminderNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reminder_id = 15; */
        if (message.reminderId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.reminderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StopReminderNotify
 */
export const StopReminderNotify = new StopReminderNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AreaPlayInfoNotify$Type extends MessageType<AreaPlayInfoNotify> {
    constructor() {
        super("com.midnights.game.AreaPlayInfoNotify", [
            { no: 14, name: "detail_play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "area_play_type", kind: "enum", opt: true, T: () => ["com.midnights.game.AreaPlayType", AreaPlayType] }
        ]);
    }
    create(value?: PartialMessage<AreaPlayInfoNotify>): AreaPlayInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AreaPlayInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AreaPlayInfoNotify): AreaPlayInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 detail_play_type */ 14:
                    message.detailPlayType = reader.uint32();
                    break;
                case /* optional com.midnights.game.AreaPlayType area_play_type */ 11:
                    message.areaPlayType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AreaPlayInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 detail_play_type = 14; */
        if (message.detailPlayType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.detailPlayType);
        /* optional com.midnights.game.AreaPlayType area_play_type = 11; */
        if (message.areaPlayType !== undefined)
            writer.tag(11, WireType.Varint).int32(message.areaPlayType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AreaPlayInfoNotify
 */
export const AreaPlayInfoNotify = new AreaPlayInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckGroupReplacedReq$Type extends MessageType<CheckGroupReplacedReq> {
    constructor() {
        super("com.midnights.game.CheckGroupReplacedReq", [
            { no: 7, name: "group_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CheckGroupReplacedReq>): CheckGroupReplacedReq {
        const message = { groupIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckGroupReplacedReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckGroupReplacedReq): CheckGroupReplacedReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 group_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.groupIdList.push(reader.uint32());
                    else
                        message.groupIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckGroupReplacedReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 group_id_list = 7; */
        if (message.groupIdList.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.groupIdList.length; i++)
                writer.uint32(message.groupIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckGroupReplacedReq
 */
export const CheckGroupReplacedReq = new CheckGroupReplacedReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckGroupReplacedRsp$Type extends MessageType<CheckGroupReplacedRsp> {
    constructor() {
        super("com.midnights.game.CheckGroupReplacedRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "replaced_group_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CheckGroupReplacedRsp>): CheckGroupReplacedRsp {
        const message = { replacedGroupIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckGroupReplacedRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckGroupReplacedRsp): CheckGroupReplacedRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 replaced_group_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.replacedGroupIdList.push(reader.uint32());
                    else
                        message.replacedGroupIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckGroupReplacedRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* repeated uint32 replaced_group_id_list = 6; */
        if (message.replacedGroupIdList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.replacedGroupIdList.length; i++)
                writer.uint32(message.replacedGroupIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckGroupReplacedRsp
 */
export const CheckGroupReplacedRsp = new CheckGroupReplacedRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeathZoneObserveNotify$Type extends MessageType<DeathZoneObserveNotify> {
    constructor() {
        super("com.midnights.game.DeathZoneObserveNotify", [
            { no: 14, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "source_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeathZoneObserveNotify>): DeathZoneObserveNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeathZoneObserveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathZoneObserveNotify): DeathZoneObserveNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_entity_id */ 14:
                    message.targetEntityId = reader.uint32();
                    break;
                case /* optional uint32 source_entity_id */ 12:
                    message.sourceEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeathZoneObserveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_entity_id = 14; */
        if (message.targetEntityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.targetEntityId);
        /* optional uint32 source_entity_id = 12; */
        if (message.sourceEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sourceEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DeathZoneObserveNotify
 */
export const DeathZoneObserveNotify = new DeathZoneObserveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HitTreeInfo$Type extends MessageType<HitTreeInfo> {
    constructor() {
        super("com.midnights.game.HitTreeInfo", [
            { no: 12, name: "tree_pos", kind: "message", T: () => Vector },
            { no: 8, name: "tree_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HitTreeInfo>): HitTreeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HitTreeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HitTreeInfo): HitTreeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector tree_pos */ 12:
                    message.treePos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.treePos);
                    break;
                case /* optional uint32 tree_type */ 8:
                    message.treeType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HitTreeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector tree_pos = 12; */
        if (message.treePos)
            Vector.internalBinaryWrite(message.treePos, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 tree_type = 8; */
        if (message.treeType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.treeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HitTreeInfo
 */
export const HitTreeInfo = new HitTreeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldChestOpenNotify$Type extends MessageType<WorldChestOpenNotify> {
    constructor() {
        super("com.midnights.game.WorldChestOpenNotify", [
            { no: 6, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WorldChestOpenNotify>): WorldChestOpenNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldChestOpenNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldChestOpenNotify): WorldChestOpenNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 6:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 9:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 12:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldChestOpenNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 6; */
        if (message.groupId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.groupId);
        /* optional uint32 scene_id = 9; */
        if (message.sceneId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 config_id = 12; */
        if (message.configId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldChestOpenNotify
 */
export const WorldChestOpenNotify = new WorldChestOpenNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetQuickHitTreeReq$Type extends MessageType<WidgetQuickHitTreeReq> {
    constructor() {
        super("com.midnights.game.WidgetQuickHitTreeReq", [
            { no: 5, name: "hit_tree_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HitTreeInfo }
        ]);
    }
    create(value?: PartialMessage<WidgetQuickHitTreeReq>): WidgetQuickHitTreeReq {
        const message = { hitTreeInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetQuickHitTreeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetQuickHitTreeReq): WidgetQuickHitTreeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.HitTreeInfo hit_tree_info_list */ 5:
                    message.hitTreeInfoList.push(HitTreeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetQuickHitTreeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.HitTreeInfo hit_tree_info_list = 5; */
        for (let i = 0; i < message.hitTreeInfoList.length; i++)
            HitTreeInfo.internalBinaryWrite(message.hitTreeInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetQuickHitTreeReq
 */
export const WidgetQuickHitTreeReq = new WidgetQuickHitTreeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetQuickHitTreeRsp$Type extends MessageType<WidgetQuickHitTreeRsp> {
    constructor() {
        super("com.midnights.game.WidgetQuickHitTreeRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetQuickHitTreeRsp>): WidgetQuickHitTreeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetQuickHitTreeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetQuickHitTreeRsp): WidgetQuickHitTreeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetQuickHitTreeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetQuickHitTreeRsp
 */
export const WidgetQuickHitTreeRsp = new WidgetQuickHitTreeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BeginCameraSceneLookWithTemplateNotify$Type extends MessageType<BeginCameraSceneLookWithTemplateNotify> {
    constructor() {
        super("com.midnights.game.BeginCameraSceneLookWithTemplateNotify", [
            { no: 8, name: "look_pos", kind: "message", T: () => Vector },
            { no: 5, name: "template_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "follow_pos", kind: "message", T: () => Vector },
            { no: 12, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "other_params", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "follow_type", kind: "enum", opt: true, T: () => ["com.midnights.game.BeginCameraSceneLookWithTemplateNotify.FollowType", BeginCameraSceneLookWithTemplateNotify_FollowType, "FOLLOW_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<BeginCameraSceneLookWithTemplateNotify>): BeginCameraSceneLookWithTemplateNotify {
        const message = { otherParams: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BeginCameraSceneLookWithTemplateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeginCameraSceneLookWithTemplateNotify): BeginCameraSceneLookWithTemplateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector look_pos */ 8:
                    message.lookPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.lookPos);
                    break;
                case /* optional uint32 template_id */ 5:
                    message.templateId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector follow_pos */ 2:
                    message.followPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.followPos);
                    break;
                case /* optional uint32 entity_id */ 12:
                    message.entityId = reader.uint32();
                    break;
                case /* repeated string other_params */ 13:
                    message.otherParams.push(reader.string());
                    break;
                case /* optional com.midnights.game.BeginCameraSceneLookWithTemplateNotify.FollowType follow_type */ 9:
                    message.followType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BeginCameraSceneLookWithTemplateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector look_pos = 8; */
        if (message.lookPos)
            Vector.internalBinaryWrite(message.lookPos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 template_id = 5; */
        if (message.templateId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.templateId);
        /* optional com.midnights.game.Vector follow_pos = 2; */
        if (message.followPos)
            Vector.internalBinaryWrite(message.followPos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 12; */
        if (message.entityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.entityId);
        /* repeated string other_params = 13; */
        for (let i = 0; i < message.otherParams.length; i++)
            writer.tag(13, WireType.LengthDelimited).string(message.otherParams[i]);
        /* optional com.midnights.game.BeginCameraSceneLookWithTemplateNotify.FollowType follow_type = 9; */
        if (message.followType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.followType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BeginCameraSceneLookWithTemplateNotify
 */
export const BeginCameraSceneLookWithTemplateNotify = new BeginCameraSceneLookWithTemplateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshEntityAuthNotify$Type extends MessageType<RefreshEntityAuthNotify> {
    constructor() {
        super("com.midnights.game.RefreshEntityAuthNotify", [
            { no: 7, name: "entity_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshEntityAuthNotify>): RefreshEntityAuthNotify {
        const message = { entityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshEntityAuthNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshEntityAuthNotify): RefreshEntityAuthNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 entity_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.entityIdList.push(reader.uint32());
                    else
                        message.entityIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshEntityAuthNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 entity_id_list = 7; */
        if (message.entityIdList.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.entityIdList.length; i++)
                writer.uint32(message.entityIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshEntityAuthNotify
 */
export const RefreshEntityAuthNotify = new RefreshEntityAuthNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayerBackgroundAvatarRefreshNotify$Type extends MessageType<ScenePlayerBackgroundAvatarRefreshNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayerBackgroundAvatarRefreshNotify", [
            { no: 4, name: "entity_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneEntityInfo },
            { no: 8, name: "appear_type", kind: "enum", opt: true, T: () => ["com.midnights.game.VisionType", VisionType] },
            { no: 9, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayerBackgroundAvatarRefreshNotify>): ScenePlayerBackgroundAvatarRefreshNotify {
        const message = { entityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayerBackgroundAvatarRefreshNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayerBackgroundAvatarRefreshNotify): ScenePlayerBackgroundAvatarRefreshNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SceneEntityInfo entity_list */ 4:
                    message.entityList.push(SceneEntityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.VisionType appear_type */ 8:
                    message.appearType = reader.int32();
                    break;
                case /* optional uint32 param */ 9:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayerBackgroundAvatarRefreshNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SceneEntityInfo entity_list = 4; */
        for (let i = 0; i < message.entityList.length; i++)
            SceneEntityInfo.internalBinaryWrite(message.entityList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.VisionType appear_type = 8; */
        if (message.appearType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.appearType);
        /* optional uint32 param = 9; */
        if (message.param !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayerBackgroundAvatarRefreshNotify
 */
export const ScenePlayerBackgroundAvatarRefreshNotify = new ScenePlayerBackgroundAvatarRefreshNotify$Type();
