/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ClientTriggerEventNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./EventTriggerType";
import * as pb_1 from "google-protobuf";
export class ClientTriggerEventNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        force_id?: number;
        event_type?: dependency_1.EventTriggerType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("force_id" in data && data.force_id != undefined) {
                this.force_id = data.force_id;
            }
            if ("event_type" in data && data.event_type != undefined) {
                this.event_type = data.event_type;
            }
        }
    }
    get force_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set force_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get event_type() {
        return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.EventTriggerType.EVENT_TRIGGER_TYPE_NONE) as dependency_1.EventTriggerType;
    }
    set event_type(value: dependency_1.EventTriggerType) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        force_id?: number;
        event_type?: dependency_1.EventTriggerType;
    }): ClientTriggerEventNotify {
        const message = new ClientTriggerEventNotify({});
        if (data.force_id != null) {
            message.force_id = data.force_id;
        }
        if (data.event_type != null) {
            message.event_type = data.event_type;
        }
        return message;
    }
    toObject() {
        const data: {
            force_id?: number;
            event_type?: dependency_1.EventTriggerType;
        } = {};
        if (this.force_id != null) {
            data.force_id = this.force_id;
        }
        if (this.event_type != null) {
            data.event_type = this.event_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.force_id != 0)
            writer.writeUint32(3, this.force_id);
        if (this.event_type != dependency_1.EventTriggerType.EVENT_TRIGGER_TYPE_NONE)
            writer.writeEnum(2, this.event_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientTriggerEventNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientTriggerEventNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.force_id = reader.readUint32();
                    break;
                case 2:
                    message.event_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientTriggerEventNotify {
        return ClientTriggerEventNotify.deserialize(bytes);
    }
}
