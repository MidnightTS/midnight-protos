// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_widget.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./define";
/**
 * @generated from protobuf message com.midnights.game.AnchorPointData
 */
export interface AnchorPointData {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 anchor_point_id = 9;
     */
    anchorPointId?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 8;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 15;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 2;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AnchorPointDataNotify
 */
export interface AnchorPointDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AnchorPointData anchor_point_list = 10;
     */
    anchorPointList: AnchorPointData[];
    /**
     * @generated from protobuf field: optional uint32 next_usable_time = 14;
     */
    nextUsableTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AnchorPointDataNotify.CmdId
 */
export enum AnchorPointDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4276;
     */
    CMD_ID = 4276,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AnchorPointOpReq
 */
export interface AnchorPointOpReq {
    /**
     * @generated from protobuf field: optional uint32 anchor_point_id = 9;
     */
    anchorPointId?: number;
    /**
     * @generated from protobuf field: optional uint32 anchor_point_op_type = 12;
     */
    anchorPointOpType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AnchorPointOpReq.CmdId
 */
export enum AnchorPointOpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4257;
     */
    CMD_ID = 4257,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.AnchorPointOpReq.AnchorPointOpType
 */
export enum AnchorPointOpReq_AnchorPointOpType {
    /**
     * @generated from protobuf enum value: ANCHOR_POINT_OP_NONE = 0;
     */
    ANCHOR_POINT_OP_NONE = 0,
    /**
     * @generated from protobuf enum value: ANCHOR_POINT_OP_TELEPORT = 1;
     */
    ANCHOR_POINT_OP_TELEPORT = 1,
    /**
     * @generated from protobuf enum value: ANCHOR_POINT_OP_REMOVE = 2;
     */
    ANCHOR_POINT_OP_REMOVE = 2
}
/**
 * @generated from protobuf message com.midnights.game.AnchorPointOpRsp
 */
export interface AnchorPointOpRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 anchor_point_id = 12;
     */
    anchorPointId?: number;
    /**
     * @generated from protobuf field: optional uint32 anchor_point_op_type = 4;
     */
    anchorPointOpType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AnchorPointOpRsp.CmdId
 */
export enum AnchorPointOpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4252;
     */
    CMD_ID = 4252,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunchBoxData
 */
export interface LunchBoxData {
    /**
     * @generated from protobuf field: map<uint32, uint32> slot_material_map = 3;
     */
    slotMaterialMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.SetUpLunchBoxWidgetReq
 */
export interface SetUpLunchBoxWidgetReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.LunchBoxData lunch_box_data = 6;
     */
    lunchBoxData?: LunchBoxData;
}
/**
 * @generated from protobuf enum com.midnights.game.SetUpLunchBoxWidgetReq.CmdId
 */
export enum SetUpLunchBoxWidgetReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4272;
     */
    CMD_ID = 4272,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetUpLunchBoxWidgetRsp
 */
export interface SetUpLunchBoxWidgetRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.LunchBoxData lunch_box_data = 3;
     */
    lunchBoxData?: LunchBoxData;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetUpLunchBoxWidgetRsp.CmdId
 */
export enum SetUpLunchBoxWidgetRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4294;
     */
    CMD_ID = 4294,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OneoffGatherPointDetectorData
 */
export interface OneoffGatherPointDetectorData {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector hint_center_pos = 7;
     */
    hintCenterPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 hint_radius = 14;
     */
    hintRadius?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 10;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 6;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 13;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional bool is_all_collected = 4;
     */
    isAllCollected?: boolean;
    /**
     * @generated from protobuf field: optional bool is_hint_valid = 15;
     */
    isHintValid?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.ClientCollectorData
 */
export interface ClientCollectorData {
    /**
     * @generated from protobuf field: optional uint32 material_id = 10;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_points = 8;
     */
    maxPoints?: number;
    /**
     * @generated from protobuf field: optional uint32 curr_points = 13;
     */
    currPoints?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapDetectorData
 */
export interface TreasureMapDetectorData {
    /**
     * @generated from protobuf field: optional uint32 region_id = 4;
     */
    regionId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center_pos = 7;
     */
    centerPos?: Vector;
    /**
     * @generated from protobuf field: optional bool is_region_detected = 6;
     */
    isRegionDetected?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector spot_list = 10;
     */
    spotList: Vector[];
    /**
     * @generated from protobuf field: optional uint32 radius = 14;
     */
    radius?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SkyCrystalDetectorData
 */
export interface SkyCrystalDetectorData {
    /**
     * @generated from protobuf field: optional bool is_hint_valid = 3;
     */
    isHintValid?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector hint_center_pos = 8;
     */
    hintCenterPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 group_id = 6;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 9;
     */
    configId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SkyCrystalDetectorQuickUseResult
 */
export interface SkyCrystalDetectorQuickUseResult {
    /**
     * @generated from protobuf field: optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 9;
     */
    skyCrystalDetectorData?: SkyCrystalDetectorData;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCameraInfo
 */
export interface WidgetCameraInfo {
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 4;
     */
    targetEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetThunderBirdFeatherInfo
 */
export interface WidgetThunderBirdFeatherInfo {
    /**
     * @generated from protobuf field: repeated uint32 entity_id_list = 4;
     */
    entityIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.QuickUseWidgetReq
 */
export interface QuickUseWidgetReq {
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "locationInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetCreateLocationInfo location_info = 676;
         */
        locationInfo: WidgetCreateLocationInfo;
    } | {
        oneofKind: "cameraInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetCameraInfo camera_info = 478;
         */
        cameraInfo: WidgetCameraInfo;
    } | {
        oneofKind: "creatorInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetCreatorInfo creator_info = 812;
         */
        creatorInfo: WidgetCreatorInfo;
    } | {
        oneofKind: "thunderBirdFeatherInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetThunderBirdFeatherInfo thunder_bird_feather_info = 1859;
         */
        thunderBirdFeatherInfo: WidgetThunderBirdFeatherInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.QuickUseWidgetReq.CmdId
 */
export enum QuickUseWidgetReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4299;
     */
    CMD_ID = 4299,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.QuickUseWidgetRsp
 */
export interface QuickUseWidgetRsp {
    /**
     * @generated from protobuf field: optional uint32 material_id = 6;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "detectorData";
        /**
         * @generated from protobuf field: com.midnights.game.OneoffGatherPointDetectorData detector_data = 3;
         */
        detectorData: OneoffGatherPointDetectorData;
    } | {
        oneofKind: "clientCollectorData";
        /**
         * @generated from protobuf field: com.midnights.game.ClientCollectorData client_collector_data = 15;
         */
        clientCollectorData: ClientCollectorData;
    } | {
        oneofKind: "skyCrystalDetectorQuickUseResult";
        /**
         * @generated from protobuf field: com.midnights.game.SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 168922;
         */
        skyCrystalDetectorQuickUseResult: SkyCrystalDetectorQuickUseResult;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.QuickUseWidgetRsp.CmdId
 */
export enum QuickUseWidgetRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4270;
     */
    CMD_ID = 4270,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCoolDownData
 */
export interface WidgetCoolDownData {
    /**
     * @generated from protobuf field: optional bool is_success = 5;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint64 cool_down_time = 4;
     */
    coolDownTime?: bigint;
    /**
     * @generated from protobuf field: optional uint32 id = 15;
     */
    id?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCoolDownNotify
 */
export interface WidgetCoolDownNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list = 1;
     */
    normalCoolDownDataList: WidgetCoolDownData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetCoolDownData group_cool_down_data_list = 12;
     */
    groupCoolDownDataList: WidgetCoolDownData[];
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetCoolDownNotify.CmdId
 */
export enum WidgetCoolDownNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4295;
     */
    CMD_ID = 4295,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetReportReq
 */
export interface WidgetReportReq {
    /**
     * @generated from protobuf field: optional bool is_clear_sky_crystal_hint = 5;
     */
    isClearSkyCrystalHint?: boolean;
    /**
     * @generated from protobuf field: optional bool is_client_collect = 14;
     */
    isClientCollect?: boolean;
    /**
     * @generated from protobuf field: optional bool is_clear_hint = 13;
     */
    isClearHint?: boolean;
    /**
     * @generated from protobuf field: optional uint32 material_id = 15;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetReportReq.CmdId
 */
export enum WidgetReportReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4291;
     */
    CMD_ID = 4291,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetReportRsp
 */
export interface WidgetReportRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 4;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetReportRsp.CmdId
 */
export enum WidgetReportRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4292;
     */
    CMD_ID = 4292,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientCollectorDataNotify
 */
export interface ClientCollectorDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ClientCollectorData client_collector_data_list = 13;
     */
    clientCollectorDataList: ClientCollectorData[];
}
/**
 * @generated from protobuf enum com.midnights.game.ClientCollectorDataNotify.CmdId
 */
export enum ClientCollectorDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4264;
     */
    CMD_ID = 4264,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OneoffGatherPointDetectorDataNotify
 */
export interface OneoffGatherPointDetectorDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 3;
     */
    oneoffGatherPointDetectorDataList: OneoffGatherPointDetectorData[];
}
/**
 * @generated from protobuf enum com.midnights.game.OneoffGatherPointDetectorDataNotify.CmdId
 */
export enum OneoffGatherPointDetectorDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4297;
     */
    CMD_ID = 4297,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SkyCrystalDetectorDataUpdateNotify
 */
export interface SkyCrystalDetectorDataUpdateNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 9;
     */
    skyCrystalDetectorData?: SkyCrystalDetectorData;
}
/**
 * @generated from protobuf enum com.midnights.game.SkyCrystalDetectorDataUpdateNotify.CmdId
 */
export enum SkyCrystalDetectorDataUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4287;
     */
    CMD_ID = 4287,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapDetectorDataNotify
 */
export interface TreasureMapDetectorDataNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.TreasureMapDetectorData data = 2;
     */
    data?: TreasureMapDetectorData;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapDetectorDataNotify.CmdId
 */
export enum TreasureMapDetectorDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4300;
     */
    CMD_ID = 4300,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetSlotData
 */
export interface WidgetSlotData {
    /**
     * @generated from protobuf field: optional uint32 cd_over_time = 9;
     */
    cdOverTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetSlotTag tag = 14;
     */
    tag?: WidgetSlotTag;
    /**
     * @generated from protobuf field: optional uint32 material_id = 11;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional bool is_active = 12;
     */
    isActive?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SetWidgetSlotReq
 */
export interface SetWidgetSlotReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotTag tag_list = 15;
     */
    tagList: WidgetSlotTag[];
    /**
     * @generated from protobuf field: optional uint32 material_id = 6;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetSlotOp op = 2;
     */
    op?: WidgetSlotOp;
}
/**
 * @generated from protobuf enum com.midnights.game.SetWidgetSlotReq.CmdId
 */
export enum SetWidgetSlotReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4259;
     */
    CMD_ID = 4259,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetWidgetSlotRsp
 */
export interface SetWidgetSlotRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotTag tag_list = 15;
     */
    tagList: WidgetSlotTag[];
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 1;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetSlotOp op = 4;
     */
    op?: WidgetSlotOp;
}
/**
 * @generated from protobuf enum com.midnights.game.SetWidgetSlotRsp.CmdId
 */
export enum SetWidgetSlotRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4277;
     */
    CMD_ID = 4277,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetSlotChangeNotify
 */
export interface WidgetSlotChangeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetSlotOp op = 11;
     */
    op?: WidgetSlotOp;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetSlotData slot = 8;
     */
    slot?: WidgetSlotData;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetSlotChangeNotify.CmdId
 */
export enum WidgetSlotChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4267;
     */
    CMD_ID = 4267,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetWidgetSlotReq
 */
export interface GetWidgetSlotReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetWidgetSlotReq.CmdId
 */
export enum GetWidgetSlotReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4253;
     */
    CMD_ID = 4253,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetWidgetSlotRsp
 */
export interface GetWidgetSlotRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotData slot_list = 13;
     */
    slotList: WidgetSlotData[];
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetWidgetSlotRsp.CmdId
 */
export enum GetWidgetSlotRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4254;
     */
    CMD_ID = 4254,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AllWidgetDataNotify
 */
export interface AllWidgetDataNotify {
    /**
     * @generated from protobuf field: repeated uint32 background_active_widget_list = 11;
     */
    backgroundActiveWidgetList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.LunchBoxData lunch_box_data = 1;
     */
    lunchBoxData?: LunchBoxData;
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetCoolDownData cool_down_group_data_list = 13;
     */
    coolDownGroupDataList: WidgetCoolDownData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.AnchorPointData anchor_point_list = 3;
     */
    anchorPointList: AnchorPointData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotData slot_list = 6;
     */
    slotList: WidgetSlotData[];
    /**
     * @generated from protobuf field: optional uint32 next_anchor_point_usable_time = 10;
     */
    nextAnchorPointUsableTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ClientCollectorData client_collector_data_list = 4;
     */
    clientCollectorDataList: ClientCollectorData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 15;
     */
    oneoffGatherPointDetectorDataList: OneoffGatherPointDetectorData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list = 9;
     */
    normalCoolDownDataList: WidgetCoolDownData[];
    /**
     * @generated from protobuf field: optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 12;
     */
    skyCrystalDetectorData?: SkyCrystalDetectorData;
}
/**
 * @generated from protobuf enum com.midnights.game.AllWidgetDataNotify.CmdId
 */
export enum AllWidgetDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4271;
     */
    CMD_ID = 4271,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseWidgetCreateGadgetReq
 */
export interface UseWidgetCreateGadgetReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 15;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 12;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional uint32 material_id = 4;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseWidgetCreateGadgetReq.CmdId
 */
export enum UseWidgetCreateGadgetReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4293;
     */
    CMD_ID = 4293,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseWidgetCreateGadgetRsp
 */
export interface UseWidgetCreateGadgetRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 12;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseWidgetCreateGadgetRsp.CmdId
 */
export enum UseWidgetCreateGadgetRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4290;
     */
    CMD_ID = 4290,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseWidgetRetractGadgetReq
 */
export interface UseWidgetRetractGadgetReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 3;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseWidgetRetractGadgetReq.CmdId
 */
export enum UseWidgetRetractGadgetReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4286;
     */
    CMD_ID = 4286,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseWidgetRetractGadgetRsp
 */
export interface UseWidgetRetractGadgetRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 14;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseWidgetRetractGadgetRsp.CmdId
 */
export enum UseWidgetRetractGadgetRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4261;
     */
    CMD_ID = 4261,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetGadgetData
 */
export interface WidgetGadgetData {
    /**
     * @generated from protobuf field: repeated uint32 gadget_entity_id_list = 1;
     */
    gadgetEntityIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 8;
     */
    gadgetId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetGadgetAllDataNotify
 */
export interface WidgetGadgetAllDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetGadgetData widget_gadget_data = 13;
     */
    widgetGadgetData: WidgetGadgetData[];
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetGadgetAllDataNotify.CmdId
 */
export enum WidgetGadgetAllDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4284;
     */
    CMD_ID = 4284,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetGadgetDataNotify
 */
export interface WidgetGadgetDataNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetGadgetData widget_gadget_data = 12;
     */
    widgetGadgetData?: WidgetGadgetData;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetGadgetDataNotify.CmdId
 */
export enum WidgetGadgetDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4266;
     */
    CMD_ID = 4266,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetGadgetDestroyNotify
 */
export interface WidgetGadgetDestroyNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetGadgetDestroyNotify.CmdId
 */
export enum WidgetGadgetDestroyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4274;
     */
    CMD_ID = 4274,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCreateLocationInfo
 */
export interface WidgetCreateLocationInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 3;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCreatorInfo
 */
export interface WidgetCreatorInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetCreatorOpType op_type = 10;
     */
    opType?: WidgetCreatorOpType;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetCreateLocationInfo location_info = 12;
     */
    locationInfo?: WidgetCreateLocationInfo;
}
/**
 * @generated from protobuf message com.midnights.game.WidgetDoBagReq
 */
export interface WidgetDoBagReq {
    /**
     * @generated from protobuf field: optional uint32 material_id = 9;
     */
    materialId?: number;
    /**
     * @generated from protobuf oneof: op_info
     */
    opInfo: {
        oneofKind: "locationInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetCreateLocationInfo location_info = 832;
         */
        locationInfo: WidgetCreateLocationInfo;
    } | {
        oneofKind: "widgetCreatorInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WidgetCreatorInfo widget_creator_info = 1497;
         */
        widgetCreatorInfo: WidgetCreatorInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetDoBagReq.CmdId
 */
export enum WidgetDoBagReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4255;
     */
    CMD_ID = 4255,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetDoBagRsp
 */
export interface WidgetDoBagRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 3;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetDoBagRsp.CmdId
 */
export enum WidgetDoBagRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4296;
     */
    CMD_ID = 4296,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetActiveChangeNotify
 */
export interface WidgetActiveChangeNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotData widget_data_list = 5;
     */
    widgetDataList: WidgetSlotData[];
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetActiveChangeNotify.CmdId
 */
export enum WidgetActiveChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4280;
     */
    CMD_ID = 4280,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetUseAttachAbilityGroupChangeNotify
 */
export interface WidgetUseAttachAbilityGroupChangeNotify {
    /**
     * @generated from protobuf field: optional bool is_attach = 6;
     */
    isAttach?: boolean;
    /**
     * @generated from protobuf field: optional uint32 material_id = 11;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetUseAttachAbilityGroupChangeNotify.CmdId
 */
export enum WidgetUseAttachAbilityGroupChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4258;
     */
    CMD_ID = 4258,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCaptureAnimalReq
 */
export interface WidgetCaptureAnimalReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 6;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetCaptureAnimalReq.CmdId
 */
export enum WidgetCaptureAnimalReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4256;
     */
    CMD_ID = 4256,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetCaptureAnimalRsp
 */
export interface WidgetCaptureAnimalRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 4;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 8;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetCaptureAnimalRsp.CmdId
 */
export enum WidgetCaptureAnimalRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4289;
     */
    CMD_ID = 4289,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetUpdateExtraCDReq
 */
export interface WidgetUpdateExtraCDReq {
    /**
     * @generated from protobuf field: optional uint32 material_id = 14;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type = 10;
     */
    extraCdType?: WIDGET_EXTRA_CD_TYPE;
    /**
     * @generated from protobuf field: optional uint32 cd_group = 7;
     */
    cdGroup?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetUpdateExtraCDReq.CmdId
 */
export enum WidgetUpdateExtraCDReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5960;
     */
    CMD_ID = 5960,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WidgetUpdateExtraCDRsp
 */
export interface WidgetUpdateExtraCDRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 11;
     */
    materialId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type = 6;
     */
    extraCdType?: WIDGET_EXTRA_CD_TYPE;
    /**
     * @generated from protobuf field: optional com.midnights.game.WidgetCoolDownData cool_data = 10;
     */
    coolData?: WidgetCoolDownData;
    /**
     * @generated from protobuf field: optional uint32 cd_group = 15;
     */
    cdGroup?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetUpdateExtraCDRsp.CmdId
 */
export enum WidgetUpdateExtraCDRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6056;
     */
    CMD_ID = 6056,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FireworksReformParam
 */
export interface FireworksReformParam {
    /**
     * @generated from protobuf field: optional com.midnights.game.FireworksReformParamType type = 8;
     */
    type?: FireworksReformParamType;
    /**
     * @generated from protobuf field: optional int32 value = 4;
     */
    value?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FireworksReformData
 */
export interface FireworksReformData {
    /**
     * @generated from protobuf field: optional uint32 id = 13;
     */
    id?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FireworksReformParam reform_param_list = 10;
     */
    reformParamList: FireworksReformParam[];
}
/**
 * @generated from protobuf message com.midnights.game.FireworksReformDataNotify
 */
export interface FireworksReformDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.FireworksReformData fireworks_reform_data_list = 6;
     */
    fireworksReformDataList: FireworksReformData[];
}
/**
 * @generated from protobuf enum com.midnights.game.FireworksReformDataNotify.CmdId
 */
export enum FireworksReformDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6033;
     */
    CMD_ID = 6033,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReformFireworksReq
 */
export interface ReformFireworksReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.FireworksReformData fireworks_reform_data = 3;
     */
    fireworksReformData?: FireworksReformData;
}
/**
 * @generated from protobuf enum com.midnights.game.ReformFireworksReq.CmdId
 */
export enum ReformFireworksReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6036;
     */
    CMD_ID = 6036,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReformFireworksRsp
 */
export interface ReformFireworksRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReformFireworksRsp.CmdId
 */
export enum ReformFireworksRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5929;
     */
    CMD_ID = 5929,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FireworksLaunchParam
 */
export interface FireworksLaunchParam {
    /**
     * @generated from protobuf field: optional int32 value = 5;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.FireworksLaunchParamType type = 4;
     */
    type?: FireworksLaunchParamType;
}
/**
 * @generated from protobuf message com.midnights.game.FireworksLaunchSchemeData
 */
export interface FireworksLaunchSchemeData {
    /**
     * @generated from protobuf field: optional uint32 scheme_id = 3;
     */
    schemeId?: number;
    /**
     * @generated from protobuf field: repeated uint32 fireworks_id_list = 2;
     */
    fireworksIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.FireworksLaunchParam launch_param_list = 7;
     */
    launchParamList: FireworksLaunchParam[];
}
/**
 * @generated from protobuf message com.midnights.game.LaunchFireworksReq
 */
export interface LaunchFireworksReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.FireworksLaunchSchemeData scheme_data = 13;
     */
    schemeData?: FireworksLaunchSchemeData;
}
/**
 * @generated from protobuf enum com.midnights.game.LaunchFireworksReq.CmdId
 */
export enum LaunchFireworksReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6090;
     */
    CMD_ID = 6090,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LaunchFireworksRsp
 */
export interface LaunchFireworksRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LaunchFireworksRsp.CmdId
 */
export enum LaunchFireworksRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6057;
     */
    CMD_ID = 6057,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FireworksLaunchDataNotify
 */
export interface FireworksLaunchDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.FireworksLaunchSchemeData scheme_data_list = 12;
     */
    schemeDataList: FireworksLaunchSchemeData[];
    /**
     * @generated from protobuf field: optional uint32 last_use_scheme_id = 4;
     */
    lastUseSchemeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FireworksLaunchDataNotify.CmdId
 */
export enum FireworksLaunchDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5928;
     */
    CMD_ID = 5928,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeWidgetBackgroundActiveStateReq
 */
export interface ChangeWidgetBackgroundActiveStateReq {
    /**
     * @generated from protobuf field: optional bool is_active = 15;
     */
    isActive?: boolean;
    /**
     * @generated from protobuf field: optional uint32 material_id = 3;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeWidgetBackgroundActiveStateReq.CmdId
 */
export enum ChangeWidgetBackgroundActiveStateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5907;
     */
    CMD_ID = 5907,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeWidgetBackgroundActiveStateRsp
 */
export interface ChangeWidgetBackgroundActiveStateRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 material_id = 6;
     */
    materialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeWidgetBackgroundActiveStateRsp.CmdId
 */
export enum ChangeWidgetBackgroundActiveStateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6060;
     */
    CMD_ID = 6060,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AllWidgetBackgroundActiveStateNotify
 */
export interface AllWidgetBackgroundActiveStateNotify {
    /**
     * @generated from protobuf field: repeated uint32 background_active_widget_list = 3;
     */
    backgroundActiveWidgetList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.AllWidgetBackgroundActiveStateNotify.CmdId
 */
export enum AllWidgetBackgroundActiveStateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6092;
     */
    CMD_ID = 6092,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerWidgetInfo
 */
export interface PlayerWidgetInfo {
    /**
     * @generated from protobuf field: optional uint32 uid = 14;
     */
    uid?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.WidgetSlotData slot_list = 13;
     */
    slotList: WidgetSlotData[];
}
/**
 * @generated from protobuf message com.midnights.game.RemotePlayerWidgetNotify
 */
export interface RemotePlayerWidgetNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list = 3;
     */
    playerWidgetInfoList: PlayerWidgetInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.RemotePlayerWidgetNotify.CmdId
 */
export enum RemotePlayerWidgetNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5995;
     */
    CMD_ID = 5995,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.LunchBoxSlotType
 */
export enum LunchBoxSlotType {
    /**
     * @generated from protobuf enum value: LUNCH_BOX_SLOT_NONE = 0;
     */
    LUNCH_BOX_SLOT_NONE = 0,
    /**
     * @generated from protobuf enum value: LUNCH_BOX_SLOT_REVIVE = 1;
     */
    LUNCH_BOX_SLOT_REVIVE = 1,
    /**
     * @generated from protobuf enum value: LUNCH_BOX_SLOT_HEAL = 2;
     */
    LUNCH_BOX_SLOT_HEAL = 2
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetSlotTag
 */
export enum WidgetSlotTag {
    /**
     * @generated from protobuf enum value: WIDGET_SLOT_QUICK_USE = 0;
     */
    WIDGET_SLOT_QUICK_USE = 0,
    /**
     * @generated from protobuf enum value: WIDGET_SLOT_ATTACH_AVATAR = 1;
     */
    WIDGET_SLOT_ATTACH_AVATAR = 1
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetSlotOp
 */
export enum WidgetSlotOp {
    /**
     * @generated from protobuf enum value: WIDGET_SLOT_OP_ATTACH = 0;
     */
    ATTACH = 0,
    /**
     * @generated from protobuf enum value: WIDGET_SLOT_OP_DETACH = 1;
     */
    DETACH = 1
}
/**
 * @generated from protobuf enum com.midnights.game.WidgetCreatorOpType
 */
export enum WidgetCreatorOpType {
    /**
     * @generated from protobuf enum value: WIDGET_CREATOR_TYPE_NONE = 0;
     */
    WIDGET_CREATOR_TYPE_NONE = 0,
    /**
     * @generated from protobuf enum value: WIDGET_CREATOR_TYPE_RETRACT = 1;
     */
    WIDGET_CREATOR_TYPE_RETRACT = 1,
    /**
     * @generated from protobuf enum value: WIDGET_CREATOR_TYPE_RETRACT_AND_CREATE = 2;
     */
    WIDGET_CREATOR_TYPE_RETRACT_AND_CREATE = 2
}
/**
 * @generated from protobuf enum com.midnights.game.WIDGET_EXTRA_CD_TYPE
 */
export enum WIDGET_EXTRA_CD_TYPE {
    /**
     * @generated from protobuf enum value: WIDGET_EXTRA_CD_TYPE_NONE = 0;
     */
    WIDGET_EXTRA_CD_TYPE_NONE = 0,
    /**
     * @generated from protobuf enum value: WIDGET_EXTRA_CD_TYPE_E_SKILL_SHARED = 1;
     */
    WIDGET_EXTRA_CD_TYPE_E_SKILL_SHARED = 1
}
/**
 * @generated from protobuf enum com.midnights.game.FireworksReformParamType
 */
export enum FireworksReformParamType {
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_NONE = 0;
     */
    FIREWORKS_REFORM_PARAM_NONE = 0,
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_COLOR = 1;
     */
    FIREWORKS_REFORM_PARAM_COLOR = 1,
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_HEIGHT = 2;
     */
    FIREWORKS_REFORM_PARAM_HEIGHT = 2,
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_SIZE = 3;
     */
    FIREWORKS_REFORM_PARAM_SIZE = 3,
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_DENSITY = 4;
     */
    FIREWORKS_REFORM_PARAM_DENSITY = 4,
    /**
     * @generated from protobuf enum value: FIREWORKS_REFORM_PARAM_ROTATION = 5;
     */
    FIREWORKS_REFORM_PARAM_ROTATION = 5
}
/**
 * @generated from protobuf enum com.midnights.game.FireworksLaunchParamType
 */
export enum FireworksLaunchParamType {
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_NONE = 0;
     */
    FIREWORKS_LAUNCH_PARAM_NONE = 0,
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_REPEAT = 1;
     */
    FIREWORKS_LAUNCH_PARAM_REPEAT = 1,
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_INTEVAL = 2;
     */
    FIREWORKS_LAUNCH_PARAM_INTEVAL = 2,
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_DELAY = 3;
     */
    FIREWORKS_LAUNCH_PARAM_DELAY = 3,
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_ROUND_INTEVAL = 4;
     */
    FIREWORKS_LAUNCH_PARAM_ROUND_INTEVAL = 4,
    /**
     * @generated from protobuf enum value: FIREWORKS_LAUNCH_PARAM_MAX = 5;
     */
    FIREWORKS_LAUNCH_PARAM_MAX = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class AnchorPointData$Type extends MessageType<AnchorPointData> {
    constructor() {
        super("com.midnights.game.AnchorPointData", [
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "anchor_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "pos", kind: "message", T: () => Vector },
            { no: 2, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AnchorPointData>): AnchorPointData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorPointData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorPointData): AnchorPointData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 anchor_point_id */ 9:
                    message.anchorPointId = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 8:
                    message.endTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 15:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 2:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorPointData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 anchor_point_id = 9; */
        if (message.anchorPointId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.anchorPointId);
        /* optional uint32 end_time = 8; */
        if (message.endTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.endTime);
        /* optional com.midnights.game.Vector pos = 15; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 2; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnchorPointData
 */
export const AnchorPointData = new AnchorPointData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorPointDataNotify$Type extends MessageType<AnchorPointDataNotify> {
    constructor() {
        super("com.midnights.game.AnchorPointDataNotify", [
            { no: 10, name: "anchor_point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnchorPointData },
            { no: 14, name: "next_usable_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorPointDataNotify>): AnchorPointDataNotify {
        const message = { anchorPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorPointDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorPointDataNotify): AnchorPointDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AnchorPointData anchor_point_list */ 10:
                    message.anchorPointList.push(AnchorPointData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 next_usable_time */ 14:
                    message.nextUsableTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorPointDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AnchorPointData anchor_point_list = 10; */
        for (let i = 0; i < message.anchorPointList.length; i++)
            AnchorPointData.internalBinaryWrite(message.anchorPointList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 next_usable_time = 14; */
        if (message.nextUsableTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.nextUsableTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnchorPointDataNotify
 */
export const AnchorPointDataNotify = new AnchorPointDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorPointOpReq$Type extends MessageType<AnchorPointOpReq> {
    constructor() {
        super("com.midnights.game.AnchorPointOpReq", [
            { no: 9, name: "anchor_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "anchor_point_op_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorPointOpReq>): AnchorPointOpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorPointOpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorPointOpReq): AnchorPointOpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 anchor_point_id */ 9:
                    message.anchorPointId = reader.uint32();
                    break;
                case /* optional uint32 anchor_point_op_type */ 12:
                    message.anchorPointOpType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorPointOpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 anchor_point_id = 9; */
        if (message.anchorPointId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.anchorPointId);
        /* optional uint32 anchor_point_op_type = 12; */
        if (message.anchorPointOpType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.anchorPointOpType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnchorPointOpReq
 */
export const AnchorPointOpReq = new AnchorPointOpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnchorPointOpRsp$Type extends MessageType<AnchorPointOpRsp> {
    constructor() {
        super("com.midnights.game.AnchorPointOpRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "anchor_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "anchor_point_op_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnchorPointOpRsp>): AnchorPointOpRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnchorPointOpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnchorPointOpRsp): AnchorPointOpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 anchor_point_id */ 12:
                    message.anchorPointId = reader.uint32();
                    break;
                case /* optional uint32 anchor_point_op_type */ 4:
                    message.anchorPointOpType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnchorPointOpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 anchor_point_id = 12; */
        if (message.anchorPointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.anchorPointId);
        /* optional uint32 anchor_point_op_type = 4; */
        if (message.anchorPointOpType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.anchorPointOpType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnchorPointOpRsp
 */
export const AnchorPointOpRsp = new AnchorPointOpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunchBoxData$Type extends MessageType<LunchBoxData> {
    constructor() {
        super("com.midnights.game.LunchBoxData", [
            { no: 3, name: "slot_material_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<LunchBoxData>): LunchBoxData {
        const message = { slotMaterialMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunchBoxData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunchBoxData): LunchBoxData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> slot_material_map */ 3:
                    this.binaryReadMap3(message.slotMaterialMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: LunchBoxData["slotMaterialMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof LunchBoxData["slotMaterialMap"] | undefined, val: LunchBoxData["slotMaterialMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.LunchBoxData.slot_material_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: LunchBoxData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> slot_material_map = 3; */
        for (let k of Object.keys(message.slotMaterialMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.slotMaterialMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunchBoxData
 */
export const LunchBoxData = new LunchBoxData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpLunchBoxWidgetReq$Type extends MessageType<SetUpLunchBoxWidgetReq> {
    constructor() {
        super("com.midnights.game.SetUpLunchBoxWidgetReq", [
            { no: 6, name: "lunch_box_data", kind: "message", T: () => LunchBoxData }
        ]);
    }
    create(value?: PartialMessage<SetUpLunchBoxWidgetReq>): SetUpLunchBoxWidgetReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpLunchBoxWidgetReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpLunchBoxWidgetReq): SetUpLunchBoxWidgetReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LunchBoxData lunch_box_data */ 6:
                    message.lunchBoxData = LunchBoxData.internalBinaryRead(reader, reader.uint32(), options, message.lunchBoxData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpLunchBoxWidgetReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LunchBoxData lunch_box_data = 6; */
        if (message.lunchBoxData)
            LunchBoxData.internalBinaryWrite(message.lunchBoxData, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetUpLunchBoxWidgetReq
 */
export const SetUpLunchBoxWidgetReq = new SetUpLunchBoxWidgetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetUpLunchBoxWidgetRsp$Type extends MessageType<SetUpLunchBoxWidgetRsp> {
    constructor() {
        super("com.midnights.game.SetUpLunchBoxWidgetRsp", [
            { no: 3, name: "lunch_box_data", kind: "message", T: () => LunchBoxData },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetUpLunchBoxWidgetRsp>): SetUpLunchBoxWidgetRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetUpLunchBoxWidgetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetUpLunchBoxWidgetRsp): SetUpLunchBoxWidgetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LunchBoxData lunch_box_data */ 3:
                    message.lunchBoxData = LunchBoxData.internalBinaryRead(reader, reader.uint32(), options, message.lunchBoxData);
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetUpLunchBoxWidgetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LunchBoxData lunch_box_data = 3; */
        if (message.lunchBoxData)
            LunchBoxData.internalBinaryWrite(message.lunchBoxData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetUpLunchBoxWidgetRsp
 */
export const SetUpLunchBoxWidgetRsp = new SetUpLunchBoxWidgetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OneoffGatherPointDetectorData$Type extends MessageType<OneoffGatherPointDetectorData> {
    constructor() {
        super("com.midnights.game.OneoffGatherPointDetectorData", [
            { no: 7, name: "hint_center_pos", kind: "message", T: () => Vector },
            { no: 14, name: "hint_radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_all_collected", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "is_hint_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<OneoffGatherPointDetectorData>): OneoffGatherPointDetectorData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OneoffGatherPointDetectorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OneoffGatherPointDetectorData): OneoffGatherPointDetectorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector hint_center_pos */ 7:
                    message.hintCenterPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.hintCenterPos);
                    break;
                case /* optional uint32 hint_radius */ 14:
                    message.hintRadius = reader.uint32();
                    break;
                case /* optional uint32 material_id */ 10:
                    message.materialId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 6:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 13:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_all_collected */ 4:
                    message.isAllCollected = reader.bool();
                    break;
                case /* optional bool is_hint_valid */ 15:
                    message.isHintValid = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OneoffGatherPointDetectorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector hint_center_pos = 7; */
        if (message.hintCenterPos)
            Vector.internalBinaryWrite(message.hintCenterPos, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 hint_radius = 14; */
        if (message.hintRadius !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.hintRadius);
        /* optional uint32 material_id = 10; */
        if (message.materialId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.materialId);
        /* optional uint32 config_id = 6; */
        if (message.configId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.configId);
        /* optional uint32 group_id = 13; */
        if (message.groupId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.groupId);
        /* optional bool is_all_collected = 4; */
        if (message.isAllCollected !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isAllCollected);
        /* optional bool is_hint_valid = 15; */
        if (message.isHintValid !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isHintValid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OneoffGatherPointDetectorData
 */
export const OneoffGatherPointDetectorData = new OneoffGatherPointDetectorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientCollectorData$Type extends MessageType<ClientCollectorData> {
    constructor() {
        super("com.midnights.game.ClientCollectorData", [
            { no: 10, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "max_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "curr_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientCollectorData>): ClientCollectorData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientCollectorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientCollectorData): ClientCollectorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 material_id */ 10:
                    message.materialId = reader.uint32();
                    break;
                case /* optional uint32 max_points */ 8:
                    message.maxPoints = reader.uint32();
                    break;
                case /* optional uint32 curr_points */ 13:
                    message.currPoints = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientCollectorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 material_id = 10; */
        if (message.materialId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.materialId);
        /* optional uint32 max_points = 8; */
        if (message.maxPoints !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.maxPoints);
        /* optional uint32 curr_points = 13; */
        if (message.currPoints !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.currPoints);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientCollectorData
 */
export const ClientCollectorData = new ClientCollectorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapDetectorData$Type extends MessageType<TreasureMapDetectorData> {
    constructor() {
        super("com.midnights.game.TreasureMapDetectorData", [
            { no: 4, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "center_pos", kind: "message", T: () => Vector },
            { no: 6, name: "is_region_detected", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "spot_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vector },
            { no: 14, name: "radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapDetectorData>): TreasureMapDetectorData {
        const message = { spotList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapDetectorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapDetectorData): TreasureMapDetectorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 region_id */ 4:
                    message.regionId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector center_pos */ 7:
                    message.centerPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.centerPos);
                    break;
                case /* optional bool is_region_detected */ 6:
                    message.isRegionDetected = reader.bool();
                    break;
                case /* repeated com.midnights.game.Vector spot_list */ 10:
                    message.spotList.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 radius */ 14:
                    message.radius = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapDetectorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 region_id = 4; */
        if (message.regionId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.regionId);
        /* optional com.midnights.game.Vector center_pos = 7; */
        if (message.centerPos)
            Vector.internalBinaryWrite(message.centerPos, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_region_detected = 6; */
        if (message.isRegionDetected !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isRegionDetected);
        /* repeated com.midnights.game.Vector spot_list = 10; */
        for (let i = 0; i < message.spotList.length; i++)
            Vector.internalBinaryWrite(message.spotList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 radius = 14; */
        if (message.radius !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapDetectorData
 */
export const TreasureMapDetectorData = new TreasureMapDetectorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkyCrystalDetectorData$Type extends MessageType<SkyCrystalDetectorData> {
    constructor() {
        super("com.midnights.game.SkyCrystalDetectorData", [
            { no: 3, name: "is_hint_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "hint_center_pos", kind: "message", T: () => Vector },
            { no: 6, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SkyCrystalDetectorData>): SkyCrystalDetectorData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkyCrystalDetectorData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkyCrystalDetectorData): SkyCrystalDetectorData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hint_valid */ 3:
                    message.isHintValid = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector hint_center_pos */ 8:
                    message.hintCenterPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.hintCenterPos);
                    break;
                case /* optional uint32 group_id */ 6:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 9:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkyCrystalDetectorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_hint_valid = 3; */
        if (message.isHintValid !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isHintValid);
        /* optional com.midnights.game.Vector hint_center_pos = 8; */
        if (message.hintCenterPos)
            Vector.internalBinaryWrite(message.hintCenterPos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 group_id = 6; */
        if (message.groupId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.groupId);
        /* optional uint32 config_id = 9; */
        if (message.configId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SkyCrystalDetectorData
 */
export const SkyCrystalDetectorData = new SkyCrystalDetectorData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkyCrystalDetectorQuickUseResult$Type extends MessageType<SkyCrystalDetectorQuickUseResult> {
    constructor() {
        super("com.midnights.game.SkyCrystalDetectorQuickUseResult", [
            { no: 9, name: "sky_crystal_detector_data", kind: "message", T: () => SkyCrystalDetectorData },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SkyCrystalDetectorQuickUseResult>): SkyCrystalDetectorQuickUseResult {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkyCrystalDetectorQuickUseResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkyCrystalDetectorQuickUseResult): SkyCrystalDetectorQuickUseResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data */ 9:
                    message.skyCrystalDetectorData = SkyCrystalDetectorData.internalBinaryRead(reader, reader.uint32(), options, message.skyCrystalDetectorData);
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkyCrystalDetectorQuickUseResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 9; */
        if (message.skyCrystalDetectorData)
            SkyCrystalDetectorData.internalBinaryWrite(message.skyCrystalDetectorData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SkyCrystalDetectorQuickUseResult
 */
export const SkyCrystalDetectorQuickUseResult = new SkyCrystalDetectorQuickUseResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCameraInfo$Type extends MessageType<WidgetCameraInfo> {
    constructor() {
        super("com.midnights.game.WidgetCameraInfo", [
            { no: 4, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetCameraInfo>): WidgetCameraInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCameraInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCameraInfo): WidgetCameraInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_entity_id */ 4:
                    message.targetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCameraInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_entity_id = 4; */
        if (message.targetEntityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.targetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCameraInfo
 */
export const WidgetCameraInfo = new WidgetCameraInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetThunderBirdFeatherInfo$Type extends MessageType<WidgetThunderBirdFeatherInfo> {
    constructor() {
        super("com.midnights.game.WidgetThunderBirdFeatherInfo", [
            { no: 4, name: "entity_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetThunderBirdFeatherInfo>): WidgetThunderBirdFeatherInfo {
        const message = { entityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetThunderBirdFeatherInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetThunderBirdFeatherInfo): WidgetThunderBirdFeatherInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 entity_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.entityIdList.push(reader.uint32());
                    else
                        message.entityIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetThunderBirdFeatherInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 entity_id_list = 4; */
        if (message.entityIdList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.entityIdList.length; i++)
                writer.uint32(message.entityIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetThunderBirdFeatherInfo
 */
export const WidgetThunderBirdFeatherInfo = new WidgetThunderBirdFeatherInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickUseWidgetReq$Type extends MessageType<QuickUseWidgetReq> {
    constructor() {
        super("com.midnights.game.QuickUseWidgetReq", [
            { no: 676, name: "location_info", kind: "message", oneof: "param", T: () => WidgetCreateLocationInfo },
            { no: 478, name: "camera_info", kind: "message", oneof: "param", T: () => WidgetCameraInfo },
            { no: 812, name: "creator_info", kind: "message", oneof: "param", T: () => WidgetCreatorInfo },
            { no: 1859, name: "thunder_bird_feather_info", kind: "message", oneof: "param", T: () => WidgetThunderBirdFeatherInfo }
        ]);
    }
    create(value?: PartialMessage<QuickUseWidgetReq>): QuickUseWidgetReq {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickUseWidgetReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickUseWidgetReq): QuickUseWidgetReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.midnights.game.WidgetCreateLocationInfo location_info */ 676:
                    message.param = {
                        oneofKind: "locationInfo",
                        locationInfo: WidgetCreateLocationInfo.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).locationInfo)
                    };
                    break;
                case /* com.midnights.game.WidgetCameraInfo camera_info */ 478:
                    message.param = {
                        oneofKind: "cameraInfo",
                        cameraInfo: WidgetCameraInfo.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).cameraInfo)
                    };
                    break;
                case /* com.midnights.game.WidgetCreatorInfo creator_info */ 812:
                    message.param = {
                        oneofKind: "creatorInfo",
                        creatorInfo: WidgetCreatorInfo.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).creatorInfo)
                    };
                    break;
                case /* com.midnights.game.WidgetThunderBirdFeatherInfo thunder_bird_feather_info */ 1859:
                    message.param = {
                        oneofKind: "thunderBirdFeatherInfo",
                        thunderBirdFeatherInfo: WidgetThunderBirdFeatherInfo.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).thunderBirdFeatherInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickUseWidgetReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.midnights.game.WidgetCreateLocationInfo location_info = 676; */
        if (message.param.oneofKind === "locationInfo")
            WidgetCreateLocationInfo.internalBinaryWrite(message.param.locationInfo, writer.tag(676, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WidgetCameraInfo camera_info = 478; */
        if (message.param.oneofKind === "cameraInfo")
            WidgetCameraInfo.internalBinaryWrite(message.param.cameraInfo, writer.tag(478, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WidgetCreatorInfo creator_info = 812; */
        if (message.param.oneofKind === "creatorInfo")
            WidgetCreatorInfo.internalBinaryWrite(message.param.creatorInfo, writer.tag(812, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WidgetThunderBirdFeatherInfo thunder_bird_feather_info = 1859; */
        if (message.param.oneofKind === "thunderBirdFeatherInfo")
            WidgetThunderBirdFeatherInfo.internalBinaryWrite(message.param.thunderBirdFeatherInfo, writer.tag(1859, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickUseWidgetReq
 */
export const QuickUseWidgetReq = new QuickUseWidgetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickUseWidgetRsp$Type extends MessageType<QuickUseWidgetRsp> {
    constructor() {
        super("com.midnights.game.QuickUseWidgetRsp", [
            { no: 6, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "detector_data", kind: "message", oneof: "param", T: () => OneoffGatherPointDetectorData },
            { no: 15, name: "client_collector_data", kind: "message", oneof: "param", T: () => ClientCollectorData },
            { no: 168922, name: "sky_crystal_detector_quick_use_result", kind: "message", oneof: "param", T: () => SkyCrystalDetectorQuickUseResult }
        ]);
    }
    create(value?: PartialMessage<QuickUseWidgetRsp>): QuickUseWidgetRsp {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickUseWidgetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickUseWidgetRsp): QuickUseWidgetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 material_id */ 6:
                    message.materialId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* com.midnights.game.OneoffGatherPointDetectorData detector_data */ 3:
                    message.param = {
                        oneofKind: "detectorData",
                        detectorData: OneoffGatherPointDetectorData.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).detectorData)
                    };
                    break;
                case /* com.midnights.game.ClientCollectorData client_collector_data */ 15:
                    message.param = {
                        oneofKind: "clientCollectorData",
                        clientCollectorData: ClientCollectorData.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).clientCollectorData)
                    };
                    break;
                case /* com.midnights.game.SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result */ 168922:
                    message.param = {
                        oneofKind: "skyCrystalDetectorQuickUseResult",
                        skyCrystalDetectorQuickUseResult: SkyCrystalDetectorQuickUseResult.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).skyCrystalDetectorQuickUseResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickUseWidgetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 material_id = 6; */
        if (message.materialId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.materialId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* com.midnights.game.OneoffGatherPointDetectorData detector_data = 3; */
        if (message.param.oneofKind === "detectorData")
            OneoffGatherPointDetectorData.internalBinaryWrite(message.param.detectorData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ClientCollectorData client_collector_data = 15; */
        if (message.param.oneofKind === "clientCollectorData")
            ClientCollectorData.internalBinaryWrite(message.param.clientCollectorData, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 168922; */
        if (message.param.oneofKind === "skyCrystalDetectorQuickUseResult")
            SkyCrystalDetectorQuickUseResult.internalBinaryWrite(message.param.skyCrystalDetectorQuickUseResult, writer.tag(168922, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickUseWidgetRsp
 */
export const QuickUseWidgetRsp = new QuickUseWidgetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCoolDownData$Type extends MessageType<WidgetCoolDownData> {
    constructor() {
        super("com.midnights.game.WidgetCoolDownData", [
            { no: 5, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "cool_down_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetCoolDownData>): WidgetCoolDownData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCoolDownData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCoolDownData): WidgetCoolDownData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 5:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint64 cool_down_time */ 4:
                    message.coolDownTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCoolDownData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 5; */
        if (message.isSuccess !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSuccess);
        /* optional uint64 cool_down_time = 4; */
        if (message.coolDownTime !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.coolDownTime);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCoolDownData
 */
export const WidgetCoolDownData = new WidgetCoolDownData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCoolDownNotify$Type extends MessageType<WidgetCoolDownNotify> {
    constructor() {
        super("com.midnights.game.WidgetCoolDownNotify", [
            { no: 1, name: "normal_cool_down_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetCoolDownData },
            { no: 12, name: "group_cool_down_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetCoolDownData }
        ]);
    }
    create(value?: PartialMessage<WidgetCoolDownNotify>): WidgetCoolDownNotify {
        const message = { normalCoolDownDataList: [], groupCoolDownDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCoolDownNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCoolDownNotify): WidgetCoolDownNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list */ 1:
                    message.normalCoolDownDataList.push(WidgetCoolDownData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.WidgetCoolDownData group_cool_down_data_list */ 12:
                    message.groupCoolDownDataList.push(WidgetCoolDownData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCoolDownNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list = 1; */
        for (let i = 0; i < message.normalCoolDownDataList.length; i++)
            WidgetCoolDownData.internalBinaryWrite(message.normalCoolDownDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.WidgetCoolDownData group_cool_down_data_list = 12; */
        for (let i = 0; i < message.groupCoolDownDataList.length; i++)
            WidgetCoolDownData.internalBinaryWrite(message.groupCoolDownDataList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCoolDownNotify
 */
export const WidgetCoolDownNotify = new WidgetCoolDownNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetReportReq$Type extends MessageType<WidgetReportReq> {
    constructor() {
        super("com.midnights.game.WidgetReportReq", [
            { no: 5, name: "is_clear_sky_crystal_hint", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "is_client_collect", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "is_clear_hint", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetReportReq>): WidgetReportReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetReportReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetReportReq): WidgetReportReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_clear_sky_crystal_hint */ 5:
                    message.isClearSkyCrystalHint = reader.bool();
                    break;
                case /* optional bool is_client_collect */ 14:
                    message.isClientCollect = reader.bool();
                    break;
                case /* optional bool is_clear_hint */ 13:
                    message.isClearHint = reader.bool();
                    break;
                case /* optional uint32 material_id */ 15:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetReportReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_clear_sky_crystal_hint = 5; */
        if (message.isClearSkyCrystalHint !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isClearSkyCrystalHint);
        /* optional bool is_client_collect = 14; */
        if (message.isClientCollect !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isClientCollect);
        /* optional bool is_clear_hint = 13; */
        if (message.isClearHint !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isClearHint);
        /* optional uint32 material_id = 15; */
        if (message.materialId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetReportReq
 */
export const WidgetReportReq = new WidgetReportReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetReportRsp$Type extends MessageType<WidgetReportRsp> {
    constructor() {
        super("com.midnights.game.WidgetReportRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetReportRsp>): WidgetReportRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetReportRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetReportRsp): WidgetReportRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 4:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetReportRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 4; */
        if (message.materialId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetReportRsp
 */
export const WidgetReportRsp = new WidgetReportRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientCollectorDataNotify$Type extends MessageType<ClientCollectorDataNotify> {
    constructor() {
        super("com.midnights.game.ClientCollectorDataNotify", [
            { no: 13, name: "client_collector_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientCollectorData }
        ]);
    }
    create(value?: PartialMessage<ClientCollectorDataNotify>): ClientCollectorDataNotify {
        const message = { clientCollectorDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientCollectorDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientCollectorDataNotify): ClientCollectorDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ClientCollectorData client_collector_data_list */ 13:
                    message.clientCollectorDataList.push(ClientCollectorData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientCollectorDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ClientCollectorData client_collector_data_list = 13; */
        for (let i = 0; i < message.clientCollectorDataList.length; i++)
            ClientCollectorData.internalBinaryWrite(message.clientCollectorDataList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientCollectorDataNotify
 */
export const ClientCollectorDataNotify = new ClientCollectorDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OneoffGatherPointDetectorDataNotify$Type extends MessageType<OneoffGatherPointDetectorDataNotify> {
    constructor() {
        super("com.midnights.game.OneoffGatherPointDetectorDataNotify", [
            { no: 3, name: "oneoff_gather_point_detector_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OneoffGatherPointDetectorData }
        ]);
    }
    create(value?: PartialMessage<OneoffGatherPointDetectorDataNotify>): OneoffGatherPointDetectorDataNotify {
        const message = { oneoffGatherPointDetectorDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OneoffGatherPointDetectorDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OneoffGatherPointDetectorDataNotify): OneoffGatherPointDetectorDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list */ 3:
                    message.oneoffGatherPointDetectorDataList.push(OneoffGatherPointDetectorData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OneoffGatherPointDetectorDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 3; */
        for (let i = 0; i < message.oneoffGatherPointDetectorDataList.length; i++)
            OneoffGatherPointDetectorData.internalBinaryWrite(message.oneoffGatherPointDetectorDataList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OneoffGatherPointDetectorDataNotify
 */
export const OneoffGatherPointDetectorDataNotify = new OneoffGatherPointDetectorDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SkyCrystalDetectorDataUpdateNotify$Type extends MessageType<SkyCrystalDetectorDataUpdateNotify> {
    constructor() {
        super("com.midnights.game.SkyCrystalDetectorDataUpdateNotify", [
            { no: 9, name: "sky_crystal_detector_data", kind: "message", T: () => SkyCrystalDetectorData }
        ]);
    }
    create(value?: PartialMessage<SkyCrystalDetectorDataUpdateNotify>): SkyCrystalDetectorDataUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SkyCrystalDetectorDataUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SkyCrystalDetectorDataUpdateNotify): SkyCrystalDetectorDataUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data */ 9:
                    message.skyCrystalDetectorData = SkyCrystalDetectorData.internalBinaryRead(reader, reader.uint32(), options, message.skyCrystalDetectorData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SkyCrystalDetectorDataUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 9; */
        if (message.skyCrystalDetectorData)
            SkyCrystalDetectorData.internalBinaryWrite(message.skyCrystalDetectorData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SkyCrystalDetectorDataUpdateNotify
 */
export const SkyCrystalDetectorDataUpdateNotify = new SkyCrystalDetectorDataUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapDetectorDataNotify$Type extends MessageType<TreasureMapDetectorDataNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapDetectorDataNotify", [
            { no: 2, name: "data", kind: "message", T: () => TreasureMapDetectorData }
        ]);
    }
    create(value?: PartialMessage<TreasureMapDetectorDataNotify>): TreasureMapDetectorDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapDetectorDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapDetectorDataNotify): TreasureMapDetectorDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TreasureMapDetectorData data */ 2:
                    message.data = TreasureMapDetectorData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapDetectorDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TreasureMapDetectorData data = 2; */
        if (message.data)
            TreasureMapDetectorData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapDetectorDataNotify
 */
export const TreasureMapDetectorDataNotify = new TreasureMapDetectorDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetSlotData$Type extends MessageType<WidgetSlotData> {
    constructor() {
        super("com.midnights.game.WidgetSlotData", [
            { no: 9, name: "cd_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "tag", kind: "enum", opt: true, T: () => ["com.midnights.game.WidgetSlotTag", WidgetSlotTag] },
            { no: 11, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetSlotData>): WidgetSlotData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetSlotData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetSlotData): WidgetSlotData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cd_over_time */ 9:
                    message.cdOverTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.WidgetSlotTag tag */ 14:
                    message.tag = reader.int32();
                    break;
                case /* optional uint32 material_id */ 11:
                    message.materialId = reader.uint32();
                    break;
                case /* optional bool is_active */ 12:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetSlotData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cd_over_time = 9; */
        if (message.cdOverTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cdOverTime);
        /* optional com.midnights.game.WidgetSlotTag tag = 14; */
        if (message.tag !== undefined)
            writer.tag(14, WireType.Varint).int32(message.tag);
        /* optional uint32 material_id = 11; */
        if (message.materialId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.materialId);
        /* optional bool is_active = 12; */
        if (message.isActive !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetSlotData
 */
export const WidgetSlotData = new WidgetSlotData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetWidgetSlotReq$Type extends MessageType<SetWidgetSlotReq> {
    constructor() {
        super("com.midnights.game.SetWidgetSlotReq", [
            { no: 15, name: "tag_list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["com.midnights.game.WidgetSlotTag", WidgetSlotTag] },
            { no: 6, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "op", kind: "enum", opt: true, T: () => ["com.midnights.game.WidgetSlotOp", WidgetSlotOp, "WIDGET_SLOT_OP_"] }
        ]);
    }
    create(value?: PartialMessage<SetWidgetSlotReq>): SetWidgetSlotReq {
        const message = { tagList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetWidgetSlotReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetWidgetSlotReq): SetWidgetSlotReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetSlotTag tag_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tagList.push(reader.int32());
                    else
                        message.tagList.push(reader.int32());
                    break;
                case /* optional uint32 material_id */ 6:
                    message.materialId = reader.uint32();
                    break;
                case /* optional com.midnights.game.WidgetSlotOp op */ 2:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetWidgetSlotReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetSlotTag tag_list = 15; */
        if (message.tagList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tagList.length; i++)
                writer.int32(message.tagList[i]);
            writer.join();
        }
        /* optional uint32 material_id = 6; */
        if (message.materialId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.materialId);
        /* optional com.midnights.game.WidgetSlotOp op = 2; */
        if (message.op !== undefined)
            writer.tag(2, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetWidgetSlotReq
 */
export const SetWidgetSlotReq = new SetWidgetSlotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetWidgetSlotRsp$Type extends MessageType<SetWidgetSlotRsp> {
    constructor() {
        super("com.midnights.game.SetWidgetSlotRsp", [
            { no: 15, name: "tag_list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["com.midnights.game.WidgetSlotTag", WidgetSlotTag] },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "op", kind: "enum", opt: true, T: () => ["com.midnights.game.WidgetSlotOp", WidgetSlotOp, "WIDGET_SLOT_OP_"] }
        ]);
    }
    create(value?: PartialMessage<SetWidgetSlotRsp>): SetWidgetSlotRsp {
        const message = { tagList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetWidgetSlotRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetWidgetSlotRsp): SetWidgetSlotRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetSlotTag tag_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tagList.push(reader.int32());
                    else
                        message.tagList.push(reader.int32());
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 1:
                    message.materialId = reader.uint32();
                    break;
                case /* optional com.midnights.game.WidgetSlotOp op */ 4:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetWidgetSlotRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetSlotTag tag_list = 15; */
        if (message.tagList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tagList.length; i++)
                writer.int32(message.tagList[i]);
            writer.join();
        }
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 1; */
        if (message.materialId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.materialId);
        /* optional com.midnights.game.WidgetSlotOp op = 4; */
        if (message.op !== undefined)
            writer.tag(4, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetWidgetSlotRsp
 */
export const SetWidgetSlotRsp = new SetWidgetSlotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetSlotChangeNotify$Type extends MessageType<WidgetSlotChangeNotify> {
    constructor() {
        super("com.midnights.game.WidgetSlotChangeNotify", [
            { no: 11, name: "op", kind: "enum", opt: true, T: () => ["com.midnights.game.WidgetSlotOp", WidgetSlotOp, "WIDGET_SLOT_OP_"] },
            { no: 8, name: "slot", kind: "message", T: () => WidgetSlotData }
        ]);
    }
    create(value?: PartialMessage<WidgetSlotChangeNotify>): WidgetSlotChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetSlotChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetSlotChangeNotify): WidgetSlotChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WidgetSlotOp op */ 11:
                    message.op = reader.int32();
                    break;
                case /* optional com.midnights.game.WidgetSlotData slot */ 8:
                    message.slot = WidgetSlotData.internalBinaryRead(reader, reader.uint32(), options, message.slot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetSlotChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.WidgetSlotOp op = 11; */
        if (message.op !== undefined)
            writer.tag(11, WireType.Varint).int32(message.op);
        /* optional com.midnights.game.WidgetSlotData slot = 8; */
        if (message.slot)
            WidgetSlotData.internalBinaryWrite(message.slot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetSlotChangeNotify
 */
export const WidgetSlotChangeNotify = new WidgetSlotChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWidgetSlotReq$Type extends MessageType<GetWidgetSlotReq> {
    constructor() {
        super("com.midnights.game.GetWidgetSlotReq", []);
    }
    create(value?: PartialMessage<GetWidgetSlotReq>): GetWidgetSlotReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWidgetSlotReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWidgetSlotReq): GetWidgetSlotReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetWidgetSlotReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetWidgetSlotReq
 */
export const GetWidgetSlotReq = new GetWidgetSlotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetWidgetSlotRsp$Type extends MessageType<GetWidgetSlotRsp> {
    constructor() {
        super("com.midnights.game.GetWidgetSlotRsp", [
            { no: 13, name: "slot_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetSlotData },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetWidgetSlotRsp>): GetWidgetSlotRsp {
        const message = { slotList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetWidgetSlotRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetWidgetSlotRsp): GetWidgetSlotRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetSlotData slot_list */ 13:
                    message.slotList.push(WidgetSlotData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetWidgetSlotRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetSlotData slot_list = 13; */
        for (let i = 0; i < message.slotList.length; i++)
            WidgetSlotData.internalBinaryWrite(message.slotList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetWidgetSlotRsp
 */
export const GetWidgetSlotRsp = new GetWidgetSlotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllWidgetDataNotify$Type extends MessageType<AllWidgetDataNotify> {
    constructor() {
        super("com.midnights.game.AllWidgetDataNotify", [
            { no: 11, name: "background_active_widget_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "lunch_box_data", kind: "message", T: () => LunchBoxData },
            { no: 13, name: "cool_down_group_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetCoolDownData },
            { no: 3, name: "anchor_point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AnchorPointData },
            { no: 6, name: "slot_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetSlotData },
            { no: 10, name: "next_anchor_point_usable_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "client_collector_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClientCollectorData },
            { no: 15, name: "oneoff_gather_point_detector_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OneoffGatherPointDetectorData },
            { no: 9, name: "normal_cool_down_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetCoolDownData },
            { no: 12, name: "sky_crystal_detector_data", kind: "message", T: () => SkyCrystalDetectorData }
        ]);
    }
    create(value?: PartialMessage<AllWidgetDataNotify>): AllWidgetDataNotify {
        const message = { backgroundActiveWidgetList: [], coolDownGroupDataList: [], anchorPointList: [], slotList: [], clientCollectorDataList: [], oneoffGatherPointDetectorDataList: [], normalCoolDownDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllWidgetDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllWidgetDataNotify): AllWidgetDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 background_active_widget_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backgroundActiveWidgetList.push(reader.uint32());
                    else
                        message.backgroundActiveWidgetList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.LunchBoxData lunch_box_data */ 1:
                    message.lunchBoxData = LunchBoxData.internalBinaryRead(reader, reader.uint32(), options, message.lunchBoxData);
                    break;
                case /* repeated com.midnights.game.WidgetCoolDownData cool_down_group_data_list */ 13:
                    message.coolDownGroupDataList.push(WidgetCoolDownData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.AnchorPointData anchor_point_list */ 3:
                    message.anchorPointList.push(AnchorPointData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.WidgetSlotData slot_list */ 6:
                    message.slotList.push(WidgetSlotData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 next_anchor_point_usable_time */ 10:
                    message.nextAnchorPointUsableTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ClientCollectorData client_collector_data_list */ 4:
                    message.clientCollectorDataList.push(ClientCollectorData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list */ 15:
                    message.oneoffGatherPointDetectorDataList.push(OneoffGatherPointDetectorData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list */ 9:
                    message.normalCoolDownDataList.push(WidgetCoolDownData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data */ 12:
                    message.skyCrystalDetectorData = SkyCrystalDetectorData.internalBinaryRead(reader, reader.uint32(), options, message.skyCrystalDetectorData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllWidgetDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 background_active_widget_list = 11; */
        if (message.backgroundActiveWidgetList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backgroundActiveWidgetList.length; i++)
                writer.uint32(message.backgroundActiveWidgetList[i]);
            writer.join();
        }
        /* optional com.midnights.game.LunchBoxData lunch_box_data = 1; */
        if (message.lunchBoxData)
            LunchBoxData.internalBinaryWrite(message.lunchBoxData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.WidgetCoolDownData cool_down_group_data_list = 13; */
        for (let i = 0; i < message.coolDownGroupDataList.length; i++)
            WidgetCoolDownData.internalBinaryWrite(message.coolDownGroupDataList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.AnchorPointData anchor_point_list = 3; */
        for (let i = 0; i < message.anchorPointList.length; i++)
            AnchorPointData.internalBinaryWrite(message.anchorPointList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.WidgetSlotData slot_list = 6; */
        for (let i = 0; i < message.slotList.length; i++)
            WidgetSlotData.internalBinaryWrite(message.slotList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 next_anchor_point_usable_time = 10; */
        if (message.nextAnchorPointUsableTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.nextAnchorPointUsableTime);
        /* repeated com.midnights.game.ClientCollectorData client_collector_data_list = 4; */
        for (let i = 0; i < message.clientCollectorDataList.length; i++)
            ClientCollectorData.internalBinaryWrite(message.clientCollectorDataList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.OneoffGatherPointDetectorData oneoff_gather_point_detector_data_list = 15; */
        for (let i = 0; i < message.oneoffGatherPointDetectorDataList.length; i++)
            OneoffGatherPointDetectorData.internalBinaryWrite(message.oneoffGatherPointDetectorDataList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.WidgetCoolDownData normal_cool_down_data_list = 9; */
        for (let i = 0; i < message.normalCoolDownDataList.length; i++)
            WidgetCoolDownData.internalBinaryWrite(message.normalCoolDownDataList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.SkyCrystalDetectorData sky_crystal_detector_data = 12; */
        if (message.skyCrystalDetectorData)
            SkyCrystalDetectorData.internalBinaryWrite(message.skyCrystalDetectorData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AllWidgetDataNotify
 */
export const AllWidgetDataNotify = new AllWidgetDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseWidgetCreateGadgetReq$Type extends MessageType<UseWidgetCreateGadgetReq> {
    constructor() {
        super("com.midnights.game.UseWidgetCreateGadgetReq", [
            { no: 15, name: "pos", kind: "message", T: () => Vector },
            { no: 12, name: "rot", kind: "message", T: () => Vector },
            { no: 4, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseWidgetCreateGadgetReq>): UseWidgetCreateGadgetReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseWidgetCreateGadgetReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseWidgetCreateGadgetReq): UseWidgetCreateGadgetReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 15:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 12:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional uint32 material_id */ 4:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseWidgetCreateGadgetReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 15; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 12; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 material_id = 4; */
        if (message.materialId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseWidgetCreateGadgetReq
 */
export const UseWidgetCreateGadgetReq = new UseWidgetCreateGadgetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseWidgetCreateGadgetRsp$Type extends MessageType<UseWidgetCreateGadgetRsp> {
    constructor() {
        super("com.midnights.game.UseWidgetCreateGadgetRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseWidgetCreateGadgetRsp>): UseWidgetCreateGadgetRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseWidgetCreateGadgetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseWidgetCreateGadgetRsp): UseWidgetCreateGadgetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 12:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseWidgetCreateGadgetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 12; */
        if (message.materialId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseWidgetCreateGadgetRsp
 */
export const UseWidgetCreateGadgetRsp = new UseWidgetCreateGadgetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseWidgetRetractGadgetReq$Type extends MessageType<UseWidgetRetractGadgetReq> {
    constructor() {
        super("com.midnights.game.UseWidgetRetractGadgetReq", [
            { no: 3, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseWidgetRetractGadgetReq>): UseWidgetRetractGadgetReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseWidgetRetractGadgetReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseWidgetRetractGadgetReq): UseWidgetRetractGadgetReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 3:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseWidgetRetractGadgetReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 3; */
        if (message.entityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseWidgetRetractGadgetReq
 */
export const UseWidgetRetractGadgetReq = new UseWidgetRetractGadgetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseWidgetRetractGadgetRsp$Type extends MessageType<UseWidgetRetractGadgetRsp> {
    constructor() {
        super("com.midnights.game.UseWidgetRetractGadgetRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseWidgetRetractGadgetRsp>): UseWidgetRetractGadgetRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseWidgetRetractGadgetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseWidgetRetractGadgetRsp): UseWidgetRetractGadgetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 14:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseWidgetRetractGadgetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 14; */
        if (message.entityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseWidgetRetractGadgetRsp
 */
export const UseWidgetRetractGadgetRsp = new UseWidgetRetractGadgetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetGadgetData$Type extends MessageType<WidgetGadgetData> {
    constructor() {
        super("com.midnights.game.WidgetGadgetData", [
            { no: 1, name: "gadget_entity_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetGadgetData>): WidgetGadgetData {
        const message = { gadgetEntityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetGadgetData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetGadgetData): WidgetGadgetData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 gadget_entity_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.gadgetEntityIdList.push(reader.uint32());
                    else
                        message.gadgetEntityIdList.push(reader.uint32());
                    break;
                case /* optional uint32 gadget_id */ 8:
                    message.gadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetGadgetData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 gadget_entity_id_list = 1; */
        if (message.gadgetEntityIdList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.gadgetEntityIdList.length; i++)
                writer.uint32(message.gadgetEntityIdList[i]);
            writer.join();
        }
        /* optional uint32 gadget_id = 8; */
        if (message.gadgetId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetGadgetData
 */
export const WidgetGadgetData = new WidgetGadgetData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetGadgetAllDataNotify$Type extends MessageType<WidgetGadgetAllDataNotify> {
    constructor() {
        super("com.midnights.game.WidgetGadgetAllDataNotify", [
            { no: 13, name: "widget_gadget_data", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetGadgetData }
        ]);
    }
    create(value?: PartialMessage<WidgetGadgetAllDataNotify>): WidgetGadgetAllDataNotify {
        const message = { widgetGadgetData: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetGadgetAllDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetGadgetAllDataNotify): WidgetGadgetAllDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetGadgetData widget_gadget_data */ 13:
                    message.widgetGadgetData.push(WidgetGadgetData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetGadgetAllDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetGadgetData widget_gadget_data = 13; */
        for (let i = 0; i < message.widgetGadgetData.length; i++)
            WidgetGadgetData.internalBinaryWrite(message.widgetGadgetData[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetGadgetAllDataNotify
 */
export const WidgetGadgetAllDataNotify = new WidgetGadgetAllDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetGadgetDataNotify$Type extends MessageType<WidgetGadgetDataNotify> {
    constructor() {
        super("com.midnights.game.WidgetGadgetDataNotify", [
            { no: 12, name: "widget_gadget_data", kind: "message", T: () => WidgetGadgetData }
        ]);
    }
    create(value?: PartialMessage<WidgetGadgetDataNotify>): WidgetGadgetDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetGadgetDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetGadgetDataNotify): WidgetGadgetDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WidgetGadgetData widget_gadget_data */ 12:
                    message.widgetGadgetData = WidgetGadgetData.internalBinaryRead(reader, reader.uint32(), options, message.widgetGadgetData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetGadgetDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.WidgetGadgetData widget_gadget_data = 12; */
        if (message.widgetGadgetData)
            WidgetGadgetData.internalBinaryWrite(message.widgetGadgetData, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetGadgetDataNotify
 */
export const WidgetGadgetDataNotify = new WidgetGadgetDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetGadgetDestroyNotify$Type extends MessageType<WidgetGadgetDestroyNotify> {
    constructor() {
        super("com.midnights.game.WidgetGadgetDestroyNotify", [
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetGadgetDestroyNotify>): WidgetGadgetDestroyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetGadgetDestroyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetGadgetDestroyNotify): WidgetGadgetDestroyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetGadgetDestroyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetGadgetDestroyNotify
 */
export const WidgetGadgetDestroyNotify = new WidgetGadgetDestroyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCreateLocationInfo$Type extends MessageType<WidgetCreateLocationInfo> {
    constructor() {
        super("com.midnights.game.WidgetCreateLocationInfo", [
            { no: 3, name: "rot", kind: "message", T: () => Vector },
            { no: 10, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<WidgetCreateLocationInfo>): WidgetCreateLocationInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCreateLocationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCreateLocationInfo): WidgetCreateLocationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 3:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCreateLocationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 3; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCreateLocationInfo
 */
export const WidgetCreateLocationInfo = new WidgetCreateLocationInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCreatorInfo$Type extends MessageType<WidgetCreatorInfo> {
    constructor() {
        super("com.midnights.game.WidgetCreatorInfo", [
            { no: 10, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.WidgetCreatorOpType", WidgetCreatorOpType] },
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "location_info", kind: "message", T: () => WidgetCreateLocationInfo }
        ]);
    }
    create(value?: PartialMessage<WidgetCreatorInfo>): WidgetCreatorInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCreatorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCreatorInfo): WidgetCreatorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WidgetCreatorOpType op_type */ 10:
                    message.opType = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 1:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.WidgetCreateLocationInfo location_info */ 12:
                    message.locationInfo = WidgetCreateLocationInfo.internalBinaryRead(reader, reader.uint32(), options, message.locationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCreatorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.WidgetCreatorOpType op_type = 10; */
        if (message.opType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.opType);
        /* optional uint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.WidgetCreateLocationInfo location_info = 12; */
        if (message.locationInfo)
            WidgetCreateLocationInfo.internalBinaryWrite(message.locationInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCreatorInfo
 */
export const WidgetCreatorInfo = new WidgetCreatorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetDoBagReq$Type extends MessageType<WidgetDoBagReq> {
    constructor() {
        super("com.midnights.game.WidgetDoBagReq", [
            { no: 9, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 832, name: "location_info", kind: "message", oneof: "opInfo", T: () => WidgetCreateLocationInfo },
            { no: 1497, name: "widget_creator_info", kind: "message", oneof: "opInfo", T: () => WidgetCreatorInfo }
        ]);
    }
    create(value?: PartialMessage<WidgetDoBagReq>): WidgetDoBagReq {
        const message = { opInfo: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetDoBagReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetDoBagReq): WidgetDoBagReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 material_id */ 9:
                    message.materialId = reader.uint32();
                    break;
                case /* com.midnights.game.WidgetCreateLocationInfo location_info */ 832:
                    message.opInfo = {
                        oneofKind: "locationInfo",
                        locationInfo: WidgetCreateLocationInfo.internalBinaryRead(reader, reader.uint32(), options, (message.opInfo as any).locationInfo)
                    };
                    break;
                case /* com.midnights.game.WidgetCreatorInfo widget_creator_info */ 1497:
                    message.opInfo = {
                        oneofKind: "widgetCreatorInfo",
                        widgetCreatorInfo: WidgetCreatorInfo.internalBinaryRead(reader, reader.uint32(), options, (message.opInfo as any).widgetCreatorInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetDoBagReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 material_id = 9; */
        if (message.materialId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.materialId);
        /* com.midnights.game.WidgetCreateLocationInfo location_info = 832; */
        if (message.opInfo.oneofKind === "locationInfo")
            WidgetCreateLocationInfo.internalBinaryWrite(message.opInfo.locationInfo, writer.tag(832, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WidgetCreatorInfo widget_creator_info = 1497; */
        if (message.opInfo.oneofKind === "widgetCreatorInfo")
            WidgetCreatorInfo.internalBinaryWrite(message.opInfo.widgetCreatorInfo, writer.tag(1497, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetDoBagReq
 */
export const WidgetDoBagReq = new WidgetDoBagReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetDoBagRsp$Type extends MessageType<WidgetDoBagRsp> {
    constructor() {
        super("com.midnights.game.WidgetDoBagRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetDoBagRsp>): WidgetDoBagRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetDoBagRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetDoBagRsp): WidgetDoBagRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 3:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetDoBagRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 3; */
        if (message.materialId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetDoBagRsp
 */
export const WidgetDoBagRsp = new WidgetDoBagRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetActiveChangeNotify$Type extends MessageType<WidgetActiveChangeNotify> {
    constructor() {
        super("com.midnights.game.WidgetActiveChangeNotify", [
            { no: 5, name: "widget_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetSlotData }
        ]);
    }
    create(value?: PartialMessage<WidgetActiveChangeNotify>): WidgetActiveChangeNotify {
        const message = { widgetDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetActiveChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetActiveChangeNotify): WidgetActiveChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WidgetSlotData widget_data_list */ 5:
                    message.widgetDataList.push(WidgetSlotData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetActiveChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WidgetSlotData widget_data_list = 5; */
        for (let i = 0; i < message.widgetDataList.length; i++)
            WidgetSlotData.internalBinaryWrite(message.widgetDataList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetActiveChangeNotify
 */
export const WidgetActiveChangeNotify = new WidgetActiveChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetUseAttachAbilityGroupChangeNotify$Type extends MessageType<WidgetUseAttachAbilityGroupChangeNotify> {
    constructor() {
        super("com.midnights.game.WidgetUseAttachAbilityGroupChangeNotify", [
            { no: 6, name: "is_attach", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetUseAttachAbilityGroupChangeNotify>): WidgetUseAttachAbilityGroupChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetUseAttachAbilityGroupChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetUseAttachAbilityGroupChangeNotify): WidgetUseAttachAbilityGroupChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_attach */ 6:
                    message.isAttach = reader.bool();
                    break;
                case /* optional uint32 material_id */ 11:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetUseAttachAbilityGroupChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_attach = 6; */
        if (message.isAttach !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isAttach);
        /* optional uint32 material_id = 11; */
        if (message.materialId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetUseAttachAbilityGroupChangeNotify
 */
export const WidgetUseAttachAbilityGroupChangeNotify = new WidgetUseAttachAbilityGroupChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCaptureAnimalReq$Type extends MessageType<WidgetCaptureAnimalReq> {
    constructor() {
        super("com.midnights.game.WidgetCaptureAnimalReq", [
            { no: 10, name: "pos", kind: "message", T: () => Vector },
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetCaptureAnimalReq>): WidgetCaptureAnimalReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCaptureAnimalReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCaptureAnimalReq): WidgetCaptureAnimalReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 material_id */ 6:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCaptureAnimalReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        /* optional uint32 material_id = 6; */
        if (message.materialId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCaptureAnimalReq
 */
export const WidgetCaptureAnimalReq = new WidgetCaptureAnimalReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetCaptureAnimalRsp$Type extends MessageType<WidgetCaptureAnimalRsp> {
    constructor() {
        super("com.midnights.game.WidgetCaptureAnimalRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<WidgetCaptureAnimalRsp>): WidgetCaptureAnimalRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetCaptureAnimalRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetCaptureAnimalRsp): WidgetCaptureAnimalRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 4:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 material_id */ 8:
                    message.materialId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetCaptureAnimalRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 4; */
        if (message.entityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.entityId);
        /* optional uint32 material_id = 8; */
        if (message.materialId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.materialId);
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetCaptureAnimalRsp
 */
export const WidgetCaptureAnimalRsp = new WidgetCaptureAnimalRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetUpdateExtraCDReq$Type extends MessageType<WidgetUpdateExtraCDReq> {
    constructor() {
        super("com.midnights.game.WidgetUpdateExtraCDReq", [
            { no: 14, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "extra_cd_type", kind: "enum", opt: true, T: () => ["com.midnights.game.WIDGET_EXTRA_CD_TYPE", WIDGET_EXTRA_CD_TYPE] },
            { no: 7, name: "cd_group", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetUpdateExtraCDReq>): WidgetUpdateExtraCDReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetUpdateExtraCDReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetUpdateExtraCDReq): WidgetUpdateExtraCDReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 material_id */ 14:
                    message.materialId = reader.uint32();
                    break;
                case /* optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type */ 10:
                    message.extraCdType = reader.int32();
                    break;
                case /* optional uint32 cd_group */ 7:
                    message.cdGroup = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetUpdateExtraCDReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 material_id = 14; */
        if (message.materialId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.materialId);
        /* optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type = 10; */
        if (message.extraCdType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.extraCdType);
        /* optional uint32 cd_group = 7; */
        if (message.cdGroup !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.cdGroup);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetUpdateExtraCDReq
 */
export const WidgetUpdateExtraCDReq = new WidgetUpdateExtraCDReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WidgetUpdateExtraCDRsp$Type extends MessageType<WidgetUpdateExtraCDRsp> {
    constructor() {
        super("com.midnights.game.WidgetUpdateExtraCDRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "extra_cd_type", kind: "enum", opt: true, T: () => ["com.midnights.game.WIDGET_EXTRA_CD_TYPE", WIDGET_EXTRA_CD_TYPE] },
            { no: 10, name: "cool_data", kind: "message", T: () => WidgetCoolDownData },
            { no: 15, name: "cd_group", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WidgetUpdateExtraCDRsp>): WidgetUpdateExtraCDRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WidgetUpdateExtraCDRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WidgetUpdateExtraCDRsp): WidgetUpdateExtraCDRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 11:
                    message.materialId = reader.uint32();
                    break;
                case /* optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type */ 6:
                    message.extraCdType = reader.int32();
                    break;
                case /* optional com.midnights.game.WidgetCoolDownData cool_data */ 10:
                    message.coolData = WidgetCoolDownData.internalBinaryRead(reader, reader.uint32(), options, message.coolData);
                    break;
                case /* optional uint32 cd_group */ 15:
                    message.cdGroup = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WidgetUpdateExtraCDRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 11; */
        if (message.materialId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.materialId);
        /* optional com.midnights.game.WIDGET_EXTRA_CD_TYPE extra_cd_type = 6; */
        if (message.extraCdType !== undefined)
            writer.tag(6, WireType.Varint).int32(message.extraCdType);
        /* optional com.midnights.game.WidgetCoolDownData cool_data = 10; */
        if (message.coolData)
            WidgetCoolDownData.internalBinaryWrite(message.coolData, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cd_group = 15; */
        if (message.cdGroup !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cdGroup);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WidgetUpdateExtraCDRsp
 */
export const WidgetUpdateExtraCDRsp = new WidgetUpdateExtraCDRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksReformParam$Type extends MessageType<FireworksReformParam> {
    constructor() {
        super("com.midnights.game.FireworksReformParam", [
            { no: 8, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.FireworksReformParamType", FireworksReformParamType] },
            { no: 4, name: "value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FireworksReformParam>): FireworksReformParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksReformParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksReformParam): FireworksReformParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FireworksReformParamType type */ 8:
                    message.type = reader.int32();
                    break;
                case /* optional int32 value */ 4:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksReformParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FireworksReformParamType type = 8; */
        if (message.type !== undefined)
            writer.tag(8, WireType.Varint).int32(message.type);
        /* optional int32 value = 4; */
        if (message.value !== undefined)
            writer.tag(4, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksReformParam
 */
export const FireworksReformParam = new FireworksReformParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksReformData$Type extends MessageType<FireworksReformData> {
    constructor() {
        super("com.midnights.game.FireworksReformData", [
            { no: 13, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "reform_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FireworksReformParam }
        ]);
    }
    create(value?: PartialMessage<FireworksReformData>): FireworksReformData {
        const message = { reformParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksReformData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksReformData): FireworksReformData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 13:
                    message.id = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FireworksReformParam reform_param_list */ 10:
                    message.reformParamList.push(FireworksReformParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksReformData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 13; */
        if (message.id !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.id);
        /* repeated com.midnights.game.FireworksReformParam reform_param_list = 10; */
        for (let i = 0; i < message.reformParamList.length; i++)
            FireworksReformParam.internalBinaryWrite(message.reformParamList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksReformData
 */
export const FireworksReformData = new FireworksReformData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksReformDataNotify$Type extends MessageType<FireworksReformDataNotify> {
    constructor() {
        super("com.midnights.game.FireworksReformDataNotify", [
            { no: 6, name: "fireworks_reform_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FireworksReformData }
        ]);
    }
    create(value?: PartialMessage<FireworksReformDataNotify>): FireworksReformDataNotify {
        const message = { fireworksReformDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksReformDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksReformDataNotify): FireworksReformDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FireworksReformData fireworks_reform_data_list */ 6:
                    message.fireworksReformDataList.push(FireworksReformData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksReformDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.FireworksReformData fireworks_reform_data_list = 6; */
        for (let i = 0; i < message.fireworksReformDataList.length; i++)
            FireworksReformData.internalBinaryWrite(message.fireworksReformDataList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksReformDataNotify
 */
export const FireworksReformDataNotify = new FireworksReformDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReformFireworksReq$Type extends MessageType<ReformFireworksReq> {
    constructor() {
        super("com.midnights.game.ReformFireworksReq", [
            { no: 3, name: "fireworks_reform_data", kind: "message", T: () => FireworksReformData }
        ]);
    }
    create(value?: PartialMessage<ReformFireworksReq>): ReformFireworksReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReformFireworksReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReformFireworksReq): ReformFireworksReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FireworksReformData fireworks_reform_data */ 3:
                    message.fireworksReformData = FireworksReformData.internalBinaryRead(reader, reader.uint32(), options, message.fireworksReformData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReformFireworksReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FireworksReformData fireworks_reform_data = 3; */
        if (message.fireworksReformData)
            FireworksReformData.internalBinaryWrite(message.fireworksReformData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReformFireworksReq
 */
export const ReformFireworksReq = new ReformFireworksReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReformFireworksRsp$Type extends MessageType<ReformFireworksRsp> {
    constructor() {
        super("com.midnights.game.ReformFireworksRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReformFireworksRsp>): ReformFireworksRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReformFireworksRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReformFireworksRsp): ReformFireworksRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReformFireworksRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReformFireworksRsp
 */
export const ReformFireworksRsp = new ReformFireworksRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksLaunchParam$Type extends MessageType<FireworksLaunchParam> {
    constructor() {
        super("com.midnights.game.FireworksLaunchParam", [
            { no: 5, name: "value", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.FireworksLaunchParamType", FireworksLaunchParamType] }
        ]);
    }
    create(value?: PartialMessage<FireworksLaunchParam>): FireworksLaunchParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksLaunchParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksLaunchParam): FireworksLaunchParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 value */ 5:
                    message.value = reader.int32();
                    break;
                case /* optional com.midnights.game.FireworksLaunchParamType type */ 4:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksLaunchParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 value = 5; */
        if (message.value !== undefined)
            writer.tag(5, WireType.Varint).int32(message.value);
        /* optional com.midnights.game.FireworksLaunchParamType type = 4; */
        if (message.type !== undefined)
            writer.tag(4, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksLaunchParam
 */
export const FireworksLaunchParam = new FireworksLaunchParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksLaunchSchemeData$Type extends MessageType<FireworksLaunchSchemeData> {
    constructor() {
        super("com.midnights.game.FireworksLaunchSchemeData", [
            { no: 3, name: "scheme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "fireworks_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "launch_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FireworksLaunchParam }
        ]);
    }
    create(value?: PartialMessage<FireworksLaunchSchemeData>): FireworksLaunchSchemeData {
        const message = { fireworksIdList: [], launchParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksLaunchSchemeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksLaunchSchemeData): FireworksLaunchSchemeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scheme_id */ 3:
                    message.schemeId = reader.uint32();
                    break;
                case /* repeated uint32 fireworks_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fireworksIdList.push(reader.uint32());
                    else
                        message.fireworksIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.FireworksLaunchParam launch_param_list */ 7:
                    message.launchParamList.push(FireworksLaunchParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksLaunchSchemeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scheme_id = 3; */
        if (message.schemeId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.schemeId);
        /* repeated uint32 fireworks_id_list = 2; */
        if (message.fireworksIdList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fireworksIdList.length; i++)
                writer.uint32(message.fireworksIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.FireworksLaunchParam launch_param_list = 7; */
        for (let i = 0; i < message.launchParamList.length; i++)
            FireworksLaunchParam.internalBinaryWrite(message.launchParamList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksLaunchSchemeData
 */
export const FireworksLaunchSchemeData = new FireworksLaunchSchemeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LaunchFireworksReq$Type extends MessageType<LaunchFireworksReq> {
    constructor() {
        super("com.midnights.game.LaunchFireworksReq", [
            { no: 13, name: "scheme_data", kind: "message", T: () => FireworksLaunchSchemeData }
        ]);
    }
    create(value?: PartialMessage<LaunchFireworksReq>): LaunchFireworksReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LaunchFireworksReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LaunchFireworksReq): LaunchFireworksReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FireworksLaunchSchemeData scheme_data */ 13:
                    message.schemeData = FireworksLaunchSchemeData.internalBinaryRead(reader, reader.uint32(), options, message.schemeData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LaunchFireworksReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FireworksLaunchSchemeData scheme_data = 13; */
        if (message.schemeData)
            FireworksLaunchSchemeData.internalBinaryWrite(message.schemeData, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LaunchFireworksReq
 */
export const LaunchFireworksReq = new LaunchFireworksReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LaunchFireworksRsp$Type extends MessageType<LaunchFireworksRsp> {
    constructor() {
        super("com.midnights.game.LaunchFireworksRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LaunchFireworksRsp>): LaunchFireworksRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LaunchFireworksRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LaunchFireworksRsp): LaunchFireworksRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LaunchFireworksRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LaunchFireworksRsp
 */
export const LaunchFireworksRsp = new LaunchFireworksRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FireworksLaunchDataNotify$Type extends MessageType<FireworksLaunchDataNotify> {
    constructor() {
        super("com.midnights.game.FireworksLaunchDataNotify", [
            { no: 12, name: "scheme_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FireworksLaunchSchemeData },
            { no: 4, name: "last_use_scheme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FireworksLaunchDataNotify>): FireworksLaunchDataNotify {
        const message = { schemeDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FireworksLaunchDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireworksLaunchDataNotify): FireworksLaunchDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FireworksLaunchSchemeData scheme_data_list */ 12:
                    message.schemeDataList.push(FireworksLaunchSchemeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 last_use_scheme_id */ 4:
                    message.lastUseSchemeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FireworksLaunchDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.FireworksLaunchSchemeData scheme_data_list = 12; */
        for (let i = 0; i < message.schemeDataList.length; i++)
            FireworksLaunchSchemeData.internalBinaryWrite(message.schemeDataList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 last_use_scheme_id = 4; */
        if (message.lastUseSchemeId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.lastUseSchemeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FireworksLaunchDataNotify
 */
export const FireworksLaunchDataNotify = new FireworksLaunchDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeWidgetBackgroundActiveStateReq$Type extends MessageType<ChangeWidgetBackgroundActiveStateReq> {
    constructor() {
        super("com.midnights.game.ChangeWidgetBackgroundActiveStateReq", [
            { no: 15, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeWidgetBackgroundActiveStateReq>): ChangeWidgetBackgroundActiveStateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeWidgetBackgroundActiveStateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeWidgetBackgroundActiveStateReq): ChangeWidgetBackgroundActiveStateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_active */ 15:
                    message.isActive = reader.bool();
                    break;
                case /* optional uint32 material_id */ 3:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeWidgetBackgroundActiveStateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_active = 15; */
        if (message.isActive !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isActive);
        /* optional uint32 material_id = 3; */
        if (message.materialId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeWidgetBackgroundActiveStateReq
 */
export const ChangeWidgetBackgroundActiveStateReq = new ChangeWidgetBackgroundActiveStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeWidgetBackgroundActiveStateRsp$Type extends MessageType<ChangeWidgetBackgroundActiveStateRsp> {
    constructor() {
        super("com.midnights.game.ChangeWidgetBackgroundActiveStateRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeWidgetBackgroundActiveStateRsp>): ChangeWidgetBackgroundActiveStateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeWidgetBackgroundActiveStateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeWidgetBackgroundActiveStateRsp): ChangeWidgetBackgroundActiveStateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 material_id */ 6:
                    message.materialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeWidgetBackgroundActiveStateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 material_id = 6; */
        if (message.materialId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.materialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeWidgetBackgroundActiveStateRsp
 */
export const ChangeWidgetBackgroundActiveStateRsp = new ChangeWidgetBackgroundActiveStateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllWidgetBackgroundActiveStateNotify$Type extends MessageType<AllWidgetBackgroundActiveStateNotify> {
    constructor() {
        super("com.midnights.game.AllWidgetBackgroundActiveStateNotify", [
            { no: 3, name: "background_active_widget_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AllWidgetBackgroundActiveStateNotify>): AllWidgetBackgroundActiveStateNotify {
        const message = { backgroundActiveWidgetList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllWidgetBackgroundActiveStateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllWidgetBackgroundActiveStateNotify): AllWidgetBackgroundActiveStateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 background_active_widget_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backgroundActiveWidgetList.push(reader.uint32());
                    else
                        message.backgroundActiveWidgetList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllWidgetBackgroundActiveStateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 background_active_widget_list = 3; */
        if (message.backgroundActiveWidgetList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backgroundActiveWidgetList.length; i++)
                writer.uint32(message.backgroundActiveWidgetList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AllWidgetBackgroundActiveStateNotify
 */
export const AllWidgetBackgroundActiveStateNotify = new AllWidgetBackgroundActiveStateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerWidgetInfo$Type extends MessageType<PlayerWidgetInfo> {
    constructor() {
        super("com.midnights.game.PlayerWidgetInfo", [
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "slot_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WidgetSlotData }
        ]);
    }
    create(value?: PartialMessage<PlayerWidgetInfo>): PlayerWidgetInfo {
        const message = { slotList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerWidgetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerWidgetInfo): PlayerWidgetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                case /* repeated com.midnights.game.WidgetSlotData slot_list */ 13:
                    message.slotList.push(WidgetSlotData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerWidgetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        /* repeated com.midnights.game.WidgetSlotData slot_list = 13; */
        for (let i = 0; i < message.slotList.length; i++)
            WidgetSlotData.internalBinaryWrite(message.slotList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerWidgetInfo
 */
export const PlayerWidgetInfo = new PlayerWidgetInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemotePlayerWidgetNotify$Type extends MessageType<RemotePlayerWidgetNotify> {
    constructor() {
        super("com.midnights.game.RemotePlayerWidgetNotify", [
            { no: 3, name: "player_widget_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerWidgetInfo }
        ]);
    }
    create(value?: PartialMessage<RemotePlayerWidgetNotify>): RemotePlayerWidgetNotify {
        const message = { playerWidgetInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemotePlayerWidgetNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemotePlayerWidgetNotify): RemotePlayerWidgetNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list */ 3:
                    message.playerWidgetInfoList.push(PlayerWidgetInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemotePlayerWidgetNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerWidgetInfo player_widget_info_list = 3; */
        for (let i = 0; i < message.playerWidgetInfoList.length; i++)
            PlayerWidgetInfo.internalBinaryWrite(message.playerWidgetInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RemotePlayerWidgetNotify
 */
export const RemotePlayerWidgetNotify = new RemotePlayerWidgetNotify$Type();
