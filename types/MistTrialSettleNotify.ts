// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "MistTrialSettleNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MistTrialBestAvatar } from "./MistTrialBestAvatar";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 8116;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 *   IS_ALLOW_CLIENT = 1;
 * }
 *
 * @generated from protobuf message MistTrialSettleNotify
 */
export interface MistTrialSettleNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> Unk3300_KFKHAACDJDJ = 5 [json_name = "Unk3300KFKHAACDJDJ"];
     */
    unk3300KFKHAACDJDJ: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> Unk3300_GMPEELLANLI = 2 [json_name = "Unk3300GMPEELLANLI"];
     */
    unk3300GMPEELLANLI: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 dungeon_scene_id = 12;
     */
    dungeonSceneId: number;
    /**
     * @generated from protobuf field: uint32 first_pass_time = 8;
     */
    firstPassTime: number;
    /**
     * @generated from protobuf field: MistTrialBestAvatar best_hit_avatar = 3;
     */
    bestHitAvatar?: MistTrialBestAvatar;
    /**
     * @generated from protobuf field: repeated MistTrialBestAvatar best_avatar_list = 9;
     */
    bestAvatarList: MistTrialBestAvatar[];
}
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSettleNotify$Type extends MessageType<MistTrialSettleNotify> {
    constructor() {
        super("MistTrialSettleNotify", [
            { no: 5, name: "Unk3300_KFKHAACDJDJ", kind: "map", jsonName: "Unk3300KFKHAACDJDJ", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "Unk3300_GMPEELLANLI", kind: "map", jsonName: "Unk3300GMPEELLANLI", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "dungeon_scene_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "first_pass_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "best_hit_avatar", kind: "message", T: () => MistTrialBestAvatar },
            { no: 9, name: "best_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MistTrialBestAvatar }
        ]);
    }
    create(value?: PartialMessage<MistTrialSettleNotify>): MistTrialSettleNotify {
        const message = { unk3300KFKHAACDJDJ: {}, unk3300GMPEELLANLI: {}, dungeonSceneId: 0, firstPassTime: 0, bestAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialSettleNotify): MistTrialSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> Unk3300_KFKHAACDJDJ = 5 [json_name = "Unk3300KFKHAACDJDJ"];*/ 5:
                    this.binaryReadMap5(message.unk3300KFKHAACDJDJ, reader, options);
                    break;
                case /* map<uint32, uint32> Unk3300_GMPEELLANLI = 2 [json_name = "Unk3300GMPEELLANLI"];*/ 2:
                    this.binaryReadMap2(message.unk3300GMPEELLANLI, reader, options);
                    break;
                case /* uint32 dungeon_scene_id */ 12:
                    message.dungeonSceneId = reader.uint32();
                    break;
                case /* uint32 first_pass_time */ 8:
                    message.firstPassTime = reader.uint32();
                    break;
                case /* MistTrialBestAvatar best_hit_avatar */ 3:
                    message.bestHitAvatar = MistTrialBestAvatar.internalBinaryRead(reader, reader.uint32(), options, message.bestHitAvatar);
                    break;
                case /* repeated MistTrialBestAvatar best_avatar_list */ 9:
                    message.bestAvatarList.push(MistTrialBestAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: MistTrialSettleNotify["unk3300KFKHAACDJDJ"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MistTrialSettleNotify["unk3300KFKHAACDJDJ"] | undefined, val: MistTrialSettleNotify["unk3300KFKHAACDJDJ"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MistTrialSettleNotify.Unk3300_KFKHAACDJDJ");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap2(map: MistTrialSettleNotify["unk3300GMPEELLANLI"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MistTrialSettleNotify["unk3300GMPEELLANLI"] | undefined, val: MistTrialSettleNotify["unk3300GMPEELLANLI"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MistTrialSettleNotify.Unk3300_GMPEELLANLI");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: MistTrialSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> Unk3300_KFKHAACDJDJ = 5 [json_name = "Unk3300KFKHAACDJDJ"]; */
        for (let k of Object.keys(message.unk3300KFKHAACDJDJ))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unk3300KFKHAACDJDJ[k as any]).join();
        /* map<uint32, uint32> Unk3300_GMPEELLANLI = 2 [json_name = "Unk3300GMPEELLANLI"]; */
        for (let k of Object.keys(message.unk3300GMPEELLANLI))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unk3300GMPEELLANLI[k as any]).join();
        /* uint32 dungeon_scene_id = 12; */
        if (message.dungeonSceneId !== 0)
            writer.tag(12, WireType.Varint).uint32(message.dungeonSceneId);
        /* uint32 first_pass_time = 8; */
        if (message.firstPassTime !== 0)
            writer.tag(8, WireType.Varint).uint32(message.firstPassTime);
        /* MistTrialBestAvatar best_hit_avatar = 3; */
        if (message.bestHitAvatar)
            MistTrialBestAvatar.internalBinaryWrite(message.bestHitAvatar, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated MistTrialBestAvatar best_avatar_list = 9; */
        for (let i = 0; i < message.bestAvatarList.length; i++)
            MistTrialBestAvatar.internalBinaryWrite(message.bestAvatarList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MistTrialSettleNotify
 */
export const MistTrialSettleNotify = new MistTrialSettleNotify$Type();
