"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BlockInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BlockInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class BlockInfo extends pb_1.Message {
    constructor(data) {
        super();
        _BlockInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _BlockInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("block_id" in data && data.block_id != undefined) {
                this.block_id = data.block_id;
            }
            if ("data_version" in data && data.data_version != undefined) {
                this.data_version = data.data_version;
            }
            if ("bin_data" in data && data.bin_data != undefined) {
                this.bin_data = data.bin_data;
            }
            if ("is_dirty" in data && data.is_dirty != undefined) {
                this.is_dirty = data.is_dirty;
            }
        }
    }
    get block_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set block_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get data_version() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set data_version(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get bin_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array());
    }
    set bin_data(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_dirty() {
        return pb_1.Message.getFieldWithDefault(this, 4, false);
    }
    set is_dirty(value) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data) {
        const message = new BlockInfo({});
        if (data.block_id != null) {
            message.block_id = data.block_id;
        }
        if (data.data_version != null) {
            message.data_version = data.data_version;
        }
        if (data.bin_data != null) {
            message.bin_data = data.bin_data;
        }
        if (data.is_dirty != null) {
            message.is_dirty = data.is_dirty;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.block_id != null) {
            data.block_id = this.block_id;
        }
        if (this.data_version != null) {
            data.data_version = this.data_version;
        }
        if (this.bin_data != null) {
            data.bin_data = this.bin_data;
        }
        if (this.is_dirty != null) {
            data.is_dirty = this.is_dirty;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.block_id != 0)
            writer.writeUint32(1, this.block_id);
        if (this.data_version != 0)
            writer.writeUint32(2, this.data_version);
        if (this.bin_data.length)
            writer.writeBytes(3, this.bin_data);
        if (this.is_dirty != false)
            writer.writeBool(4, this.is_dirty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.block_id = reader.readUint32();
                    break;
                case 2:
                    message.data_version = reader.readUint32();
                    break;
                case 3:
                    message.bin_data = reader.readBytes();
                    break;
                case 4:
                    message.is_dirty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return BlockInfo.deserialize(bytes);
    }
}
exports.BlockInfo = BlockInfo;
_BlockInfo_one_of_decls = new WeakMap();
