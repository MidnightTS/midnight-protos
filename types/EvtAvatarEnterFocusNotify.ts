/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EvtAvatarEnterFocusNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ForwardType";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class EvtAvatarEnterFocusNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        entity_id?: number;
        can_move?: boolean;
        enter_holding_focus_shoot?: boolean;
        Unk2700_GACKGHEHEIK?: boolean;
        use_auto_focus?: boolean;
        fast_focus?: boolean;
        show_cross_hair?: boolean;
        enter_normal_focus_shoot?: boolean;
        forward_type?: dependency_1.ForwardType;
        focus_forward?: dependency_2.Vector;
        disable_anim?: boolean;
        use_focus_sticky?: boolean;
        use_gyro?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("can_move" in data && data.can_move != undefined) {
                this.can_move = data.can_move;
            }
            if ("enter_holding_focus_shoot" in data && data.enter_holding_focus_shoot != undefined) {
                this.enter_holding_focus_shoot = data.enter_holding_focus_shoot;
            }
            if ("Unk2700_GACKGHEHEIK" in data && data.Unk2700_GACKGHEHEIK != undefined) {
                this.Unk2700_GACKGHEHEIK = data.Unk2700_GACKGHEHEIK;
            }
            if ("use_auto_focus" in data && data.use_auto_focus != undefined) {
                this.use_auto_focus = data.use_auto_focus;
            }
            if ("fast_focus" in data && data.fast_focus != undefined) {
                this.fast_focus = data.fast_focus;
            }
            if ("show_cross_hair" in data && data.show_cross_hair != undefined) {
                this.show_cross_hair = data.show_cross_hair;
            }
            if ("enter_normal_focus_shoot" in data && data.enter_normal_focus_shoot != undefined) {
                this.enter_normal_focus_shoot = data.enter_normal_focus_shoot;
            }
            if ("forward_type" in data && data.forward_type != undefined) {
                this.forward_type = data.forward_type;
            }
            if ("focus_forward" in data && data.focus_forward != undefined) {
                this.focus_forward = data.focus_forward;
            }
            if ("disable_anim" in data && data.disable_anim != undefined) {
                this.disable_anim = data.disable_anim;
            }
            if ("use_focus_sticky" in data && data.use_focus_sticky != undefined) {
                this.use_focus_sticky = data.use_focus_sticky;
            }
            if ("use_gyro" in data && data.use_gyro != undefined) {
                this.use_gyro = data.use_gyro;
            }
        }
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set entity_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get can_move() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set can_move(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get enter_holding_focus_shoot() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set enter_holding_focus_shoot(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get Unk2700_GACKGHEHEIK() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set Unk2700_GACKGHEHEIK(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get use_auto_focus() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set use_auto_focus(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get fast_focus() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set fast_focus(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get show_cross_hair() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set show_cross_hair(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get enter_normal_focus_shoot() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set enter_normal_focus_shoot(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get forward_type() {
        return pb_1.Message.getFieldWithDefault(this, 8, dependency_1.ForwardType.FORWARD_TYPE_LOCAL) as dependency_1.ForwardType;
    }
    set forward_type(value: dependency_1.ForwardType) {
        pb_1.Message.setField(this, 8, value);
    }
    get focus_forward() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 7) as dependency_2.Vector;
    }
    set focus_forward(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_focus_forward() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get disable_anim() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set disable_anim(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get use_focus_sticky() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set use_focus_sticky(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    get use_gyro() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set use_gyro(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        entity_id?: number;
        can_move?: boolean;
        enter_holding_focus_shoot?: boolean;
        Unk2700_GACKGHEHEIK?: boolean;
        use_auto_focus?: boolean;
        fast_focus?: boolean;
        show_cross_hair?: boolean;
        enter_normal_focus_shoot?: boolean;
        forward_type?: dependency_1.ForwardType;
        focus_forward?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        disable_anim?: boolean;
        use_focus_sticky?: boolean;
        use_gyro?: boolean;
    }): EvtAvatarEnterFocusNotify {
        const message = new EvtAvatarEnterFocusNotify({});
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.can_move != null) {
            message.can_move = data.can_move;
        }
        if (data.enter_holding_focus_shoot != null) {
            message.enter_holding_focus_shoot = data.enter_holding_focus_shoot;
        }
        if (data.Unk2700_GACKGHEHEIK != null) {
            message.Unk2700_GACKGHEHEIK = data.Unk2700_GACKGHEHEIK;
        }
        if (data.use_auto_focus != null) {
            message.use_auto_focus = data.use_auto_focus;
        }
        if (data.fast_focus != null) {
            message.fast_focus = data.fast_focus;
        }
        if (data.show_cross_hair != null) {
            message.show_cross_hair = data.show_cross_hair;
        }
        if (data.enter_normal_focus_shoot != null) {
            message.enter_normal_focus_shoot = data.enter_normal_focus_shoot;
        }
        if (data.forward_type != null) {
            message.forward_type = data.forward_type;
        }
        if (data.focus_forward != null) {
            message.focus_forward = dependency_2.Vector.fromObject(data.focus_forward);
        }
        if (data.disable_anim != null) {
            message.disable_anim = data.disable_anim;
        }
        if (data.use_focus_sticky != null) {
            message.use_focus_sticky = data.use_focus_sticky;
        }
        if (data.use_gyro != null) {
            message.use_gyro = data.use_gyro;
        }
        return message;
    }
    toObject() {
        const data: {
            entity_id?: number;
            can_move?: boolean;
            enter_holding_focus_shoot?: boolean;
            Unk2700_GACKGHEHEIK?: boolean;
            use_auto_focus?: boolean;
            fast_focus?: boolean;
            show_cross_hair?: boolean;
            enter_normal_focus_shoot?: boolean;
            forward_type?: dependency_1.ForwardType;
            focus_forward?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            disable_anim?: boolean;
            use_focus_sticky?: boolean;
            use_gyro?: boolean;
        } = {};
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.can_move != null) {
            data.can_move = this.can_move;
        }
        if (this.enter_holding_focus_shoot != null) {
            data.enter_holding_focus_shoot = this.enter_holding_focus_shoot;
        }
        if (this.Unk2700_GACKGHEHEIK != null) {
            data.Unk2700_GACKGHEHEIK = this.Unk2700_GACKGHEHEIK;
        }
        if (this.use_auto_focus != null) {
            data.use_auto_focus = this.use_auto_focus;
        }
        if (this.fast_focus != null) {
            data.fast_focus = this.fast_focus;
        }
        if (this.show_cross_hair != null) {
            data.show_cross_hair = this.show_cross_hair;
        }
        if (this.enter_normal_focus_shoot != null) {
            data.enter_normal_focus_shoot = this.enter_normal_focus_shoot;
        }
        if (this.forward_type != null) {
            data.forward_type = this.forward_type;
        }
        if (this.focus_forward != null) {
            data.focus_forward = this.focus_forward.toObject();
        }
        if (this.disable_anim != null) {
            data.disable_anim = this.disable_anim;
        }
        if (this.use_focus_sticky != null) {
            data.use_focus_sticky = this.use_focus_sticky;
        }
        if (this.use_gyro != null) {
            data.use_gyro = this.use_gyro;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.entity_id != 0)
            writer.writeUint32(1, this.entity_id);
        if (this.can_move != false)
            writer.writeBool(10, this.can_move);
        if (this.enter_holding_focus_shoot != false)
            writer.writeBool(13, this.enter_holding_focus_shoot);
        if (this.Unk2700_GACKGHEHEIK != false)
            writer.writeBool(6, this.Unk2700_GACKGHEHEIK);
        if (this.use_auto_focus != false)
            writer.writeBool(5, this.use_auto_focus);
        if (this.fast_focus != false)
            writer.writeBool(3, this.fast_focus);
        if (this.show_cross_hair != false)
            writer.writeBool(12, this.show_cross_hair);
        if (this.enter_normal_focus_shoot != false)
            writer.writeBool(14, this.enter_normal_focus_shoot);
        if (this.forward_type != dependency_1.ForwardType.FORWARD_TYPE_LOCAL)
            writer.writeEnum(8, this.forward_type);
        if (this.has_focus_forward)
            writer.writeMessage(7, this.focus_forward, () => this.focus_forward.serialize(writer));
        if (this.disable_anim != false)
            writer.writeBool(9, this.disable_anim);
        if (this.use_focus_sticky != false)
            writer.writeBool(15, this.use_focus_sticky);
        if (this.use_gyro != false)
            writer.writeBool(11, this.use_gyro);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EvtAvatarEnterFocusNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvtAvatarEnterFocusNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.entity_id = reader.readUint32();
                    break;
                case 10:
                    message.can_move = reader.readBool();
                    break;
                case 13:
                    message.enter_holding_focus_shoot = reader.readBool();
                    break;
                case 6:
                    message.Unk2700_GACKGHEHEIK = reader.readBool();
                    break;
                case 5:
                    message.use_auto_focus = reader.readBool();
                    break;
                case 3:
                    message.fast_focus = reader.readBool();
                    break;
                case 12:
                    message.show_cross_hair = reader.readBool();
                    break;
                case 14:
                    message.enter_normal_focus_shoot = reader.readBool();
                    break;
                case 8:
                    message.forward_type = reader.readEnum();
                    break;
                case 7:
                    reader.readMessage(message.focus_forward, () => message.focus_forward = dependency_2.Vector.deserialize(reader));
                    break;
                case 9:
                    message.disable_anim = reader.readBool();
                    break;
                case 15:
                    message.use_focus_sticky = reader.readBool();
                    break;
                case 11:
                    message.use_gyro = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EvtAvatarEnterFocusNotify {
        return EvtAvatarEnterFocusNotify.deserialize(bytes);
    }
}
