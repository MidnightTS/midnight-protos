/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ShapeSphere.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class ShapeSphere extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        center?: dependency_1.Vector;
        radius?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("center" in data && data.center != undefined) {
                this.center = data.center;
            }
            if ("radius" in data && data.radius != undefined) {
                this.radius = data.radius;
            }
        }
    }
    get center() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 1) as dependency_1.Vector;
    }
    set center(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_center() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get radius() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set radius(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        radius?: number;
    }): ShapeSphere {
        const message = new ShapeSphere({});
        if (data.center != null) {
            message.center = dependency_1.Vector.fromObject(data.center);
        }
        if (data.radius != null) {
            message.radius = data.radius;
        }
        return message;
    }
    toObject() {
        const data: {
            center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            radius?: number;
        } = {};
        if (this.center != null) {
            data.center = this.center.toObject();
        }
        if (this.radius != null) {
            data.radius = this.radius;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_center)
            writer.writeMessage(1, this.center, () => this.center.serialize(writer));
        if (this.radius != 0)
            writer.writeFloat(2, this.radius);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShapeSphere {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShapeSphere();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.center, () => message.center = dependency_1.Vector.deserialize(reader));
                    break;
                case 2:
                    message.radius = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShapeSphere {
        return ShapeSphere.deserialize(bytes);
    }
}
