/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChessMonsterInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChessMonsterInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        monster_id?: number;
        level?: number;
        affix_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("affix_list" in data && data.affix_list != undefined) {
                this.affix_list = data.affix_list;
            }
        }
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set monster_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get affix_list() {
        return pb_1.Message.getFieldWithDefault(this, 13, []) as number[];
    }
    set affix_list(value: number[]) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        monster_id?: number;
        level?: number;
        affix_list?: number[];
    }): ChessMonsterInfo {
        const message = new ChessMonsterInfo({});
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.affix_list != null) {
            message.affix_list = data.affix_list;
        }
        return message;
    }
    toObject() {
        const data: {
            monster_id?: number;
            level?: number;
            affix_list?: number[];
        } = {};
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.affix_list != null) {
            data.affix_list = this.affix_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.monster_id != 0)
            writer.writeUint32(12, this.monster_id);
        if (this.level != 0)
            writer.writeUint32(2, this.level);
        if (this.affix_list.length)
            writer.writePackedUint32(13, this.affix_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChessMonsterInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChessMonsterInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.monster_id = reader.readUint32();
                    break;
                case 2:
                    message.level = reader.readUint32();
                    break;
                case 13:
                    message.affix_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChessMonsterInfo {
        return ChessMonsterInfo.deserialize(bytes);
    }
}
