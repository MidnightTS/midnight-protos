/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WorldPlayerDieNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./PlayerDieType";
import * as pb_1 from "google-protobuf";
export class WorldPlayerDieNotify extends pb_1.Message {
    #one_of_decls: number[][] = [[8, 4]];
    constructor(data?: any[] | ({
        die_type?: dependency_1.PlayerDieType;
        murderer_entity_id?: number;
    } & (({
        monster_id?: number;
        gadget_id?: never;
    } | {
        monster_id?: never;
        gadget_id?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("die_type" in data && data.die_type != undefined) {
                this.die_type = data.die_type;
            }
            if ("murderer_entity_id" in data && data.murderer_entity_id != undefined) {
                this.murderer_entity_id = data.murderer_entity_id;
            }
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("gadget_id" in data && data.gadget_id != undefined) {
                this.gadget_id = data.gadget_id;
            }
        }
    }
    get die_type() {
        return pb_1.Message.getFieldWithDefault(this, 12, dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE) as dependency_1.PlayerDieType;
    }
    set die_type(value: dependency_1.PlayerDieType) {
        pb_1.Message.setField(this, 12, value);
    }
    get murderer_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set murderer_entity_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set monster_id(value: number) {
        pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
    }
    get has_monster_id() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set gadget_id(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_gadget_id() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get entity() {
        const cases: {
            [index: number]: "none" | "monster_id" | "gadget_id";
        } = {
            0: "none",
            8: "monster_id",
            4: "gadget_id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8, 4])];
    }
    static fromObject(data: {
        die_type?: dependency_1.PlayerDieType;
        murderer_entity_id?: number;
        monster_id?: number;
        gadget_id?: number;
    }): WorldPlayerDieNotify {
        const message = new WorldPlayerDieNotify({});
        if (data.die_type != null) {
            message.die_type = data.die_type;
        }
        if (data.murderer_entity_id != null) {
            message.murderer_entity_id = data.murderer_entity_id;
        }
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.gadget_id != null) {
            message.gadget_id = data.gadget_id;
        }
        return message;
    }
    toObject() {
        const data: {
            die_type?: dependency_1.PlayerDieType;
            murderer_entity_id?: number;
            monster_id?: number;
            gadget_id?: number;
        } = {};
        if (this.die_type != null) {
            data.die_type = this.die_type;
        }
        if (this.murderer_entity_id != null) {
            data.murderer_entity_id = this.murderer_entity_id;
        }
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.gadget_id != null) {
            data.gadget_id = this.gadget_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.die_type != dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE)
            writer.writeEnum(12, this.die_type);
        if (this.murderer_entity_id != 0)
            writer.writeUint32(15, this.murderer_entity_id);
        if (this.has_monster_id)
            writer.writeUint32(8, this.monster_id);
        if (this.has_gadget_id)
            writer.writeUint32(4, this.gadget_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WorldPlayerDieNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WorldPlayerDieNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.die_type = reader.readEnum();
                    break;
                case 15:
                    message.murderer_entity_id = reader.readUint32();
                    break;
                case 8:
                    message.monster_id = reader.readUint32();
                    break;
                case 4:
                    message.gadget_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WorldPlayerDieNotify {
        return WorldPlayerDieNotify.deserialize(bytes);
    }
}
