/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CodexDataUpdateNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CodexType";
import * as pb_1 from "google-protobuf";
export class CodexDataUpdateNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        weapon_max_promote_level?: number;
        type?: dependency_1.CodexType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("weapon_max_promote_level" in data && data.weapon_max_promote_level != undefined) {
                this.weapon_max_promote_level = data.weapon_max_promote_level;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get weapon_max_promote_level() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set weapon_max_promote_level(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.CodexType.CODEX_TYPE_NONE) as dependency_1.CodexType;
    }
    set type(value: dependency_1.CodexType) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        id?: number;
        weapon_max_promote_level?: number;
        type?: dependency_1.CodexType;
    }): CodexDataUpdateNotify {
        const message = new CodexDataUpdateNotify({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.weapon_max_promote_level != null) {
            message.weapon_max_promote_level = data.weapon_max_promote_level;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            weapon_max_promote_level?: number;
            type?: dependency_1.CodexType;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.weapon_max_promote_level != null) {
            data.weapon_max_promote_level = this.weapon_max_promote_level;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeUint32(8, this.id);
        if (this.weapon_max_promote_level != 0)
            writer.writeUint32(15, this.weapon_max_promote_level);
        if (this.type != dependency_1.CodexType.CODEX_TYPE_NONE)
            writer.writeEnum(11, this.type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodexDataUpdateNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodexDataUpdateNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.id = reader.readUint32();
                    break;
                case 15:
                    message.weapon_max_promote_level = reader.readUint32();
                    break;
                case 11:
                    message.type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CodexDataUpdateNotify {
        return CodexDataUpdateNotify.deserialize(bytes);
    }
}
