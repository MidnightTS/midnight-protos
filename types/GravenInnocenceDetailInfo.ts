// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "GravenInnocenceDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GravenInnocencePhotoInfo } from "./GravenInnocencePhotoInfo";
import { GravenInnocenceCarveInfo } from "./GravenInnocenceCarveInfo";
import { GravenInnocenceCampInfo } from "./GravenInnocenceCampInfo";
import { GravenInnocenceRaceInfo } from "./GravenInnocenceRaceInfo";
/**
 * @generated from protobuf message GravenInnocenceDetailInfo
 */
export interface GravenInnocenceDetailInfo {
    /**
     * @generated from protobuf field: bool is_content_closed = 8;
     */
    isContentClosed: boolean;
    /**
     * @generated from protobuf field: GravenInnocenceRaceInfo race_info = 2;
     */
    raceInfo?: GravenInnocenceRaceInfo;
    /**
     * @generated from protobuf field: GravenInnocenceCampInfo camp_info = 3;
     */
    campInfo?: GravenInnocenceCampInfo;
    /**
     * @generated from protobuf field: GravenInnocenceCarveInfo carve_info = 13;
     */
    carveInfo?: GravenInnocenceCarveInfo;
    /**
     * @generated from protobuf field: GravenInnocencePhotoInfo photo_info = 10;
     */
    photoInfo?: GravenInnocencePhotoInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceDetailInfo$Type extends MessageType<GravenInnocenceDetailInfo> {
    constructor() {
        super("GravenInnocenceDetailInfo", [
            { no: 8, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "race_info", kind: "message", T: () => GravenInnocenceRaceInfo },
            { no: 3, name: "camp_info", kind: "message", T: () => GravenInnocenceCampInfo },
            { no: 13, name: "carve_info", kind: "message", T: () => GravenInnocenceCarveInfo },
            { no: 10, name: "photo_info", kind: "message", T: () => GravenInnocencePhotoInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceDetailInfo>): GravenInnocenceDetailInfo {
        const message = { isContentClosed: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceDetailInfo): GravenInnocenceDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* GravenInnocenceRaceInfo race_info */ 2:
                    message.raceInfo = GravenInnocenceRaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.raceInfo);
                    break;
                case /* GravenInnocenceCampInfo camp_info */ 3:
                    message.campInfo = GravenInnocenceCampInfo.internalBinaryRead(reader, reader.uint32(), options, message.campInfo);
                    break;
                case /* GravenInnocenceCarveInfo carve_info */ 13:
                    message.carveInfo = GravenInnocenceCarveInfo.internalBinaryRead(reader, reader.uint32(), options, message.carveInfo);
                    break;
                case /* GravenInnocencePhotoInfo photo_info */ 10:
                    message.photoInfo = GravenInnocencePhotoInfo.internalBinaryRead(reader, reader.uint32(), options, message.photoInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_content_closed = 8; */
        if (message.isContentClosed !== false)
            writer.tag(8, WireType.Varint).bool(message.isContentClosed);
        /* GravenInnocenceRaceInfo race_info = 2; */
        if (message.raceInfo)
            GravenInnocenceRaceInfo.internalBinaryWrite(message.raceInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GravenInnocenceCampInfo camp_info = 3; */
        if (message.campInfo)
            GravenInnocenceCampInfo.internalBinaryWrite(message.campInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GravenInnocenceCarveInfo carve_info = 13; */
        if (message.carveInfo)
            GravenInnocenceCarveInfo.internalBinaryWrite(message.carveInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GravenInnocencePhotoInfo photo_info = 10; */
        if (message.photoInfo)
            GravenInnocencePhotoInfo.internalBinaryWrite(message.photoInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GravenInnocenceDetailInfo
 */
export const GravenInnocenceDetailInfo = new GravenInnocenceDetailInfo$Type();
