"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Quest_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Quest = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Quest.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class Quest extends pb_1.Message {
    constructor(data) {
        super();
        _Quest_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 11, 12, 14], __classPrivateFieldGet(this, _Quest_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("quest_id" in data && data.quest_id != undefined) {
                this.quest_id = data.quest_id;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("start_time" in data && data.start_time != undefined) {
                this.start_time = data.start_time;
            }
            if ("is_random" in data && data.is_random != undefined) {
                this.is_random = data.is_random;
            }
            if ("parent_quest_id" in data && data.parent_quest_id != undefined) {
                this.parent_quest_id = data.parent_quest_id;
            }
            if ("quest_config_id" in data && data.quest_config_id != undefined) {
                this.quest_config_id = data.quest_config_id;
            }
            if ("start_game_time" in data && data.start_game_time != undefined) {
                this.start_game_time = data.start_game_time;
            }
            if ("accept_time" in data && data.accept_time != undefined) {
                this.accept_time = data.accept_time;
            }
            if ("lacked_npc_list" in data && data.lacked_npc_list != undefined) {
                this.lacked_npc_list = data.lacked_npc_list;
            }
            if ("finish_progress_list" in data && data.finish_progress_list != undefined) {
                this.finish_progress_list = data.finish_progress_list;
            }
            if ("fail_progress_list" in data && data.fail_progress_list != undefined) {
                this.fail_progress_list = data.fail_progress_list;
            }
            if ("lacked_npc_map" in data && data.lacked_npc_map != undefined) {
                this.lacked_npc_map = data.lacked_npc_map;
            }
            if ("lacked_place_list" in data && data.lacked_place_list != undefined) {
                this.lacked_place_list = data.lacked_place_list;
            }
            if ("lacked_place_map" in data && data.lacked_place_map != undefined) {
                this.lacked_place_map = data.lacked_place_map;
            }
        }
        if (!this.lacked_npc_map)
            this.lacked_npc_map = new Map();
        if (!this.lacked_place_map)
            this.lacked_place_map = new Map();
    }
    get quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set quest_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set state(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get start_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set start_time(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_random() {
        return pb_1.Message.getFieldWithDefault(this, 5, false);
    }
    set is_random(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get parent_quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set parent_quest_id(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get quest_config_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set quest_config_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get start_game_time() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set start_game_time(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get accept_time() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set accept_time(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get lacked_npc_list() {
        return pb_1.Message.getFieldWithDefault(this, 10, []);
    }
    set lacked_npc_list(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get finish_progress_list() {
        return pb_1.Message.getFieldWithDefault(this, 11, []);
    }
    set finish_progress_list(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get fail_progress_list() {
        return pb_1.Message.getFieldWithDefault(this, 12, []);
    }
    set fail_progress_list(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get lacked_npc_map() {
        return pb_1.Message.getField(this, 13);
    }
    set lacked_npc_map(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get lacked_place_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []);
    }
    set lacked_place_list(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get lacked_place_map() {
        return pb_1.Message.getField(this, 15);
    }
    set lacked_place_map(value) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data) {
        const message = new Quest({});
        if (data.quest_id != null) {
            message.quest_id = data.quest_id;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.start_time != null) {
            message.start_time = data.start_time;
        }
        if (data.is_random != null) {
            message.is_random = data.is_random;
        }
        if (data.parent_quest_id != null) {
            message.parent_quest_id = data.parent_quest_id;
        }
        if (data.quest_config_id != null) {
            message.quest_config_id = data.quest_config_id;
        }
        if (data.start_game_time != null) {
            message.start_game_time = data.start_game_time;
        }
        if (data.accept_time != null) {
            message.accept_time = data.accept_time;
        }
        if (data.lacked_npc_list != null) {
            message.lacked_npc_list = data.lacked_npc_list;
        }
        if (data.finish_progress_list != null) {
            message.finish_progress_list = data.finish_progress_list;
        }
        if (data.fail_progress_list != null) {
            message.fail_progress_list = data.fail_progress_list;
        }
        if (typeof data.lacked_npc_map == "object") {
            message.lacked_npc_map = new Map(Object.entries(data.lacked_npc_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.lacked_place_list != null) {
            message.lacked_place_list = data.lacked_place_list;
        }
        if (typeof data.lacked_place_map == "object") {
            message.lacked_place_map = new Map(Object.entries(data.lacked_place_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.quest_id != null) {
            data.quest_id = this.quest_id;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.start_time != null) {
            data.start_time = this.start_time;
        }
        if (this.is_random != null) {
            data.is_random = this.is_random;
        }
        if (this.parent_quest_id != null) {
            data.parent_quest_id = this.parent_quest_id;
        }
        if (this.quest_config_id != null) {
            data.quest_config_id = this.quest_config_id;
        }
        if (this.start_game_time != null) {
            data.start_game_time = this.start_game_time;
        }
        if (this.accept_time != null) {
            data.accept_time = this.accept_time;
        }
        if (this.lacked_npc_list != null) {
            data.lacked_npc_list = this.lacked_npc_list;
        }
        if (this.finish_progress_list != null) {
            data.finish_progress_list = this.finish_progress_list;
        }
        if (this.fail_progress_list != null) {
            data.fail_progress_list = this.fail_progress_list;
        }
        if (this.lacked_npc_map.size > 0) {
            data.lacked_npc_map = (Object.fromEntries)(this.lacked_npc_map);
        }
        if (this.lacked_place_list != null) {
            data.lacked_place_list = this.lacked_place_list;
        }
        if (this.lacked_place_map.size > 0) {
            data.lacked_place_map = (Object.fromEntries)(this.lacked_place_map);
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.quest_id != 0)
            writer.writeUint32(1, this.quest_id);
        if (this.state != 0)
            writer.writeUint32(2, this.state);
        if (this.start_time != 0)
            writer.writeUint32(4, this.start_time);
        if (this.is_random != false)
            writer.writeBool(5, this.is_random);
        if (this.parent_quest_id != 0)
            writer.writeUint32(6, this.parent_quest_id);
        if (this.quest_config_id != 0)
            writer.writeUint32(7, this.quest_config_id);
        if (this.start_game_time != 0)
            writer.writeUint32(8, this.start_game_time);
        if (this.accept_time != 0)
            writer.writeUint32(9, this.accept_time);
        if (this.lacked_npc_list.length)
            writer.writePackedUint32(10, this.lacked_npc_list);
        if (this.finish_progress_list.length)
            writer.writePackedUint32(11, this.finish_progress_list);
        if (this.fail_progress_list.length)
            writer.writePackedUint32(12, this.fail_progress_list);
        for (const [key, value] of this.lacked_npc_map) {
            writer.writeMessage(13, this.lacked_npc_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.lacked_place_list.length)
            writer.writePackedUint32(14, this.lacked_place_list);
        for (const [key, value] of this.lacked_place_map) {
            writer.writeMessage(15, this.lacked_place_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.quest_id = reader.readUint32();
                    break;
                case 2:
                    message.state = reader.readUint32();
                    break;
                case 4:
                    message.start_time = reader.readUint32();
                    break;
                case 5:
                    message.is_random = reader.readBool();
                    break;
                case 6:
                    message.parent_quest_id = reader.readUint32();
                    break;
                case 7:
                    message.quest_config_id = reader.readUint32();
                    break;
                case 8:
                    message.start_game_time = reader.readUint32();
                    break;
                case 9:
                    message.accept_time = reader.readUint32();
                    break;
                case 10:
                    message.lacked_npc_list = reader.readPackedUint32();
                    break;
                case 11:
                    message.finish_progress_list = reader.readPackedUint32();
                    break;
                case 12:
                    message.fail_progress_list = reader.readPackedUint32();
                    break;
                case 13:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.lacked_npc_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 14:
                    message.lacked_place_list = reader.readPackedUint32();
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.lacked_place_map, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Quest.deserialize(bytes);
    }
}
exports.Quest = Quest;
_Quest_one_of_decls = new WeakMap();
