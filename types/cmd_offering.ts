// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_offering.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.PlayerOfferingData
 */
export interface PlayerOfferingData {
    /**
     * @generated from protobuf field: optional uint32 offering_id = 1;
     */
    offeringId?: number;
    /**
     * @generated from protobuf field: optional bool is_first_interact = 15;
     */
    isFirstInteract?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level = 12;
     */
    level?: number;
    /**
     * @generated from protobuf field: repeated uint32 taken_level_reward_list = 8;
     */
    takenLevelRewardList: number[];
    /**
     * @generated from protobuf field: optional bool is_new_max_level = 6;
     */
    isNewMaxLevel?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerOfferingDataNotify
 */
export interface PlayerOfferingDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerOfferingData offering_data_list = 2;
     */
    offeringDataList: PlayerOfferingData[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerOfferingDataNotify.CmdId
 */
export enum PlayerOfferingDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2923;
     */
    CMD_ID = 2923,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerOfferingReq
 */
export interface PlayerOfferingReq {
    /**
     * @generated from protobuf field: optional uint32 offering_id = 6;
     */
    offeringId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerOfferingReq.CmdId
 */
export enum PlayerOfferingReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2907;
     */
    CMD_ID = 2907,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerOfferingRsp
 */
export interface PlayerOfferingRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 7;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerOfferingData offering_data = 10;
     */
    offeringData?: PlayerOfferingData;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerOfferingRsp.CmdId
 */
export enum PlayerOfferingRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2917;
     */
    CMD_ID = 2917,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeOfferingLevelRewardReq
 */
export interface TakeOfferingLevelRewardReq {
    /**
     * @generated from protobuf field: optional uint32 level = 6;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 offering_id = 11;
     */
    offeringId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeOfferingLevelRewardReq.CmdId
 */
export enum TakeOfferingLevelRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2919;
     */
    CMD_ID = 2919,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeOfferingLevelRewardRsp
 */
export interface TakeOfferingLevelRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 offering_id = 3;
     */
    offeringId?: number;
    /**
     * @generated from protobuf field: optional uint32 take_level = 4;
     */
    takeLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 2;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeOfferingLevelRewardRsp.CmdId
 */
export enum TakeOfferingLevelRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2911;
     */
    CMD_ID = 2911,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OfferingInteractReq
 */
export interface OfferingInteractReq {
    /**
     * @generated from protobuf field: optional uint32 offering_id = 9;
     */
    offeringId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.OfferingInteractReq.CmdId
 */
export enum OfferingInteractReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2918;
     */
    CMD_ID = 2918,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.OfferingInteractRsp
 */
export interface OfferingInteractRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerOfferingData offering_data = 11;
     */
    offeringData?: PlayerOfferingData;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.OfferingInteractRsp.CmdId
 */
export enum OfferingInteractRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2908;
     */
    CMD_ID = 2908,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerOfferingData$Type extends MessageType<PlayerOfferingData> {
    constructor() {
        super("com.midnights.game.PlayerOfferingData", [
            { no: 1, name: "offering_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_first_interact", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "taken_level_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_new_max_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerOfferingData>): PlayerOfferingData {
        const message = { takenLevelRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerOfferingData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerOfferingData): PlayerOfferingData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 offering_id */ 1:
                    message.offeringId = reader.uint32();
                    break;
                case /* optional bool is_first_interact */ 15:
                    message.isFirstInteract = reader.bool();
                    break;
                case /* optional uint32 level */ 12:
                    message.level = reader.uint32();
                    break;
                case /* repeated uint32 taken_level_reward_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenLevelRewardList.push(reader.uint32());
                    else
                        message.takenLevelRewardList.push(reader.uint32());
                    break;
                case /* optional bool is_new_max_level */ 6:
                    message.isNewMaxLevel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerOfferingData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 offering_id = 1; */
        if (message.offeringId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.offeringId);
        /* optional bool is_first_interact = 15; */
        if (message.isFirstInteract !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isFirstInteract);
        /* optional uint32 level = 12; */
        if (message.level !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.level);
        /* repeated uint32 taken_level_reward_list = 8; */
        if (message.takenLevelRewardList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenLevelRewardList.length; i++)
                writer.uint32(message.takenLevelRewardList[i]);
            writer.join();
        }
        /* optional bool is_new_max_level = 6; */
        if (message.isNewMaxLevel !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isNewMaxLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerOfferingData
 */
export const PlayerOfferingData = new PlayerOfferingData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerOfferingDataNotify$Type extends MessageType<PlayerOfferingDataNotify> {
    constructor() {
        super("com.midnights.game.PlayerOfferingDataNotify", [
            { no: 2, name: "offering_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerOfferingData }
        ]);
    }
    create(value?: PartialMessage<PlayerOfferingDataNotify>): PlayerOfferingDataNotify {
        const message = { offeringDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerOfferingDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerOfferingDataNotify): PlayerOfferingDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerOfferingData offering_data_list */ 2:
                    message.offeringDataList.push(PlayerOfferingData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerOfferingDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerOfferingData offering_data_list = 2; */
        for (let i = 0; i < message.offeringDataList.length; i++)
            PlayerOfferingData.internalBinaryWrite(message.offeringDataList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerOfferingDataNotify
 */
export const PlayerOfferingDataNotify = new PlayerOfferingDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerOfferingReq$Type extends MessageType<PlayerOfferingReq> {
    constructor() {
        super("com.midnights.game.PlayerOfferingReq", [
            { no: 6, name: "offering_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerOfferingReq>): PlayerOfferingReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerOfferingReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerOfferingReq): PlayerOfferingReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 offering_id */ 6:
                    message.offeringId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerOfferingReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 offering_id = 6; */
        if (message.offeringId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.offeringId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerOfferingReq
 */
export const PlayerOfferingReq = new PlayerOfferingReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerOfferingRsp$Type extends MessageType<PlayerOfferingRsp> {
    constructor() {
        super("com.midnights.game.PlayerOfferingRsp", [
            { no: 7, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "offering_data", kind: "message", T: () => PlayerOfferingData }
        ]);
    }
    create(value?: PartialMessage<PlayerOfferingRsp>): PlayerOfferingRsp {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerOfferingRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerOfferingRsp): PlayerOfferingRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 7:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.PlayerOfferingData offering_data */ 10:
                    message.offeringData = PlayerOfferingData.internalBinaryRead(reader, reader.uint32(), options, message.offeringData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerOfferingRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 7; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.PlayerOfferingData offering_data = 10; */
        if (message.offeringData)
            PlayerOfferingData.internalBinaryWrite(message.offeringData, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerOfferingRsp
 */
export const PlayerOfferingRsp = new PlayerOfferingRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeOfferingLevelRewardReq$Type extends MessageType<TakeOfferingLevelRewardReq> {
    constructor() {
        super("com.midnights.game.TakeOfferingLevelRewardReq", [
            { no: 6, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "offering_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeOfferingLevelRewardReq>): TakeOfferingLevelRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeOfferingLevelRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeOfferingLevelRewardReq): TakeOfferingLevelRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 6:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 offering_id */ 11:
                    message.offeringId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeOfferingLevelRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 6; */
        if (message.level !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.level);
        /* optional uint32 offering_id = 11; */
        if (message.offeringId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.offeringId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeOfferingLevelRewardReq
 */
export const TakeOfferingLevelRewardReq = new TakeOfferingLevelRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeOfferingLevelRewardRsp$Type extends MessageType<TakeOfferingLevelRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeOfferingLevelRewardRsp", [
            { no: 3, name: "offering_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "take_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<TakeOfferingLevelRewardRsp>): TakeOfferingLevelRewardRsp {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeOfferingLevelRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeOfferingLevelRewardRsp): TakeOfferingLevelRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 offering_id */ 3:
                    message.offeringId = reader.uint32();
                    break;
                case /* optional uint32 take_level */ 4:
                    message.takeLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 2:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeOfferingLevelRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 offering_id = 3; */
        if (message.offeringId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.offeringId);
        /* optional uint32 take_level = 4; */
        if (message.takeLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.takeLevel);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam item_list = 2; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeOfferingLevelRewardRsp
 */
export const TakeOfferingLevelRewardRsp = new TakeOfferingLevelRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfferingInteractReq$Type extends MessageType<OfferingInteractReq> {
    constructor() {
        super("com.midnights.game.OfferingInteractReq", [
            { no: 9, name: "offering_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OfferingInteractReq>): OfferingInteractReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfferingInteractReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfferingInteractReq): OfferingInteractReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 offering_id */ 9:
                    message.offeringId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfferingInteractReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 offering_id = 9; */
        if (message.offeringId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.offeringId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OfferingInteractReq
 */
export const OfferingInteractReq = new OfferingInteractReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfferingInteractRsp$Type extends MessageType<OfferingInteractRsp> {
    constructor() {
        super("com.midnights.game.OfferingInteractRsp", [
            { no: 11, name: "offering_data", kind: "message", T: () => PlayerOfferingData },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<OfferingInteractRsp>): OfferingInteractRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfferingInteractRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfferingInteractRsp): OfferingInteractRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerOfferingData offering_data */ 11:
                    message.offeringData = PlayerOfferingData.internalBinaryRead(reader, reader.uint32(), options, message.offeringData);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfferingInteractRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerOfferingData offering_data = 11; */
        if (message.offeringData)
            PlayerOfferingData.internalBinaryWrite(message.offeringData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OfferingInteractRsp
 */
export const OfferingInteractRsp = new OfferingInteractRsp$Type();
