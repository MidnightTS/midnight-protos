/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneCreateEntityReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CreateEntityInfo";
import * as dependency_2 from "./CreateReason";
import * as pb_1 from "google-protobuf";
export class SceneCreateEntityReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        entity?: dependency_1.CreateEntityInfo;
        is_destroy_when_disconnect?: boolean;
        reason?: dependency_2.CreateReason;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
            if ("is_destroy_when_disconnect" in data && data.is_destroy_when_disconnect != undefined) {
                this.is_destroy_when_disconnect = data.is_destroy_when_disconnect;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get entity() {
        return pb_1.Message.getWrapperField(this, dependency_1.CreateEntityInfo, 1) as dependency_1.CreateEntityInfo;
    }
    set entity(value: dependency_1.CreateEntityInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_entity() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get is_destroy_when_disconnect() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_destroy_when_disconnect(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_2.CreateReason.CREATE_REASON_NONE) as dependency_2.CreateReason;
    }
    set reason(value: dependency_2.CreateReason) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        entity?: ReturnType<typeof dependency_1.CreateEntityInfo.prototype.toObject>;
        is_destroy_when_disconnect?: boolean;
        reason?: dependency_2.CreateReason;
    }): SceneCreateEntityReq {
        const message = new SceneCreateEntityReq({});
        if (data.entity != null) {
            message.entity = dependency_1.CreateEntityInfo.fromObject(data.entity);
        }
        if (data.is_destroy_when_disconnect != null) {
            message.is_destroy_when_disconnect = data.is_destroy_when_disconnect;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            entity?: ReturnType<typeof dependency_1.CreateEntityInfo.prototype.toObject>;
            is_destroy_when_disconnect?: boolean;
            reason?: dependency_2.CreateReason;
        } = {};
        if (this.entity != null) {
            data.entity = this.entity.toObject();
        }
        if (this.is_destroy_when_disconnect != null) {
            data.is_destroy_when_disconnect = this.is_destroy_when_disconnect;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_entity)
            writer.writeMessage(1, this.entity, () => this.entity.serialize(writer));
        if (this.is_destroy_when_disconnect != false)
            writer.writeBool(10, this.is_destroy_when_disconnect);
        if (this.reason != dependency_2.CreateReason.CREATE_REASON_NONE)
            writer.writeEnum(3, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneCreateEntityReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneCreateEntityReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.entity, () => message.entity = dependency_1.CreateEntityInfo.deserialize(reader));
                    break;
                case 10:
                    message.is_destroy_when_disconnect = reader.readBool();
                    break;
                case 3:
                    message.reason = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneCreateEntityReq {
        return SceneCreateEntityReq.deserialize(bytes);
    }
}
