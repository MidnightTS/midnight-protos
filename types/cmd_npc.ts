// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_npc.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NpcPositionInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.NpcTalkReq
 */
export interface NpcTalkReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 npc_entity_id = 9;
     */
    npcEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 talk_id = 7;
     */
    talkId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.NpcTalkReq.CmdId
 */
export enum NpcTalkReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 572;
     */
    CMD_ID = 572,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.NpcTalkRsp
 */
export interface NpcTalkRsp {
    /**
     * @generated from protobuf field: optional uint32 cur_talk_id = 9;
     */
    curTalkId?: number;
    /**
     * @generated from protobuf field: optional uint32 npc_entity_id = 6;
     */
    npcEntityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 13;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.NpcTalkRsp.CmdId
 */
export enum NpcTalkRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 598;
     */
    CMD_ID = 598,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetSceneNpcPositionReq
 */
export interface GetSceneNpcPositionReq {
    /**
     * @generated from protobuf field: repeated uint32 npc_id_list = 6;
     */
    npcIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 8;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetSceneNpcPositionReq.CmdId
 */
export enum GetSceneNpcPositionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 535;
     */
    CMD_ID = 535,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetSceneNpcPositionRsp
 */
export interface GetSceneNpcPositionRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.NpcPositionInfo npc_info_list = 14;
     */
    npcInfoList: NpcPositionInfo[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 4;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetSceneNpcPositionRsp.CmdId
 */
export enum GetSceneNpcPositionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 507;
     */
    CMD_ID = 507,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MetNpcIdListNotify
 */
export interface MetNpcIdListNotify {
    /**
     * @generated from protobuf field: repeated uint32 npc_first_met_id_list = 9;
     */
    npcFirstMetIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.MetNpcIdListNotify.CmdId
 */
export enum MetNpcIdListNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 521;
     */
    CMD_ID = 521,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MeetNpcReq
 */
export interface MeetNpcReq {
    /**
     * @generated from protobuf field: optional uint32 npc_id = 4;
     */
    npcId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MeetNpcReq.CmdId
 */
export enum MeetNpcReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 503;
     */
    CMD_ID = 503,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MeetNpcRsp
 */
export interface MeetNpcRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 npc_first_met_id = 8;
     */
    npcFirstMetId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MeetNpcRsp.CmdId
 */
export enum MeetNpcRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 590;
     */
    CMD_ID = 590,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FinishedTalkIdListNotify
 */
export interface FinishedTalkIdListNotify {
    /**
     * @generated from protobuf field: repeated uint32 finished_talk_id_list = 1;
     */
    finishedTalkIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.FinishedTalkIdListNotify.CmdId
 */
export enum FinishedTalkIdListNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 573;
     */
    CMD_ID = 573,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class NpcTalkReq$Type extends MessageType<NpcTalkReq> {
    constructor() {
        super("com.midnights.game.NpcTalkReq", [
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "npc_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "talk_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NpcTalkReq>): NpcTalkReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NpcTalkReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NpcTalkReq): NpcTalkReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 npc_entity_id */ 9:
                    message.npcEntityId = reader.uint32();
                    break;
                case /* optional uint32 talk_id */ 7:
                    message.talkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NpcTalkReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        /* optional uint32 npc_entity_id = 9; */
        if (message.npcEntityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.npcEntityId);
        /* optional uint32 talk_id = 7; */
        if (message.talkId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.talkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NpcTalkReq
 */
export const NpcTalkReq = new NpcTalkReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NpcTalkRsp$Type extends MessageType<NpcTalkRsp> {
    constructor() {
        super("com.midnights.game.NpcTalkRsp", [
            { no: 9, name: "cur_talk_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "npc_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NpcTalkRsp>): NpcTalkRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NpcTalkRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NpcTalkRsp): NpcTalkRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_talk_id */ 9:
                    message.curTalkId = reader.uint32();
                    break;
                case /* optional uint32 npc_entity_id */ 6:
                    message.npcEntityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NpcTalkRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_talk_id = 9; */
        if (message.curTalkId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curTalkId);
        /* optional uint32 npc_entity_id = 6; */
        if (message.npcEntityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.npcEntityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NpcTalkRsp
 */
export const NpcTalkRsp = new NpcTalkRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSceneNpcPositionReq$Type extends MessageType<GetSceneNpcPositionReq> {
    constructor() {
        super("com.midnights.game.GetSceneNpcPositionReq", [
            { no: 6, name: "npc_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSceneNpcPositionReq>): GetSceneNpcPositionReq {
        const message = { npcIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSceneNpcPositionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSceneNpcPositionReq): GetSceneNpcPositionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 npc_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.npcIdList.push(reader.uint32());
                    else
                        message.npcIdList.push(reader.uint32());
                    break;
                case /* optional uint32 scene_id */ 8:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSceneNpcPositionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 npc_id_list = 6; */
        for (let i = 0; i < message.npcIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.npcIdList[i]);
        /* optional uint32 scene_id = 8; */
        if (message.sceneId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetSceneNpcPositionReq
 */
export const GetSceneNpcPositionReq = new GetSceneNpcPositionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSceneNpcPositionRsp$Type extends MessageType<GetSceneNpcPositionRsp> {
    constructor() {
        super("com.midnights.game.GetSceneNpcPositionRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "npc_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => NpcPositionInfo },
            { no: 4, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSceneNpcPositionRsp>): GetSceneNpcPositionRsp {
        const message = { npcInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSceneNpcPositionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSceneNpcPositionRsp): GetSceneNpcPositionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.NpcPositionInfo npc_info_list */ 14:
                    message.npcInfoList.push(NpcPositionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 scene_id */ 4:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSceneNpcPositionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.NpcPositionInfo npc_info_list = 14; */
        for (let i = 0; i < message.npcInfoList.length; i++)
            NpcPositionInfo.internalBinaryWrite(message.npcInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 4; */
        if (message.sceneId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetSceneNpcPositionRsp
 */
export const GetSceneNpcPositionRsp = new GetSceneNpcPositionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetNpcIdListNotify$Type extends MessageType<MetNpcIdListNotify> {
    constructor() {
        super("com.midnights.game.MetNpcIdListNotify", [
            { no: 9, name: "npc_first_met_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MetNpcIdListNotify>): MetNpcIdListNotify {
        const message = { npcFirstMetIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetNpcIdListNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetNpcIdListNotify): MetNpcIdListNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 npc_first_met_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.npcFirstMetIdList.push(reader.uint32());
                    else
                        message.npcFirstMetIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetNpcIdListNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 npc_first_met_id_list = 9; */
        for (let i = 0; i < message.npcFirstMetIdList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.npcFirstMetIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MetNpcIdListNotify
 */
export const MetNpcIdListNotify = new MetNpcIdListNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeetNpcReq$Type extends MessageType<MeetNpcReq> {
    constructor() {
        super("com.midnights.game.MeetNpcReq", [
            { no: 4, name: "npc_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MeetNpcReq>): MeetNpcReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MeetNpcReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeetNpcReq): MeetNpcReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 npc_id */ 4:
                    message.npcId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeetNpcReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 npc_id = 4; */
        if (message.npcId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.npcId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MeetNpcReq
 */
export const MeetNpcReq = new MeetNpcReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeetNpcRsp$Type extends MessageType<MeetNpcRsp> {
    constructor() {
        super("com.midnights.game.MeetNpcRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "npc_first_met_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MeetNpcRsp>): MeetNpcRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MeetNpcRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MeetNpcRsp): MeetNpcRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 npc_first_met_id */ 8:
                    message.npcFirstMetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MeetNpcRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 npc_first_met_id = 8; */
        if (message.npcFirstMetId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.npcFirstMetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MeetNpcRsp
 */
export const MeetNpcRsp = new MeetNpcRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishedTalkIdListNotify$Type extends MessageType<FinishedTalkIdListNotify> {
    constructor() {
        super("com.midnights.game.FinishedTalkIdListNotify", [
            { no: 1, name: "finished_talk_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishedTalkIdListNotify>): FinishedTalkIdListNotify {
        const message = { finishedTalkIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishedTalkIdListNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishedTalkIdListNotify): FinishedTalkIdListNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 finished_talk_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedTalkIdList.push(reader.uint32());
                    else
                        message.finishedTalkIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishedTalkIdListNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 finished_talk_id_list = 1; */
        for (let i = 0; i < message.finishedTalkIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.finishedTalkIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishedTalkIdListNotify
 */
export const FinishedTalkIdListNotify = new FinishedTalkIdListNotify$Type();
