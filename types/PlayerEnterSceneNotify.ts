/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerEnterSceneNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./EnterType";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class PlayerEnterSceneNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        prev_scene_id?: number;
        dungeon_id?: number;
        is_skip_ui?: boolean;
        scene_id?: number;
        type?: dependency_1.EnterType;
        scene_begin_time?: number;
        world_level?: number;
        world_type?: number;
        target_uid?: number;
        is_first_login_enter_scene?: boolean;
        scene_tag_id_list?: number[];
        scene_transaction?: string;
        prev_pos?: dependency_2.Vector;
        enter_reason?: number;
        pos?: dependency_2.Vector;
        enter_scene_token?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("prev_scene_id" in data && data.prev_scene_id != undefined) {
                this.prev_scene_id = data.prev_scene_id;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("is_skip_ui" in data && data.is_skip_ui != undefined) {
                this.is_skip_ui = data.is_skip_ui;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("scene_begin_time" in data && data.scene_begin_time != undefined) {
                this.scene_begin_time = data.scene_begin_time;
            }
            if ("world_level" in data && data.world_level != undefined) {
                this.world_level = data.world_level;
            }
            if ("world_type" in data && data.world_type != undefined) {
                this.world_type = data.world_type;
            }
            if ("target_uid" in data && data.target_uid != undefined) {
                this.target_uid = data.target_uid;
            }
            if ("is_first_login_enter_scene" in data && data.is_first_login_enter_scene != undefined) {
                this.is_first_login_enter_scene = data.is_first_login_enter_scene;
            }
            if ("scene_tag_id_list" in data && data.scene_tag_id_list != undefined) {
                this.scene_tag_id_list = data.scene_tag_id_list;
            }
            if ("scene_transaction" in data && data.scene_transaction != undefined) {
                this.scene_transaction = data.scene_transaction;
            }
            if ("prev_pos" in data && data.prev_pos != undefined) {
                this.prev_pos = data.prev_pos;
            }
            if ("enter_reason" in data && data.enter_reason != undefined) {
                this.enter_reason = data.enter_reason;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("enter_scene_token" in data && data.enter_scene_token != undefined) {
                this.enter_scene_token = data.enter_scene_token;
            }
        }
    }
    get prev_scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set prev_scene_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_skip_ui() {
        return pb_1.Message.getFieldWithDefault(this, 1732, false) as boolean;
    }
    set is_skip_ui(value: boolean) {
        pb_1.Message.setField(this, 1732, value);
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 13, dependency_1.EnterType.ENTER_TYPE_NONE) as dependency_1.EnterType;
    }
    set type(value: dependency_1.EnterType) {
        pb_1.Message.setField(this, 13, value);
    }
    get scene_begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set scene_begin_time(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get world_level() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set world_level(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get world_type() {
        return pb_1.Message.getFieldWithDefault(this, 1490, 0) as number;
    }
    set world_type(value: number) {
        pb_1.Message.setField(this, 1490, value);
    }
    get target_uid() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set target_uid(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_first_login_enter_scene() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_first_login_enter_scene(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get scene_tag_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set scene_tag_id_list(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get scene_transaction() {
        return pb_1.Message.getFieldWithDefault(this, 1842, "") as string;
    }
    set scene_transaction(value: string) {
        pb_1.Message.setField(this, 1842, value);
    }
    get prev_pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 8) as dependency_2.Vector;
    }
    set prev_pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_prev_pos() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get enter_reason() {
        return pb_1.Message.getFieldWithDefault(this, 1828, 0) as number;
    }
    set enter_reason(value: number) {
        pb_1.Message.setField(this, 1828, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 7) as dependency_2.Vector;
    }
    set pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get enter_scene_token() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set enter_scene_token(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        prev_scene_id?: number;
        dungeon_id?: number;
        is_skip_ui?: boolean;
        scene_id?: number;
        type?: dependency_1.EnterType;
        scene_begin_time?: number;
        world_level?: number;
        world_type?: number;
        target_uid?: number;
        is_first_login_enter_scene?: boolean;
        scene_tag_id_list?: number[];
        scene_transaction?: string;
        prev_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        enter_reason?: number;
        pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        enter_scene_token?: number;
    }): PlayerEnterSceneNotify {
        const message = new PlayerEnterSceneNotify({});
        if (data.prev_scene_id != null) {
            message.prev_scene_id = data.prev_scene_id;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.is_skip_ui != null) {
            message.is_skip_ui = data.is_skip_ui;
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.scene_begin_time != null) {
            message.scene_begin_time = data.scene_begin_time;
        }
        if (data.world_level != null) {
            message.world_level = data.world_level;
        }
        if (data.world_type != null) {
            message.world_type = data.world_type;
        }
        if (data.target_uid != null) {
            message.target_uid = data.target_uid;
        }
        if (data.is_first_login_enter_scene != null) {
            message.is_first_login_enter_scene = data.is_first_login_enter_scene;
        }
        if (data.scene_tag_id_list != null) {
            message.scene_tag_id_list = data.scene_tag_id_list;
        }
        if (data.scene_transaction != null) {
            message.scene_transaction = data.scene_transaction;
        }
        if (data.prev_pos != null) {
            message.prev_pos = dependency_2.Vector.fromObject(data.prev_pos);
        }
        if (data.enter_reason != null) {
            message.enter_reason = data.enter_reason;
        }
        if (data.pos != null) {
            message.pos = dependency_2.Vector.fromObject(data.pos);
        }
        if (data.enter_scene_token != null) {
            message.enter_scene_token = data.enter_scene_token;
        }
        return message;
    }
    toObject() {
        const data: {
            prev_scene_id?: number;
            dungeon_id?: number;
            is_skip_ui?: boolean;
            scene_id?: number;
            type?: dependency_1.EnterType;
            scene_begin_time?: number;
            world_level?: number;
            world_type?: number;
            target_uid?: number;
            is_first_login_enter_scene?: boolean;
            scene_tag_id_list?: number[];
            scene_transaction?: string;
            prev_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            enter_reason?: number;
            pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            enter_scene_token?: number;
        } = {};
        if (this.prev_scene_id != null) {
            data.prev_scene_id = this.prev_scene_id;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.is_skip_ui != null) {
            data.is_skip_ui = this.is_skip_ui;
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.scene_begin_time != null) {
            data.scene_begin_time = this.scene_begin_time;
        }
        if (this.world_level != null) {
            data.world_level = this.world_level;
        }
        if (this.world_type != null) {
            data.world_type = this.world_type;
        }
        if (this.target_uid != null) {
            data.target_uid = this.target_uid;
        }
        if (this.is_first_login_enter_scene != null) {
            data.is_first_login_enter_scene = this.is_first_login_enter_scene;
        }
        if (this.scene_tag_id_list != null) {
            data.scene_tag_id_list = this.scene_tag_id_list;
        }
        if (this.scene_transaction != null) {
            data.scene_transaction = this.scene_transaction;
        }
        if (this.prev_pos != null) {
            data.prev_pos = this.prev_pos.toObject();
        }
        if (this.enter_reason != null) {
            data.enter_reason = this.enter_reason;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.enter_scene_token != null) {
            data.enter_scene_token = this.enter_scene_token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.prev_scene_id != 0)
            writer.writeUint32(6, this.prev_scene_id);
        if (this.dungeon_id != 0)
            writer.writeUint32(12, this.dungeon_id);
        if (this.is_skip_ui != false)
            writer.writeBool(1732, this.is_skip_ui);
        if (this.scene_id != 0)
            writer.writeUint32(15, this.scene_id);
        if (this.type != dependency_1.EnterType.ENTER_TYPE_NONE)
            writer.writeEnum(13, this.type);
        if (this.scene_begin_time != 0)
            writer.writeUint64(14, this.scene_begin_time);
        if (this.world_level != 0)
            writer.writeUint32(11, this.world_level);
        if (this.world_type != 0)
            writer.writeUint32(1490, this.world_type);
        if (this.target_uid != 0)
            writer.writeUint32(4, this.target_uid);
        if (this.is_first_login_enter_scene != false)
            writer.writeBool(3, this.is_first_login_enter_scene);
        if (this.scene_tag_id_list.length)
            writer.writePackedUint32(5, this.scene_tag_id_list);
        if (this.scene_transaction.length)
            writer.writeString(1842, this.scene_transaction);
        if (this.has_prev_pos)
            writer.writeMessage(8, this.prev_pos, () => this.prev_pos.serialize(writer));
        if (this.enter_reason != 0)
            writer.writeUint32(1828, this.enter_reason);
        if (this.has_pos)
            writer.writeMessage(7, this.pos, () => this.pos.serialize(writer));
        if (this.enter_scene_token != 0)
            writer.writeUint32(2, this.enter_scene_token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerEnterSceneNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerEnterSceneNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.prev_scene_id = reader.readUint32();
                    break;
                case 12:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 1732:
                    message.is_skip_ui = reader.readBool();
                    break;
                case 15:
                    message.scene_id = reader.readUint32();
                    break;
                case 13:
                    message.type = reader.readEnum();
                    break;
                case 14:
                    message.scene_begin_time = reader.readUint64();
                    break;
                case 11:
                    message.world_level = reader.readUint32();
                    break;
                case 1490:
                    message.world_type = reader.readUint32();
                    break;
                case 4:
                    message.target_uid = reader.readUint32();
                    break;
                case 3:
                    message.is_first_login_enter_scene = reader.readBool();
                    break;
                case 5:
                    message.scene_tag_id_list = reader.readPackedUint32();
                    break;
                case 1842:
                    message.scene_transaction = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.prev_pos, () => message.prev_pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 1828:
                    message.enter_reason = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.pos, () => message.pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 2:
                    message.enter_scene_token = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerEnterSceneNotify {
        return PlayerEnterSceneNotify.deserialize(bytes);
    }
}
