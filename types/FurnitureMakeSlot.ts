// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "FurnitureMakeSlot.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FurnitureMakeData } from "./FurnitureMakeData";
/**
 * @generated from protobuf message FurnitureMakeSlot
 */
export interface FurnitureMakeSlot {
    /**
     * @generated from protobuf field: repeated FurnitureMakeData furniture_make_data_list = 1;
     */
    furnitureMakeDataList: FurnitureMakeData[];
}
// @generated message type with reflection information, may provide speed optimized methods
class FurnitureMakeSlot$Type extends MessageType<FurnitureMakeSlot> {
    constructor() {
        super("FurnitureMakeSlot", [
            { no: 1, name: "furniture_make_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FurnitureMakeData }
        ]);
    }
    create(value?: PartialMessage<FurnitureMakeSlot>): FurnitureMakeSlot {
        const message = { furnitureMakeDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FurnitureMakeSlot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FurnitureMakeSlot): FurnitureMakeSlot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated FurnitureMakeData furniture_make_data_list */ 1:
                    message.furnitureMakeDataList.push(FurnitureMakeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FurnitureMakeSlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated FurnitureMakeData furniture_make_data_list = 1; */
        for (let i = 0; i < message.furnitureMakeDataList.length; i++)
            FurnitureMakeData.internalBinaryWrite(message.furnitureMakeDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FurnitureMakeSlot
 */
export const FurnitureMakeSlot = new FurnitureMakeSlot$Type();
