/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Achievement.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Achievement extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        finish_timestamp?: number;
        status?: Achievement.Status;
        cur_progress?: number;
        id?: number;
        total_progress?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("finish_timestamp" in data && data.finish_timestamp != undefined) {
                this.finish_timestamp = data.finish_timestamp;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("cur_progress" in data && data.cur_progress != undefined) {
                this.cur_progress = data.cur_progress;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("total_progress" in data && data.total_progress != undefined) {
                this.total_progress = data.total_progress;
            }
        }
    }
    get finish_timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set finish_timestamp(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 13, Achievement.Status.STATUS_INVALID) as Achievement.Status;
    }
    set status(value: Achievement.Status) {
        pb_1.Message.setField(this, 13, value);
    }
    get cur_progress() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set cur_progress(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get total_progress() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set total_progress(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        finish_timestamp?: number;
        status?: Achievement.Status;
        cur_progress?: number;
        id?: number;
        total_progress?: number;
    }): Achievement {
        const message = new Achievement({});
        if (data.finish_timestamp != null) {
            message.finish_timestamp = data.finish_timestamp;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.cur_progress != null) {
            message.cur_progress = data.cur_progress;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.total_progress != null) {
            message.total_progress = data.total_progress;
        }
        return message;
    }
    toObject() {
        const data: {
            finish_timestamp?: number;
            status?: Achievement.Status;
            cur_progress?: number;
            id?: number;
            total_progress?: number;
        } = {};
        if (this.finish_timestamp != null) {
            data.finish_timestamp = this.finish_timestamp;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.cur_progress != null) {
            data.cur_progress = this.cur_progress;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.total_progress != null) {
            data.total_progress = this.total_progress;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.finish_timestamp != 0)
            writer.writeUint32(11, this.finish_timestamp);
        if (this.status != Achievement.Status.STATUS_INVALID)
            writer.writeEnum(13, this.status);
        if (this.cur_progress != 0)
            writer.writeUint32(12, this.cur_progress);
        if (this.id != 0)
            writer.writeUint32(14, this.id);
        if (this.total_progress != 0)
            writer.writeUint32(8, this.total_progress);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Achievement {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Achievement();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.finish_timestamp = reader.readUint32();
                    break;
                case 13:
                    message.status = reader.readEnum();
                    break;
                case 12:
                    message.cur_progress = reader.readUint32();
                    break;
                case 14:
                    message.id = reader.readUint32();
                    break;
                case 8:
                    message.total_progress = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Achievement {
        return Achievement.deserialize(bytes);
    }
}
export namespace Achievement {
    export enum Status {
        STATUS_INVALID = 0,
        STATUS_UNFINISHED = 1,
        STATUS_FINISHED = 2,
        STATUS_REWARD_TAKEN = 3
    }
}
