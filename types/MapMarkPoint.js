"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MapMarkPoint_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapMarkPoint = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MapMarkPoint.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./MapMarkFromType");
const dependency_2 = require("./MapMarkPointType");
const dependency_3 = require("./Vector");
const pb_1 = require("google-protobuf");
class MapMarkPoint extends pb_1.Message {
    constructor(data) {
        super();
        _MapMarkPoint_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MapMarkPoint_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("point_type" in data && data.point_type != undefined) {
                this.point_type = data.point_type;
            }
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("from_type" in data && data.from_type != undefined) {
                this.from_type = data.from_type;
            }
            if ("quest_id" in data && data.quest_id != undefined) {
                this.quest_id = data.quest_id;
            }
        }
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set scene_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set name(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_3.Vector, 3);
    }
    set pos(value) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get point_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_2.MapMarkPointType.MAP_MARK_POINT_TYPE_NPC);
    }
    set point_type(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set monster_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get from_type() {
        return pb_1.Message.getFieldWithDefault(this, 6, dependency_1.MapMarkFromType.MAP_MARK_FROM_TYPE_NONE);
    }
    set from_type(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set quest_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new MapMarkPoint({});
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.pos != null) {
            message.pos = dependency_3.Vector.fromObject(data.pos);
        }
        if (data.point_type != null) {
            message.point_type = data.point_type;
        }
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.from_type != null) {
            message.from_type = data.from_type;
        }
        if (data.quest_id != null) {
            message.quest_id = data.quest_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.point_type != null) {
            data.point_type = this.point_type;
        }
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.from_type != null) {
            data.from_type = this.from_type;
        }
        if (this.quest_id != null) {
            data.quest_id = this.quest_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.scene_id != 0)
            writer.writeUint32(1, this.scene_id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.has_pos)
            writer.writeMessage(3, this.pos, () => this.pos.serialize(writer));
        if (this.point_type != dependency_2.MapMarkPointType.MAP_MARK_POINT_TYPE_NPC)
            writer.writeEnum(4, this.point_type);
        if (this.monster_id != 0)
            writer.writeUint32(5, this.monster_id);
        if (this.from_type != dependency_1.MapMarkFromType.MAP_MARK_FROM_TYPE_NONE)
            writer.writeEnum(6, this.from_type);
        if (this.quest_id != 0)
            writer.writeUint32(7, this.quest_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MapMarkPoint();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.scene_id = reader.readUint32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.pos, () => message.pos = dependency_3.Vector.deserialize(reader));
                    break;
                case 4:
                    message.point_type = reader.readEnum();
                    break;
                case 5:
                    message.monster_id = reader.readUint32();
                    break;
                case 6:
                    message.from_type = reader.readEnum();
                    break;
                case 7:
                    message.quest_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MapMarkPoint.deserialize(bytes);
    }
}
exports.MapMarkPoint = MapMarkPoint;
_MapMarkPoint_one_of_decls = new WeakMap();
