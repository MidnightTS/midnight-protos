"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GalleryBalloonScoreNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GalleryBalloonScoreNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GalleryBalloonScoreNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class GalleryBalloonScoreNotify extends pb_1.Message {
    constructor(data) {
        super();
        _GalleryBalloonScoreNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _GalleryBalloonScoreNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("gallery_id" in data && data.gallery_id != undefined) {
                this.gallery_id = data.gallery_id;
            }
            if ("uid_score_map" in data && data.uid_score_map != undefined) {
                this.uid_score_map = data.uid_score_map;
            }
        }
        if (!this.uid_score_map)
            this.uid_score_map = new Map();
    }
    get gallery_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set gallery_id(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get uid_score_map() {
        return pb_1.Message.getField(this, 7);
    }
    set uid_score_map(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new GalleryBalloonScoreNotify({});
        if (data.gallery_id != null) {
            message.gallery_id = data.gallery_id;
        }
        if (typeof data.uid_score_map == "object") {
            message.uid_score_map = new Map(Object.entries(data.uid_score_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.gallery_id != null) {
            data.gallery_id = this.gallery_id;
        }
        if (this.uid_score_map.size > 0) {
            data.uid_score_map = (Object.fromEntries)(this.uid_score_map);
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.gallery_id != 0)
            writer.writeUint32(9, this.gallery_id);
        for (const [key, value] of this.uid_score_map) {
            writer.writeMessage(7, this.uid_score_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GalleryBalloonScoreNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.gallery_id = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.uid_score_map, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GalleryBalloonScoreNotify.deserialize(bytes);
    }
}
exports.GalleryBalloonScoreNotify = GalleryBalloonScoreNotify;
_GalleryBalloonScoreNotify_one_of_decls = new WeakMap();
