/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerMatchAgreedResultNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MatchType";
import * as pb_1 from "google-protobuf";
export class PlayerMatchAgreedResultNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        target_uid?: number;
        match_type?: dependency_1.MatchType;
        reason?: PlayerMatchAgreedResultNotify.Reason;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("target_uid" in data && data.target_uid != undefined) {
                this.target_uid = data.target_uid;
            }
            if ("match_type" in data && data.match_type != undefined) {
                this.match_type = data.match_type;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get target_uid() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set target_uid(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get match_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.MatchType.MATCH_TYPE_NONE) as dependency_1.MatchType;
    }
    set match_type(value: dependency_1.MatchType) {
        pb_1.Message.setField(this, 3, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 8, PlayerMatchAgreedResultNotify.Reason.REASON_SUCC) as PlayerMatchAgreedResultNotify.Reason;
    }
    set reason(value: PlayerMatchAgreedResultNotify.Reason) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        target_uid?: number;
        match_type?: dependency_1.MatchType;
        reason?: PlayerMatchAgreedResultNotify.Reason;
    }): PlayerMatchAgreedResultNotify {
        const message = new PlayerMatchAgreedResultNotify({});
        if (data.target_uid != null) {
            message.target_uid = data.target_uid;
        }
        if (data.match_type != null) {
            message.match_type = data.match_type;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            target_uid?: number;
            match_type?: dependency_1.MatchType;
            reason?: PlayerMatchAgreedResultNotify.Reason;
        } = {};
        if (this.target_uid != null) {
            data.target_uid = this.target_uid;
        }
        if (this.match_type != null) {
            data.match_type = this.match_type;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.target_uid != 0)
            writer.writeUint32(14, this.target_uid);
        if (this.match_type != dependency_1.MatchType.MATCH_TYPE_NONE)
            writer.writeEnum(3, this.match_type);
        if (this.reason != PlayerMatchAgreedResultNotify.Reason.REASON_SUCC)
            writer.writeEnum(8, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerMatchAgreedResultNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerMatchAgreedResultNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.target_uid = reader.readUint32();
                    break;
                case 3:
                    message.match_type = reader.readEnum();
                    break;
                case 8:
                    message.reason = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerMatchAgreedResultNotify {
        return PlayerMatchAgreedResultNotify.deserialize(bytes);
    }
}
export namespace PlayerMatchAgreedResultNotify {
    export enum Reason {
        REASON_SUCC = 0,
        REASON_TARGET_SCENE_CANNOT_ENTER = 1,
        REASON_SELF_MP_UNAVAILABLE = 2,
        REASON_OTHER_DATA_VERSION_NOT_LATEST = 3,
        REASON_DATA_VERSION_NOT_LATEST = 4
    }
}
