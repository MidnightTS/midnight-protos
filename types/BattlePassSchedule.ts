// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "BattlePassSchedule.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BattlePassRewardTag } from "./BattlePassRewardTag";
import { BattlePassProduct } from "./BattlePassProduct";
import { BattlePassUnlockStatus } from "./BattlePassUnlockStatus";
import { BattlePassCycle } from "./BattlePassCycle";
/**
 * @generated from protobuf message BattlePassSchedule
 */
export interface BattlePassSchedule {
    /**
     * @generated from protobuf field: uint32 schedule_id = 5;
     */
    scheduleId: number;
    /**
     * @generated from protobuf field: uint32 Unk3300_MAAJDKMIODC = 2 [json_name = "Unk3300MAAJDKMIODC"];
     */
    unk3300MAAJDKMIODC: number;
    /**
     * @generated from protobuf field: uint32 level = 7;
     */
    level: number;
    /**
     * @generated from protobuf field: bool Unk3300_KODFJENCJLE = 8 [json_name = "Unk3300KODFJENCJLE"];
     */
    unk3300KODFJENCJLE: boolean;
    /**
     * @generated from protobuf field: uint32 Unk3300_ELMNFBOLEOA = 14 [json_name = "Unk3300ELMNFBOLEOA"];
     */
    unk3300ELMNFBOLEOA: number;
    /**
     * @generated from protobuf field: bool Unk3300_KALOGHHMJJE = 12 [json_name = "Unk3300KALOGHHMJJE"];
     */
    unk3300KALOGHHMJJE: boolean;
    /**
     * @generated from protobuf field: uint32 Unk3300_FILCIPPAHHL = 4 [json_name = "Unk3300FILCIPPAHHL"];
     */
    unk3300FILCIPPAHHL: number;
    /**
     * @generated from protobuf field: BattlePassCycle cur_cycle = 11;
     */
    curCycle?: BattlePassCycle;
    /**
     * @generated from protobuf field: uint32 begin_time = 1;
     */
    beginTime: number;
    /**
     * @generated from protobuf field: BattlePassUnlockStatus unlock_status = 15;
     */
    unlockStatus: BattlePassUnlockStatus;
    /**
     * @generated from protobuf field: BattlePassProduct product_info = 10;
     */
    productInfo?: BattlePassProduct;
    /**
     * @generated from protobuf field: uint32 end_time = 13;
     */
    endTime: number;
    /**
     * @generated from protobuf field: repeated BattlePassRewardTag reward_taken_list = 3;
     */
    rewardTakenList: BattlePassRewardTag[];
}
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassSchedule$Type extends MessageType<BattlePassSchedule> {
    constructor() {
        super("BattlePassSchedule", [
            { no: 5, name: "schedule_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "Unk3300_MAAJDKMIODC", kind: "scalar", jsonName: "Unk3300MAAJDKMIODC", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "Unk3300_KODFJENCJLE", kind: "scalar", jsonName: "Unk3300KODFJENCJLE", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "Unk3300_ELMNFBOLEOA", kind: "scalar", jsonName: "Unk3300ELMNFBOLEOA", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "Unk3300_KALOGHHMJJE", kind: "scalar", jsonName: "Unk3300KALOGHHMJJE", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "Unk3300_FILCIPPAHHL", kind: "scalar", jsonName: "Unk3300FILCIPPAHHL", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cur_cycle", kind: "message", T: () => BattlePassCycle },
            { no: 1, name: "begin_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "unlock_status", kind: "enum", T: () => ["BattlePassUnlockStatus", BattlePassUnlockStatus, "BATTLE_PASS_UNLOCK_STATUS_"] },
            { no: 10, name: "product_info", kind: "message", T: () => BattlePassProduct },
            { no: 13, name: "end_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reward_taken_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BattlePassRewardTag }
        ]);
    }
    create(value?: PartialMessage<BattlePassSchedule>): BattlePassSchedule {
        const message = { scheduleId: 0, unk3300MAAJDKMIODC: 0, level: 0, unk3300KODFJENCJLE: false, unk3300ELMNFBOLEOA: 0, unk3300KALOGHHMJJE: false, unk3300FILCIPPAHHL: 0, beginTime: 0, unlockStatus: 0, endTime: 0, rewardTakenList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassSchedule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassSchedule): BattlePassSchedule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* uint32 Unk3300_MAAJDKMIODC = 2 [json_name = "Unk3300MAAJDKMIODC"];*/ 2:
                    message.unk3300MAAJDKMIODC = reader.uint32();
                    break;
                case /* uint32 level */ 7:
                    message.level = reader.uint32();
                    break;
                case /* bool Unk3300_KODFJENCJLE = 8 [json_name = "Unk3300KODFJENCJLE"];*/ 8:
                    message.unk3300KODFJENCJLE = reader.bool();
                    break;
                case /* uint32 Unk3300_ELMNFBOLEOA = 14 [json_name = "Unk3300ELMNFBOLEOA"];*/ 14:
                    message.unk3300ELMNFBOLEOA = reader.uint32();
                    break;
                case /* bool Unk3300_KALOGHHMJJE = 12 [json_name = "Unk3300KALOGHHMJJE"];*/ 12:
                    message.unk3300KALOGHHMJJE = reader.bool();
                    break;
                case /* uint32 Unk3300_FILCIPPAHHL = 4 [json_name = "Unk3300FILCIPPAHHL"];*/ 4:
                    message.unk3300FILCIPPAHHL = reader.uint32();
                    break;
                case /* BattlePassCycle cur_cycle */ 11:
                    message.curCycle = BattlePassCycle.internalBinaryRead(reader, reader.uint32(), options, message.curCycle);
                    break;
                case /* uint32 begin_time */ 1:
                    message.beginTime = reader.uint32();
                    break;
                case /* BattlePassUnlockStatus unlock_status */ 15:
                    message.unlockStatus = reader.int32();
                    break;
                case /* BattlePassProduct product_info */ 10:
                    message.productInfo = BattlePassProduct.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                case /* uint32 end_time */ 13:
                    message.endTime = reader.uint32();
                    break;
                case /* repeated BattlePassRewardTag reward_taken_list */ 3:
                    message.rewardTakenList.push(BattlePassRewardTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassSchedule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 schedule_id = 5; */
        if (message.scheduleId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        /* uint32 Unk3300_MAAJDKMIODC = 2 [json_name = "Unk3300MAAJDKMIODC"]; */
        if (message.unk3300MAAJDKMIODC !== 0)
            writer.tag(2, WireType.Varint).uint32(message.unk3300MAAJDKMIODC);
        /* uint32 level = 7; */
        if (message.level !== 0)
            writer.tag(7, WireType.Varint).uint32(message.level);
        /* bool Unk3300_KODFJENCJLE = 8 [json_name = "Unk3300KODFJENCJLE"]; */
        if (message.unk3300KODFJENCJLE !== false)
            writer.tag(8, WireType.Varint).bool(message.unk3300KODFJENCJLE);
        /* uint32 Unk3300_ELMNFBOLEOA = 14 [json_name = "Unk3300ELMNFBOLEOA"]; */
        if (message.unk3300ELMNFBOLEOA !== 0)
            writer.tag(14, WireType.Varint).uint32(message.unk3300ELMNFBOLEOA);
        /* bool Unk3300_KALOGHHMJJE = 12 [json_name = "Unk3300KALOGHHMJJE"]; */
        if (message.unk3300KALOGHHMJJE !== false)
            writer.tag(12, WireType.Varint).bool(message.unk3300KALOGHHMJJE);
        /* uint32 Unk3300_FILCIPPAHHL = 4 [json_name = "Unk3300FILCIPPAHHL"]; */
        if (message.unk3300FILCIPPAHHL !== 0)
            writer.tag(4, WireType.Varint).uint32(message.unk3300FILCIPPAHHL);
        /* BattlePassCycle cur_cycle = 11; */
        if (message.curCycle)
            BattlePassCycle.internalBinaryWrite(message.curCycle, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* uint32 begin_time = 1; */
        if (message.beginTime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.beginTime);
        /* BattlePassUnlockStatus unlock_status = 15; */
        if (message.unlockStatus !== 0)
            writer.tag(15, WireType.Varint).int32(message.unlockStatus);
        /* BattlePassProduct product_info = 10; */
        if (message.productInfo)
            BattlePassProduct.internalBinaryWrite(message.productInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* uint32 end_time = 13; */
        if (message.endTime !== 0)
            writer.tag(13, WireType.Varint).uint32(message.endTime);
        /* repeated BattlePassRewardTag reward_taken_list = 3; */
        for (let i = 0; i < message.rewardTakenList.length; i++)
            BattlePassRewardTag.internalBinaryWrite(message.rewardTakenList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BattlePassSchedule
 */
export const BattlePassSchedule = new BattlePassSchedule$Type();
