/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneAvatarInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarExcelInfo";
import * as dependency_2 from "./CurVehicleInfo";
import * as dependency_3 from "./SceneReliquaryInfo";
import * as dependency_4 from "./SceneWeaponInfo";
import * as dependency_5 from "./ServerBuff";
import * as pb_1 from "google-protobuf";
export class SceneAvatarInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        avatar_id?: number;
        guid?: number;
        peer_id?: number;
        equip_id_list?: number[];
        skill_depot_id?: number;
        talent_id_list?: number[];
        weapon?: dependency_4.SceneWeaponInfo;
        reliquary_list?: dependency_3.SceneReliquaryInfo[];
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: Map<number, number>;
        proud_skill_extra_level_map?: Map<number, number>;
        server_buff_list?: dependency_5.ServerBuff[];
        team_resonance_list?: number[];
        wearing_flycloak_id?: number;
        born_time?: number;
        costume_id?: number;
        cur_vehicle_info?: dependency_2.CurVehicleInfo;
        excel_info?: dependency_1.AvatarExcelInfo;
        anim_hash?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 7, 9, 12, 15, 16], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("guid" in data && data.guid != undefined) {
                this.guid = data.guid;
            }
            if ("peer_id" in data && data.peer_id != undefined) {
                this.peer_id = data.peer_id;
            }
            if ("equip_id_list" in data && data.equip_id_list != undefined) {
                this.equip_id_list = data.equip_id_list;
            }
            if ("skill_depot_id" in data && data.skill_depot_id != undefined) {
                this.skill_depot_id = data.skill_depot_id;
            }
            if ("talent_id_list" in data && data.talent_id_list != undefined) {
                this.talent_id_list = data.talent_id_list;
            }
            if ("weapon" in data && data.weapon != undefined) {
                this.weapon = data.weapon;
            }
            if ("reliquary_list" in data && data.reliquary_list != undefined) {
                this.reliquary_list = data.reliquary_list;
            }
            if ("core_proud_skill_level" in data && data.core_proud_skill_level != undefined) {
                this.core_proud_skill_level = data.core_proud_skill_level;
            }
            if ("inherent_proud_skill_list" in data && data.inherent_proud_skill_list != undefined) {
                this.inherent_proud_skill_list = data.inherent_proud_skill_list;
            }
            if ("skill_level_map" in data && data.skill_level_map != undefined) {
                this.skill_level_map = data.skill_level_map;
            }
            if ("proud_skill_extra_level_map" in data && data.proud_skill_extra_level_map != undefined) {
                this.proud_skill_extra_level_map = data.proud_skill_extra_level_map;
            }
            if ("server_buff_list" in data && data.server_buff_list != undefined) {
                this.server_buff_list = data.server_buff_list;
            }
            if ("team_resonance_list" in data && data.team_resonance_list != undefined) {
                this.team_resonance_list = data.team_resonance_list;
            }
            if ("wearing_flycloak_id" in data && data.wearing_flycloak_id != undefined) {
                this.wearing_flycloak_id = data.wearing_flycloak_id;
            }
            if ("born_time" in data && data.born_time != undefined) {
                this.born_time = data.born_time;
            }
            if ("costume_id" in data && data.costume_id != undefined) {
                this.costume_id = data.costume_id;
            }
            if ("cur_vehicle_info" in data && data.cur_vehicle_info != undefined) {
                this.cur_vehicle_info = data.cur_vehicle_info;
            }
            if ("excel_info" in data && data.excel_info != undefined) {
                this.excel_info = data.excel_info;
            }
            if ("anim_hash" in data && data.anim_hash != undefined) {
                this.anim_hash = data.anim_hash;
            }
        }
        if (!this.skill_level_map)
            this.skill_level_map = new Map();
        if (!this.proud_skill_extra_level_map)
            this.proud_skill_extra_level_map = new Map();
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get guid() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set guid(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get peer_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set peer_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get equip_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set equip_id_list(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get skill_depot_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set skill_depot_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get talent_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set talent_id_list(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get weapon() {
        return pb_1.Message.getWrapperField(this, dependency_4.SceneWeaponInfo, 8) as dependency_4.SceneWeaponInfo;
    }
    set weapon(value: dependency_4.SceneWeaponInfo) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_weapon() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get reliquary_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.SceneReliquaryInfo, 9) as dependency_3.SceneReliquaryInfo[];
    }
    set reliquary_list(value: dependency_3.SceneReliquaryInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get core_proud_skill_level() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set core_proud_skill_level(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get inherent_proud_skill_list() {
        return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
    }
    set inherent_proud_skill_list(value: number[]) {
        pb_1.Message.setField(this, 12, value);
    }
    get skill_level_map() {
        return pb_1.Message.getField(this, 13) as any as Map<number, number>;
    }
    set skill_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 13, value as any);
    }
    get proud_skill_extra_level_map() {
        return pb_1.Message.getField(this, 14) as any as Map<number, number>;
    }
    set proud_skill_extra_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 14, value as any);
    }
    get server_buff_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_5.ServerBuff, 15) as dependency_5.ServerBuff[];
    }
    set server_buff_list(value: dependency_5.ServerBuff[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get team_resonance_list() {
        return pb_1.Message.getFieldWithDefault(this, 16, []) as number[];
    }
    set team_resonance_list(value: number[]) {
        pb_1.Message.setField(this, 16, value);
    }
    get wearing_flycloak_id() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set wearing_flycloak_id(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get born_time() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set born_time(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get costume_id() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set costume_id(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get cur_vehicle_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.CurVehicleInfo, 20) as dependency_2.CurVehicleInfo;
    }
    set cur_vehicle_info(value: dependency_2.CurVehicleInfo) {
        pb_1.Message.setWrapperField(this, 20, value);
    }
    get has_cur_vehicle_info() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get excel_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AvatarExcelInfo, 21) as dependency_1.AvatarExcelInfo;
    }
    set excel_info(value: dependency_1.AvatarExcelInfo) {
        pb_1.Message.setWrapperField(this, 21, value);
    }
    get has_excel_info() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get anim_hash() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set anim_hash(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    static fromObject(data: {
        uid?: number;
        avatar_id?: number;
        guid?: number;
        peer_id?: number;
        equip_id_list?: number[];
        skill_depot_id?: number;
        talent_id_list?: number[];
        weapon?: ReturnType<typeof dependency_4.SceneWeaponInfo.prototype.toObject>;
        reliquary_list?: ReturnType<typeof dependency_3.SceneReliquaryInfo.prototype.toObject>[];
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: {
            [key: number]: number;
        };
        proud_skill_extra_level_map?: {
            [key: number]: number;
        };
        server_buff_list?: ReturnType<typeof dependency_5.ServerBuff.prototype.toObject>[];
        team_resonance_list?: number[];
        wearing_flycloak_id?: number;
        born_time?: number;
        costume_id?: number;
        cur_vehicle_info?: ReturnType<typeof dependency_2.CurVehicleInfo.prototype.toObject>;
        excel_info?: ReturnType<typeof dependency_1.AvatarExcelInfo.prototype.toObject>;
        anim_hash?: number;
    }): SceneAvatarInfo {
        const message = new SceneAvatarInfo({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.guid != null) {
            message.guid = data.guid;
        }
        if (data.peer_id != null) {
            message.peer_id = data.peer_id;
        }
        if (data.equip_id_list != null) {
            message.equip_id_list = data.equip_id_list;
        }
        if (data.skill_depot_id != null) {
            message.skill_depot_id = data.skill_depot_id;
        }
        if (data.talent_id_list != null) {
            message.talent_id_list = data.talent_id_list;
        }
        if (data.weapon != null) {
            message.weapon = dependency_4.SceneWeaponInfo.fromObject(data.weapon);
        }
        if (data.reliquary_list != null) {
            message.reliquary_list = data.reliquary_list.map(item => dependency_3.SceneReliquaryInfo.fromObject(item));
        }
        if (data.core_proud_skill_level != null) {
            message.core_proud_skill_level = data.core_proud_skill_level;
        }
        if (data.inherent_proud_skill_list != null) {
            message.inherent_proud_skill_list = data.inherent_proud_skill_list;
        }
        if (typeof data.skill_level_map == "object") {
            message.skill_level_map = new Map(Object.entries(data.skill_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.proud_skill_extra_level_map == "object") {
            message.proud_skill_extra_level_map = new Map(Object.entries(data.proud_skill_extra_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.server_buff_list != null) {
            message.server_buff_list = data.server_buff_list.map(item => dependency_5.ServerBuff.fromObject(item));
        }
        if (data.team_resonance_list != null) {
            message.team_resonance_list = data.team_resonance_list;
        }
        if (data.wearing_flycloak_id != null) {
            message.wearing_flycloak_id = data.wearing_flycloak_id;
        }
        if (data.born_time != null) {
            message.born_time = data.born_time;
        }
        if (data.costume_id != null) {
            message.costume_id = data.costume_id;
        }
        if (data.cur_vehicle_info != null) {
            message.cur_vehicle_info = dependency_2.CurVehicleInfo.fromObject(data.cur_vehicle_info);
        }
        if (data.excel_info != null) {
            message.excel_info = dependency_1.AvatarExcelInfo.fromObject(data.excel_info);
        }
        if (data.anim_hash != null) {
            message.anim_hash = data.anim_hash;
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            avatar_id?: number;
            guid?: number;
            peer_id?: number;
            equip_id_list?: number[];
            skill_depot_id?: number;
            talent_id_list?: number[];
            weapon?: ReturnType<typeof dependency_4.SceneWeaponInfo.prototype.toObject>;
            reliquary_list?: ReturnType<typeof dependency_3.SceneReliquaryInfo.prototype.toObject>[];
            core_proud_skill_level?: number;
            inherent_proud_skill_list?: number[];
            skill_level_map?: {
                [key: number]: number;
            };
            proud_skill_extra_level_map?: {
                [key: number]: number;
            };
            server_buff_list?: ReturnType<typeof dependency_5.ServerBuff.prototype.toObject>[];
            team_resonance_list?: number[];
            wearing_flycloak_id?: number;
            born_time?: number;
            costume_id?: number;
            cur_vehicle_info?: ReturnType<typeof dependency_2.CurVehicleInfo.prototype.toObject>;
            excel_info?: ReturnType<typeof dependency_1.AvatarExcelInfo.prototype.toObject>;
            anim_hash?: number;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.guid != null) {
            data.guid = this.guid;
        }
        if (this.peer_id != null) {
            data.peer_id = this.peer_id;
        }
        if (this.equip_id_list != null) {
            data.equip_id_list = this.equip_id_list;
        }
        if (this.skill_depot_id != null) {
            data.skill_depot_id = this.skill_depot_id;
        }
        if (this.talent_id_list != null) {
            data.talent_id_list = this.talent_id_list;
        }
        if (this.weapon != null) {
            data.weapon = this.weapon.toObject();
        }
        if (this.reliquary_list != null) {
            data.reliquary_list = this.reliquary_list.map((item: dependency_3.SceneReliquaryInfo) => item.toObject());
        }
        if (this.core_proud_skill_level != null) {
            data.core_proud_skill_level = this.core_proud_skill_level;
        }
        if (this.inherent_proud_skill_list != null) {
            data.inherent_proud_skill_list = this.inherent_proud_skill_list;
        }
        if (this.skill_level_map.size > 0) {
            data.skill_level_map = (Object.fromEntries)(this.skill_level_map);
        }
        if (this.proud_skill_extra_level_map.size > 0) {
            data.proud_skill_extra_level_map = (Object.fromEntries)(this.proud_skill_extra_level_map);
        }
        if (this.server_buff_list != null) {
            data.server_buff_list = this.server_buff_list.map((item: dependency_5.ServerBuff) => item.toObject());
        }
        if (this.team_resonance_list != null) {
            data.team_resonance_list = this.team_resonance_list;
        }
        if (this.wearing_flycloak_id != null) {
            data.wearing_flycloak_id = this.wearing_flycloak_id;
        }
        if (this.born_time != null) {
            data.born_time = this.born_time;
        }
        if (this.costume_id != null) {
            data.costume_id = this.costume_id;
        }
        if (this.cur_vehicle_info != null) {
            data.cur_vehicle_info = this.cur_vehicle_info.toObject();
        }
        if (this.excel_info != null) {
            data.excel_info = this.excel_info.toObject();
        }
        if (this.anim_hash != null) {
            data.anim_hash = this.anim_hash;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(1, this.uid);
        if (this.avatar_id != 0)
            writer.writeUint32(2, this.avatar_id);
        if (this.guid != 0)
            writer.writeUint64(3, this.guid);
        if (this.peer_id != 0)
            writer.writeUint32(4, this.peer_id);
        if (this.equip_id_list.length)
            writer.writePackedUint32(5, this.equip_id_list);
        if (this.skill_depot_id != 0)
            writer.writeUint32(6, this.skill_depot_id);
        if (this.talent_id_list.length)
            writer.writePackedUint32(7, this.talent_id_list);
        if (this.has_weapon)
            writer.writeMessage(8, this.weapon, () => this.weapon.serialize(writer));
        if (this.reliquary_list.length)
            writer.writeRepeatedMessage(9, this.reliquary_list, (item: dependency_3.SceneReliquaryInfo) => item.serialize(writer));
        if (this.core_proud_skill_level != 0)
            writer.writeUint32(11, this.core_proud_skill_level);
        if (this.inherent_proud_skill_list.length)
            writer.writePackedUint32(12, this.inherent_proud_skill_list);
        for (const [key, value] of this.skill_level_map) {
            writer.writeMessage(13, this.skill_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        for (const [key, value] of this.proud_skill_extra_level_map) {
            writer.writeMessage(14, this.proud_skill_extra_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.server_buff_list.length)
            writer.writeRepeatedMessage(15, this.server_buff_list, (item: dependency_5.ServerBuff) => item.serialize(writer));
        if (this.team_resonance_list.length)
            writer.writePackedUint32(16, this.team_resonance_list);
        if (this.wearing_flycloak_id != 0)
            writer.writeUint32(17, this.wearing_flycloak_id);
        if (this.born_time != 0)
            writer.writeUint32(18, this.born_time);
        if (this.costume_id != 0)
            writer.writeUint32(19, this.costume_id);
        if (this.has_cur_vehicle_info)
            writer.writeMessage(20, this.cur_vehicle_info, () => this.cur_vehicle_info.serialize(writer));
        if (this.has_excel_info)
            writer.writeMessage(21, this.excel_info, () => this.excel_info.serialize(writer));
        if (this.anim_hash != 0)
            writer.writeUint32(22, this.anim_hash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneAvatarInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneAvatarInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uid = reader.readUint32();
                    break;
                case 2:
                    message.avatar_id = reader.readUint32();
                    break;
                case 3:
                    message.guid = reader.readUint64();
                    break;
                case 4:
                    message.peer_id = reader.readUint32();
                    break;
                case 5:
                    message.equip_id_list = reader.readPackedUint32();
                    break;
                case 6:
                    message.skill_depot_id = reader.readUint32();
                    break;
                case 7:
                    message.talent_id_list = reader.readPackedUint32();
                    break;
                case 8:
                    reader.readMessage(message.weapon, () => message.weapon = dependency_4.SceneWeaponInfo.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.reliquary_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_3.SceneReliquaryInfo.deserialize(reader), dependency_3.SceneReliquaryInfo));
                    break;
                case 11:
                    message.core_proud_skill_level = reader.readUint32();
                    break;
                case 12:
                    message.inherent_proud_skill_list = reader.readPackedUint32();
                    break;
                case 13:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 14:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.proud_skill_extra_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 15:
                    reader.readMessage(message.server_buff_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_5.ServerBuff.deserialize(reader), dependency_5.ServerBuff));
                    break;
                case 16:
                    message.team_resonance_list = reader.readPackedUint32();
                    break;
                case 17:
                    message.wearing_flycloak_id = reader.readUint32();
                    break;
                case 18:
                    message.born_time = reader.readUint32();
                    break;
                case 19:
                    message.costume_id = reader.readUint32();
                    break;
                case 20:
                    reader.readMessage(message.cur_vehicle_info, () => message.cur_vehicle_info = dependency_2.CurVehicleInfo.deserialize(reader));
                    break;
                case 21:
                    reader.readMessage(message.excel_info, () => message.excel_info = dependency_1.AvatarExcelInfo.deserialize(reader));
                    break;
                case 22:
                    message.anim_hash = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneAvatarInfo {
        return SceneAvatarInfo.deserialize(bytes);
    }
}
