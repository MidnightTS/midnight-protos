// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "BrickBreakerDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BrickBreakerLevelInfo } from "./BrickBreakerLevelInfo";
import { BrickBreakerActivityStageInfo } from "./BrickBreakerActivityStageInfo";
/**
 * @generated from protobuf message BrickBreakerDetailInfo
 */
export interface BrickBreakerDetailInfo {
    /**
     * @generated from protobuf field: repeated BrickBreakerActivityStageInfo stage_info_list = 13;
     */
    stageInfoList: BrickBreakerActivityStageInfo[];
    /**
     * @generated from protobuf field: repeated BrickBreakerLevelInfo Unk3300_AIEGOACOINO = 9 [json_name = "Unk3300AIEGOACOINO"];
     */
    unk3300AIEGOACOINO: BrickBreakerLevelInfo[];
    /**
     * @generated from protobuf field: repeated BrickBreakerLevelInfo Unk3300_BCHEELFPNCD = 11 [json_name = "Unk3300BCHEELFPNCD"];
     */
    unk3300BCHEELFPNCD: BrickBreakerLevelInfo[];
    /**
     * @generated from protobuf field: map<uint32, uint32> skill_info_map = 1;
     */
    skillInfoMap: {
        [key: number]: number;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class BrickBreakerDetailInfo$Type extends MessageType<BrickBreakerDetailInfo> {
    constructor() {
        super("BrickBreakerDetailInfo", [
            { no: 13, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BrickBreakerActivityStageInfo },
            { no: 9, name: "Unk3300_AIEGOACOINO", kind: "message", jsonName: "Unk3300AIEGOACOINO", repeat: 1 /*RepeatType.PACKED*/, T: () => BrickBreakerLevelInfo },
            { no: 11, name: "Unk3300_BCHEELFPNCD", kind: "message", jsonName: "Unk3300BCHEELFPNCD", repeat: 1 /*RepeatType.PACKED*/, T: () => BrickBreakerLevelInfo },
            { no: 1, name: "skill_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<BrickBreakerDetailInfo>): BrickBreakerDetailInfo {
        const message = { stageInfoList: [], unk3300AIEGOACOINO: [], unk3300BCHEELFPNCD: [], skillInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BrickBreakerDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BrickBreakerDetailInfo): BrickBreakerDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated BrickBreakerActivityStageInfo stage_info_list */ 13:
                    message.stageInfoList.push(BrickBreakerActivityStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated BrickBreakerLevelInfo Unk3300_AIEGOACOINO = 9 [json_name = "Unk3300AIEGOACOINO"];*/ 9:
                    message.unk3300AIEGOACOINO.push(BrickBreakerLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated BrickBreakerLevelInfo Unk3300_BCHEELFPNCD = 11 [json_name = "Unk3300BCHEELFPNCD"];*/ 11:
                    message.unk3300BCHEELFPNCD.push(BrickBreakerLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, uint32> skill_info_map */ 1:
                    this.binaryReadMap1(message.skillInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: BrickBreakerDetailInfo["skillInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BrickBreakerDetailInfo["skillInfoMap"] | undefined, val: BrickBreakerDetailInfo["skillInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field BrickBreakerDetailInfo.skill_info_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BrickBreakerDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated BrickBreakerActivityStageInfo stage_info_list = 13; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            BrickBreakerActivityStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated BrickBreakerLevelInfo Unk3300_AIEGOACOINO = 9 [json_name = "Unk3300AIEGOACOINO"]; */
        for (let i = 0; i < message.unk3300AIEGOACOINO.length; i++)
            BrickBreakerLevelInfo.internalBinaryWrite(message.unk3300AIEGOACOINO[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated BrickBreakerLevelInfo Unk3300_BCHEELFPNCD = 11 [json_name = "Unk3300BCHEELFPNCD"]; */
        for (let i = 0; i < message.unk3300BCHEELFPNCD.length; i++)
            BrickBreakerLevelInfo.internalBinaryWrite(message.unk3300BCHEELFPNCD[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> skill_info_map = 1; */
        for (let k of Object.keys(message.skillInfoMap))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skillInfoMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BrickBreakerDetailInfo
 */
export const BrickBreakerDetailInfo = new BrickBreakerDetailInfo$Type();
