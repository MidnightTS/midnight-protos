/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EntityRendererChangedInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class EntityRendererChangedInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        changed_renderers?: Map<string, number>;
        visibility_count?: number;
        is_cached?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("changed_renderers" in data && data.changed_renderers != undefined) {
                this.changed_renderers = data.changed_renderers;
            }
            if ("visibility_count" in data && data.visibility_count != undefined) {
                this.visibility_count = data.visibility_count;
            }
            if ("is_cached" in data && data.is_cached != undefined) {
                this.is_cached = data.is_cached;
            }
        }
        if (!this.changed_renderers)
            this.changed_renderers = new Map();
    }
    get changed_renderers() {
        return pb_1.Message.getField(this, 1) as any as Map<string, number>;
    }
    set changed_renderers(value: Map<string, number>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    get visibility_count() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set visibility_count(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get is_cached() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_cached(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        changed_renderers?: {
            [key: string]: number;
        };
        visibility_count?: number;
        is_cached?: boolean;
    }): EntityRendererChangedInfo {
        const message = new EntityRendererChangedInfo({});
        if (typeof data.changed_renderers == "object") {
            message.changed_renderers = new Map(Object.entries(data.changed_renderers));
        }
        if (data.visibility_count != null) {
            message.visibility_count = data.visibility_count;
        }
        if (data.is_cached != null) {
            message.is_cached = data.is_cached;
        }
        return message;
    }
    toObject() {
        const data: {
            changed_renderers?: {
                [key: string]: number;
            };
            visibility_count?: number;
            is_cached?: boolean;
        } = {};
        if (this.changed_renderers.size > 0) {
            data.changed_renderers = (Object.fromEntries)(this.changed_renderers);
        }
        if (this.visibility_count != null) {
            data.visibility_count = this.visibility_count;
        }
        if (this.is_cached != null) {
            data.is_cached = this.is_cached;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.changed_renderers) {
            writer.writeMessage(1, this.changed_renderers, () => {
                writer.writeString(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.visibility_count != 0)
            writer.writeUint32(2, this.visibility_count);
        if (this.is_cached != false)
            writer.writeBool(3, this.is_cached);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EntityRendererChangedInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EntityRendererChangedInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.changed_renderers as any, reader, reader.readString, reader.readUint32));
                    break;
                case 2:
                    message.visibility_count = reader.readUint32();
                    break;
                case 3:
                    message.is_cached = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EntityRendererChangedInfo {
        return EntityRendererChangedInfo.deserialize(bytes);
    }
}
