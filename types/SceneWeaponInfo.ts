// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "SceneWeaponInfo.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EntityRendererChangedInfo } from "./EntityRendererChangedInfo";
import { AbilitySyncStateInfo } from "./AbilitySyncStateInfo";
/**
 * @generated from protobuf message com.midnights.game.SceneWeaponInfo
 */
export interface SceneWeaponInfo {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 2;
     */
    gadgetId?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 3;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional uint64 guid = 4;
     */
    guid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 level = 5;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 promote_level = 6;
     */
    promoteLevel?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilitySyncStateInfo ability_info = 7;
     */
    abilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: map<uint32, uint32> affix_map = 8;
     */
    affixMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional com.midnights.game.EntityRendererChangedInfo renderer_changed_info = 9;
     */
    rendererChangedInfo?: EntityRendererChangedInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class SceneWeaponInfo$Type extends MessageType<SceneWeaponInfo> {
    constructor() {
        super("com.midnights.game.SceneWeaponInfo", [
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "promote_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 8, name: "affix_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 9, name: "renderer_changed_info", kind: "message", T: () => EntityRendererChangedInfo }
        ]);
    }
    create(value?: PartialMessage<SceneWeaponInfo>): SceneWeaponInfo {
        const message = { affixMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneWeaponInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneWeaponInfo): SceneWeaponInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 1:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 gadget_id */ 2:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 3:
                    message.itemId = reader.uint32();
                    break;
                case /* optional uint64 guid */ 4:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 level */ 5:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 promote_level */ 6:
                    message.promoteLevel = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilitySyncStateInfo ability_info */ 7:
                    message.abilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.abilityInfo);
                    break;
                case /* map<uint32, uint32> affix_map */ 8:
                    this.binaryReadMap8(message.affixMap, reader, options);
                    break;
                case /* optional com.midnights.game.EntityRendererChangedInfo renderer_changed_info */ 9:
                    message.rendererChangedInfo = EntityRendererChangedInfo.internalBinaryRead(reader, reader.uint32(), options, message.rendererChangedInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: SceneWeaponInfo["affixMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneWeaponInfo["affixMap"] | undefined, val: SceneWeaponInfo["affixMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneWeaponInfo.affix_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SceneWeaponInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entityId);
        /* optional uint32 gadget_id = 2; */
        if (message.gadgetId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gadgetId);
        /* optional uint32 item_id = 3; */
        if (message.itemId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.itemId);
        /* optional uint64 guid = 4; */
        if (message.guid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.guid);
        /* optional uint32 level = 5; */
        if (message.level !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.level);
        /* optional uint32 promote_level = 6; */
        if (message.promoteLevel !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.promoteLevel);
        /* optional com.midnights.game.AbilitySyncStateInfo ability_info = 7; */
        if (message.abilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.abilityInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> affix_map = 8; */
        for (let k of Object.keys(message.affixMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.affixMap[k as any]).join();
        /* optional com.midnights.game.EntityRendererChangedInfo renderer_changed_info = 9; */
        if (message.rendererChangedInfo)
            EntityRendererChangedInfo.internalBinaryWrite(message.rendererChangedInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneWeaponInfo
 */
export const SceneWeaponInfo = new SceneWeaponInfo$Type();
