// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_battle_pass.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.BattlePassCycle
 */
export interface BattlePassCycle {
    /**
     * @generated from protobuf field: optional uint32 cycle_idx = 3;
     */
    cycleIdx?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 10;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 13;
     */
    beginTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassMission
 */
export interface BattlePassMission {
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 13;
     */
    curProgress?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassMission.MissionStatus mission_status = 15;
     */
    missionStatus?: BattlePassMission_MissionStatus;
    /**
     * @generated from protobuf field: optional uint32 mission_id = 11;
     */
    missionId?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_battle_pass_point = 3;
     */
    rewardBattlePassPoint?: number;
    /**
     * @generated from protobuf field: optional uint32 mission_type = 12;
     */
    missionType?: number;
    /**
     * @generated from protobuf field: optional uint32 total_progress = 6;
     */
    totalProgress?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassMission.MissionStatus
 */
export enum BattlePassMission_MissionStatus {
    /**
     * @generated from protobuf enum value: MISSION_INVALID = 0;
     */
    MISSION_INVALID = 0,
    /**
     * @generated from protobuf enum value: MISSION_UNFINISHED = 1;
     */
    MISSION_UNFINISHED = 1,
    /**
     * @generated from protobuf enum value: MISSION_FINISHED = 2;
     */
    MISSION_FINISHED = 2,
    /**
     * @generated from protobuf enum value: MISSION_POINT_TAKEN = 3;
     */
    MISSION_POINT_TAKEN = 3
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassRewardTag
 */
export interface BattlePassRewardTag {
    /**
     * @generated from protobuf field: optional uint32 level = 4;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassUnlockStatus unlock_status = 2;
     */
    unlockStatus?: BattlePassUnlockStatus;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 7;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassProduct
 */
export interface BattlePassProduct {
    /**
     * @generated from protobuf field: optional string normal_product_id = 13;
     */
    normalProductId?: string;
    /**
     * @generated from protobuf field: optional string extra_product_id = 10;
     */
    extraProductId?: string;
    /**
     * @generated from protobuf field: optional string upgrade_product_id = 6;
     */
    upgradeProductId?: string;
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassSchedule
 */
export interface BattlePassSchedule {
    /**
     * @generated from protobuf field: optional uint32 level = 14;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 2;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 15;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 point = 1;
     */
    point?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassCycle cur_cycle = 4;
     */
    curCycle?: BattlePassCycle;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassUnlockStatus unlock_status = 7;
     */
    unlockStatus?: BattlePassUnlockStatus;
    /**
     * @generated from protobuf field: repeated com.midnights.game.BattlePassRewardTag reward_taken_list = 11;
     */
    rewardTakenList: BattlePassRewardTag[];
    /**
     * @generated from protobuf field: optional uint32 cur_cycle_points = 10;
     */
    curCyclePoints?: number;
    /**
     * @generated from protobuf field: optional uint32 paid_platform_flags = 12;
     */
    paidPlatformFlags?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassProduct product_info = 13;
     */
    productInfo?: BattlePassProduct;
    /**
     * @generated from protobuf field: optional bool is_extra_paid_reward_taken = 6;
     */
    isExtraPaidRewardTaken?: boolean;
    /**
     * @generated from protobuf field: optional bool is_viewed = 3;
     */
    isViewed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 9;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassAllDataNotify
 */
export interface BattlePassAllDataNotify {
    /**
     * @generated from protobuf field: optional bool have_cur_schedule = 2;
     */
    haveCurSchedule?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.BattlePassMission mission_list = 4;
     */
    missionList: BattlePassMission[];
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassSchedule cur_schedule = 1;
     */
    curSchedule?: BattlePassSchedule;
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassAllDataNotify.CmdId
 */
export enum BattlePassAllDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2626;
     */
    CMD_ID = 2626,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassMissionUpdateNotify
 */
export interface BattlePassMissionUpdateNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BattlePassMission mission_list = 1;
     */
    missionList: BattlePassMission[];
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassMissionUpdateNotify.CmdId
 */
export enum BattlePassMissionUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2618;
     */
    CMD_ID = 2618,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassMissionDelNotify
 */
export interface BattlePassMissionDelNotify {
    /**
     * @generated from protobuf field: repeated uint32 del_mission_id_list = 10;
     */
    delMissionIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassMissionDelNotify.CmdId
 */
export enum BattlePassMissionDelNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2625;
     */
    CMD_ID = 2625,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassCurScheduleUpdateNotify
 */
export interface BattlePassCurScheduleUpdateNotify {
    /**
     * @generated from protobuf field: optional bool have_cur_schedule = 11;
     */
    haveCurSchedule?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassSchedule cur_schedule = 1;
     */
    curSchedule?: BattlePassSchedule;
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassCurScheduleUpdateNotify.CmdId
 */
export enum BattlePassCurScheduleUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2607;
     */
    CMD_ID = 2607,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassRewardTakeOption
 */
export interface BattlePassRewardTakeOption {
    /**
     * @generated from protobuf field: optional com.midnights.game.BattlePassRewardTag tag = 10;
     */
    tag?: BattlePassRewardTag;
    /**
     * @generated from protobuf field: optional uint32 option_idx = 14;
     */
    optionIdx?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TakeBattlePassRewardReq
 */
export interface TakeBattlePassRewardReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BattlePassRewardTakeOption take_option_list = 12;
     */
    takeOptionList: BattlePassRewardTakeOption[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBattlePassRewardReq.CmdId
 */
export enum TakeBattlePassRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2602;
     */
    CMD_ID = 2602,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeBattlePassRewardRsp
 */
export interface TakeBattlePassRewardRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 7;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.BattlePassRewardTakeOption take_option_list = 9;
     */
    takeOptionList: BattlePassRewardTakeOption[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBattlePassRewardRsp.CmdId
 */
export enum TakeBattlePassRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2631;
     */
    CMD_ID = 2631,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeBattlePassMissionPointReq
 */
export interface TakeBattlePassMissionPointReq {
    /**
     * @generated from protobuf field: repeated uint32 mission_id_list = 5;
     */
    missionIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBattlePassMissionPointReq.CmdId
 */
export enum TakeBattlePassMissionPointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2629;
     */
    CMD_ID = 2629,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeBattlePassMissionPointRsp
 */
export interface TakeBattlePassMissionPointRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 mission_id_list = 11;
     */
    missionIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBattlePassMissionPointRsp.CmdId
 */
export enum TakeBattlePassMissionPointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2622;
     */
    CMD_ID = 2622,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetBattlePassProductReq
 */
export interface GetBattlePassProductReq {
    /**
     * @generated from protobuf field: optional uint32 battle_pass_product_play_type = 10;
     */
    battlePassProductPlayType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetBattlePassProductReq.CmdId
 */
export enum GetBattlePassProductReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2644;
     */
    CMD_ID = 2644,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetBattlePassProductRsp
 */
export interface GetBattlePassProductRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional string price_tier = 6;
     */
    priceTier?: string;
    /**
     * @generated from protobuf field: optional uint32 battle_pass_product_play_type = 2;
     */
    battlePassProductPlayType?: number;
    /**
     * @generated from protobuf field: optional string product_id = 1;
     */
    productId?: string;
    /**
     * @generated from protobuf field: optional uint32 cur_schedule_id = 11;
     */
    curScheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetBattlePassProductRsp.CmdId
 */
export enum GetBattlePassProductRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2649;
     */
    CMD_ID = 2649,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetBattlePassViewedReq
 */
export interface SetBattlePassViewedReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 6;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetBattlePassViewedReq.CmdId
 */
export enum SetBattlePassViewedReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2641;
     */
    CMD_ID = 2641,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetBattlePassViewedRsp
 */
export interface SetBattlePassViewedRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 2;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetBattlePassViewedRsp.CmdId
 */
export enum SetBattlePassViewedRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2642;
     */
    CMD_ID = 2642,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BattlePassBuySuccNotify
 */
export interface BattlePassBuySuccNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 4;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 product_play_type = 11;
     */
    productPlayType?: number;
    /**
     * @generated from protobuf field: optional uint32 add_point = 12;
     */
    addPoint?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 9;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassBuySuccNotify.CmdId
 */
export enum BattlePassBuySuccNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2614;
     */
    CMD_ID = 2614,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuyBattlePassLevelReq
 */
export interface BuyBattlePassLevelReq {
    /**
     * @generated from protobuf field: optional uint32 buy_level = 8;
     */
    buyLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BuyBattlePassLevelReq.CmdId
 */
export enum BuyBattlePassLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2647;
     */
    CMD_ID = 2647,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuyBattlePassLevelRsp
 */
export interface BuyBattlePassLevelRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 buy_level = 13;
     */
    buyLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BuyBattlePassLevelRsp.CmdId
 */
export enum BuyBattlePassLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2637;
     */
    CMD_ID = 2637,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.BattlePassUnlockStatus
 */
export enum BattlePassUnlockStatus {
    /**
     * @generated from protobuf enum value: BATTLE_PASS_UNLOCK_INVALID = 0;
     */
    BATTLE_PASS_UNLOCK_INVALID = 0,
    /**
     * @generated from protobuf enum value: BATTLE_PASS_UNLOCK_FREE = 1;
     */
    BATTLE_PASS_UNLOCK_FREE = 1,
    /**
     * @generated from protobuf enum value: BATTLE_PASS_UNLOCK_PAID = 2;
     */
    BATTLE_PASS_UNLOCK_PAID = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassCycle$Type extends MessageType<BattlePassCycle> {
    constructor() {
        super("com.midnights.game.BattlePassCycle", [
            { no: 3, name: "cycle_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassCycle>): BattlePassCycle {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassCycle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassCycle): BattlePassCycle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cycle_idx */ 3:
                    message.cycleIdx = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 10:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 13:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassCycle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cycle_idx = 3; */
        if (message.cycleIdx !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cycleIdx);
        /* optional uint32 end_time = 10; */
        if (message.endTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.endTime);
        /* optional uint32 begin_time = 13; */
        if (message.beginTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassCycle
 */
export const BattlePassCycle = new BattlePassCycle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassMission$Type extends MessageType<BattlePassMission> {
    constructor() {
        super("com.midnights.game.BattlePassMission", [
            { no: 13, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mission_status", kind: "enum", opt: true, T: () => ["com.midnights.game.BattlePassMission.MissionStatus", BattlePassMission_MissionStatus] },
            { no: 11, name: "mission_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reward_battle_pass_point", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "mission_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassMission>): BattlePassMission {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassMission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassMission): BattlePassMission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_progress */ 13:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional com.midnights.game.BattlePassMission.MissionStatus mission_status */ 15:
                    message.missionStatus = reader.int32();
                    break;
                case /* optional uint32 mission_id */ 11:
                    message.missionId = reader.uint32();
                    break;
                case /* optional uint32 reward_battle_pass_point */ 3:
                    message.rewardBattlePassPoint = reader.uint32();
                    break;
                case /* optional uint32 mission_type */ 12:
                    message.missionType = reader.uint32();
                    break;
                case /* optional uint32 total_progress */ 6:
                    message.totalProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassMission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_progress = 13; */
        if (message.curProgress !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.curProgress);
        /* optional com.midnights.game.BattlePassMission.MissionStatus mission_status = 15; */
        if (message.missionStatus !== undefined)
            writer.tag(15, WireType.Varint).int32(message.missionStatus);
        /* optional uint32 mission_id = 11; */
        if (message.missionId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.missionId);
        /* optional uint32 reward_battle_pass_point = 3; */
        if (message.rewardBattlePassPoint !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.rewardBattlePassPoint);
        /* optional uint32 mission_type = 12; */
        if (message.missionType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.missionType);
        /* optional uint32 total_progress = 6; */
        if (message.totalProgress !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.totalProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassMission
 */
export const BattlePassMission = new BattlePassMission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassRewardTag$Type extends MessageType<BattlePassRewardTag> {
    constructor() {
        super("com.midnights.game.BattlePassRewardTag", [
            { no: 4, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unlock_status", kind: "enum", opt: true, T: () => ["com.midnights.game.BattlePassUnlockStatus", BattlePassUnlockStatus] },
            { no: 7, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassRewardTag>): BattlePassRewardTag {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassRewardTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassRewardTag): BattlePassRewardTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 4:
                    message.level = reader.uint32();
                    break;
                case /* optional com.midnights.game.BattlePassUnlockStatus unlock_status */ 2:
                    message.unlockStatus = reader.int32();
                    break;
                case /* optional uint32 reward_id */ 7:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassRewardTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.level);
        /* optional com.midnights.game.BattlePassUnlockStatus unlock_status = 2; */
        if (message.unlockStatus !== undefined)
            writer.tag(2, WireType.Varint).int32(message.unlockStatus);
        /* optional uint32 reward_id = 7; */
        if (message.rewardId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassRewardTag
 */
export const BattlePassRewardTag = new BattlePassRewardTag$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassProduct$Type extends MessageType<BattlePassProduct> {
    constructor() {
        super("com.midnights.game.BattlePassProduct", [
            { no: 13, name: "normal_product_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "extra_product_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "upgrade_product_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassProduct>): BattlePassProduct {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassProduct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassProduct): BattlePassProduct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string normal_product_id */ 13:
                    message.normalProductId = reader.string();
                    break;
                case /* optional string extra_product_id */ 10:
                    message.extraProductId = reader.string();
                    break;
                case /* optional string upgrade_product_id */ 6:
                    message.upgradeProductId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassProduct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string normal_product_id = 13; */
        if (message.normalProductId !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.normalProductId);
        /* optional string extra_product_id = 10; */
        if (message.extraProductId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.extraProductId);
        /* optional string upgrade_product_id = 6; */
        if (message.upgradeProductId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.upgradeProductId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassProduct
 */
export const BattlePassProduct = new BattlePassProduct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassSchedule$Type extends MessageType<BattlePassSchedule> {
    constructor() {
        super("com.midnights.game.BattlePassSchedule", [
            { no: 14, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "point", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_cycle", kind: "message", T: () => BattlePassCycle },
            { no: 7, name: "unlock_status", kind: "enum", opt: true, T: () => ["com.midnights.game.BattlePassUnlockStatus", BattlePassUnlockStatus] },
            { no: 11, name: "reward_taken_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BattlePassRewardTag },
            { no: 10, name: "cur_cycle_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "paid_platform_flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "product_info", kind: "message", T: () => BattlePassProduct },
            { no: 6, name: "is_extra_paid_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_viewed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassSchedule>): BattlePassSchedule {
        const message = { rewardTakenList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassSchedule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassSchedule): BattlePassSchedule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 14:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 2:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 15:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 point */ 1:
                    message.point = reader.uint32();
                    break;
                case /* optional com.midnights.game.BattlePassCycle cur_cycle */ 4:
                    message.curCycle = BattlePassCycle.internalBinaryRead(reader, reader.uint32(), options, message.curCycle);
                    break;
                case /* optional com.midnights.game.BattlePassUnlockStatus unlock_status */ 7:
                    message.unlockStatus = reader.int32();
                    break;
                case /* repeated com.midnights.game.BattlePassRewardTag reward_taken_list */ 11:
                    message.rewardTakenList.push(BattlePassRewardTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_cycle_points */ 10:
                    message.curCyclePoints = reader.uint32();
                    break;
                case /* optional uint32 paid_platform_flags */ 12:
                    message.paidPlatformFlags = reader.uint32();
                    break;
                case /* optional com.midnights.game.BattlePassProduct product_info */ 13:
                    message.productInfo = BattlePassProduct.internalBinaryRead(reader, reader.uint32(), options, message.productInfo);
                    break;
                case /* optional bool is_extra_paid_reward_taken */ 6:
                    message.isExtraPaidRewardTaken = reader.bool();
                    break;
                case /* optional bool is_viewed */ 3:
                    message.isViewed = reader.bool();
                    break;
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassSchedule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 14; */
        if (message.level !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.level);
        /* optional uint32 begin_time = 2; */
        if (message.beginTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.beginTime);
        /* optional uint32 end_time = 15; */
        if (message.endTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.endTime);
        /* optional uint32 point = 1; */
        if (message.point !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.point);
        /* optional com.midnights.game.BattlePassCycle cur_cycle = 4; */
        if (message.curCycle)
            BattlePassCycle.internalBinaryWrite(message.curCycle, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.BattlePassUnlockStatus unlock_status = 7; */
        if (message.unlockStatus !== undefined)
            writer.tag(7, WireType.Varint).int32(message.unlockStatus);
        /* repeated com.midnights.game.BattlePassRewardTag reward_taken_list = 11; */
        for (let i = 0; i < message.rewardTakenList.length; i++)
            BattlePassRewardTag.internalBinaryWrite(message.rewardTakenList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_cycle_points = 10; */
        if (message.curCyclePoints !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.curCyclePoints);
        /* optional uint32 paid_platform_flags = 12; */
        if (message.paidPlatformFlags !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.paidPlatformFlags);
        /* optional com.midnights.game.BattlePassProduct product_info = 13; */
        if (message.productInfo)
            BattlePassProduct.internalBinaryWrite(message.productInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_extra_paid_reward_taken = 6; */
        if (message.isExtraPaidRewardTaken !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isExtraPaidRewardTaken);
        /* optional bool is_viewed = 3; */
        if (message.isViewed !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isViewed);
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassSchedule
 */
export const BattlePassSchedule = new BattlePassSchedule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassAllDataNotify$Type extends MessageType<BattlePassAllDataNotify> {
    constructor() {
        super("com.midnights.game.BattlePassAllDataNotify", [
            { no: 2, name: "have_cur_schedule", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "mission_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BattlePassMission },
            { no: 1, name: "cur_schedule", kind: "message", T: () => BattlePassSchedule }
        ]);
    }
    create(value?: PartialMessage<BattlePassAllDataNotify>): BattlePassAllDataNotify {
        const message = { missionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassAllDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassAllDataNotify): BattlePassAllDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool have_cur_schedule */ 2:
                    message.haveCurSchedule = reader.bool();
                    break;
                case /* repeated com.midnights.game.BattlePassMission mission_list */ 4:
                    message.missionList.push(BattlePassMission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.BattlePassSchedule cur_schedule */ 1:
                    message.curSchedule = BattlePassSchedule.internalBinaryRead(reader, reader.uint32(), options, message.curSchedule);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassAllDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool have_cur_schedule = 2; */
        if (message.haveCurSchedule !== undefined)
            writer.tag(2, WireType.Varint).bool(message.haveCurSchedule);
        /* repeated com.midnights.game.BattlePassMission mission_list = 4; */
        for (let i = 0; i < message.missionList.length; i++)
            BattlePassMission.internalBinaryWrite(message.missionList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.BattlePassSchedule cur_schedule = 1; */
        if (message.curSchedule)
            BattlePassSchedule.internalBinaryWrite(message.curSchedule, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassAllDataNotify
 */
export const BattlePassAllDataNotify = new BattlePassAllDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassMissionUpdateNotify$Type extends MessageType<BattlePassMissionUpdateNotify> {
    constructor() {
        super("com.midnights.game.BattlePassMissionUpdateNotify", [
            { no: 1, name: "mission_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BattlePassMission }
        ]);
    }
    create(value?: PartialMessage<BattlePassMissionUpdateNotify>): BattlePassMissionUpdateNotify {
        const message = { missionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassMissionUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassMissionUpdateNotify): BattlePassMissionUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BattlePassMission mission_list */ 1:
                    message.missionList.push(BattlePassMission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassMissionUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BattlePassMission mission_list = 1; */
        for (let i = 0; i < message.missionList.length; i++)
            BattlePassMission.internalBinaryWrite(message.missionList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassMissionUpdateNotify
 */
export const BattlePassMissionUpdateNotify = new BattlePassMissionUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassMissionDelNotify$Type extends MessageType<BattlePassMissionDelNotify> {
    constructor() {
        super("com.midnights.game.BattlePassMissionDelNotify", [
            { no: 10, name: "del_mission_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassMissionDelNotify>): BattlePassMissionDelNotify {
        const message = { delMissionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassMissionDelNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassMissionDelNotify): BattlePassMissionDelNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 del_mission_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.delMissionIdList.push(reader.uint32());
                    else
                        message.delMissionIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassMissionDelNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 del_mission_id_list = 10; */
        for (let i = 0; i < message.delMissionIdList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.delMissionIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassMissionDelNotify
 */
export const BattlePassMissionDelNotify = new BattlePassMissionDelNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassCurScheduleUpdateNotify$Type extends MessageType<BattlePassCurScheduleUpdateNotify> {
    constructor() {
        super("com.midnights.game.BattlePassCurScheduleUpdateNotify", [
            { no: 11, name: "have_cur_schedule", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "cur_schedule", kind: "message", T: () => BattlePassSchedule }
        ]);
    }
    create(value?: PartialMessage<BattlePassCurScheduleUpdateNotify>): BattlePassCurScheduleUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassCurScheduleUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassCurScheduleUpdateNotify): BattlePassCurScheduleUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool have_cur_schedule */ 11:
                    message.haveCurSchedule = reader.bool();
                    break;
                case /* optional com.midnights.game.BattlePassSchedule cur_schedule */ 1:
                    message.curSchedule = BattlePassSchedule.internalBinaryRead(reader, reader.uint32(), options, message.curSchedule);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassCurScheduleUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool have_cur_schedule = 11; */
        if (message.haveCurSchedule !== undefined)
            writer.tag(11, WireType.Varint).bool(message.haveCurSchedule);
        /* optional com.midnights.game.BattlePassSchedule cur_schedule = 1; */
        if (message.curSchedule)
            BattlePassSchedule.internalBinaryWrite(message.curSchedule, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassCurScheduleUpdateNotify
 */
export const BattlePassCurScheduleUpdateNotify = new BattlePassCurScheduleUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassRewardTakeOption$Type extends MessageType<BattlePassRewardTakeOption> {
    constructor() {
        super("com.midnights.game.BattlePassRewardTakeOption", [
            { no: 10, name: "tag", kind: "message", T: () => BattlePassRewardTag },
            { no: 14, name: "option_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BattlePassRewardTakeOption>): BattlePassRewardTakeOption {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassRewardTakeOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassRewardTakeOption): BattlePassRewardTakeOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.BattlePassRewardTag tag */ 10:
                    message.tag = BattlePassRewardTag.internalBinaryRead(reader, reader.uint32(), options, message.tag);
                    break;
                case /* optional uint32 option_idx */ 14:
                    message.optionIdx = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassRewardTakeOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.BattlePassRewardTag tag = 10; */
        if (message.tag)
            BattlePassRewardTag.internalBinaryWrite(message.tag, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 option_idx = 14; */
        if (message.optionIdx !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.optionIdx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassRewardTakeOption
 */
export const BattlePassRewardTakeOption = new BattlePassRewardTakeOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBattlePassRewardReq$Type extends MessageType<TakeBattlePassRewardReq> {
    constructor() {
        super("com.midnights.game.TakeBattlePassRewardReq", [
            { no: 12, name: "take_option_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BattlePassRewardTakeOption }
        ]);
    }
    create(value?: PartialMessage<TakeBattlePassRewardReq>): TakeBattlePassRewardReq {
        const message = { takeOptionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBattlePassRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBattlePassRewardReq): TakeBattlePassRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BattlePassRewardTakeOption take_option_list */ 12:
                    message.takeOptionList.push(BattlePassRewardTakeOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBattlePassRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BattlePassRewardTakeOption take_option_list = 12; */
        for (let i = 0; i < message.takeOptionList.length; i++)
            BattlePassRewardTakeOption.internalBinaryWrite(message.takeOptionList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBattlePassRewardReq
 */
export const TakeBattlePassRewardReq = new TakeBattlePassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBattlePassRewardRsp$Type extends MessageType<TakeBattlePassRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeBattlePassRewardRsp", [
            { no: 7, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "take_option_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BattlePassRewardTakeOption }
        ]);
    }
    create(value?: PartialMessage<TakeBattlePassRewardRsp>): TakeBattlePassRewardRsp {
        const message = { itemList: [], takeOptionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBattlePassRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBattlePassRewardRsp): TakeBattlePassRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 7:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.BattlePassRewardTakeOption take_option_list */ 9:
                    message.takeOptionList.push(BattlePassRewardTakeOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBattlePassRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 7; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.BattlePassRewardTakeOption take_option_list = 9; */
        for (let i = 0; i < message.takeOptionList.length; i++)
            BattlePassRewardTakeOption.internalBinaryWrite(message.takeOptionList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBattlePassRewardRsp
 */
export const TakeBattlePassRewardRsp = new TakeBattlePassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBattlePassMissionPointReq$Type extends MessageType<TakeBattlePassMissionPointReq> {
    constructor() {
        super("com.midnights.game.TakeBattlePassMissionPointReq", [
            { no: 5, name: "mission_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeBattlePassMissionPointReq>): TakeBattlePassMissionPointReq {
        const message = { missionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBattlePassMissionPointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBattlePassMissionPointReq): TakeBattlePassMissionPointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 mission_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.missionIdList.push(reader.uint32());
                    else
                        message.missionIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBattlePassMissionPointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 mission_id_list = 5; */
        for (let i = 0; i < message.missionIdList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.missionIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBattlePassMissionPointReq
 */
export const TakeBattlePassMissionPointReq = new TakeBattlePassMissionPointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBattlePassMissionPointRsp$Type extends MessageType<TakeBattlePassMissionPointRsp> {
    constructor() {
        super("com.midnights.game.TakeBattlePassMissionPointRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "mission_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeBattlePassMissionPointRsp>): TakeBattlePassMissionPointRsp {
        const message = { missionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBattlePassMissionPointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBattlePassMissionPointRsp): TakeBattlePassMissionPointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 mission_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.missionIdList.push(reader.uint32());
                    else
                        message.missionIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBattlePassMissionPointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* repeated uint32 mission_id_list = 11; */
        for (let i = 0; i < message.missionIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.missionIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBattlePassMissionPointRsp
 */
export const TakeBattlePassMissionPointRsp = new TakeBattlePassMissionPointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBattlePassProductReq$Type extends MessageType<GetBattlePassProductReq> {
    constructor() {
        super("com.midnights.game.GetBattlePassProductReq", [
            { no: 10, name: "battle_pass_product_play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetBattlePassProductReq>): GetBattlePassProductReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBattlePassProductReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBattlePassProductReq): GetBattlePassProductReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 battle_pass_product_play_type */ 10:
                    message.battlePassProductPlayType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBattlePassProductReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 battle_pass_product_play_type = 10; */
        if (message.battlePassProductPlayType !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.battlePassProductPlayType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetBattlePassProductReq
 */
export const GetBattlePassProductReq = new GetBattlePassProductReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBattlePassProductRsp$Type extends MessageType<GetBattlePassProductRsp> {
    constructor() {
        super("com.midnights.game.GetBattlePassProductRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "price_tier", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "battle_pass_product_play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "product_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "cur_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetBattlePassProductRsp>): GetBattlePassProductRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetBattlePassProductRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBattlePassProductRsp): GetBattlePassProductRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional string price_tier */ 6:
                    message.priceTier = reader.string();
                    break;
                case /* optional uint32 battle_pass_product_play_type */ 2:
                    message.battlePassProductPlayType = reader.uint32();
                    break;
                case /* optional string product_id */ 1:
                    message.productId = reader.string();
                    break;
                case /* optional uint32 cur_schedule_id */ 11:
                    message.curScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBattlePassProductRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional string price_tier = 6; */
        if (message.priceTier !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.priceTier);
        /* optional uint32 battle_pass_product_play_type = 2; */
        if (message.battlePassProductPlayType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.battlePassProductPlayType);
        /* optional string product_id = 1; */
        if (message.productId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* optional uint32 cur_schedule_id = 11; */
        if (message.curScheduleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.curScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetBattlePassProductRsp
 */
export const GetBattlePassProductRsp = new GetBattlePassProductRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBattlePassViewedReq$Type extends MessageType<SetBattlePassViewedReq> {
    constructor() {
        super("com.midnights.game.SetBattlePassViewedReq", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetBattlePassViewedReq>): SetBattlePassViewedReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBattlePassViewedReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBattlePassViewedReq): SetBattlePassViewedReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBattlePassViewedReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetBattlePassViewedReq
 */
export const SetBattlePassViewedReq = new SetBattlePassViewedReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBattlePassViewedRsp$Type extends MessageType<SetBattlePassViewedRsp> {
    constructor() {
        super("com.midnights.game.SetBattlePassViewedRsp", [
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetBattlePassViewedRsp>): SetBattlePassViewedRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetBattlePassViewedRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBattlePassViewedRsp): SetBattlePassViewedRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBattlePassViewedRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetBattlePassViewedRsp
 */
export const SetBattlePassViewedRsp = new SetBattlePassViewedRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BattlePassBuySuccNotify$Type extends MessageType<BattlePassBuySuccNotify> {
    constructor() {
        super("com.midnights.game.BattlePassBuySuccNotify", [
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "product_play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "add_point", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<BattlePassBuySuccNotify>): BattlePassBuySuccNotify {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BattlePassBuySuccNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BattlePassBuySuccNotify): BattlePassBuySuccNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 product_play_type */ 11:
                    message.productPlayType = reader.uint32();
                    break;
                case /* optional uint32 add_point */ 12:
                    message.addPoint = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 9:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BattlePassBuySuccNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 product_play_type = 11; */
        if (message.productPlayType !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.productPlayType);
        /* optional uint32 add_point = 12; */
        if (message.addPoint !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.addPoint);
        /* repeated com.midnights.game.ItemParam item_list = 9; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BattlePassBuySuccNotify
 */
export const BattlePassBuySuccNotify = new BattlePassBuySuccNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuyBattlePassLevelReq$Type extends MessageType<BuyBattlePassLevelReq> {
    constructor() {
        super("com.midnights.game.BuyBattlePassLevelReq", [
            { no: 8, name: "buy_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BuyBattlePassLevelReq>): BuyBattlePassLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuyBattlePassLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuyBattlePassLevelReq): BuyBattlePassLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buy_level */ 8:
                    message.buyLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuyBattlePassLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 buy_level = 8; */
        if (message.buyLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.buyLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuyBattlePassLevelReq
 */
export const BuyBattlePassLevelReq = new BuyBattlePassLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuyBattlePassLevelRsp$Type extends MessageType<BuyBattlePassLevelRsp> {
    constructor() {
        super("com.midnights.game.BuyBattlePassLevelRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "buy_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BuyBattlePassLevelRsp>): BuyBattlePassLevelRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuyBattlePassLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuyBattlePassLevelRsp): BuyBattlePassLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 buy_level */ 13:
                    message.buyLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuyBattlePassLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 buy_level = 13; */
        if (message.buyLevel !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.buyLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuyBattlePassLevelRsp
 */
export const BuyBattlePassLevelRsp = new BuyBattlePassLevelRsp$Type();
