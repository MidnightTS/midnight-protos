/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WaterSpiritActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class WaterSpiritActivityDetailInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        search_time_map?: Map<number, number>;
        region_search_id?: number;
        mp_play_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("search_time_map" in data && data.search_time_map != undefined) {
                this.search_time_map = data.search_time_map;
            }
            if ("region_search_id" in data && data.region_search_id != undefined) {
                this.region_search_id = data.region_search_id;
            }
            if ("mp_play_id" in data && data.mp_play_id != undefined) {
                this.mp_play_id = data.mp_play_id;
            }
        }
        if (!this.search_time_map)
            this.search_time_map = new Map();
    }
    get search_time_map() {
        return pb_1.Message.getField(this, 9) as any as Map<number, number>;
    }
    set search_time_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 9, value as any);
    }
    get region_search_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set region_search_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get mp_play_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mp_play_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        search_time_map?: {
            [key: number]: number;
        };
        region_search_id?: number;
        mp_play_id?: number;
    }): WaterSpiritActivityDetailInfo {
        const message = new WaterSpiritActivityDetailInfo({});
        if (typeof data.search_time_map == "object") {
            message.search_time_map = new Map(Object.entries(data.search_time_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.region_search_id != null) {
            message.region_search_id = data.region_search_id;
        }
        if (data.mp_play_id != null) {
            message.mp_play_id = data.mp_play_id;
        }
        return message;
    }
    toObject() {
        const data: {
            search_time_map?: {
                [key: number]: number;
            };
            region_search_id?: number;
            mp_play_id?: number;
        } = {};
        if (this.search_time_map.size > 0) {
            data.search_time_map = (Object.fromEntries)(this.search_time_map);
        }
        if (this.region_search_id != null) {
            data.region_search_id = this.region_search_id;
        }
        if (this.mp_play_id != null) {
            data.mp_play_id = this.mp_play_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.search_time_map) {
            writer.writeMessage(9, this.search_time_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.region_search_id != 0)
            writer.writeUint32(2, this.region_search_id);
        if (this.mp_play_id != 0)
            writer.writeUint32(15, this.mp_play_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WaterSpiritActivityDetailInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WaterSpiritActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.search_time_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 2:
                    message.region_search_id = reader.readUint32();
                    break;
                case 15:
                    message.mp_play_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WaterSpiritActivityDetailInfo {
        return WaterSpiritActivityDetailInfo.deserialize(bytes);
    }
}
