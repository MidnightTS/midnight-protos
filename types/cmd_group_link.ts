// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_group_link.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GroupLinkBundle
 */
export interface GroupLinkBundle {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 4;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional bool is_activated = 12;
     */
    isActivated?: boolean;
    /**
     * @generated from protobuf field: optional uint32 bundle_id = 3;
     */
    bundleId?: number;
    /**
     * @generated from protobuf field: optional bool is_show_mark = 14;
     */
    isShowMark?: boolean;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 radius = 1;
     */
    radius?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GroupLinkAllNotify
 */
export interface GroupLinkAllNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GroupLinkBundle bundle_list = 5;
     */
    bundleList: GroupLinkBundle[];
}
/**
 * @generated from protobuf enum com.midnights.game.GroupLinkAllNotify.CmdId
 */
export enum GroupLinkAllNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5776;
     */
    CMD_ID = 5776,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GroupLinkChangeNotify
 */
export interface GroupLinkChangeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.GroupLinkBundle bundle = 8;
     */
    bundle?: GroupLinkBundle;
}
/**
 * @generated from protobuf enum com.midnights.game.GroupLinkChangeNotify.CmdId
 */
export enum GroupLinkChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5768;
     */
    CMD_ID = 5768,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GroupLinkDeleteNotify
 */
export interface GroupLinkDeleteNotify {
    /**
     * @generated from protobuf field: optional uint32 bundle_id = 12;
     */
    bundleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GroupLinkDeleteNotify.CmdId
 */
export enum GroupLinkDeleteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5775;
     */
    CMD_ID = 5775,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GroupLinkMarkUpdateNotify
 */
export interface GroupLinkMarkUpdateNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.GroupLinkBundle bundle = 11;
     */
    bundle?: GroupLinkBundle;
}
/**
 * @generated from protobuf enum com.midnights.game.GroupLinkMarkUpdateNotify.CmdId
 */
export enum GroupLinkMarkUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5757;
     */
    CMD_ID = 5757,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GroupLinkBundle$Type extends MessageType<GroupLinkBundle> {
    constructor() {
        super("com.midnights.game.GroupLinkBundle", [
            { no: 4, name: "center", kind: "message", T: () => Vector },
            { no: 12, name: "is_activated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_show_mark", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupLinkBundle>): GroupLinkBundle {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupLinkBundle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLinkBundle): GroupLinkBundle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector center */ 4:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional bool is_activated */ 12:
                    message.isActivated = reader.bool();
                    break;
                case /* optional uint32 bundle_id */ 3:
                    message.bundleId = reader.uint32();
                    break;
                case /* optional bool is_show_mark */ 14:
                    message.isShowMark = reader.bool();
                    break;
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 radius */ 1:
                    message.radius = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLinkBundle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector center = 4; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_activated = 12; */
        if (message.isActivated !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isActivated);
        /* optional uint32 bundle_id = 3; */
        if (message.bundleId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bundleId);
        /* optional bool is_show_mark = 14; */
        if (message.isShowMark !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isShowMark);
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 radius = 1; */
        if (message.radius !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.radius);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupLinkBundle
 */
export const GroupLinkBundle = new GroupLinkBundle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLinkAllNotify$Type extends MessageType<GroupLinkAllNotify> {
    constructor() {
        super("com.midnights.game.GroupLinkAllNotify", [
            { no: 5, name: "bundle_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GroupLinkBundle }
        ]);
    }
    create(value?: PartialMessage<GroupLinkAllNotify>): GroupLinkAllNotify {
        const message = { bundleList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupLinkAllNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLinkAllNotify): GroupLinkAllNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GroupLinkBundle bundle_list */ 5:
                    message.bundleList.push(GroupLinkBundle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLinkAllNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GroupLinkBundle bundle_list = 5; */
        for (let i = 0; i < message.bundleList.length; i++)
            GroupLinkBundle.internalBinaryWrite(message.bundleList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupLinkAllNotify
 */
export const GroupLinkAllNotify = new GroupLinkAllNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLinkChangeNotify$Type extends MessageType<GroupLinkChangeNotify> {
    constructor() {
        super("com.midnights.game.GroupLinkChangeNotify", [
            { no: 8, name: "bundle", kind: "message", T: () => GroupLinkBundle }
        ]);
    }
    create(value?: PartialMessage<GroupLinkChangeNotify>): GroupLinkChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupLinkChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLinkChangeNotify): GroupLinkChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GroupLinkBundle bundle */ 8:
                    message.bundle = GroupLinkBundle.internalBinaryRead(reader, reader.uint32(), options, message.bundle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLinkChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GroupLinkBundle bundle = 8; */
        if (message.bundle)
            GroupLinkBundle.internalBinaryWrite(message.bundle, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupLinkChangeNotify
 */
export const GroupLinkChangeNotify = new GroupLinkChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLinkDeleteNotify$Type extends MessageType<GroupLinkDeleteNotify> {
    constructor() {
        super("com.midnights.game.GroupLinkDeleteNotify", [
            { no: 12, name: "bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GroupLinkDeleteNotify>): GroupLinkDeleteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupLinkDeleteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLinkDeleteNotify): GroupLinkDeleteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 bundle_id */ 12:
                    message.bundleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLinkDeleteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 bundle_id = 12; */
        if (message.bundleId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.bundleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupLinkDeleteNotify
 */
export const GroupLinkDeleteNotify = new GroupLinkDeleteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupLinkMarkUpdateNotify$Type extends MessageType<GroupLinkMarkUpdateNotify> {
    constructor() {
        super("com.midnights.game.GroupLinkMarkUpdateNotify", [
            { no: 11, name: "bundle", kind: "message", T: () => GroupLinkBundle }
        ]);
    }
    create(value?: PartialMessage<GroupLinkMarkUpdateNotify>): GroupLinkMarkUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupLinkMarkUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupLinkMarkUpdateNotify): GroupLinkMarkUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GroupLinkBundle bundle */ 11:
                    message.bundle = GroupLinkBundle.internalBinaryRead(reader, reader.uint32(), options, message.bundle);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupLinkMarkUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GroupLinkBundle bundle = 11; */
        if (message.bundle)
            GroupLinkBundle.internalBinaryWrite(message.bundle, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GroupLinkMarkUpdateNotify
 */
export const GroupLinkMarkUpdateNotify = new GroupLinkMarkUpdateNotify$Type();
