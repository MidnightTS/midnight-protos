"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlayerGeneralMatchConfirmNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerGeneralMatchConfirmNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerGeneralMatchConfirmNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class PlayerGeneralMatchConfirmNotify extends pb_1.Message {
    constructor(data) {
        super();
        _PlayerGeneralMatchConfirmNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PlayerGeneralMatchConfirmNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("match_id" in data && data.match_id != undefined) {
                this.match_id = data.match_id;
            }
            if ("is_agree" in data && data.is_agree != undefined) {
                this.is_agree = data.is_agree;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
        }
    }
    get match_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set match_id(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_agree() {
        return pb_1.Message.getFieldWithDefault(this, 13, false);
    }
    set is_agree(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data) {
        const message = new PlayerGeneralMatchConfirmNotify({});
        if (data.match_id != null) {
            message.match_id = data.match_id;
        }
        if (data.is_agree != null) {
            message.is_agree = data.is_agree;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.match_id != null) {
            data.match_id = this.match_id;
        }
        if (this.is_agree != null) {
            data.is_agree = this.is_agree;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.match_id != 0)
            writer.writeUint32(8, this.match_id);
        if (this.is_agree != false)
            writer.writeBool(13, this.is_agree);
        if (this.uid != 0)
            writer.writeUint32(14, this.uid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerGeneralMatchConfirmNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.match_id = reader.readUint32();
                    break;
                case 13:
                    message.is_agree = reader.readBool();
                    break;
                case 14:
                    message.uid = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlayerGeneralMatchConfirmNotify.deserialize(bytes);
    }
}
exports.PlayerGeneralMatchConfirmNotify = PlayerGeneralMatchConfirmNotify;
_PlayerGeneralMatchConfirmNotify_one_of_decls = new WeakMap();
