/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WindSeedClientNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class WindSeedClientNotify extends pb_1.Message {
    #one_of_decls: number[][] = [[14, 6, 4]];
    constructor(data?: any[] | ({} & (({
        refresh_notify?: WindSeedClientNotify.RefreshNotify;
        add_wind_bullet_notify?: never;
        area_notify?: never;
    } | {
        refresh_notify?: never;
        add_wind_bullet_notify?: WindSeedClientNotify.AddWindBulletNotify;
        area_notify?: never;
    } | {
        refresh_notify?: never;
        add_wind_bullet_notify?: never;
        area_notify?: WindSeedClientNotify.AreaNotify;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("refresh_notify" in data && data.refresh_notify != undefined) {
                this.refresh_notify = data.refresh_notify;
            }
            if ("add_wind_bullet_notify" in data && data.add_wind_bullet_notify != undefined) {
                this.add_wind_bullet_notify = data.add_wind_bullet_notify;
            }
            if ("area_notify" in data && data.area_notify != undefined) {
                this.area_notify = data.area_notify;
            }
        }
    }
    get refresh_notify() {
        return pb_1.Message.getWrapperField(this, WindSeedClientNotify.RefreshNotify, 14) as WindSeedClientNotify.RefreshNotify;
    }
    set refresh_notify(value: WindSeedClientNotify.RefreshNotify) {
        pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
    }
    get has_refresh_notify() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get add_wind_bullet_notify() {
        return pb_1.Message.getWrapperField(this, WindSeedClientNotify.AddWindBulletNotify, 6) as WindSeedClientNotify.AddWindBulletNotify;
    }
    set add_wind_bullet_notify(value: WindSeedClientNotify.AddWindBulletNotify) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_add_wind_bullet_notify() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get area_notify() {
        return pb_1.Message.getWrapperField(this, WindSeedClientNotify.AreaNotify, 4) as WindSeedClientNotify.AreaNotify;
    }
    set area_notify(value: WindSeedClientNotify.AreaNotify) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get has_area_notify() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get notify() {
        const cases: {
            [index: number]: "none" | "refresh_notify" | "add_wind_bullet_notify" | "area_notify";
        } = {
            0: "none",
            14: "refresh_notify",
            6: "add_wind_bullet_notify",
            4: "area_notify"
        };
        return cases[pb_1.Message.computeOneofCase(this, [14, 6, 4])];
    }
    static fromObject(data: {
        refresh_notify?: ReturnType<typeof WindSeedClientNotify.RefreshNotify.prototype.toObject>;
        add_wind_bullet_notify?: ReturnType<typeof WindSeedClientNotify.AddWindBulletNotify.prototype.toObject>;
        area_notify?: ReturnType<typeof WindSeedClientNotify.AreaNotify.prototype.toObject>;
    }): WindSeedClientNotify {
        const message = new WindSeedClientNotify({});
        if (data.refresh_notify != null) {
            message.refresh_notify = WindSeedClientNotify.RefreshNotify.fromObject(data.refresh_notify);
        }
        if (data.add_wind_bullet_notify != null) {
            message.add_wind_bullet_notify = WindSeedClientNotify.AddWindBulletNotify.fromObject(data.add_wind_bullet_notify);
        }
        if (data.area_notify != null) {
            message.area_notify = WindSeedClientNotify.AreaNotify.fromObject(data.area_notify);
        }
        return message;
    }
    toObject() {
        const data: {
            refresh_notify?: ReturnType<typeof WindSeedClientNotify.RefreshNotify.prototype.toObject>;
            add_wind_bullet_notify?: ReturnType<typeof WindSeedClientNotify.AddWindBulletNotify.prototype.toObject>;
            area_notify?: ReturnType<typeof WindSeedClientNotify.AreaNotify.prototype.toObject>;
        } = {};
        if (this.refresh_notify != null) {
            data.refresh_notify = this.refresh_notify.toObject();
        }
        if (this.add_wind_bullet_notify != null) {
            data.add_wind_bullet_notify = this.add_wind_bullet_notify.toObject();
        }
        if (this.area_notify != null) {
            data.area_notify = this.area_notify.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_refresh_notify)
            writer.writeMessage(14, this.refresh_notify, () => this.refresh_notify.serialize(writer));
        if (this.has_add_wind_bullet_notify)
            writer.writeMessage(6, this.add_wind_bullet_notify, () => this.add_wind_bullet_notify.serialize(writer));
        if (this.has_area_notify)
            writer.writeMessage(4, this.area_notify, () => this.area_notify.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WindSeedClientNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WindSeedClientNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    reader.readMessage(message.refresh_notify, () => message.refresh_notify = WindSeedClientNotify.RefreshNotify.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.add_wind_bullet_notify, () => message.add_wind_bullet_notify = WindSeedClientNotify.AddWindBulletNotify.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.area_notify, () => message.area_notify = WindSeedClientNotify.AreaNotify.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WindSeedClientNotify {
        return WindSeedClientNotify.deserialize(bytes);
    }
}
export namespace WindSeedClientNotify {
    export class RefreshNotify extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            refresh_num?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("refresh_num" in data && data.refresh_num != undefined) {
                    this.refresh_num = data.refresh_num;
                }
            }
        }
        get refresh_num() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set refresh_num(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            refresh_num?: number;
        }): RefreshNotify {
            const message = new RefreshNotify({});
            if (data.refresh_num != null) {
                message.refresh_num = data.refresh_num;
            }
            return message;
        }
        toObject() {
            const data: {
                refresh_num?: number;
            } = {};
            if (this.refresh_num != null) {
                data.refresh_num = this.refresh_num;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.refresh_num != 0)
                writer.writeUint32(9, this.refresh_num);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RefreshNotify {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RefreshNotify();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        message.refresh_num = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RefreshNotify {
            return RefreshNotify.deserialize(bytes);
        }
    }
    export class AddWindBulletNotify extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seed_pos?: dependency_1.Vector;
            catch_player_uid?: number;
            seed_entity_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seed_pos" in data && data.seed_pos != undefined) {
                    this.seed_pos = data.seed_pos;
                }
                if ("catch_player_uid" in data && data.catch_player_uid != undefined) {
                    this.catch_player_uid = data.catch_player_uid;
                }
                if ("seed_entity_id" in data && data.seed_entity_id != undefined) {
                    this.seed_entity_id = data.seed_entity_id;
                }
            }
        }
        get seed_pos() {
            return pb_1.Message.getWrapperField(this, dependency_1.Vector, 6) as dependency_1.Vector;
        }
        set seed_pos(value: dependency_1.Vector) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_seed_pos() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get catch_player_uid() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set catch_player_uid(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get seed_entity_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set seed_entity_id(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            seed_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            catch_player_uid?: number;
            seed_entity_id?: number;
        }): AddWindBulletNotify {
            const message = new AddWindBulletNotify({});
            if (data.seed_pos != null) {
                message.seed_pos = dependency_1.Vector.fromObject(data.seed_pos);
            }
            if (data.catch_player_uid != null) {
                message.catch_player_uid = data.catch_player_uid;
            }
            if (data.seed_entity_id != null) {
                message.seed_entity_id = data.seed_entity_id;
            }
            return message;
        }
        toObject() {
            const data: {
                seed_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
                catch_player_uid?: number;
                seed_entity_id?: number;
            } = {};
            if (this.seed_pos != null) {
                data.seed_pos = this.seed_pos.toObject();
            }
            if (this.catch_player_uid != null) {
                data.catch_player_uid = this.catch_player_uid;
            }
            if (this.seed_entity_id != null) {
                data.seed_entity_id = this.seed_entity_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_seed_pos)
                writer.writeMessage(6, this.seed_pos, () => this.seed_pos.serialize(writer));
            if (this.catch_player_uid != 0)
                writer.writeUint32(8, this.catch_player_uid);
            if (this.seed_entity_id != 0)
                writer.writeUint32(7, this.seed_entity_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddWindBulletNotify {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddWindBulletNotify();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 6:
                        reader.readMessage(message.seed_pos, () => message.seed_pos = dependency_1.Vector.deserialize(reader));
                        break;
                    case 8:
                        message.catch_player_uid = reader.readUint32();
                        break;
                    case 7:
                        message.seed_entity_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddWindBulletNotify {
            return AddWindBulletNotify.deserialize(bytes);
        }
    }
    export class AreaNotify extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            area_code?: Uint8Array;
            area_id?: number;
            area_type?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("area_code" in data && data.area_code != undefined) {
                    this.area_code = data.area_code;
                }
                if ("area_id" in data && data.area_id != undefined) {
                    this.area_id = data.area_id;
                }
                if ("area_type" in data && data.area_type != undefined) {
                    this.area_type = data.area_type;
                }
            }
        }
        get area_code() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set area_code(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get area_id() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set area_id(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get area_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set area_type(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            area_code?: Uint8Array;
            area_id?: number;
            area_type?: number;
        }): AreaNotify {
            const message = new AreaNotify({});
            if (data.area_code != null) {
                message.area_code = data.area_code;
            }
            if (data.area_id != null) {
                message.area_id = data.area_id;
            }
            if (data.area_type != null) {
                message.area_type = data.area_type;
            }
            return message;
        }
        toObject() {
            const data: {
                area_code?: Uint8Array;
                area_id?: number;
                area_type?: number;
            } = {};
            if (this.area_code != null) {
                data.area_code = this.area_code;
            }
            if (this.area_id != null) {
                data.area_id = this.area_id;
            }
            if (this.area_type != null) {
                data.area_type = this.area_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.area_code.length)
                writer.writeBytes(5, this.area_code);
            if (this.area_id != 0)
                writer.writeUint32(10, this.area_id);
            if (this.area_type != 0)
                writer.writeUint32(7, this.area_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AreaNotify {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AreaNotify();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        message.area_code = reader.readBytes();
                        break;
                    case 10:
                        message.area_id = reader.readUint32();
                        break;
                    case 7:
                        message.area_type = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AreaNotify {
            return AreaNotify.deserialize(bytes);
        }
    }
}
