/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlantFlowerRecvFlowerData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ProfilePicture";
import * as pb_1 from "google-protobuf";
export class PlantFlowerRecvFlowerData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile_picture?: dependency_1.ProfilePicture;
        nickname?: string;
        uid?: number;
        flower_num_map?: Map<number, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("flower_num_map" in data && data.flower_num_map != undefined) {
                this.flower_num_map = data.flower_num_map;
            }
        }
        if (!this.flower_num_map)
            this.flower_num_map = new Map();
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProfilePicture, 13) as dependency_1.ProfilePicture;
    }
    set profile_picture(value: dependency_1.ProfilePicture) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get flower_num_map() {
        return pb_1.Message.getField(this, 14) as any as Map<number, number>;
    }
    set flower_num_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 14, value as any);
    }
    static fromObject(data: {
        profile_picture?: ReturnType<typeof dependency_1.ProfilePicture.prototype.toObject>;
        nickname?: string;
        uid?: number;
        flower_num_map?: {
            [key: number]: number;
        };
    }): PlantFlowerRecvFlowerData {
        const message = new PlantFlowerRecvFlowerData({});
        if (data.profile_picture != null) {
            message.profile_picture = dependency_1.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (typeof data.flower_num_map == "object") {
            message.flower_num_map = new Map(Object.entries(data.flower_num_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            profile_picture?: ReturnType<typeof dependency_1.ProfilePicture.prototype.toObject>;
            nickname?: string;
            uid?: number;
            flower_num_map?: {
                [key: number]: number;
            };
        } = {};
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.flower_num_map.size > 0) {
            data.flower_num_map = (Object.fromEntries)(this.flower_num_map);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile_picture)
            writer.writeMessage(13, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.nickname.length)
            writer.writeString(5, this.nickname);
        if (this.uid != 0)
            writer.writeUint32(9, this.uid);
        for (const [key, value] of this.flower_num_map) {
            writer.writeMessage(14, this.flower_num_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlantFlowerRecvFlowerData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlantFlowerRecvFlowerData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_1.ProfilePicture.deserialize(reader));
                    break;
                case 5:
                    message.nickname = reader.readString();
                    break;
                case 9:
                    message.uid = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.flower_num_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlantFlowerRecvFlowerData {
        return PlantFlowerRecvFlowerData.deserialize(bytes);
    }
}
