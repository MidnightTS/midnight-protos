// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "GCGSkillPreviewInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GCGSkillPreviewTokenChangeInfo } from "./GCGSkillPreviewTokenChangeInfo";
import { GCGSkillPreviewElementReactionInfo } from "./GCGSkillPreviewElementReactionInfo";
import { GCGSkillPreviewExtraInfo } from "./GCGSkillPreviewExtraInfo";
import { GCGSkillPreviewHpInfo } from "./GCGSkillPreviewHpInfo";
import { GCGSkillPreviewCardInfo } from "./GCGSkillPreviewCardInfo";
import { GCGSkillPreviewOnstageChangeInfo } from "./GCGSkillPreviewOnstageChangeInfo";
/**
 * @generated from protobuf message GCGSkillPreviewInfo
 */
export interface GCGSkillPreviewInfo {
    /**
     * @generated from protobuf field: repeated GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 6;
     */
    changeOnstageCharacterList: GCGSkillPreviewOnstageChangeInfo[];
    /**
     * @generated from protobuf field: repeated GCGSkillPreviewCardInfo Unk3300_DAJFJEDNLKK = 15 [json_name = "Unk3300DAJFJEDNLKK"];
     */
    unk3300DAJFJEDNLKK: GCGSkillPreviewCardInfo[];
    /**
     * @generated from protobuf field: uint32 skill_id = 12;
     */
    skillId: number;
    /**
     * @generated from protobuf field: map<uint32, GCGSkillPreviewHpInfo> hp_info_map = 3;
     */
    hpInfoMap: {
        [key: number]: GCGSkillPreviewHpInfo;
    };
    /**
     * @generated from protobuf field: repeated GCGSkillPreviewCardInfo Unk3300_AGNONGELFGC = 2 [json_name = "Unk3300AGNONGELFGC"];
     */
    unk3300AGNONGELFGC: GCGSkillPreviewCardInfo[];
    /**
     * @generated from protobuf field: GCGSkillPreviewExtraInfo extra_info = 11;
     */
    extraInfo?: GCGSkillPreviewExtraInfo;
    /**
     * @generated from protobuf field: map<uint32, GCGSkillPreviewElementReactionInfo> reaction_info_map = 14;
     */
    reactionInfoMap: {
        [key: number]: GCGSkillPreviewElementReactionInfo;
    };
    /**
     * @generated from protobuf field: map<uint32, GCGSkillPreviewTokenChangeInfo> card_token_change_map = 8;
     */
    cardTokenChangeMap: {
        [key: number]: GCGSkillPreviewTokenChangeInfo;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GCGSkillPreviewInfo$Type extends MessageType<GCGSkillPreviewInfo> {
    constructor() {
        super("GCGSkillPreviewInfo", [
            { no: 6, name: "change_onstage_character_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GCGSkillPreviewOnstageChangeInfo },
            { no: 15, name: "Unk3300_DAJFJEDNLKK", kind: "message", jsonName: "Unk3300DAJFJEDNLKK", repeat: 1 /*RepeatType.PACKED*/, T: () => GCGSkillPreviewCardInfo },
            { no: 12, name: "skill_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "hp_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => GCGSkillPreviewHpInfo } },
            { no: 2, name: "Unk3300_AGNONGELFGC", kind: "message", jsonName: "Unk3300AGNONGELFGC", repeat: 1 /*RepeatType.PACKED*/, T: () => GCGSkillPreviewCardInfo },
            { no: 11, name: "extra_info", kind: "message", T: () => GCGSkillPreviewExtraInfo },
            { no: 14, name: "reaction_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => GCGSkillPreviewElementReactionInfo } },
            { no: 8, name: "card_token_change_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => GCGSkillPreviewTokenChangeInfo } }
        ]);
    }
    create(value?: PartialMessage<GCGSkillPreviewInfo>): GCGSkillPreviewInfo {
        const message = { changeOnstageCharacterList: [], unk3300DAJFJEDNLKK: [], skillId: 0, hpInfoMap: {}, unk3300AGNONGELFGC: [], reactionInfoMap: {}, cardTokenChangeMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GCGSkillPreviewInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GCGSkillPreviewInfo): GCGSkillPreviewInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated GCGSkillPreviewOnstageChangeInfo change_onstage_character_list */ 6:
                    message.changeOnstageCharacterList.push(GCGSkillPreviewOnstageChangeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated GCGSkillPreviewCardInfo Unk3300_DAJFJEDNLKK = 15 [json_name = "Unk3300DAJFJEDNLKK"];*/ 15:
                    message.unk3300DAJFJEDNLKK.push(GCGSkillPreviewCardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 skill_id */ 12:
                    message.skillId = reader.uint32();
                    break;
                case /* map<uint32, GCGSkillPreviewHpInfo> hp_info_map */ 3:
                    this.binaryReadMap3(message.hpInfoMap, reader, options);
                    break;
                case /* repeated GCGSkillPreviewCardInfo Unk3300_AGNONGELFGC = 2 [json_name = "Unk3300AGNONGELFGC"];*/ 2:
                    message.unk3300AGNONGELFGC.push(GCGSkillPreviewCardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* GCGSkillPreviewExtraInfo extra_info */ 11:
                    message.extraInfo = GCGSkillPreviewExtraInfo.internalBinaryRead(reader, reader.uint32(), options, message.extraInfo);
                    break;
                case /* map<uint32, GCGSkillPreviewElementReactionInfo> reaction_info_map */ 14:
                    this.binaryReadMap14(message.reactionInfoMap, reader, options);
                    break;
                case /* map<uint32, GCGSkillPreviewTokenChangeInfo> card_token_change_map */ 8:
                    this.binaryReadMap8(message.cardTokenChangeMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GCGSkillPreviewInfo["hpInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GCGSkillPreviewInfo["hpInfoMap"] | undefined, val: GCGSkillPreviewInfo["hpInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = GCGSkillPreviewHpInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GCGSkillPreviewInfo.hp_info_map");
            }
        }
        map[key ?? 0] = val ?? GCGSkillPreviewHpInfo.create();
    }
    private binaryReadMap14(map: GCGSkillPreviewInfo["reactionInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GCGSkillPreviewInfo["reactionInfoMap"] | undefined, val: GCGSkillPreviewInfo["reactionInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = GCGSkillPreviewElementReactionInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GCGSkillPreviewInfo.reaction_info_map");
            }
        }
        map[key ?? 0] = val ?? GCGSkillPreviewElementReactionInfo.create();
    }
    private binaryReadMap8(map: GCGSkillPreviewInfo["cardTokenChangeMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GCGSkillPreviewInfo["cardTokenChangeMap"] | undefined, val: GCGSkillPreviewInfo["cardTokenChangeMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = GCGSkillPreviewTokenChangeInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GCGSkillPreviewInfo.card_token_change_map");
            }
        }
        map[key ?? 0] = val ?? GCGSkillPreviewTokenChangeInfo.create();
    }
    internalBinaryWrite(message: GCGSkillPreviewInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 6; */
        for (let i = 0; i < message.changeOnstageCharacterList.length; i++)
            GCGSkillPreviewOnstageChangeInfo.internalBinaryWrite(message.changeOnstageCharacterList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated GCGSkillPreviewCardInfo Unk3300_DAJFJEDNLKK = 15 [json_name = "Unk3300DAJFJEDNLKK"]; */
        for (let i = 0; i < message.unk3300DAJFJEDNLKK.length; i++)
            GCGSkillPreviewCardInfo.internalBinaryWrite(message.unk3300DAJFJEDNLKK[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* uint32 skill_id = 12; */
        if (message.skillId !== 0)
            writer.tag(12, WireType.Varint).uint32(message.skillId);
        /* map<uint32, GCGSkillPreviewHpInfo> hp_info_map = 3; */
        for (let k of Object.keys(message.hpInfoMap)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            GCGSkillPreviewHpInfo.internalBinaryWrite(message.hpInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* repeated GCGSkillPreviewCardInfo Unk3300_AGNONGELFGC = 2 [json_name = "Unk3300AGNONGELFGC"]; */
        for (let i = 0; i < message.unk3300AGNONGELFGC.length; i++)
            GCGSkillPreviewCardInfo.internalBinaryWrite(message.unk3300AGNONGELFGC[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GCGSkillPreviewExtraInfo extra_info = 11; */
        if (message.extraInfo)
            GCGSkillPreviewExtraInfo.internalBinaryWrite(message.extraInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, GCGSkillPreviewElementReactionInfo> reaction_info_map = 14; */
        for (let k of Object.keys(message.reactionInfoMap)) {
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            GCGSkillPreviewElementReactionInfo.internalBinaryWrite(message.reactionInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* map<uint32, GCGSkillPreviewTokenChangeInfo> card_token_change_map = 8; */
        for (let k of Object.keys(message.cardTokenChangeMap)) {
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            GCGSkillPreviewTokenChangeInfo.internalBinaryWrite(message.cardTokenChangeMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GCGSkillPreviewInfo
 */
export const GCGSkillPreviewInfo = new GCGSkillPreviewInfo$Type();
