/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FlightActivitySettleNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FlightActivitySettleNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_new_record?: boolean;
        medal_level?: number;
        left_time?: number;
        collect_num?: number;
        total_num?: number;
        group_id?: number;
        score?: number;
        is_success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_new_record" in data && data.is_new_record != undefined) {
                this.is_new_record = data.is_new_record;
            }
            if ("medal_level" in data && data.medal_level != undefined) {
                this.medal_level = data.medal_level;
            }
            if ("left_time" in data && data.left_time != undefined) {
                this.left_time = data.left_time;
            }
            if ("collect_num" in data && data.collect_num != undefined) {
                this.collect_num = data.collect_num;
            }
            if ("total_num" in data && data.total_num != undefined) {
                this.total_num = data.total_num;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
        }
    }
    get is_new_record() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_new_record(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get medal_level() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set medal_level(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get left_time() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set left_time(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get collect_num() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set collect_num(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get total_num() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set total_num(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set group_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        is_new_record?: boolean;
        medal_level?: number;
        left_time?: number;
        collect_num?: number;
        total_num?: number;
        group_id?: number;
        score?: number;
        is_success?: boolean;
    }): FlightActivitySettleNotify {
        const message = new FlightActivitySettleNotify({});
        if (data.is_new_record != null) {
            message.is_new_record = data.is_new_record;
        }
        if (data.medal_level != null) {
            message.medal_level = data.medal_level;
        }
        if (data.left_time != null) {
            message.left_time = data.left_time;
        }
        if (data.collect_num != null) {
            message.collect_num = data.collect_num;
        }
        if (data.total_num != null) {
            message.total_num = data.total_num;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        return message;
    }
    toObject() {
        const data: {
            is_new_record?: boolean;
            medal_level?: number;
            left_time?: number;
            collect_num?: number;
            total_num?: number;
            group_id?: number;
            score?: number;
            is_success?: boolean;
        } = {};
        if (this.is_new_record != null) {
            data.is_new_record = this.is_new_record;
        }
        if (this.medal_level != null) {
            data.medal_level = this.medal_level;
        }
        if (this.left_time != null) {
            data.left_time = this.left_time;
        }
        if (this.collect_num != null) {
            data.collect_num = this.collect_num;
        }
        if (this.total_num != null) {
            data.total_num = this.total_num;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_new_record != false)
            writer.writeBool(1, this.is_new_record);
        if (this.medal_level != 0)
            writer.writeUint32(6, this.medal_level);
        if (this.left_time != 0)
            writer.writeUint32(13, this.left_time);
        if (this.collect_num != 0)
            writer.writeUint32(9, this.collect_num);
        if (this.total_num != 0)
            writer.writeUint32(5, this.total_num);
        if (this.group_id != 0)
            writer.writeUint32(8, this.group_id);
        if (this.score != 0)
            writer.writeUint32(10, this.score);
        if (this.is_success != false)
            writer.writeBool(4, this.is_success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightActivitySettleNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightActivitySettleNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.is_new_record = reader.readBool();
                    break;
                case 6:
                    message.medal_level = reader.readUint32();
                    break;
                case 13:
                    message.left_time = reader.readUint32();
                    break;
                case 9:
                    message.collect_num = reader.readUint32();
                    break;
                case 5:
                    message.total_num = reader.readUint32();
                    break;
                case 8:
                    message.group_id = reader.readUint32();
                    break;
                case 10:
                    message.score = reader.readUint32();
                    break;
                case 4:
                    message.is_success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FlightActivitySettleNotify {
        return FlightActivitySettleNotify.deserialize(bytes);
    }
}
