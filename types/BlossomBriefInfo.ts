/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BlossomBriefInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class BlossomBriefInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        refresh_id?: number;
        reward_id?: number;
        city_id?: number;
        resin?: number;
        state?: number;
        is_guide_opened?: boolean;
        monster_level?: number;
        circle_camp_id?: number;
        pos?: dependency_1.Vector;
        scene_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("refresh_id" in data && data.refresh_id != undefined) {
                this.refresh_id = data.refresh_id;
            }
            if ("reward_id" in data && data.reward_id != undefined) {
                this.reward_id = data.reward_id;
            }
            if ("city_id" in data && data.city_id != undefined) {
                this.city_id = data.city_id;
            }
            if ("resin" in data && data.resin != undefined) {
                this.resin = data.resin;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("is_guide_opened" in data && data.is_guide_opened != undefined) {
                this.is_guide_opened = data.is_guide_opened;
            }
            if ("monster_level" in data && data.monster_level != undefined) {
                this.monster_level = data.monster_level;
            }
            if ("circle_camp_id" in data && data.circle_camp_id != undefined) {
                this.circle_camp_id = data.circle_camp_id;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
        }
    }
    get refresh_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set refresh_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get reward_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set reward_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get city_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set city_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get resin() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set resin(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set state(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_guide_opened() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_guide_opened(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get monster_level() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set monster_level(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get circle_camp_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set circle_camp_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 12) as dependency_1.Vector;
    }
    set pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        refresh_id?: number;
        reward_id?: number;
        city_id?: number;
        resin?: number;
        state?: number;
        is_guide_opened?: boolean;
        monster_level?: number;
        circle_camp_id?: number;
        pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        scene_id?: number;
    }): BlossomBriefInfo {
        const message = new BlossomBriefInfo({});
        if (data.refresh_id != null) {
            message.refresh_id = data.refresh_id;
        }
        if (data.reward_id != null) {
            message.reward_id = data.reward_id;
        }
        if (data.city_id != null) {
            message.city_id = data.city_id;
        }
        if (data.resin != null) {
            message.resin = data.resin;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.is_guide_opened != null) {
            message.is_guide_opened = data.is_guide_opened;
        }
        if (data.monster_level != null) {
            message.monster_level = data.monster_level;
        }
        if (data.circle_camp_id != null) {
            message.circle_camp_id = data.circle_camp_id;
        }
        if (data.pos != null) {
            message.pos = dependency_1.Vector.fromObject(data.pos);
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        return message;
    }
    toObject() {
        const data: {
            refresh_id?: number;
            reward_id?: number;
            city_id?: number;
            resin?: number;
            state?: number;
            is_guide_opened?: boolean;
            monster_level?: number;
            circle_camp_id?: number;
            pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            scene_id?: number;
        } = {};
        if (this.refresh_id != null) {
            data.refresh_id = this.refresh_id;
        }
        if (this.reward_id != null) {
            data.reward_id = this.reward_id;
        }
        if (this.city_id != null) {
            data.city_id = this.city_id;
        }
        if (this.resin != null) {
            data.resin = this.resin;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.is_guide_opened != null) {
            data.is_guide_opened = this.is_guide_opened;
        }
        if (this.monster_level != null) {
            data.monster_level = this.monster_level;
        }
        if (this.circle_camp_id != null) {
            data.circle_camp_id = this.circle_camp_id;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.refresh_id != 0)
            writer.writeUint32(13, this.refresh_id);
        if (this.reward_id != 0)
            writer.writeUint32(5, this.reward_id);
        if (this.city_id != 0)
            writer.writeUint32(10, this.city_id);
        if (this.resin != 0)
            writer.writeUint32(11, this.resin);
        if (this.state != 0)
            writer.writeUint32(7, this.state);
        if (this.is_guide_opened != false)
            writer.writeBool(1, this.is_guide_opened);
        if (this.monster_level != 0)
            writer.writeUint32(8, this.monster_level);
        if (this.circle_camp_id != 0)
            writer.writeUint32(15, this.circle_camp_id);
        if (this.has_pos)
            writer.writeMessage(12, this.pos, () => this.pos.serialize(writer));
        if (this.scene_id != 0)
            writer.writeUint32(9, this.scene_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlossomBriefInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlossomBriefInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.refresh_id = reader.readUint32();
                    break;
                case 5:
                    message.reward_id = reader.readUint32();
                    break;
                case 10:
                    message.city_id = reader.readUint32();
                    break;
                case 11:
                    message.resin = reader.readUint32();
                    break;
                case 7:
                    message.state = reader.readUint32();
                    break;
                case 1:
                    message.is_guide_opened = reader.readBool();
                    break;
                case 8:
                    message.monster_level = reader.readUint32();
                    break;
                case 15:
                    message.circle_camp_id = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.pos, () => message.pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 9:
                    message.scene_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BlossomBriefInfo {
        return BlossomBriefInfo.deserialize(bytes);
    }
}
