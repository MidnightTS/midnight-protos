/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Unk3000_FLOEPMMABMH.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Unk3000_FLOEPMMABMH extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        level_id?: number;
        max_score?: number;
        is_open?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("level_id" in data && data.level_id != undefined) {
                this.level_id = data.level_id;
            }
            if ("max_score" in data && data.max_score != undefined) {
                this.max_score = data.max_score;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
        }
    }
    get level_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set level_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get max_score() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set max_score(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_open(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        level_id?: number;
        max_score?: number;
        is_open?: boolean;
    }): Unk3000_FLOEPMMABMH {
        const message = new Unk3000_FLOEPMMABMH({});
        if (data.level_id != null) {
            message.level_id = data.level_id;
        }
        if (data.max_score != null) {
            message.max_score = data.max_score;
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        return message;
    }
    toObject() {
        const data: {
            level_id?: number;
            max_score?: number;
            is_open?: boolean;
        } = {};
        if (this.level_id != null) {
            data.level_id = this.level_id;
        }
        if (this.max_score != null) {
            data.max_score = this.max_score;
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.level_id != 0)
            writer.writeUint32(13, this.level_id);
        if (this.max_score != 0)
            writer.writeUint32(14, this.max_score);
        if (this.is_open != false)
            writer.writeBool(1, this.is_open);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Unk3000_FLOEPMMABMH {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Unk3000_FLOEPMMABMH();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.level_id = reader.readUint32();
                    break;
                case 14:
                    message.max_score = reader.readUint32();
                    break;
                case 1:
                    message.is_open = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Unk3000_FLOEPMMABMH {
        return Unk3000_FLOEPMMABMH.deserialize(bytes);
    }
}
