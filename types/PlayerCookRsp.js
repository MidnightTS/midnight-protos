"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlayerCookRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerCookRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerCookRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./CookRecipeData");
const dependency_2 = require("./ItemParam");
const pb_1 = require("google-protobuf");
class PlayerCookRsp extends pb_1.Message {
    constructor(data) {
        super();
        _PlayerCookRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15, 11], __classPrivateFieldGet(this, _PlayerCookRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("extral_item_list" in data && data.extral_item_list != undefined) {
                this.extral_item_list = data.extral_item_list;
            }
            if ("cook_count" in data && data.cook_count != undefined) {
                this.cook_count = data.cook_count;
            }
            if ("item_list" in data && data.item_list != undefined) {
                this.item_list = data.item_list;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("qte_quality" in data && data.qte_quality != undefined) {
                this.qte_quality = data.qte_quality;
            }
            if ("recipe_data" in data && data.recipe_data != undefined) {
                this.recipe_data = data.recipe_data;
            }
        }
    }
    get extral_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ItemParam, 15);
    }
    set extral_item_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get cook_count() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set cook_count(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ItemParam, 11);
    }
    set item_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get qte_quality() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set qte_quality(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get recipe_data() {
        return pb_1.Message.getWrapperField(this, dependency_1.CookRecipeData, 7);
    }
    set recipe_data(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_recipe_data() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data) {
        const message = new PlayerCookRsp({});
        if (data.extral_item_list != null) {
            message.extral_item_list = data.extral_item_list.map(item => dependency_2.ItemParam.fromObject(item));
        }
        if (data.cook_count != null) {
            message.cook_count = data.cook_count;
        }
        if (data.item_list != null) {
            message.item_list = data.item_list.map(item => dependency_2.ItemParam.fromObject(item));
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.qte_quality != null) {
            message.qte_quality = data.qte_quality;
        }
        if (data.recipe_data != null) {
            message.recipe_data = dependency_1.CookRecipeData.fromObject(data.recipe_data);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.extral_item_list != null) {
            data.extral_item_list = this.extral_item_list.map((item) => item.toObject());
        }
        if (this.cook_count != null) {
            data.cook_count = this.cook_count;
        }
        if (this.item_list != null) {
            data.item_list = this.item_list.map((item) => item.toObject());
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.qte_quality != null) {
            data.qte_quality = this.qte_quality;
        }
        if (this.recipe_data != null) {
            data.recipe_data = this.recipe_data.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.extral_item_list.length)
            writer.writeRepeatedMessage(15, this.extral_item_list, (item) => item.serialize(writer));
        if (this.cook_count != 0)
            writer.writeUint32(12, this.cook_count);
        if (this.item_list.length)
            writer.writeRepeatedMessage(11, this.item_list, (item) => item.serialize(writer));
        if (this.retcode != 0)
            writer.writeInt32(3, this.retcode);
        if (this.qte_quality != 0)
            writer.writeUint32(5, this.qte_quality);
        if (this.has_recipe_data)
            writer.writeMessage(7, this.recipe_data, () => this.recipe_data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerCookRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    reader.readMessage(message.extral_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_2.ItemParam.deserialize(reader), dependency_2.ItemParam));
                    break;
                case 12:
                    message.cook_count = reader.readUint32();
                    break;
                case 11:
                    reader.readMessage(message.item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_2.ItemParam.deserialize(reader), dependency_2.ItemParam));
                    break;
                case 3:
                    message.retcode = reader.readInt32();
                    break;
                case 5:
                    message.qte_quality = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.recipe_data, () => message.recipe_data = dependency_1.CookRecipeData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlayerCookRsp.deserialize(bytes);
    }
}
exports.PlayerCookRsp = PlayerCookRsp;
_PlayerCookRsp_one_of_decls = new WeakMap();
