// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "RogueDiaryRepairInfoNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RogueDiaryRoomInfo } from "./RogueDiaryRoomInfo";
import { RogueDiaryAvatar } from "./RogueDiaryAvatar";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 8084;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 *   IS_ALLOW_CLIENT = 1;
 * }
 *
 * @generated from protobuf message RogueDiaryRepairInfoNotify
 */
export interface RogueDiaryRepairInfoNotify {
    /**
     * @generated from protobuf field: repeated RogueDiaryAvatar avatar_list = 2;
     */
    avatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated RogueDiaryAvatar trial_avatar_list = 10;
     */
    trialAvatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated RogueDiaryRoomInfo room_list = 11;
     */
    roomList: RogueDiaryRoomInfo[];
    /**
     * @generated from protobuf field: repeated uint32 select_card_list = 12;
     */
    selectCardList: number[];
    /**
     * @generated from protobuf field: repeated uint32 chosen_card_list = 5;
     */
    chosenCardList: number[];
    /**
     * @generated from protobuf field: uint32 stage_id = 7;
     */
    stageId: number;
    /**
     * @generated from protobuf field: repeated RogueDiaryAvatar select_avatar_list = 3;
     */
    selectAvatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated uint32 rand_card_list = 13;
     */
    randCardList: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryRepairInfoNotify$Type extends MessageType<RogueDiaryRepairInfoNotify> {
    constructor() {
        super("RogueDiaryRepairInfoNotify", [
            { no: 2, name: "avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RogueDiaryAvatar },
            { no: 10, name: "trial_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RogueDiaryAvatar },
            { no: 11, name: "room_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RogueDiaryRoomInfo },
            { no: 12, name: "select_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "chosen_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "select_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RogueDiaryAvatar },
            { no: 13, name: "rand_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryRepairInfoNotify>): RogueDiaryRepairInfoNotify {
        const message = { avatarList: [], trialAvatarList: [], roomList: [], selectCardList: [], chosenCardList: [], stageId: 0, selectAvatarList: [], randCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryRepairInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryRepairInfoNotify): RogueDiaryRepairInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RogueDiaryAvatar avatar_list */ 2:
                    message.avatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated RogueDiaryAvatar trial_avatar_list */ 10:
                    message.trialAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated RogueDiaryRoomInfo room_list */ 11:
                    message.roomList.push(RogueDiaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 select_card_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectCardList.push(reader.uint32());
                    else
                        message.selectCardList.push(reader.uint32());
                    break;
                case /* repeated uint32 chosen_card_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated RogueDiaryAvatar select_avatar_list */ 3:
                    message.selectAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 rand_card_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryRepairInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RogueDiaryAvatar avatar_list = 2; */
        for (let i = 0; i < message.avatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated RogueDiaryAvatar trial_avatar_list = 10; */
        for (let i = 0; i < message.trialAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.trialAvatarList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated RogueDiaryRoomInfo room_list = 11; */
        for (let i = 0; i < message.roomList.length; i++)
            RogueDiaryRoomInfo.internalBinaryWrite(message.roomList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 select_card_list = 12; */
        if (message.selectCardList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.selectCardList.length; i++)
                writer.uint32(message.selectCardList[i]);
            writer.join();
        }
        /* repeated uint32 chosen_card_list = 5; */
        if (message.chosenCardList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenCardList.length; i++)
                writer.uint32(message.chosenCardList[i]);
            writer.join();
        }
        /* uint32 stage_id = 7; */
        if (message.stageId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* repeated RogueDiaryAvatar select_avatar_list = 3; */
        for (let i = 0; i < message.selectAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.selectAvatarList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 rand_card_list = 13; */
        if (message.randCardList.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.randCardList.length; i++)
                writer.uint32(message.randCardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RogueDiaryRepairInfoNotify
 */
export const RogueDiaryRepairInfoNotify = new RogueDiaryRepairInfoNotify$Type();
