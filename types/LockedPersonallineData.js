"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LockedPersonallineData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LockedPersonallineData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: LockedPersonallineData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class LockedPersonallineData extends pb_1.Message {
    constructor(data) {
        super();
        _LockedPersonallineData_one_of_decls.set(this, [[3, 1]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _LockedPersonallineData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("lock_reason" in data && data.lock_reason != undefined) {
                this.lock_reason = data.lock_reason;
            }
            if ("personal_line_id" in data && data.personal_line_id != undefined) {
                this.personal_line_id = data.personal_line_id;
            }
            if ("chapter_id" in data && data.chapter_id != undefined) {
                this.chapter_id = data.chapter_id;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
        }
    }
    get lock_reason() {
        return pb_1.Message.getFieldWithDefault(this, 2, LockedPersonallineData.LockReason.LOCK_REASON_LEVEL);
    }
    set lock_reason(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get personal_line_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set personal_line_id(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get chapter_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set chapter_id(value) {
        pb_1.Message.setOneofField(this, 3, __classPrivateFieldGet(this, _LockedPersonallineData_one_of_decls, "f")[0], value);
    }
    get has_chapter_id() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set level(value) {
        pb_1.Message.setOneofField(this, 1, __classPrivateFieldGet(this, _LockedPersonallineData_one_of_decls, "f")[0], value);
    }
    get has_level() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        const cases = {
            0: "none",
            3: "chapter_id",
            1: "level"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 1])];
    }
    static fromObject(data) {
        const message = new LockedPersonallineData({});
        if (data.lock_reason != null) {
            message.lock_reason = data.lock_reason;
        }
        if (data.personal_line_id != null) {
            message.personal_line_id = data.personal_line_id;
        }
        if (data.chapter_id != null) {
            message.chapter_id = data.chapter_id;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.lock_reason != null) {
            data.lock_reason = this.lock_reason;
        }
        if (this.personal_line_id != null) {
            data.personal_line_id = this.personal_line_id;
        }
        if (this.chapter_id != null) {
            data.chapter_id = this.chapter_id;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.lock_reason != LockedPersonallineData.LockReason.LOCK_REASON_LEVEL)
            writer.writeEnum(2, this.lock_reason);
        if (this.personal_line_id != 0)
            writer.writeUint32(13, this.personal_line_id);
        if (this.has_chapter_id)
            writer.writeUint32(3, this.chapter_id);
        if (this.has_level)
            writer.writeUint32(1, this.level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LockedPersonallineData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.lock_reason = reader.readEnum();
                    break;
                case 13:
                    message.personal_line_id = reader.readUint32();
                    break;
                case 3:
                    message.chapter_id = reader.readUint32();
                    break;
                case 1:
                    message.level = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return LockedPersonallineData.deserialize(bytes);
    }
}
exports.LockedPersonallineData = LockedPersonallineData;
_LockedPersonallineData_one_of_decls = new WeakMap();
(function (LockedPersonallineData) {
    let LockReason;
    (function (LockReason) {
        LockReason[LockReason["LOCK_REASON_LEVEL"] = 0] = "LOCK_REASON_LEVEL";
        LockReason[LockReason["LOCK_REASON_QUEST"] = 1] = "LOCK_REASON_QUEST";
    })(LockReason = LockedPersonallineData.LockReason || (LockedPersonallineData.LockReason = {}));
})(LockedPersonallineData = exports.LockedPersonallineData || (exports.LockedPersonallineData = {}));
