/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FallPlayerInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FallPlayerInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        time_cost?: number;
        uid?: number;
        ball_catch_count_map?: Map<number, number>;
        cur_score?: number;
        is_ground?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("time_cost" in data && data.time_cost != undefined) {
                this.time_cost = data.time_cost;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("ball_catch_count_map" in data && data.ball_catch_count_map != undefined) {
                this.ball_catch_count_map = data.ball_catch_count_map;
            }
            if ("cur_score" in data && data.cur_score != undefined) {
                this.cur_score = data.cur_score;
            }
            if ("is_ground" in data && data.is_ground != undefined) {
                this.is_ground = data.is_ground;
            }
        }
        if (!this.ball_catch_count_map)
            this.ball_catch_count_map = new Map();
    }
    get time_cost() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set time_cost(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get ball_catch_count_map() {
        return pb_1.Message.getField(this, 6) as any as Map<number, number>;
    }
    set ball_catch_count_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 6, value as any);
    }
    get cur_score() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set cur_score(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_ground() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set is_ground(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        time_cost?: number;
        uid?: number;
        ball_catch_count_map?: {
            [key: number]: number;
        };
        cur_score?: number;
        is_ground?: boolean;
    }): FallPlayerInfo {
        const message = new FallPlayerInfo({});
        if (data.time_cost != null) {
            message.time_cost = data.time_cost;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (typeof data.ball_catch_count_map == "object") {
            message.ball_catch_count_map = new Map(Object.entries(data.ball_catch_count_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.cur_score != null) {
            message.cur_score = data.cur_score;
        }
        if (data.is_ground != null) {
            message.is_ground = data.is_ground;
        }
        return message;
    }
    toObject() {
        const data: {
            time_cost?: number;
            uid?: number;
            ball_catch_count_map?: {
                [key: number]: number;
            };
            cur_score?: number;
            is_ground?: boolean;
        } = {};
        if (this.time_cost != null) {
            data.time_cost = this.time_cost;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.ball_catch_count_map.size > 0) {
            data.ball_catch_count_map = (Object.fromEntries)(this.ball_catch_count_map);
        }
        if (this.cur_score != null) {
            data.cur_score = this.cur_score;
        }
        if (this.is_ground != null) {
            data.is_ground = this.is_ground;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.time_cost != 0)
            writer.writeUint32(11, this.time_cost);
        if (this.uid != 0)
            writer.writeUint32(9, this.uid);
        for (const [key, value] of this.ball_catch_count_map) {
            writer.writeMessage(6, this.ball_catch_count_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.cur_score != 0)
            writer.writeUint32(7, this.cur_score);
        if (this.is_ground != false)
            writer.writeBool(15, this.is_ground);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FallPlayerInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FallPlayerInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.time_cost = reader.readUint32();
                    break;
                case 9:
                    message.uid = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ball_catch_count_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 7:
                    message.cur_score = reader.readUint32();
                    break;
                case 15:
                    message.is_ground = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FallPlayerInfo {
        return FallPlayerInfo.deserialize(bytes);
    }
}
