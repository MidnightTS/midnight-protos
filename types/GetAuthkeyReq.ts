/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetAuthkeyReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GetAuthkeyReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        auth_appid?: string;
        sign_type?: number;
        authkey_ver?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("auth_appid" in data && data.auth_appid != undefined) {
                this.auth_appid = data.auth_appid;
            }
            if ("sign_type" in data && data.sign_type != undefined) {
                this.sign_type = data.sign_type;
            }
            if ("authkey_ver" in data && data.authkey_ver != undefined) {
                this.authkey_ver = data.authkey_ver;
            }
        }
    }
    get auth_appid() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set auth_appid(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get sign_type() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set sign_type(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get authkey_ver() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set authkey_ver(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        auth_appid?: string;
        sign_type?: number;
        authkey_ver?: number;
    }): GetAuthkeyReq {
        const message = new GetAuthkeyReq({});
        if (data.auth_appid != null) {
            message.auth_appid = data.auth_appid;
        }
        if (data.sign_type != null) {
            message.sign_type = data.sign_type;
        }
        if (data.authkey_ver != null) {
            message.authkey_ver = data.authkey_ver;
        }
        return message;
    }
    toObject() {
        const data: {
            auth_appid?: string;
            sign_type?: number;
            authkey_ver?: number;
        } = {};
        if (this.auth_appid != null) {
            data.auth_appid = this.auth_appid;
        }
        if (this.sign_type != null) {
            data.sign_type = this.sign_type;
        }
        if (this.authkey_ver != null) {
            data.authkey_ver = this.authkey_ver;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.auth_appid.length)
            writer.writeString(14, this.auth_appid);
        if (this.sign_type != 0)
            writer.writeUint32(7, this.sign_type);
        if (this.authkey_ver != 0)
            writer.writeUint32(13, this.authkey_ver);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuthkeyReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuthkeyReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.auth_appid = reader.readString();
                    break;
                case 7:
                    message.sign_type = reader.readUint32();
                    break;
                case 13:
                    message.authkey_ver = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAuthkeyReq {
        return GetAuthkeyReq.deserialize(bytes);
    }
}
