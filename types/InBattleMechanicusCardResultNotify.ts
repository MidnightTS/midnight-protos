/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InBattleMechanicusCardResultNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./InBattleMechanicusCardInfo";
import * as pb_1 from "google-protobuf";
export class InBattleMechanicusCardResultNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        wait_seconds?: number;
        group_id?: number;
        card_list?: dependency_1.InBattleMechanicusCardInfo[];
        wait_begin_time_us?: number;
        player_confirmed_card_map?: Map<number, number>;
        play_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("wait_seconds" in data && data.wait_seconds != undefined) {
                this.wait_seconds = data.wait_seconds;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("card_list" in data && data.card_list != undefined) {
                this.card_list = data.card_list;
            }
            if ("wait_begin_time_us" in data && data.wait_begin_time_us != undefined) {
                this.wait_begin_time_us = data.wait_begin_time_us;
            }
            if ("player_confirmed_card_map" in data && data.player_confirmed_card_map != undefined) {
                this.player_confirmed_card_map = data.player_confirmed_card_map;
            }
            if ("play_index" in data && data.play_index != undefined) {
                this.play_index = data.play_index;
            }
        }
        if (!this.player_confirmed_card_map)
            this.player_confirmed_card_map = new Map();
    }
    get wait_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set wait_seconds(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set group_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get card_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InBattleMechanicusCardInfo, 9) as dependency_1.InBattleMechanicusCardInfo[];
    }
    set card_list(value: dependency_1.InBattleMechanicusCardInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get wait_begin_time_us() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set wait_begin_time_us(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get player_confirmed_card_map() {
        return pb_1.Message.getField(this, 12) as any as Map<number, number>;
    }
    set player_confirmed_card_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 12, value as any);
    }
    get play_index() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set play_index(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        wait_seconds?: number;
        group_id?: number;
        card_list?: ReturnType<typeof dependency_1.InBattleMechanicusCardInfo.prototype.toObject>[];
        wait_begin_time_us?: number;
        player_confirmed_card_map?: {
            [key: number]: number;
        };
        play_index?: number;
    }): InBattleMechanicusCardResultNotify {
        const message = new InBattleMechanicusCardResultNotify({});
        if (data.wait_seconds != null) {
            message.wait_seconds = data.wait_seconds;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.card_list != null) {
            message.card_list = data.card_list.map(item => dependency_1.InBattleMechanicusCardInfo.fromObject(item));
        }
        if (data.wait_begin_time_us != null) {
            message.wait_begin_time_us = data.wait_begin_time_us;
        }
        if (typeof data.player_confirmed_card_map == "object") {
            message.player_confirmed_card_map = new Map(Object.entries(data.player_confirmed_card_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.play_index != null) {
            message.play_index = data.play_index;
        }
        return message;
    }
    toObject() {
        const data: {
            wait_seconds?: number;
            group_id?: number;
            card_list?: ReturnType<typeof dependency_1.InBattleMechanicusCardInfo.prototype.toObject>[];
            wait_begin_time_us?: number;
            player_confirmed_card_map?: {
                [key: number]: number;
            };
            play_index?: number;
        } = {};
        if (this.wait_seconds != null) {
            data.wait_seconds = this.wait_seconds;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.card_list != null) {
            data.card_list = this.card_list.map((item: dependency_1.InBattleMechanicusCardInfo) => item.toObject());
        }
        if (this.wait_begin_time_us != null) {
            data.wait_begin_time_us = this.wait_begin_time_us;
        }
        if (this.player_confirmed_card_map.size > 0) {
            data.player_confirmed_card_map = (Object.fromEntries)(this.player_confirmed_card_map);
        }
        if (this.play_index != null) {
            data.play_index = this.play_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.wait_seconds != 0)
            writer.writeUint32(6, this.wait_seconds);
        if (this.group_id != 0)
            writer.writeUint32(2, this.group_id);
        if (this.card_list.length)
            writer.writeRepeatedMessage(9, this.card_list, (item: dependency_1.InBattleMechanicusCardInfo) => item.serialize(writer));
        if (this.wait_begin_time_us != 0)
            writer.writeUint64(7, this.wait_begin_time_us);
        for (const [key, value] of this.player_confirmed_card_map) {
            writer.writeMessage(12, this.player_confirmed_card_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.play_index != 0)
            writer.writeUint32(8, this.play_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InBattleMechanicusCardResultNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InBattleMechanicusCardResultNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.wait_seconds = reader.readUint32();
                    break;
                case 2:
                    message.group_id = reader.readUint32();
                    break;
                case 9:
                    reader.readMessage(message.card_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_1.InBattleMechanicusCardInfo.deserialize(reader), dependency_1.InBattleMechanicusCardInfo));
                    break;
                case 7:
                    message.wait_begin_time_us = reader.readUint64();
                    break;
                case 12:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.player_confirmed_card_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 8:
                    message.play_index = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InBattleMechanicusCardResultNotify {
        return InBattleMechanicusCardResultNotify.deserialize(bytes);
    }
}
