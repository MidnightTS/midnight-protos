/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HideAndSeekSettleNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ExhibitionDisplayInfo";
import * as dependency_2 from "./HideAndSeekSettleInfo";
import * as pb_1 from "google-protobuf";
export class HideAndSeekSettleNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cost_time?: number;
        settle_info_list?: dependency_2.HideAndSeekSettleInfo[];
        winner_list?: number[];
        reason?: HideAndSeekSettleNotify.SettleReason;
        play_index?: number;
        is_record_score?: boolean;
        score_list?: dependency_1.ExhibitionDisplayInfo[];
        stage_type?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 15, 9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cost_time" in data && data.cost_time != undefined) {
                this.cost_time = data.cost_time;
            }
            if ("settle_info_list" in data && data.settle_info_list != undefined) {
                this.settle_info_list = data.settle_info_list;
            }
            if ("winner_list" in data && data.winner_list != undefined) {
                this.winner_list = data.winner_list;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("play_index" in data && data.play_index != undefined) {
                this.play_index = data.play_index;
            }
            if ("is_record_score" in data && data.is_record_score != undefined) {
                this.is_record_score = data.is_record_score;
            }
            if ("score_list" in data && data.score_list != undefined) {
                this.score_list = data.score_list;
            }
            if ("stage_type" in data && data.stage_type != undefined) {
                this.stage_type = data.stage_type;
            }
        }
    }
    get cost_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set cost_time(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get settle_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.HideAndSeekSettleInfo, 8) as dependency_2.HideAndSeekSettleInfo[];
    }
    set settle_info_list(value: dependency_2.HideAndSeekSettleInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get winner_list() {
        return pb_1.Message.getFieldWithDefault(this, 15, []) as number[];
    }
    set winner_list(value: number[]) {
        pb_1.Message.setField(this, 15, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 4, HideAndSeekSettleNotify.SettleReason.SETTLE_REASON_TIME_OUT) as HideAndSeekSettleNotify.SettleReason;
    }
    set reason(value: HideAndSeekSettleNotify.SettleReason) {
        pb_1.Message.setField(this, 4, value);
    }
    get play_index() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set play_index(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get is_record_score() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set is_record_score(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get score_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ExhibitionDisplayInfo, 9) as dependency_1.ExhibitionDisplayInfo[];
    }
    set score_list(value: dependency_1.ExhibitionDisplayInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    get stage_type() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set stage_type(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        cost_time?: number;
        settle_info_list?: ReturnType<typeof dependency_2.HideAndSeekSettleInfo.prototype.toObject>[];
        winner_list?: number[];
        reason?: HideAndSeekSettleNotify.SettleReason;
        play_index?: number;
        is_record_score?: boolean;
        score_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
        stage_type?: number;
    }): HideAndSeekSettleNotify {
        const message = new HideAndSeekSettleNotify({});
        if (data.cost_time != null) {
            message.cost_time = data.cost_time;
        }
        if (data.settle_info_list != null) {
            message.settle_info_list = data.settle_info_list.map(item => dependency_2.HideAndSeekSettleInfo.fromObject(item));
        }
        if (data.winner_list != null) {
            message.winner_list = data.winner_list;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.play_index != null) {
            message.play_index = data.play_index;
        }
        if (data.is_record_score != null) {
            message.is_record_score = data.is_record_score;
        }
        if (data.score_list != null) {
            message.score_list = data.score_list.map(item => dependency_1.ExhibitionDisplayInfo.fromObject(item));
        }
        if (data.stage_type != null) {
            message.stage_type = data.stage_type;
        }
        return message;
    }
    toObject() {
        const data: {
            cost_time?: number;
            settle_info_list?: ReturnType<typeof dependency_2.HideAndSeekSettleInfo.prototype.toObject>[];
            winner_list?: number[];
            reason?: HideAndSeekSettleNotify.SettleReason;
            play_index?: number;
            is_record_score?: boolean;
            score_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
            stage_type?: number;
        } = {};
        if (this.cost_time != null) {
            data.cost_time = this.cost_time;
        }
        if (this.settle_info_list != null) {
            data.settle_info_list = this.settle_info_list.map((item: dependency_2.HideAndSeekSettleInfo) => item.toObject());
        }
        if (this.winner_list != null) {
            data.winner_list = this.winner_list;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.play_index != null) {
            data.play_index = this.play_index;
        }
        if (this.is_record_score != null) {
            data.is_record_score = this.is_record_score;
        }
        if (this.score_list != null) {
            data.score_list = this.score_list.map((item: dependency_1.ExhibitionDisplayInfo) => item.toObject());
        }
        if (this.stage_type != null) {
            data.stage_type = this.stage_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cost_time != 0)
            writer.writeUint32(2, this.cost_time);
        if (this.settle_info_list.length)
            writer.writeRepeatedMessage(8, this.settle_info_list, (item: dependency_2.HideAndSeekSettleInfo) => item.serialize(writer));
        if (this.winner_list.length)
            writer.writePackedUint32(15, this.winner_list);
        if (this.reason != HideAndSeekSettleNotify.SettleReason.SETTLE_REASON_TIME_OUT)
            writer.writeEnum(4, this.reason);
        if (this.play_index != 0)
            writer.writeUint32(13, this.play_index);
        if (this.is_record_score != false)
            writer.writeBool(6, this.is_record_score);
        if (this.score_list.length)
            writer.writeRepeatedMessage(9, this.score_list, (item: dependency_1.ExhibitionDisplayInfo) => item.serialize(writer));
        if (this.stage_type != 0)
            writer.writeUint32(14, this.stage_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HideAndSeekSettleNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HideAndSeekSettleNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.cost_time = reader.readUint32();
                    break;
                case 8:
                    reader.readMessage(message.settle_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.HideAndSeekSettleInfo.deserialize(reader), dependency_2.HideAndSeekSettleInfo));
                    break;
                case 15:
                    message.winner_list = reader.readPackedUint32();
                    break;
                case 4:
                    message.reason = reader.readEnum();
                    break;
                case 13:
                    message.play_index = reader.readUint32();
                    break;
                case 6:
                    message.is_record_score = reader.readBool();
                    break;
                case 9:
                    reader.readMessage(message.score_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_1.ExhibitionDisplayInfo.deserialize(reader), dependency_1.ExhibitionDisplayInfo));
                    break;
                case 14:
                    message.stage_type = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HideAndSeekSettleNotify {
        return HideAndSeekSettleNotify.deserialize(bytes);
    }
}
export namespace HideAndSeekSettleNotify {
    export enum SettleReason {
        SETTLE_REASON_TIME_OUT = 0,
        SETTLE_REASON_PLAY_END = 1,
        SETTLE_REASON_PLAYER_QUIT = 2
    }
}
