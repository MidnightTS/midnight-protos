// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "SumoSwitchTeamRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SumoDungeonTeam } from "./SumoDungeonTeam";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 8201;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message SumoSwitchTeamRsp
 */
export interface SumoSwitchTeamRsp {
    /**
     * @generated from protobuf field: uint32 Unk3300_BNJBIGHIJOC = 8 [json_name = "Unk3300BNJBIGHIJOC"];
     */
    unk3300BNJBIGHIJOC: number;
    /**
     * @generated from protobuf field: uint32 stage_id = 2;
     */
    stageId: number;
    /**
     * @generated from protobuf field: uint32 activity_id = 15;
     */
    activityId: number;
    /**
     * @generated from protobuf field: uint32 Unk3300_DJBJACGHGDM = 1 [json_name = "Unk3300DJBJACGHGDM"];
     */
    unk3300DJBJACGHGDM: number;
    /**
     * @generated from protobuf field: repeated SumoDungeonTeam dungeon_team_list = 12;
     */
    dungeonTeamList: SumoDungeonTeam[];
    /**
     * @generated from protobuf field: int32 retcode = 6;
     */
    retcode: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class SumoSwitchTeamRsp$Type extends MessageType<SumoSwitchTeamRsp> {
    constructor() {
        super("SumoSwitchTeamRsp", [
            { no: 8, name: "Unk3300_BNJBIGHIJOC", kind: "scalar", jsonName: "Unk3300BNJBIGHIJOC", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "activity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "Unk3300_DJBJACGHGDM", kind: "scalar", jsonName: "Unk3300DJBJACGHGDM", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "dungeon_team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SumoDungeonTeam },
            { no: 6, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoSwitchTeamRsp>): SumoSwitchTeamRsp {
        const message = { unk3300BNJBIGHIJOC: 0, stageId: 0, activityId: 0, unk3300DJBJACGHGDM: 0, dungeonTeamList: [], retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSwitchTeamRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSwitchTeamRsp): SumoSwitchTeamRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 Unk3300_BNJBIGHIJOC = 8 [json_name = "Unk3300BNJBIGHIJOC"];*/ 8:
                    message.unk3300BNJBIGHIJOC = reader.uint32();
                    break;
                case /* uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                case /* uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* uint32 Unk3300_DJBJACGHGDM = 1 [json_name = "Unk3300DJBJACGHGDM"];*/ 1:
                    message.unk3300DJBJACGHGDM = reader.uint32();
                    break;
                case /* repeated SumoDungeonTeam dungeon_team_list */ 12:
                    message.dungeonTeamList.push(SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSwitchTeamRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 Unk3300_BNJBIGHIJOC = 8 [json_name = "Unk3300BNJBIGHIJOC"]; */
        if (message.unk3300BNJBIGHIJOC !== 0)
            writer.tag(8, WireType.Varint).uint32(message.unk3300BNJBIGHIJOC);
        /* uint32 stage_id = 2; */
        if (message.stageId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        /* uint32 activity_id = 15; */
        if (message.activityId !== 0)
            writer.tag(15, WireType.Varint).uint32(message.activityId);
        /* uint32 Unk3300_DJBJACGHGDM = 1 [json_name = "Unk3300DJBJACGHGDM"]; */
        if (message.unk3300DJBJACGHGDM !== 0)
            writer.tag(1, WireType.Varint).uint32(message.unk3300DJBJACGHGDM);
        /* repeated SumoDungeonTeam dungeon_team_list = 12; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* int32 retcode = 6; */
        if (message.retcode !== 0)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SumoSwitchTeamRsp
 */
export const SumoSwitchTeamRsp = new SumoSwitchTeamRsp$Type();
