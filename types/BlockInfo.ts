/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BlockInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class BlockInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        block_id?: number;
        data_version?: number;
        bin_data?: Uint8Array;
        is_dirty?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("block_id" in data && data.block_id != undefined) {
                this.block_id = data.block_id;
            }
            if ("data_version" in data && data.data_version != undefined) {
                this.data_version = data.data_version;
            }
            if ("bin_data" in data && data.bin_data != undefined) {
                this.bin_data = data.bin_data;
            }
            if ("is_dirty" in data && data.is_dirty != undefined) {
                this.is_dirty = data.is_dirty;
            }
        }
    }
    get block_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set block_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get data_version() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set data_version(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get bin_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set bin_data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_dirty() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_dirty(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        block_id?: number;
        data_version?: number;
        bin_data?: Uint8Array;
        is_dirty?: boolean;
    }): BlockInfo {
        const message = new BlockInfo({});
        if (data.block_id != null) {
            message.block_id = data.block_id;
        }
        if (data.data_version != null) {
            message.data_version = data.data_version;
        }
        if (data.bin_data != null) {
            message.bin_data = data.bin_data;
        }
        if (data.is_dirty != null) {
            message.is_dirty = data.is_dirty;
        }
        return message;
    }
    toObject() {
        const data: {
            block_id?: number;
            data_version?: number;
            bin_data?: Uint8Array;
            is_dirty?: boolean;
        } = {};
        if (this.block_id != null) {
            data.block_id = this.block_id;
        }
        if (this.data_version != null) {
            data.data_version = this.data_version;
        }
        if (this.bin_data != null) {
            data.bin_data = this.bin_data;
        }
        if (this.is_dirty != null) {
            data.is_dirty = this.is_dirty;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.block_id != 0)
            writer.writeUint32(1, this.block_id);
        if (this.data_version != 0)
            writer.writeUint32(2, this.data_version);
        if (this.bin_data.length)
            writer.writeBytes(3, this.bin_data);
        if (this.is_dirty != false)
            writer.writeBool(4, this.is_dirty);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.block_id = reader.readUint32();
                    break;
                case 2:
                    message.data_version = reader.readUint32();
                    break;
                case 3:
                    message.bin_data = reader.readBytes();
                    break;
                case 4:
                    message.is_dirty = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BlockInfo {
        return BlockInfo.deserialize(bytes);
    }
}
