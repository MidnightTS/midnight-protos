// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "BlockInfo.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.BlockInfo
 */
export interface BlockInfo {
    /**
     * @generated from protobuf field: optional uint32 block_id = 1;
     */
    blockId?: number;
    /**
     * @generated from protobuf field: optional uint32 data_version = 2;
     */
    dataVersion?: number;
    /**
     * @generated from protobuf field: optional bytes bin_data = 3;
     */
    binData?: Uint8Array;
    /**
     * @generated from protobuf field: optional bool is_dirty = 4;
     */
    isDirty?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlockInfo$Type extends MessageType<BlockInfo> {
    constructor() {
        super("com.midnights.game.BlockInfo", [
            { no: 1, name: "block_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "bin_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "is_dirty", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BlockInfo>): BlockInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockInfo): BlockInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 block_id */ 1:
                    message.blockId = reader.uint32();
                    break;
                case /* optional uint32 data_version */ 2:
                    message.dataVersion = reader.uint32();
                    break;
                case /* optional bytes bin_data */ 3:
                    message.binData = reader.bytes();
                    break;
                case /* optional bool is_dirty */ 4:
                    message.isDirty = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 block_id = 1; */
        if (message.blockId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.blockId);
        /* optional uint32 data_version = 2; */
        if (message.dataVersion !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dataVersion);
        /* optional bytes bin_data = 3; */
        if (message.binData !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.binData);
        /* optional bool is_dirty = 4; */
        if (message.isDirty !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isDirty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlockInfo
 */
export const BlockInfo = new BlockInfo$Type();
