// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "VintageCampChallengeStageData.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VintageCampChallengeLevelData } from "./VintageCampChallengeLevelData";
/**
 * @generated from protobuf message VintageCampChallengeStageData
 */
export interface VintageCampChallengeStageData {
    /**
     * @generated from protobuf field: uint32 max_finished_level = 4;
     */
    maxFinishedLevel: number;
    /**
     * @generated from protobuf field: bool is_finish = 14;
     */
    isFinish: boolean;
    /**
     * @generated from protobuf field: map<uint32, VintageCampChallengeLevelData> camp_level_map = 6;
     */
    campLevelMap: {
        [key: number]: VintageCampChallengeLevelData;
    };
    /**
     * @generated from protobuf field: bool is_open = 2;
     */
    isOpen: boolean;
    /**
     * @generated from protobuf field: uint32 stage_id = 13;
     */
    stageId: number;
    /**
     * @generated from protobuf field: uint32 open_time = 7;
     */
    openTime: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampChallengeStageData$Type extends MessageType<VintageCampChallengeStageData> {
    constructor() {
        super("VintageCampChallengeStageData", [
            { no: 4, name: "max_finished_level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_finish", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "camp_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageCampChallengeLevelData } },
            { no: 2, name: "is_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "open_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageCampChallengeStageData>): VintageCampChallengeStageData {
        const message = { maxFinishedLevel: 0, isFinish: false, campLevelMap: {}, isOpen: false, stageId: 0, openTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageCampChallengeStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageCampChallengeStageData): VintageCampChallengeStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 max_finished_level */ 4:
                    message.maxFinishedLevel = reader.uint32();
                    break;
                case /* bool is_finish */ 14:
                    message.isFinish = reader.bool();
                    break;
                case /* map<uint32, VintageCampChallengeLevelData> camp_level_map */ 6:
                    this.binaryReadMap6(message.campLevelMap, reader, options);
                    break;
                case /* bool is_open */ 2:
                    message.isOpen = reader.bool();
                    break;
                case /* uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: VintageCampChallengeStageData["campLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageCampChallengeStageData["campLevelMap"] | undefined, val: VintageCampChallengeStageData["campLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageCampChallengeLevelData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field VintageCampChallengeStageData.camp_level_map");
            }
        }
        map[key ?? 0] = val ?? VintageCampChallengeLevelData.create();
    }
    internalBinaryWrite(message: VintageCampChallengeStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 max_finished_level = 4; */
        if (message.maxFinishedLevel !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxFinishedLevel);
        /* bool is_finish = 14; */
        if (message.isFinish !== false)
            writer.tag(14, WireType.Varint).bool(message.isFinish);
        /* map<uint32, VintageCampChallengeLevelData> camp_level_map = 6; */
        for (let k of Object.keys(message.campLevelMap)) {
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageCampChallengeLevelData.internalBinaryWrite(message.campLevelMap[k as any], writer, options);
            writer.join().join();
        }
        /* bool is_open = 2; */
        if (message.isOpen !== false)
            writer.tag(2, WireType.Varint).bool(message.isOpen);
        /* uint32 stage_id = 13; */
        if (message.stageId !== 0)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* uint32 open_time = 7; */
        if (message.openTime !== 0)
            writer.tag(7, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VintageCampChallengeStageData
 */
export const VintageCampChallengeStageData = new VintageCampChallengeStageData$Type();
