"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HuntingRevealClueNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HuntingRevealClueNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HuntingRevealClueNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./HuntingPair");
const dependency_2 = require("./Vector");
const pb_1 = require("google-protobuf");
class HuntingRevealClueNotify extends pb_1.Message {
    constructor(data) {
        super();
        _HuntingRevealClueNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _HuntingRevealClueNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("finish_clue_count" in data && data.finish_clue_count != undefined) {
                this.finish_clue_count = data.finish_clue_count;
            }
            if ("clue_position" in data && data.clue_position != undefined) {
                this.clue_position = data.clue_position;
            }
            if ("hunting_pair" in data && data.hunting_pair != undefined) {
                this.hunting_pair = data.hunting_pair;
            }
            if ("finished_group_id" in data && data.finished_group_id != undefined) {
                this.finished_group_id = data.finished_group_id;
            }
        }
    }
    get finish_clue_count() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set finish_clue_count(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get clue_position() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 4);
    }
    set clue_position(value) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_clue_position() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get hunting_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.HuntingPair, 12);
    }
    set hunting_pair(value) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_hunting_pair() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get finished_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set finished_group_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new HuntingRevealClueNotify({});
        if (data.finish_clue_count != null) {
            message.finish_clue_count = data.finish_clue_count;
        }
        if (data.clue_position != null) {
            message.clue_position = dependency_2.Vector.fromObject(data.clue_position);
        }
        if (data.hunting_pair != null) {
            message.hunting_pair = dependency_1.HuntingPair.fromObject(data.hunting_pair);
        }
        if (data.finished_group_id != null) {
            message.finished_group_id = data.finished_group_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.finish_clue_count != null) {
            data.finish_clue_count = this.finish_clue_count;
        }
        if (this.clue_position != null) {
            data.clue_position = this.clue_position.toObject();
        }
        if (this.hunting_pair != null) {
            data.hunting_pair = this.hunting_pair.toObject();
        }
        if (this.finished_group_id != null) {
            data.finished_group_id = this.finished_group_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.finish_clue_count != 0)
            writer.writeUint32(5, this.finish_clue_count);
        if (this.has_clue_position)
            writer.writeMessage(4, this.clue_position, () => this.clue_position.serialize(writer));
        if (this.has_hunting_pair)
            writer.writeMessage(12, this.hunting_pair, () => this.hunting_pair.serialize(writer));
        if (this.finished_group_id != 0)
            writer.writeUint32(7, this.finished_group_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HuntingRevealClueNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.finish_clue_count = reader.readUint32();
                    break;
                case 4:
                    reader.readMessage(message.clue_position, () => message.clue_position = dependency_2.Vector.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.hunting_pair, () => message.hunting_pair = dependency_1.HuntingPair.deserialize(reader));
                    break;
                case 7:
                    message.finished_group_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return HuntingRevealClueNotify.deserialize(bytes);
    }
}
exports.HuntingRevealClueNotify = HuntingRevealClueNotify;
_HuntingRevealClueNotify_one_of_decls = new WeakMap();
