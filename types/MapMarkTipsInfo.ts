/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MapMarkTipsInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MapMarkTipsType";
import * as pb_1 from "google-protobuf";
export class MapMarkTipsInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tips_type?: dependency_1.MapMarkTipsType;
        point_id_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tips_type" in data && data.tips_type != undefined) {
                this.tips_type = data.tips_type;
            }
            if ("point_id_list" in data && data.point_id_list != undefined) {
                this.point_id_list = data.point_id_list;
            }
        }
    }
    get tips_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.MapMarkTipsType.MAP_MARK_TIPS_TYPE_DUNGEON_ELEMENT_TRIAL) as dependency_1.MapMarkTipsType;
    }
    set tips_type(value: dependency_1.MapMarkTipsType) {
        pb_1.Message.setField(this, 1, value);
    }
    get point_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set point_id_list(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        tips_type?: dependency_1.MapMarkTipsType;
        point_id_list?: number[];
    }): MapMarkTipsInfo {
        const message = new MapMarkTipsInfo({});
        if (data.tips_type != null) {
            message.tips_type = data.tips_type;
        }
        if (data.point_id_list != null) {
            message.point_id_list = data.point_id_list;
        }
        return message;
    }
    toObject() {
        const data: {
            tips_type?: dependency_1.MapMarkTipsType;
            point_id_list?: number[];
        } = {};
        if (this.tips_type != null) {
            data.tips_type = this.tips_type;
        }
        if (this.point_id_list != null) {
            data.point_id_list = this.point_id_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tips_type != dependency_1.MapMarkTipsType.MAP_MARK_TIPS_TYPE_DUNGEON_ELEMENT_TRIAL)
            writer.writeEnum(1, this.tips_type);
        if (this.point_id_list.length)
            writer.writePackedUint32(2, this.point_id_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MapMarkTipsInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MapMarkTipsInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tips_type = reader.readEnum();
                    break;
                case 2:
                    message.point_id_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MapMarkTipsInfo {
        return MapMarkTipsInfo.deserialize(bytes);
    }
}
