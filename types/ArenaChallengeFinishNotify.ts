/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ArenaChallengeFinishNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ArenaChallengeChildChallengeInfo";
import * as pb_1 from "google-protobuf";
export class ArenaChallengeFinishNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        arena_challenge_level?: number;
        arena_challenge_id?: number;
        child_challenge_list?: dependency_1.ArenaChallengeChildChallengeInfo[];
        is_success?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("arena_challenge_level" in data && data.arena_challenge_level != undefined) {
                this.arena_challenge_level = data.arena_challenge_level;
            }
            if ("arena_challenge_id" in data && data.arena_challenge_id != undefined) {
                this.arena_challenge_id = data.arena_challenge_id;
            }
            if ("child_challenge_list" in data && data.child_challenge_list != undefined) {
                this.child_challenge_list = data.child_challenge_list;
            }
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
        }
    }
    get arena_challenge_level() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set arena_challenge_level(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get arena_challenge_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set arena_challenge_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get child_challenge_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ArenaChallengeChildChallengeInfo, 2) as dependency_1.ArenaChallengeChildChallengeInfo[];
    }
    set child_challenge_list(value: dependency_1.ArenaChallengeChildChallengeInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        arena_challenge_level?: number;
        arena_challenge_id?: number;
        child_challenge_list?: ReturnType<typeof dependency_1.ArenaChallengeChildChallengeInfo.prototype.toObject>[];
        is_success?: boolean;
    }): ArenaChallengeFinishNotify {
        const message = new ArenaChallengeFinishNotify({});
        if (data.arena_challenge_level != null) {
            message.arena_challenge_level = data.arena_challenge_level;
        }
        if (data.arena_challenge_id != null) {
            message.arena_challenge_id = data.arena_challenge_id;
        }
        if (data.child_challenge_list != null) {
            message.child_challenge_list = data.child_challenge_list.map(item => dependency_1.ArenaChallengeChildChallengeInfo.fromObject(item));
        }
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        return message;
    }
    toObject() {
        const data: {
            arena_challenge_level?: number;
            arena_challenge_id?: number;
            child_challenge_list?: ReturnType<typeof dependency_1.ArenaChallengeChildChallengeInfo.prototype.toObject>[];
            is_success?: boolean;
        } = {};
        if (this.arena_challenge_level != null) {
            data.arena_challenge_level = this.arena_challenge_level;
        }
        if (this.arena_challenge_id != null) {
            data.arena_challenge_id = this.arena_challenge_id;
        }
        if (this.child_challenge_list != null) {
            data.child_challenge_list = this.child_challenge_list.map((item: dependency_1.ArenaChallengeChildChallengeInfo) => item.toObject());
        }
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.arena_challenge_level != 0)
            writer.writeUint32(13, this.arena_challenge_level);
        if (this.arena_challenge_id != 0)
            writer.writeUint32(3, this.arena_challenge_id);
        if (this.child_challenge_list.length)
            writer.writeRepeatedMessage(2, this.child_challenge_list, (item: dependency_1.ArenaChallengeChildChallengeInfo) => item.serialize(writer));
        if (this.is_success != false)
            writer.writeBool(12, this.is_success);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArenaChallengeFinishNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArenaChallengeFinishNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.arena_challenge_level = reader.readUint32();
                    break;
                case 3:
                    message.arena_challenge_id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.child_challenge_list, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ArenaChallengeChildChallengeInfo.deserialize(reader), dependency_1.ArenaChallengeChildChallengeInfo));
                    break;
                case 12:
                    message.is_success = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ArenaChallengeFinishNotify {
        return ArenaChallengeFinishNotify.deserialize(bytes);
    }
}
