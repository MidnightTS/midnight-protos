// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "ActivityCondStateChangeNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Uint32Pair } from "./Uint32Pair";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 2194;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message ActivityCondStateChangeNotify
 */
export interface ActivityCondStateChangeNotify {
    /**
     * @generated from protobuf field: uint32 activity_id = 5;
     */
    activityId: number;
    /**
     * @generated from protobuf field: uint32 schedule_id = 14;
     */
    scheduleId: number;
    /**
     * @generated from protobuf field: repeated uint32 Unk3300_HKKNIHNBHAE = 1 [json_name = "Unk3300HKKNIHNBHAE"];
     */
    unk3300HKKNIHNBHAE: number[];
    /**
     * @generated from protobuf field: repeated uint32 Unk3300_BGNIBLKCPCA = 4 [json_name = "Unk3300BGNIBLKCPCA"];
     */
    unk3300BGNIBLKCPCA: number[];
    /**
     * @generated from protobuf field: repeated uint32 activated_sale_id_list = 8;
     */
    activatedSaleIdList: number[];
    /**
     * @generated from protobuf field: repeated Uint32Pair disable_transfer_point_interaction_list = 11;
     */
    disableTransferPointInteractionList: Uint32Pair[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCondStateChangeNotify$Type extends MessageType<ActivityCondStateChangeNotify> {
    constructor() {
        super("ActivityCondStateChangeNotify", [
            { no: 5, name: "activity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "Unk3300_HKKNIHNBHAE", kind: "scalar", jsonName: "Unk3300HKKNIHNBHAE", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "Unk3300_BGNIBLKCPCA", kind: "scalar", jsonName: "Unk3300BGNIBLKCPCA", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "activated_sale_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "disable_transfer_point_interaction_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Uint32Pair }
        ]);
    }
    create(value?: PartialMessage<ActivityCondStateChangeNotify>): ActivityCondStateChangeNotify {
        const message = { activityId: 0, scheduleId: 0, unk3300HKKNIHNBHAE: [], unk3300BGNIBLKCPCA: [], activatedSaleIdList: [], disableTransferPointInteractionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityCondStateChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityCondStateChangeNotify): ActivityCondStateChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 activity_id */ 5:
                    message.activityId = reader.uint32();
                    break;
                case /* uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated uint32 Unk3300_HKKNIHNBHAE = 1 [json_name = "Unk3300HKKNIHNBHAE"];*/ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unk3300HKKNIHNBHAE.push(reader.uint32());
                    else
                        message.unk3300HKKNIHNBHAE.push(reader.uint32());
                    break;
                case /* repeated uint32 Unk3300_BGNIBLKCPCA = 4 [json_name = "Unk3300BGNIBLKCPCA"];*/ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unk3300BGNIBLKCPCA.push(reader.uint32());
                    else
                        message.unk3300BGNIBLKCPCA.push(reader.uint32());
                    break;
                case /* repeated uint32 activated_sale_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatedSaleIdList.push(reader.uint32());
                    else
                        message.activatedSaleIdList.push(reader.uint32());
                    break;
                case /* repeated Uint32Pair disable_transfer_point_interaction_list */ 11:
                    message.disableTransferPointInteractionList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityCondStateChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 activity_id = 5; */
        if (message.activityId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.activityId);
        /* uint32 schedule_id = 14; */
        if (message.scheduleId !== 0)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        /* repeated uint32 Unk3300_HKKNIHNBHAE = 1 [json_name = "Unk3300HKKNIHNBHAE"]; */
        if (message.unk3300HKKNIHNBHAE.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unk3300HKKNIHNBHAE.length; i++)
                writer.uint32(message.unk3300HKKNIHNBHAE[i]);
            writer.join();
        }
        /* repeated uint32 Unk3300_BGNIBLKCPCA = 4 [json_name = "Unk3300BGNIBLKCPCA"]; */
        if (message.unk3300BGNIBLKCPCA.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unk3300BGNIBLKCPCA.length; i++)
                writer.uint32(message.unk3300BGNIBLKCPCA[i]);
            writer.join();
        }
        /* repeated uint32 activated_sale_id_list = 8; */
        if (message.activatedSaleIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activatedSaleIdList.length; i++)
                writer.uint32(message.activatedSaleIdList[i]);
            writer.join();
        }
        /* repeated Uint32Pair disable_transfer_point_interaction_list = 11; */
        for (let i = 0; i < message.disableTransferPointInteractionList.length; i++)
            Uint32Pair.internalBinaryWrite(message.disableTransferPointInteractionList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivityCondStateChangeNotify
 */
export const ActivityCondStateChangeNotify = new ActivityCondStateChangeNotify$Type();
