/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FriendBrief.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./FriendEnterHomeOption";
import * as dependency_2 from "./FriendOnlineState";
import * as dependency_3 from "./PlatformType";
import * as dependency_4 from "./ProfilePicture";
import * as dependency_5 from "./SocialShowAvatarInfo";
import * as pb_1 from "google-protobuf";
export class FriendBrief extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        nickname?: string;
        level?: number;
        avatar_id?: number;
        world_level?: number;
        signature?: string;
        online_state?: dependency_2.FriendOnlineState;
        param?: number;
        is_mp_mode_available?: boolean;
        online_id?: string;
        last_active_time?: number;
        name_card_id?: number;
        mp_player_num?: number;
        is_chat_no_disturb?: boolean;
        chat_sequence?: number;
        remark_name?: string;
        show_avatar_info_list?: dependency_5.SocialShowAvatarInfo[];
        friend_enter_home_option?: dependency_1.FriendEnterHomeOption;
        profile_picture?: dependency_4.ProfilePicture;
        is_game_source?: boolean;
        is_psn_source?: boolean;
        platform_type?: dependency_3.PlatformType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [22], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("world_level" in data && data.world_level != undefined) {
                this.world_level = data.world_level;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("online_state" in data && data.online_state != undefined) {
                this.online_state = data.online_state;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("is_mp_mode_available" in data && data.is_mp_mode_available != undefined) {
                this.is_mp_mode_available = data.is_mp_mode_available;
            }
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
            if ("last_active_time" in data && data.last_active_time != undefined) {
                this.last_active_time = data.last_active_time;
            }
            if ("name_card_id" in data && data.name_card_id != undefined) {
                this.name_card_id = data.name_card_id;
            }
            if ("mp_player_num" in data && data.mp_player_num != undefined) {
                this.mp_player_num = data.mp_player_num;
            }
            if ("is_chat_no_disturb" in data && data.is_chat_no_disturb != undefined) {
                this.is_chat_no_disturb = data.is_chat_no_disturb;
            }
            if ("chat_sequence" in data && data.chat_sequence != undefined) {
                this.chat_sequence = data.chat_sequence;
            }
            if ("remark_name" in data && data.remark_name != undefined) {
                this.remark_name = data.remark_name;
            }
            if ("show_avatar_info_list" in data && data.show_avatar_info_list != undefined) {
                this.show_avatar_info_list = data.show_avatar_info_list;
            }
            if ("friend_enter_home_option" in data && data.friend_enter_home_option != undefined) {
                this.friend_enter_home_option = data.friend_enter_home_option;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("is_game_source" in data && data.is_game_source != undefined) {
                this.is_game_source = data.is_game_source;
            }
            if ("is_psn_source" in data && data.is_psn_source != undefined) {
                this.is_psn_source = data.is_psn_source;
            }
            if ("platform_type" in data && data.platform_type != undefined) {
                this.platform_type = data.platform_type;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get world_level() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set world_level(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get signature() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set signature(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get online_state() {
        return pb_1.Message.getFieldWithDefault(this, 7, dependency_2.FriendOnlineState.FRIEND_ONLINE_STATE_FREIEND_DISCONNECT) as dependency_2.FriendOnlineState;
    }
    set online_state(value: dependency_2.FriendOnlineState) {
        pb_1.Message.setField(this, 7, value);
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set param(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_mp_mode_available() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_mp_mode_available(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set online_id(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get last_active_time() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set last_active_time(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get name_card_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set name_card_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get mp_player_num() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set mp_player_num(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_chat_no_disturb() {
        return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
    }
    set is_chat_no_disturb(value: boolean) {
        pb_1.Message.setField(this, 15, value);
    }
    get chat_sequence() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
    }
    set chat_sequence(value: number) {
        pb_1.Message.setField(this, 16, value);
    }
    get remark_name() {
        return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
    }
    set remark_name(value: string) {
        pb_1.Message.setField(this, 17, value);
    }
    get show_avatar_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_5.SocialShowAvatarInfo, 22) as dependency_5.SocialShowAvatarInfo[];
    }
    set show_avatar_info_list(value: dependency_5.SocialShowAvatarInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 22, value);
    }
    get friend_enter_home_option() {
        return pb_1.Message.getFieldWithDefault(this, 23, dependency_1.FriendEnterHomeOption.FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM) as dependency_1.FriendEnterHomeOption;
    }
    set friend_enter_home_option(value: dependency_1.FriendEnterHomeOption) {
        pb_1.Message.setField(this, 23, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_4.ProfilePicture, 24) as dependency_4.ProfilePicture;
    }
    set profile_picture(value: dependency_4.ProfilePicture) {
        pb_1.Message.setWrapperField(this, 24, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 24) != null;
    }
    get is_game_source() {
        return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
    }
    set is_game_source(value: boolean) {
        pb_1.Message.setField(this, 25, value);
    }
    get is_psn_source() {
        return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
    }
    set is_psn_source(value: boolean) {
        pb_1.Message.setField(this, 26, value);
    }
    get platform_type() {
        return pb_1.Message.getFieldWithDefault(this, 27, dependency_3.PlatformType.PLATFORM_TYPE_EDITOR) as dependency_3.PlatformType;
    }
    set platform_type(value: dependency_3.PlatformType) {
        pb_1.Message.setField(this, 27, value);
    }
    static fromObject(data: {
        uid?: number;
        nickname?: string;
        level?: number;
        avatar_id?: number;
        world_level?: number;
        signature?: string;
        online_state?: dependency_2.FriendOnlineState;
        param?: number;
        is_mp_mode_available?: boolean;
        online_id?: string;
        last_active_time?: number;
        name_card_id?: number;
        mp_player_num?: number;
        is_chat_no_disturb?: boolean;
        chat_sequence?: number;
        remark_name?: string;
        show_avatar_info_list?: ReturnType<typeof dependency_5.SocialShowAvatarInfo.prototype.toObject>[];
        friend_enter_home_option?: dependency_1.FriendEnterHomeOption;
        profile_picture?: ReturnType<typeof dependency_4.ProfilePicture.prototype.toObject>;
        is_game_source?: boolean;
        is_psn_source?: boolean;
        platform_type?: dependency_3.PlatformType;
    }): FriendBrief {
        const message = new FriendBrief({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.world_level != null) {
            message.world_level = data.world_level;
        }
        if (data.signature != null) {
            message.signature = data.signature;
        }
        if (data.online_state != null) {
            message.online_state = data.online_state;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.is_mp_mode_available != null) {
            message.is_mp_mode_available = data.is_mp_mode_available;
        }
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        if (data.last_active_time != null) {
            message.last_active_time = data.last_active_time;
        }
        if (data.name_card_id != null) {
            message.name_card_id = data.name_card_id;
        }
        if (data.mp_player_num != null) {
            message.mp_player_num = data.mp_player_num;
        }
        if (data.is_chat_no_disturb != null) {
            message.is_chat_no_disturb = data.is_chat_no_disturb;
        }
        if (data.chat_sequence != null) {
            message.chat_sequence = data.chat_sequence;
        }
        if (data.remark_name != null) {
            message.remark_name = data.remark_name;
        }
        if (data.show_avatar_info_list != null) {
            message.show_avatar_info_list = data.show_avatar_info_list.map(item => dependency_5.SocialShowAvatarInfo.fromObject(item));
        }
        if (data.friend_enter_home_option != null) {
            message.friend_enter_home_option = data.friend_enter_home_option;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_4.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.is_game_source != null) {
            message.is_game_source = data.is_game_source;
        }
        if (data.is_psn_source != null) {
            message.is_psn_source = data.is_psn_source;
        }
        if (data.platform_type != null) {
            message.platform_type = data.platform_type;
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            nickname?: string;
            level?: number;
            avatar_id?: number;
            world_level?: number;
            signature?: string;
            online_state?: dependency_2.FriendOnlineState;
            param?: number;
            is_mp_mode_available?: boolean;
            online_id?: string;
            last_active_time?: number;
            name_card_id?: number;
            mp_player_num?: number;
            is_chat_no_disturb?: boolean;
            chat_sequence?: number;
            remark_name?: string;
            show_avatar_info_list?: ReturnType<typeof dependency_5.SocialShowAvatarInfo.prototype.toObject>[];
            friend_enter_home_option?: dependency_1.FriendEnterHomeOption;
            profile_picture?: ReturnType<typeof dependency_4.ProfilePicture.prototype.toObject>;
            is_game_source?: boolean;
            is_psn_source?: boolean;
            platform_type?: dependency_3.PlatformType;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.world_level != null) {
            data.world_level = this.world_level;
        }
        if (this.signature != null) {
            data.signature = this.signature;
        }
        if (this.online_state != null) {
            data.online_state = this.online_state;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.is_mp_mode_available != null) {
            data.is_mp_mode_available = this.is_mp_mode_available;
        }
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        if (this.last_active_time != null) {
            data.last_active_time = this.last_active_time;
        }
        if (this.name_card_id != null) {
            data.name_card_id = this.name_card_id;
        }
        if (this.mp_player_num != null) {
            data.mp_player_num = this.mp_player_num;
        }
        if (this.is_chat_no_disturb != null) {
            data.is_chat_no_disturb = this.is_chat_no_disturb;
        }
        if (this.chat_sequence != null) {
            data.chat_sequence = this.chat_sequence;
        }
        if (this.remark_name != null) {
            data.remark_name = this.remark_name;
        }
        if (this.show_avatar_info_list != null) {
            data.show_avatar_info_list = this.show_avatar_info_list.map((item: dependency_5.SocialShowAvatarInfo) => item.toObject());
        }
        if (this.friend_enter_home_option != null) {
            data.friend_enter_home_option = this.friend_enter_home_option;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.is_game_source != null) {
            data.is_game_source = this.is_game_source;
        }
        if (this.is_psn_source != null) {
            data.is_psn_source = this.is_psn_source;
        }
        if (this.platform_type != null) {
            data.platform_type = this.platform_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(1, this.uid);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.level != 0)
            writer.writeUint32(3, this.level);
        if (this.avatar_id != 0)
            writer.writeUint32(4, this.avatar_id);
        if (this.world_level != 0)
            writer.writeUint32(5, this.world_level);
        if (this.signature.length)
            writer.writeString(6, this.signature);
        if (this.online_state != dependency_2.FriendOnlineState.FRIEND_ONLINE_STATE_FREIEND_DISCONNECT)
            writer.writeEnum(7, this.online_state);
        if (this.param != 0)
            writer.writeUint32(8, this.param);
        if (this.is_mp_mode_available != false)
            writer.writeBool(10, this.is_mp_mode_available);
        if (this.online_id.length)
            writer.writeString(11, this.online_id);
        if (this.last_active_time != 0)
            writer.writeUint32(12, this.last_active_time);
        if (this.name_card_id != 0)
            writer.writeUint32(13, this.name_card_id);
        if (this.mp_player_num != 0)
            writer.writeUint32(14, this.mp_player_num);
        if (this.is_chat_no_disturb != false)
            writer.writeBool(15, this.is_chat_no_disturb);
        if (this.chat_sequence != 0)
            writer.writeUint32(16, this.chat_sequence);
        if (this.remark_name.length)
            writer.writeString(17, this.remark_name);
        if (this.show_avatar_info_list.length)
            writer.writeRepeatedMessage(22, this.show_avatar_info_list, (item: dependency_5.SocialShowAvatarInfo) => item.serialize(writer));
        if (this.friend_enter_home_option != dependency_1.FriendEnterHomeOption.FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM)
            writer.writeEnum(23, this.friend_enter_home_option);
        if (this.has_profile_picture)
            writer.writeMessage(24, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.is_game_source != false)
            writer.writeBool(25, this.is_game_source);
        if (this.is_psn_source != false)
            writer.writeBool(26, this.is_psn_source);
        if (this.platform_type != dependency_3.PlatformType.PLATFORM_TYPE_EDITOR)
            writer.writeEnum(27, this.platform_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FriendBrief {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FriendBrief();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uid = reader.readUint32();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.level = reader.readUint32();
                    break;
                case 4:
                    message.avatar_id = reader.readUint32();
                    break;
                case 5:
                    message.world_level = reader.readUint32();
                    break;
                case 6:
                    message.signature = reader.readString();
                    break;
                case 7:
                    message.online_state = reader.readEnum();
                    break;
                case 8:
                    message.param = reader.readUint32();
                    break;
                case 10:
                    message.is_mp_mode_available = reader.readBool();
                    break;
                case 11:
                    message.online_id = reader.readString();
                    break;
                case 12:
                    message.last_active_time = reader.readUint32();
                    break;
                case 13:
                    message.name_card_id = reader.readUint32();
                    break;
                case 14:
                    message.mp_player_num = reader.readUint32();
                    break;
                case 15:
                    message.is_chat_no_disturb = reader.readBool();
                    break;
                case 16:
                    message.chat_sequence = reader.readUint32();
                    break;
                case 17:
                    message.remark_name = reader.readString();
                    break;
                case 22:
                    reader.readMessage(message.show_avatar_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 22, dependency_5.SocialShowAvatarInfo.deserialize(reader), dependency_5.SocialShowAvatarInfo));
                    break;
                case 23:
                    message.friend_enter_home_option = reader.readEnum();
                    break;
                case 24:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_4.ProfilePicture.deserialize(reader));
                    break;
                case 25:
                    message.is_game_source = reader.readBool();
                    break;
                case 26:
                    message.is_psn_source = reader.readBool();
                    break;
                case 27:
                    message.platform_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FriendBrief {
        return FriendBrief.deserialize(bytes);
    }
}
