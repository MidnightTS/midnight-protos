// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "FishtankFishInfo.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.FishtankFishInfo
 */
export interface FishtankFishInfo {
    /**
     * @generated from protobuf field: optional float fish_distance_from_water = 1;
     */
    fishDistanceFromWater?: number;
    /**
     * @generated from protobuf field: optional float fish_scale = 2;
     */
    fishScale?: number;
    /**
     * @generated from protobuf field: optional float initial_rotation_y = 3;
     */
    initialRotationY?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FishtankFishInfo$Type extends MessageType<FishtankFishInfo> {
    constructor() {
        super("com.midnights.game.FishtankFishInfo", [
            { no: 1, name: "fish_distance_from_water", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "fish_scale", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "initial_rotation_y", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<FishtankFishInfo>): FishtankFishInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FishtankFishInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FishtankFishInfo): FishtankFishInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float fish_distance_from_water */ 1:
                    message.fishDistanceFromWater = reader.float();
                    break;
                case /* optional float fish_scale */ 2:
                    message.fishScale = reader.float();
                    break;
                case /* optional float initial_rotation_y */ 3:
                    message.initialRotationY = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FishtankFishInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float fish_distance_from_water = 1; */
        if (message.fishDistanceFromWater !== undefined)
            writer.tag(1, WireType.Bit32).float(message.fishDistanceFromWater);
        /* optional float fish_scale = 2; */
        if (message.fishScale !== undefined)
            writer.tag(2, WireType.Bit32).float(message.fishScale);
        /* optional float initial_rotation_y = 3; */
        if (message.initialRotationY !== undefined)
            writer.tag(3, WireType.Bit32).float(message.initialRotationY);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishtankFishInfo
 */
export const FishtankFishInfo = new FishtankFishInfo$Type();
