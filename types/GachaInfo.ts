/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GachaInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GachaUpInfo";
import * as pb_1 from "google-protobuf";
export class GachaInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ten_cost_item_id?: number;
        end_time?: number;
        display_up4_item_list?: number[];
        Unk3100_JKILPCKLNPI?: number;
        gacha_up_info_list?: dependency_1.GachaUpInfo[];
        gacha_prob_url?: string;
        gacha_prefab_path?: string;
        wish_item_id?: number;
        begin_time?: number;
        wish_max_progress?: number;
        schedule_id?: number;
        gacha_prob_url_oversea?: string;
        gacha_type?: number;
        left_gacha_times?: number;
        display_up5_item_list?: number[];
        gacha_times_limit?: number;
        cost_item_num?: number;
        is_new_wish?: boolean;
        cost_item_id?: number;
        ten_cost_item_num?: number;
        gacha_preview_prefab_path?: string;
        wish_progress?: number;
        title_textmap?: string;
        gacha_record_url_oversea?: string;
        gacha_sort_id?: number;
        gacha_record_url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1875, 1233, 2006], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ten_cost_item_id" in data && data.ten_cost_item_id != undefined) {
                this.ten_cost_item_id = data.ten_cost_item_id;
            }
            if ("end_time" in data && data.end_time != undefined) {
                this.end_time = data.end_time;
            }
            if ("display_up4_item_list" in data && data.display_up4_item_list != undefined) {
                this.display_up4_item_list = data.display_up4_item_list;
            }
            if ("Unk3100_JKILPCKLNPI" in data && data.Unk3100_JKILPCKLNPI != undefined) {
                this.Unk3100_JKILPCKLNPI = data.Unk3100_JKILPCKLNPI;
            }
            if ("gacha_up_info_list" in data && data.gacha_up_info_list != undefined) {
                this.gacha_up_info_list = data.gacha_up_info_list;
            }
            if ("gacha_prob_url" in data && data.gacha_prob_url != undefined) {
                this.gacha_prob_url = data.gacha_prob_url;
            }
            if ("gacha_prefab_path" in data && data.gacha_prefab_path != undefined) {
                this.gacha_prefab_path = data.gacha_prefab_path;
            }
            if ("wish_item_id" in data && data.wish_item_id != undefined) {
                this.wish_item_id = data.wish_item_id;
            }
            if ("begin_time" in data && data.begin_time != undefined) {
                this.begin_time = data.begin_time;
            }
            if ("wish_max_progress" in data && data.wish_max_progress != undefined) {
                this.wish_max_progress = data.wish_max_progress;
            }
            if ("schedule_id" in data && data.schedule_id != undefined) {
                this.schedule_id = data.schedule_id;
            }
            if ("gacha_prob_url_oversea" in data && data.gacha_prob_url_oversea != undefined) {
                this.gacha_prob_url_oversea = data.gacha_prob_url_oversea;
            }
            if ("gacha_type" in data && data.gacha_type != undefined) {
                this.gacha_type = data.gacha_type;
            }
            if ("left_gacha_times" in data && data.left_gacha_times != undefined) {
                this.left_gacha_times = data.left_gacha_times;
            }
            if ("display_up5_item_list" in data && data.display_up5_item_list != undefined) {
                this.display_up5_item_list = data.display_up5_item_list;
            }
            if ("gacha_times_limit" in data && data.gacha_times_limit != undefined) {
                this.gacha_times_limit = data.gacha_times_limit;
            }
            if ("cost_item_num" in data && data.cost_item_num != undefined) {
                this.cost_item_num = data.cost_item_num;
            }
            if ("is_new_wish" in data && data.is_new_wish != undefined) {
                this.is_new_wish = data.is_new_wish;
            }
            if ("cost_item_id" in data && data.cost_item_id != undefined) {
                this.cost_item_id = data.cost_item_id;
            }
            if ("ten_cost_item_num" in data && data.ten_cost_item_num != undefined) {
                this.ten_cost_item_num = data.ten_cost_item_num;
            }
            if ("gacha_preview_prefab_path" in data && data.gacha_preview_prefab_path != undefined) {
                this.gacha_preview_prefab_path = data.gacha_preview_prefab_path;
            }
            if ("wish_progress" in data && data.wish_progress != undefined) {
                this.wish_progress = data.wish_progress;
            }
            if ("title_textmap" in data && data.title_textmap != undefined) {
                this.title_textmap = data.title_textmap;
            }
            if ("gacha_record_url_oversea" in data && data.gacha_record_url_oversea != undefined) {
                this.gacha_record_url_oversea = data.gacha_record_url_oversea;
            }
            if ("gacha_sort_id" in data && data.gacha_sort_id != undefined) {
                this.gacha_sort_id = data.gacha_sort_id;
            }
            if ("gacha_record_url" in data && data.gacha_record_url != undefined) {
                this.gacha_record_url = data.gacha_record_url;
            }
        }
    }
    get ten_cost_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set ten_cost_item_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get end_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set end_time(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get display_up4_item_list() {
        return pb_1.Message.getFieldWithDefault(this, 1875, []) as number[];
    }
    set display_up4_item_list(value: number[]) {
        pb_1.Message.setField(this, 1875, value);
    }
    get Unk3100_JKILPCKLNPI() {
        return pb_1.Message.getFieldWithDefault(this, 469, 0) as number;
    }
    set Unk3100_JKILPCKLNPI(value: number) {
        pb_1.Message.setField(this, 469, value);
    }
    get gacha_up_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.GachaUpInfo, 1233) as dependency_1.GachaUpInfo[];
    }
    set gacha_up_info_list(value: dependency_1.GachaUpInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1233, value);
    }
    get gacha_prob_url() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set gacha_prob_url(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get gacha_prefab_path() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set gacha_prefab_path(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get wish_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 1637, 0) as number;
    }
    set wish_item_id(value: number) {
        pb_1.Message.setField(this, 1637, value);
    }
    get begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set begin_time(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get wish_max_progress() {
        return pb_1.Message.getFieldWithDefault(this, 1222, 0) as number;
    }
    set wish_max_progress(value: number) {
        pb_1.Message.setField(this, 1222, value);
    }
    get schedule_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set schedule_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get gacha_prob_url_oversea() {
        return pb_1.Message.getFieldWithDefault(this, 1481, "") as string;
    }
    set gacha_prob_url_oversea(value: string) {
        pb_1.Message.setField(this, 1481, value);
    }
    get gacha_type() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set gacha_type(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get left_gacha_times() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set left_gacha_times(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get display_up5_item_list() {
        return pb_1.Message.getFieldWithDefault(this, 2006, []) as number[];
    }
    set display_up5_item_list(value: number[]) {
        pb_1.Message.setField(this, 2006, value);
    }
    get gacha_times_limit() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set gacha_times_limit(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get cost_item_num() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set cost_item_num(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get is_new_wish() {
        return pb_1.Message.getFieldWithDefault(this, 733, false) as boolean;
    }
    set is_new_wish(value: boolean) {
        pb_1.Message.setField(this, 733, value);
    }
    get cost_item_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set cost_item_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get ten_cost_item_num() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set ten_cost_item_num(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get gacha_preview_prefab_path() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set gacha_preview_prefab_path(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get wish_progress() {
        return pb_1.Message.getFieldWithDefault(this, 1819, 0) as number;
    }
    set wish_progress(value: number) {
        pb_1.Message.setField(this, 1819, value);
    }
    get title_textmap() {
        return pb_1.Message.getFieldWithDefault(this, 736, "") as string;
    }
    set title_textmap(value: string) {
        pb_1.Message.setField(this, 736, value);
    }
    get gacha_record_url_oversea() {
        return pb_1.Message.getFieldWithDefault(this, 1854, "") as string;
    }
    set gacha_record_url_oversea(value: string) {
        pb_1.Message.setField(this, 1854, value);
    }
    get gacha_sort_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set gacha_sort_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get gacha_record_url() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set gacha_record_url(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        ten_cost_item_id?: number;
        end_time?: number;
        display_up4_item_list?: number[];
        Unk3100_JKILPCKLNPI?: number;
        gacha_up_info_list?: ReturnType<typeof dependency_1.GachaUpInfo.prototype.toObject>[];
        gacha_prob_url?: string;
        gacha_prefab_path?: string;
        wish_item_id?: number;
        begin_time?: number;
        wish_max_progress?: number;
        schedule_id?: number;
        gacha_prob_url_oversea?: string;
        gacha_type?: number;
        left_gacha_times?: number;
        display_up5_item_list?: number[];
        gacha_times_limit?: number;
        cost_item_num?: number;
        is_new_wish?: boolean;
        cost_item_id?: number;
        ten_cost_item_num?: number;
        gacha_preview_prefab_path?: string;
        wish_progress?: number;
        title_textmap?: string;
        gacha_record_url_oversea?: string;
        gacha_sort_id?: number;
        gacha_record_url?: string;
    }): GachaInfo {
        const message = new GachaInfo({});
        if (data.ten_cost_item_id != null) {
            message.ten_cost_item_id = data.ten_cost_item_id;
        }
        if (data.end_time != null) {
            message.end_time = data.end_time;
        }
        if (data.display_up4_item_list != null) {
            message.display_up4_item_list = data.display_up4_item_list;
        }
        if (data.Unk3100_JKILPCKLNPI != null) {
            message.Unk3100_JKILPCKLNPI = data.Unk3100_JKILPCKLNPI;
        }
        if (data.gacha_up_info_list != null) {
            message.gacha_up_info_list = data.gacha_up_info_list.map(item => dependency_1.GachaUpInfo.fromObject(item));
        }
        if (data.gacha_prob_url != null) {
            message.gacha_prob_url = data.gacha_prob_url;
        }
        if (data.gacha_prefab_path != null) {
            message.gacha_prefab_path = data.gacha_prefab_path;
        }
        if (data.wish_item_id != null) {
            message.wish_item_id = data.wish_item_id;
        }
        if (data.begin_time != null) {
            message.begin_time = data.begin_time;
        }
        if (data.wish_max_progress != null) {
            message.wish_max_progress = data.wish_max_progress;
        }
        if (data.schedule_id != null) {
            message.schedule_id = data.schedule_id;
        }
        if (data.gacha_prob_url_oversea != null) {
            message.gacha_prob_url_oversea = data.gacha_prob_url_oversea;
        }
        if (data.gacha_type != null) {
            message.gacha_type = data.gacha_type;
        }
        if (data.left_gacha_times != null) {
            message.left_gacha_times = data.left_gacha_times;
        }
        if (data.display_up5_item_list != null) {
            message.display_up5_item_list = data.display_up5_item_list;
        }
        if (data.gacha_times_limit != null) {
            message.gacha_times_limit = data.gacha_times_limit;
        }
        if (data.cost_item_num != null) {
            message.cost_item_num = data.cost_item_num;
        }
        if (data.is_new_wish != null) {
            message.is_new_wish = data.is_new_wish;
        }
        if (data.cost_item_id != null) {
            message.cost_item_id = data.cost_item_id;
        }
        if (data.ten_cost_item_num != null) {
            message.ten_cost_item_num = data.ten_cost_item_num;
        }
        if (data.gacha_preview_prefab_path != null) {
            message.gacha_preview_prefab_path = data.gacha_preview_prefab_path;
        }
        if (data.wish_progress != null) {
            message.wish_progress = data.wish_progress;
        }
        if (data.title_textmap != null) {
            message.title_textmap = data.title_textmap;
        }
        if (data.gacha_record_url_oversea != null) {
            message.gacha_record_url_oversea = data.gacha_record_url_oversea;
        }
        if (data.gacha_sort_id != null) {
            message.gacha_sort_id = data.gacha_sort_id;
        }
        if (data.gacha_record_url != null) {
            message.gacha_record_url = data.gacha_record_url;
        }
        return message;
    }
    toObject() {
        const data: {
            ten_cost_item_id?: number;
            end_time?: number;
            display_up4_item_list?: number[];
            Unk3100_JKILPCKLNPI?: number;
            gacha_up_info_list?: ReturnType<typeof dependency_1.GachaUpInfo.prototype.toObject>[];
            gacha_prob_url?: string;
            gacha_prefab_path?: string;
            wish_item_id?: number;
            begin_time?: number;
            wish_max_progress?: number;
            schedule_id?: number;
            gacha_prob_url_oversea?: string;
            gacha_type?: number;
            left_gacha_times?: number;
            display_up5_item_list?: number[];
            gacha_times_limit?: number;
            cost_item_num?: number;
            is_new_wish?: boolean;
            cost_item_id?: number;
            ten_cost_item_num?: number;
            gacha_preview_prefab_path?: string;
            wish_progress?: number;
            title_textmap?: string;
            gacha_record_url_oversea?: string;
            gacha_sort_id?: number;
            gacha_record_url?: string;
        } = {};
        if (this.ten_cost_item_id != null) {
            data.ten_cost_item_id = this.ten_cost_item_id;
        }
        if (this.end_time != null) {
            data.end_time = this.end_time;
        }
        if (this.display_up4_item_list != null) {
            data.display_up4_item_list = this.display_up4_item_list;
        }
        if (this.Unk3100_JKILPCKLNPI != null) {
            data.Unk3100_JKILPCKLNPI = this.Unk3100_JKILPCKLNPI;
        }
        if (this.gacha_up_info_list != null) {
            data.gacha_up_info_list = this.gacha_up_info_list.map((item: dependency_1.GachaUpInfo) => item.toObject());
        }
        if (this.gacha_prob_url != null) {
            data.gacha_prob_url = this.gacha_prob_url;
        }
        if (this.gacha_prefab_path != null) {
            data.gacha_prefab_path = this.gacha_prefab_path;
        }
        if (this.wish_item_id != null) {
            data.wish_item_id = this.wish_item_id;
        }
        if (this.begin_time != null) {
            data.begin_time = this.begin_time;
        }
        if (this.wish_max_progress != null) {
            data.wish_max_progress = this.wish_max_progress;
        }
        if (this.schedule_id != null) {
            data.schedule_id = this.schedule_id;
        }
        if (this.gacha_prob_url_oversea != null) {
            data.gacha_prob_url_oversea = this.gacha_prob_url_oversea;
        }
        if (this.gacha_type != null) {
            data.gacha_type = this.gacha_type;
        }
        if (this.left_gacha_times != null) {
            data.left_gacha_times = this.left_gacha_times;
        }
        if (this.display_up5_item_list != null) {
            data.display_up5_item_list = this.display_up5_item_list;
        }
        if (this.gacha_times_limit != null) {
            data.gacha_times_limit = this.gacha_times_limit;
        }
        if (this.cost_item_num != null) {
            data.cost_item_num = this.cost_item_num;
        }
        if (this.is_new_wish != null) {
            data.is_new_wish = this.is_new_wish;
        }
        if (this.cost_item_id != null) {
            data.cost_item_id = this.cost_item_id;
        }
        if (this.ten_cost_item_num != null) {
            data.ten_cost_item_num = this.ten_cost_item_num;
        }
        if (this.gacha_preview_prefab_path != null) {
            data.gacha_preview_prefab_path = this.gacha_preview_prefab_path;
        }
        if (this.wish_progress != null) {
            data.wish_progress = this.wish_progress;
        }
        if (this.title_textmap != null) {
            data.title_textmap = this.title_textmap;
        }
        if (this.gacha_record_url_oversea != null) {
            data.gacha_record_url_oversea = this.gacha_record_url_oversea;
        }
        if (this.gacha_sort_id != null) {
            data.gacha_sort_id = this.gacha_sort_id;
        }
        if (this.gacha_record_url != null) {
            data.gacha_record_url = this.gacha_record_url;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ten_cost_item_id != 0)
            writer.writeUint32(2, this.ten_cost_item_id);
        if (this.end_time != 0)
            writer.writeUint32(14, this.end_time);
        if (this.display_up4_item_list.length)
            writer.writePackedUint32(1875, this.display_up4_item_list);
        if (this.Unk3100_JKILPCKLNPI != 0)
            writer.writeUint32(469, this.Unk3100_JKILPCKLNPI);
        if (this.gacha_up_info_list.length)
            writer.writeRepeatedMessage(1233, this.gacha_up_info_list, (item: dependency_1.GachaUpInfo) => item.serialize(writer));
        if (this.gacha_prob_url.length)
            writer.writeString(8, this.gacha_prob_url);
        if (this.gacha_prefab_path.length)
            writer.writeString(15, this.gacha_prefab_path);
        if (this.wish_item_id != 0)
            writer.writeUint32(1637, this.wish_item_id);
        if (this.begin_time != 0)
            writer.writeUint32(1, this.begin_time);
        if (this.wish_max_progress != 0)
            writer.writeUint32(1222, this.wish_max_progress);
        if (this.schedule_id != 0)
            writer.writeUint32(10, this.schedule_id);
        if (this.gacha_prob_url_oversea.length)
            writer.writeString(1481, this.gacha_prob_url_oversea);
        if (this.gacha_type != 0)
            writer.writeUint32(13, this.gacha_type);
        if (this.left_gacha_times != 0)
            writer.writeUint32(5, this.left_gacha_times);
        if (this.display_up5_item_list.length)
            writer.writePackedUint32(2006, this.display_up5_item_list);
        if (this.gacha_times_limit != 0)
            writer.writeUint32(11, this.gacha_times_limit);
        if (this.cost_item_num != 0)
            writer.writeUint32(3, this.cost_item_num);
        if (this.is_new_wish != false)
            writer.writeBool(733, this.is_new_wish);
        if (this.cost_item_id != 0)
            writer.writeUint32(9, this.cost_item_id);
        if (this.ten_cost_item_num != 0)
            writer.writeUint32(6, this.ten_cost_item_num);
        if (this.gacha_preview_prefab_path.length)
            writer.writeString(4, this.gacha_preview_prefab_path);
        if (this.wish_progress != 0)
            writer.writeUint32(1819, this.wish_progress);
        if (this.title_textmap.length)
            writer.writeString(736, this.title_textmap);
        if (this.gacha_record_url_oversea.length)
            writer.writeString(1854, this.gacha_record_url_oversea);
        if (this.gacha_sort_id != 0)
            writer.writeUint32(7, this.gacha_sort_id);
        if (this.gacha_record_url.length)
            writer.writeString(12, this.gacha_record_url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GachaInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GachaInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.ten_cost_item_id = reader.readUint32();
                    break;
                case 14:
                    message.end_time = reader.readUint32();
                    break;
                case 1875:
                    message.display_up4_item_list = reader.readPackedUint32();
                    break;
                case 469:
                    message.Unk3100_JKILPCKLNPI = reader.readUint32();
                    break;
                case 1233:
                    reader.readMessage(message.gacha_up_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1233, dependency_1.GachaUpInfo.deserialize(reader), dependency_1.GachaUpInfo));
                    break;
                case 8:
                    message.gacha_prob_url = reader.readString();
                    break;
                case 15:
                    message.gacha_prefab_path = reader.readString();
                    break;
                case 1637:
                    message.wish_item_id = reader.readUint32();
                    break;
                case 1:
                    message.begin_time = reader.readUint32();
                    break;
                case 1222:
                    message.wish_max_progress = reader.readUint32();
                    break;
                case 10:
                    message.schedule_id = reader.readUint32();
                    break;
                case 1481:
                    message.gacha_prob_url_oversea = reader.readString();
                    break;
                case 13:
                    message.gacha_type = reader.readUint32();
                    break;
                case 5:
                    message.left_gacha_times = reader.readUint32();
                    break;
                case 2006:
                    message.display_up5_item_list = reader.readPackedUint32();
                    break;
                case 11:
                    message.gacha_times_limit = reader.readUint32();
                    break;
                case 3:
                    message.cost_item_num = reader.readUint32();
                    break;
                case 733:
                    message.is_new_wish = reader.readBool();
                    break;
                case 9:
                    message.cost_item_id = reader.readUint32();
                    break;
                case 6:
                    message.ten_cost_item_num = reader.readUint32();
                    break;
                case 4:
                    message.gacha_preview_prefab_path = reader.readString();
                    break;
                case 1819:
                    message.wish_progress = reader.readUint32();
                    break;
                case 736:
                    message.title_textmap = reader.readString();
                    break;
                case 1854:
                    message.gacha_record_url_oversea = reader.readString();
                    break;
                case 7:
                    message.gacha_sort_id = reader.readUint32();
                    break;
                case 12:
                    message.gacha_record_url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GachaInfo {
        return GachaInfo.deserialize(bytes);
    }
}
