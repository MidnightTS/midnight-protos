/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PBNavMeshPoly.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PBNavMeshPoly extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        edge_types?: PBNavMeshPoly.EdgeType[];
        area?: number;
        vects?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 7], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("edge_types" in data && data.edge_types != undefined) {
                this.edge_types = data.edge_types;
            }
            if ("area" in data && data.area != undefined) {
                this.area = data.area;
            }
            if ("vects" in data && data.vects != undefined) {
                this.vects = data.vects;
            }
        }
    }
    get edge_types() {
        return pb_1.Message.getFieldWithDefault(this, 10, PBNavMeshPoly.EdgeType.EDGE_TYPE_INNER) as PBNavMeshPoly.EdgeType[];
    }
    set edge_types(value: PBNavMeshPoly.EdgeType[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get area() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set area(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get vects() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set vects(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        edge_types?: PBNavMeshPoly.EdgeType[];
        area?: number;
        vects?: number[];
    }): PBNavMeshPoly {
        const message = new PBNavMeshPoly({});
        if (data.edge_types != null) {
            message.edge_types = data.edge_types;
        }
        if (data.area != null) {
            message.area = data.area;
        }
        if (data.vects != null) {
            message.vects = data.vects;
        }
        return message;
    }
    toObject() {
        const data: {
            edge_types?: PBNavMeshPoly.EdgeType[];
            area?: number;
            vects?: number[];
        } = {};
        if (this.edge_types != null) {
            data.edge_types = this.edge_types;
        }
        if (this.area != null) {
            data.area = this.area;
        }
        if (this.vects != null) {
            data.vects = this.vects;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.edge_types.length)
            writer.writePackedEnum(10, this.edge_types);
        if (this.area != 0)
            writer.writeInt32(6, this.area);
        if (this.vects.length)
            writer.writePackedInt32(7, this.vects);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PBNavMeshPoly {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PBNavMeshPoly();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.edge_types = reader.readPackedEnum();
                    break;
                case 6:
                    message.area = reader.readInt32();
                    break;
                case 7:
                    message.vects = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PBNavMeshPoly {
        return PBNavMeshPoly.deserialize(bytes);
    }
}
export namespace PBNavMeshPoly {
    export enum EdgeType {
        EDGE_TYPE_INNER = 0,
        EDGE_TYPE_TILE_BOUND = 1,
        EDGE_TYPE_TILE_BOUND_UNCONNECT = 2,
        EDGE_TYPE_Unk2700_BFOKBOEBPJF = 3
    }
}
