// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "HomeFurnitureSuiteData.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./Vector";
/**
 * @generated from protobuf message HomeFurnitureSuiteData
 */
export interface HomeFurnitureSuiteData {
    /**
     * @generated from protobuf field: bool is_allow_summon = 4;
     */
    isAllowSummon: boolean;
    /**
     * @generated from protobuf field: uint32 suite_id = 3;
     */
    suiteId: number;
    /**
     * @generated from protobuf field: uint32 guid = 5;
     */
    guid: number;
    /**
     * @generated from protobuf field: Vector spawn_pos = 9;
     */
    spawnPos?: Vector;
    /**
     * @generated from protobuf field: repeated int32 included_furniture_index_list = 11;
     */
    includedFurnitureIndexList: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class HomeFurnitureSuiteData$Type extends MessageType<HomeFurnitureSuiteData> {
    constructor() {
        super("HomeFurnitureSuiteData", [
            { no: 4, name: "is_allow_summon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "suite_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "guid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "spawn_pos", kind: "message", T: () => Vector },
            { no: 11, name: "included_furniture_index_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<HomeFurnitureSuiteData>): HomeFurnitureSuiteData {
        const message = { isAllowSummon: false, suiteId: 0, guid: 0, includedFurnitureIndexList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HomeFurnitureSuiteData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HomeFurnitureSuiteData): HomeFurnitureSuiteData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_allow_summon */ 4:
                    message.isAllowSummon = reader.bool();
                    break;
                case /* uint32 suite_id */ 3:
                    message.suiteId = reader.uint32();
                    break;
                case /* uint32 guid */ 5:
                    message.guid = reader.uint32();
                    break;
                case /* Vector spawn_pos */ 9:
                    message.spawnPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.spawnPos);
                    break;
                case /* repeated int32 included_furniture_index_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.includedFurnitureIndexList.push(reader.int32());
                    else
                        message.includedFurnitureIndexList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HomeFurnitureSuiteData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_allow_summon = 4; */
        if (message.isAllowSummon !== false)
            writer.tag(4, WireType.Varint).bool(message.isAllowSummon);
        /* uint32 suite_id = 3; */
        if (message.suiteId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.suiteId);
        /* uint32 guid = 5; */
        if (message.guid !== 0)
            writer.tag(5, WireType.Varint).uint32(message.guid);
        /* Vector spawn_pos = 9; */
        if (message.spawnPos)
            Vector.internalBinaryWrite(message.spawnPos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 included_furniture_index_list = 11; */
        if (message.includedFurnitureIndexList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.includedFurnitureIndexList.length; i++)
                writer.int32(message.includedFurnitureIndexList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HomeFurnitureSuiteData
 */
export const HomeFurnitureSuiteData = new HomeFurnitureSuiteData$Type();
