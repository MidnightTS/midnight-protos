/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EvtBeingHitInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AttackResult";
import * as pb_1 from "google-protobuf";
export class EvtBeingHitInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        peer_id?: number;
        attack_result?: dependency_1.AttackResult;
        frame_num?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("peer_id" in data && data.peer_id != undefined) {
                this.peer_id = data.peer_id;
            }
            if ("attack_result" in data && data.attack_result != undefined) {
                this.attack_result = data.attack_result;
            }
            if ("frame_num" in data && data.frame_num != undefined) {
                this.frame_num = data.frame_num;
            }
        }
    }
    get peer_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set peer_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get attack_result() {
        return pb_1.Message.getWrapperField(this, dependency_1.AttackResult, 7) as dependency_1.AttackResult;
    }
    set attack_result(value: dependency_1.AttackResult) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_attack_result() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get frame_num() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set frame_num(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        peer_id?: number;
        attack_result?: ReturnType<typeof dependency_1.AttackResult.prototype.toObject>;
        frame_num?: number;
    }): EvtBeingHitInfo {
        const message = new EvtBeingHitInfo({});
        if (data.peer_id != null) {
            message.peer_id = data.peer_id;
        }
        if (data.attack_result != null) {
            message.attack_result = dependency_1.AttackResult.fromObject(data.attack_result);
        }
        if (data.frame_num != null) {
            message.frame_num = data.frame_num;
        }
        return message;
    }
    toObject() {
        const data: {
            peer_id?: number;
            attack_result?: ReturnType<typeof dependency_1.AttackResult.prototype.toObject>;
            frame_num?: number;
        } = {};
        if (this.peer_id != null) {
            data.peer_id = this.peer_id;
        }
        if (this.attack_result != null) {
            data.attack_result = this.attack_result.toObject();
        }
        if (this.frame_num != null) {
            data.frame_num = this.frame_num;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.peer_id != 0)
            writer.writeUint32(6, this.peer_id);
        if (this.has_attack_result)
            writer.writeMessage(7, this.attack_result, () => this.attack_result.serialize(writer));
        if (this.frame_num != 0)
            writer.writeUint32(4, this.frame_num);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EvtBeingHitInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EvtBeingHitInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.peer_id = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.attack_result, () => message.attack_result = dependency_1.AttackResult.deserialize(reader));
                    break;
                case 4:
                    message.frame_num = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EvtBeingHitInfo {
        return EvtBeingHitInfo.deserialize(bytes);
    }
}
