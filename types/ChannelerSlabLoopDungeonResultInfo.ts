/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabLoopDungeonResultInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChannelerSlabLoopDungeonResultInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_success?: boolean;
        challenge_max_score?: number;
        dungeon_index?: number;
        is_in_time_limit?: boolean;
        challenge_score?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
            if ("challenge_max_score" in data && data.challenge_max_score != undefined) {
                this.challenge_max_score = data.challenge_max_score;
            }
            if ("dungeon_index" in data && data.dungeon_index != undefined) {
                this.dungeon_index = data.dungeon_index;
            }
            if ("is_in_time_limit" in data && data.is_in_time_limit != undefined) {
                this.is_in_time_limit = data.is_in_time_limit;
            }
            if ("challenge_score" in data && data.challenge_score != undefined) {
                this.challenge_score = data.challenge_score;
            }
        }
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get challenge_max_score() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set challenge_max_score(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get dungeon_index() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set dungeon_index(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_in_time_limit() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_in_time_limit(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get challenge_score() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set challenge_score(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        is_success?: boolean;
        challenge_max_score?: number;
        dungeon_index?: number;
        is_in_time_limit?: boolean;
        challenge_score?: number;
    }): ChannelerSlabLoopDungeonResultInfo {
        const message = new ChannelerSlabLoopDungeonResultInfo({});
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        if (data.challenge_max_score != null) {
            message.challenge_max_score = data.challenge_max_score;
        }
        if (data.dungeon_index != null) {
            message.dungeon_index = data.dungeon_index;
        }
        if (data.is_in_time_limit != null) {
            message.is_in_time_limit = data.is_in_time_limit;
        }
        if (data.challenge_score != null) {
            message.challenge_score = data.challenge_score;
        }
        return message;
    }
    toObject() {
        const data: {
            is_success?: boolean;
            challenge_max_score?: number;
            dungeon_index?: number;
            is_in_time_limit?: boolean;
            challenge_score?: number;
        } = {};
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        if (this.challenge_max_score != null) {
            data.challenge_max_score = this.challenge_max_score;
        }
        if (this.dungeon_index != null) {
            data.dungeon_index = this.dungeon_index;
        }
        if (this.is_in_time_limit != null) {
            data.is_in_time_limit = this.is_in_time_limit;
        }
        if (this.challenge_score != null) {
            data.challenge_score = this.challenge_score;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_success != false)
            writer.writeBool(11, this.is_success);
        if (this.challenge_max_score != 0)
            writer.writeUint32(8, this.challenge_max_score);
        if (this.dungeon_index != 0)
            writer.writeUint32(7, this.dungeon_index);
        if (this.is_in_time_limit != false)
            writer.writeBool(10, this.is_in_time_limit);
        if (this.challenge_score != 0)
            writer.writeUint32(12, this.challenge_score);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelerSlabLoopDungeonResultInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabLoopDungeonResultInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.is_success = reader.readBool();
                    break;
                case 8:
                    message.challenge_max_score = reader.readUint32();
                    break;
                case 7:
                    message.dungeon_index = reader.readUint32();
                    break;
                case 10:
                    message.is_in_time_limit = reader.readBool();
                    break;
                case 12:
                    message.challenge_score = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelerSlabLoopDungeonResultInfo {
        return ChannelerSlabLoopDungeonResultInfo.deserialize(bytes);
    }
}
