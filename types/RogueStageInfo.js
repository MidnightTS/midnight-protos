"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RogueStageInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RogueStageInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: RogueStageInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./RoguelikeRuneRecord");
const dependency_2 = require("./RogueShowAvatarTeamInfo");
const pb_1 = require("google-protobuf");
class RogueStageInfo extends pb_1.Message {
    constructor(data) {
        super();
        _RogueStageInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], __classPrivateFieldGet(this, _RogueStageInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("avatar_team" in data && data.avatar_team != undefined) {
                this.avatar_team = data.avatar_team;
            }
            if ("is_passed" in data && data.is_passed != undefined) {
                this.is_passed = data.is_passed;
            }
            if ("stage_id" in data && data.stage_id != undefined) {
                this.stage_id = data.stage_id;
            }
            if ("revise_monster_level" in data && data.revise_monster_level != undefined) {
                this.revise_monster_level = data.revise_monster_level;
            }
            if ("rune_record_list" in data && data.rune_record_list != undefined) {
                this.rune_record_list = data.rune_record_list;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
            if ("cur_level" in data && data.cur_level != undefined) {
                this.cur_level = data.cur_level;
            }
            if ("cached_coin_c_num" in data && data.cached_coin_c_num != undefined) {
                this.cached_coin_c_num = data.cached_coin_c_num;
            }
            if ("is_taken_reward" in data && data.is_taken_reward != undefined) {
                this.is_taken_reward = data.is_taken_reward;
            }
            if ("is_in_combat" in data && data.is_in_combat != undefined) {
                this.is_in_combat = data.is_in_combat;
            }
            if ("cached_coin_b_num" in data && data.cached_coin_b_num != undefined) {
                this.cached_coin_b_num = data.cached_coin_b_num;
            }
            if ("explore_cell_num" in data && data.explore_cell_num != undefined) {
                this.explore_cell_num = data.explore_cell_num;
            }
            if ("coin_c_num" in data && data.coin_c_num != undefined) {
                this.coin_c_num = data.coin_c_num;
            }
            if ("is_explored" in data && data.is_explored != undefined) {
                this.is_explored = data.is_explored;
            }
            if ("max_passed_level" in data && data.max_passed_level != undefined) {
                this.max_passed_level = data.max_passed_level;
            }
        }
    }
    get avatar_team() {
        return pb_1.Message.getWrapperField(this, dependency_2.RogueShowAvatarTeamInfo, 2);
    }
    set avatar_team(value) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_avatar_team() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get is_passed() {
        return pb_1.Message.getFieldWithDefault(this, 5, false);
    }
    set is_passed(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get stage_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set stage_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get revise_monster_level() {
        return pb_1.Message.getFieldWithDefault(this, 205, 0);
    }
    set revise_monster_level(value) {
        pb_1.Message.setField(this, 205, value);
    }
    get rune_record_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.RoguelikeRuneRecord, 6);
    }
    set rune_record_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 1, false);
    }
    set is_open(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get cur_level() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set cur_level(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get cached_coin_c_num() {
        return pb_1.Message.getFieldWithDefault(this, 1409, 0);
    }
    set cached_coin_c_num(value) {
        pb_1.Message.setField(this, 1409, value);
    }
    get is_taken_reward() {
        return pb_1.Message.getFieldWithDefault(this, 11, false);
    }
    set is_taken_reward(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_in_combat() {
        return pb_1.Message.getFieldWithDefault(this, 12, false);
    }
    set is_in_combat(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get cached_coin_b_num() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set cached_coin_b_num(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get explore_cell_num() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set explore_cell_num(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get coin_c_num() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set coin_c_num(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_explored() {
        return pb_1.Message.getFieldWithDefault(this, 9, false);
    }
    set is_explored(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get max_passed_level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set max_passed_level(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new RogueStageInfo({});
        if (data.avatar_team != null) {
            message.avatar_team = dependency_2.RogueShowAvatarTeamInfo.fromObject(data.avatar_team);
        }
        if (data.is_passed != null) {
            message.is_passed = data.is_passed;
        }
        if (data.stage_id != null) {
            message.stage_id = data.stage_id;
        }
        if (data.revise_monster_level != null) {
            message.revise_monster_level = data.revise_monster_level;
        }
        if (data.rune_record_list != null) {
            message.rune_record_list = data.rune_record_list.map(item => dependency_1.RoguelikeRuneRecord.fromObject(item));
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        if (data.cur_level != null) {
            message.cur_level = data.cur_level;
        }
        if (data.cached_coin_c_num != null) {
            message.cached_coin_c_num = data.cached_coin_c_num;
        }
        if (data.is_taken_reward != null) {
            message.is_taken_reward = data.is_taken_reward;
        }
        if (data.is_in_combat != null) {
            message.is_in_combat = data.is_in_combat;
        }
        if (data.cached_coin_b_num != null) {
            message.cached_coin_b_num = data.cached_coin_b_num;
        }
        if (data.explore_cell_num != null) {
            message.explore_cell_num = data.explore_cell_num;
        }
        if (data.coin_c_num != null) {
            message.coin_c_num = data.coin_c_num;
        }
        if (data.is_explored != null) {
            message.is_explored = data.is_explored;
        }
        if (data.max_passed_level != null) {
            message.max_passed_level = data.max_passed_level;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.avatar_team != null) {
            data.avatar_team = this.avatar_team.toObject();
        }
        if (this.is_passed != null) {
            data.is_passed = this.is_passed;
        }
        if (this.stage_id != null) {
            data.stage_id = this.stage_id;
        }
        if (this.revise_monster_level != null) {
            data.revise_monster_level = this.revise_monster_level;
        }
        if (this.rune_record_list != null) {
            data.rune_record_list = this.rune_record_list.map((item) => item.toObject());
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        if (this.cur_level != null) {
            data.cur_level = this.cur_level;
        }
        if (this.cached_coin_c_num != null) {
            data.cached_coin_c_num = this.cached_coin_c_num;
        }
        if (this.is_taken_reward != null) {
            data.is_taken_reward = this.is_taken_reward;
        }
        if (this.is_in_combat != null) {
            data.is_in_combat = this.is_in_combat;
        }
        if (this.cached_coin_b_num != null) {
            data.cached_coin_b_num = this.cached_coin_b_num;
        }
        if (this.explore_cell_num != null) {
            data.explore_cell_num = this.explore_cell_num;
        }
        if (this.coin_c_num != null) {
            data.coin_c_num = this.coin_c_num;
        }
        if (this.is_explored != null) {
            data.is_explored = this.is_explored;
        }
        if (this.max_passed_level != null) {
            data.max_passed_level = this.max_passed_level;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_avatar_team)
            writer.writeMessage(2, this.avatar_team, () => this.avatar_team.serialize(writer));
        if (this.is_passed != false)
            writer.writeBool(5, this.is_passed);
        if (this.stage_id != 0)
            writer.writeUint32(7, this.stage_id);
        if (this.revise_monster_level != 0)
            writer.writeUint32(205, this.revise_monster_level);
        if (this.rune_record_list.length)
            writer.writeRepeatedMessage(6, this.rune_record_list, (item) => item.serialize(writer));
        if (this.is_open != false)
            writer.writeBool(1, this.is_open);
        if (this.cur_level != 0)
            writer.writeUint32(4, this.cur_level);
        if (this.cached_coin_c_num != 0)
            writer.writeUint32(1409, this.cached_coin_c_num);
        if (this.is_taken_reward != false)
            writer.writeBool(11, this.is_taken_reward);
        if (this.is_in_combat != false)
            writer.writeBool(12, this.is_in_combat);
        if (this.cached_coin_b_num != 0)
            writer.writeUint32(14, this.cached_coin_b_num);
        if (this.explore_cell_num != 0)
            writer.writeUint32(15, this.explore_cell_num);
        if (this.coin_c_num != 0)
            writer.writeUint32(8, this.coin_c_num);
        if (this.is_explored != false)
            writer.writeBool(9, this.is_explored);
        if (this.max_passed_level != 0)
            writer.writeUint32(3, this.max_passed_level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RogueStageInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    reader.readMessage(message.avatar_team, () => message.avatar_team = dependency_2.RogueShowAvatarTeamInfo.deserialize(reader));
                    break;
                case 5:
                    message.is_passed = reader.readBool();
                    break;
                case 7:
                    message.stage_id = reader.readUint32();
                    break;
                case 205:
                    message.revise_monster_level = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.rune_record_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.RoguelikeRuneRecord.deserialize(reader), dependency_1.RoguelikeRuneRecord));
                    break;
                case 1:
                    message.is_open = reader.readBool();
                    break;
                case 4:
                    message.cur_level = reader.readUint32();
                    break;
                case 1409:
                    message.cached_coin_c_num = reader.readUint32();
                    break;
                case 11:
                    message.is_taken_reward = reader.readBool();
                    break;
                case 12:
                    message.is_in_combat = reader.readBool();
                    break;
                case 14:
                    message.cached_coin_b_num = reader.readUint32();
                    break;
                case 15:
                    message.explore_cell_num = reader.readUint32();
                    break;
                case 8:
                    message.coin_c_num = reader.readUint32();
                    break;
                case 9:
                    message.is_explored = reader.readBool();
                    break;
                case 3:
                    message.max_passed_level = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return RogueStageInfo.deserialize(bytes);
    }
}
exports.RogueStageInfo = RogueStageInfo;
_RogueStageInfo_one_of_decls = new WeakMap();
