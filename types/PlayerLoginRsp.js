"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlayerLoginRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerLoginRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerLoginRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./BlockInfo");
const dependency_2 = require("./FeatureBlockInfo");
const dependency_3 = require("./ResVersionConfig");
const dependency_4 = require("./ShortAbilityHashPair");
const pb_1 = require("google-protobuf");
class PlayerLoginRsp extends pb_1.Message {
    constructor(data) {
        super();
        _PlayerLoginRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [250, 1352], __classPrivateFieldGet(this, _PlayerLoginRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("client_data_version" in data && data.client_data_version != undefined) {
                this.client_data_version = data.client_data_version;
            }
            if ("is_sc_open" in data && data.is_sc_open != undefined) {
                this.is_sc_open = data.is_sc_open;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("block_info_map" in data && data.block_info_map != undefined) {
                this.block_info_map = data.block_info_map;
            }
            if ("is_audit" in data && data.is_audit != undefined) {
                this.is_audit = data.is_audit;
            }
            if ("is_transfer" in data && data.is_transfer != undefined) {
                this.is_transfer = data.is_transfer;
            }
            if ("client_silence_md5" in data && data.client_silence_md5 != undefined) {
                this.client_silence_md5 = data.client_silence_md5;
            }
            if ("next_res_version_config" in data && data.next_res_version_config != undefined) {
                this.next_res_version_config = data.next_res_version_config;
            }
            if ("client_silence_data_version" in data && data.client_silence_data_version != undefined) {
                this.client_silence_data_version = data.client_silence_data_version;
            }
            if ("login_rand" in data && data.login_rand != undefined) {
                this.login_rand = data.login_rand;
            }
            if ("is_new_player" in data && data.is_new_player != undefined) {
                this.is_new_player = data.is_new_player;
            }
            if ("client_version_suffix" in data && data.client_version_suffix != undefined) {
                this.client_version_suffix = data.client_version_suffix;
            }
            if ("game_biz" in data && data.game_biz != undefined) {
                this.game_biz = data.game_biz;
            }
            if ("next_resource_url" in data && data.next_resource_url != undefined) {
                this.next_resource_url = data.next_resource_url;
            }
            if ("is_relogin" in data && data.is_relogin != undefined) {
                this.is_relogin = data.is_relogin;
            }
            if ("total_tick_time" in data && data.total_tick_time != undefined) {
                this.total_tick_time = data.total_tick_time;
            }
            if ("is_enable_client_hash_debug" in data && data.is_enable_client_hash_debug != undefined) {
                this.is_enable_client_hash_debug = data.is_enable_client_hash_debug;
            }
            if ("sc_info" in data && data.sc_info != undefined) {
                this.sc_info = data.sc_info;
            }
            if ("ability_hash_code" in data && data.ability_hash_code != undefined) {
                this.ability_hash_code = data.ability_hash_code;
            }
            if ("register_cps" in data && data.register_cps != undefined) {
                this.register_cps = data.register_cps;
            }
            if ("Unk3100_EDIDPOKBKHG" in data && data.Unk3100_EDIDPOKBKHG != undefined) {
                this.Unk3100_EDIDPOKBKHG = data.Unk3100_EDIDPOKBKHG;
            }
            if ("is_use_ability_hash" in data && data.is_use_ability_hash != undefined) {
                this.is_use_ability_hash = data.is_use_ability_hash;
            }
            if ("ability_hash_map" in data && data.ability_hash_map != undefined) {
                this.ability_hash_map = data.ability_hash_map;
            }
            if ("short_ability_hash_map" in data && data.short_ability_hash_map != undefined) {
                this.short_ability_hash_map = data.short_ability_hash_map;
            }
            if ("client_md5" in data && data.client_md5 != undefined) {
                this.client_md5 = data.client_md5;
            }
            if ("country_code" in data && data.country_code != undefined) {
                this.country_code = data.country_code;
            }
            if ("is_data_need_relogin" in data && data.is_data_need_relogin != undefined) {
                this.is_data_need_relogin = data.is_data_need_relogin;
            }
            if ("res_version_config" in data && data.res_version_config != undefined) {
                this.res_version_config = data.res_version_config;
            }
            if ("feature_block_info_list" in data && data.feature_block_info_list != undefined) {
                this.feature_block_info_list = data.feature_block_info_list;
            }
            if ("birthday" in data && data.birthday != undefined) {
                this.birthday = data.birthday;
            }
            if ("target_uid" in data && data.target_uid != undefined) {
                this.target_uid = data.target_uid;
            }
            if ("player_data" in data && data.player_data != undefined) {
                this.player_data = data.player_data;
            }
            if ("client_silence_version_suffix" in data && data.client_silence_version_suffix != undefined) {
                this.client_silence_version_suffix = data.client_silence_version_suffix;
            }
            if ("target_home_owner_uid" in data && data.target_home_owner_uid != undefined) {
                this.target_home_owner_uid = data.target_home_owner_uid;
            }
            if ("player_data_version" in data && data.player_data_version != undefined) {
                this.player_data_version = data.player_data_version;
            }
        }
        if (!this.block_info_map)
            this.block_info_map = new Map();
        if (!this.ability_hash_map)
            this.ability_hash_map = new Map();
    }
    get client_data_version() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set client_data_version(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_sc_open() {
        return pb_1.Message.getFieldWithDefault(this, 1429, false);
    }
    set is_sc_open(value) {
        pb_1.Message.setField(this, 1429, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get block_info_map() {
        return pb_1.Message.getField(this, 571);
    }
    set block_info_map(value) {
        pb_1.Message.setField(this, 571, value);
    }
    get is_audit() {
        return pb_1.Message.getFieldWithDefault(this, 1685, false);
    }
    set is_audit(value) {
        pb_1.Message.setField(this, 1685, value);
    }
    get is_transfer() {
        return pb_1.Message.getFieldWithDefault(this, 2018, false);
    }
    set is_transfer(value) {
        pb_1.Message.setField(this, 2018, value);
    }
    get client_silence_md5() {
        return pb_1.Message.getFieldWithDefault(this, 1746, "");
    }
    set client_silence_md5(value) {
        pb_1.Message.setField(this, 1746, value);
    }
    get next_res_version_config() {
        return pb_1.Message.getWrapperField(this, dependency_3.ResVersionConfig, 1573);
    }
    set next_res_version_config(value) {
        pb_1.Message.setWrapperField(this, 1573, value);
    }
    get has_next_res_version_config() {
        return pb_1.Message.getField(this, 1573) != null;
    }
    get client_silence_data_version() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set client_silence_data_version(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get login_rand() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set login_rand(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_new_player() {
        return pb_1.Message.getFieldWithDefault(this, 8, false);
    }
    set is_new_player(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get client_version_suffix() {
        return pb_1.Message.getFieldWithDefault(this, 1047, "");
    }
    set client_version_suffix(value) {
        pb_1.Message.setField(this, 1047, value);
    }
    get game_biz() {
        return pb_1.Message.getFieldWithDefault(this, 5, "");
    }
    set game_biz(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get next_resource_url() {
        return pb_1.Message.getFieldWithDefault(this, 621, "");
    }
    set next_resource_url(value) {
        pb_1.Message.setField(this, 621, value);
    }
    get is_relogin() {
        return pb_1.Message.getFieldWithDefault(this, 10, false);
    }
    set is_relogin(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get total_tick_time() {
        return pb_1.Message.getFieldWithDefault(this, 125, 0);
    }
    set total_tick_time(value) {
        pb_1.Message.setField(this, 125, value);
    }
    get is_enable_client_hash_debug() {
        return pb_1.Message.getFieldWithDefault(this, 932, false);
    }
    set is_enable_client_hash_debug(value) {
        pb_1.Message.setField(this, 932, value);
    }
    get sc_info() {
        return pb_1.Message.getFieldWithDefault(this, 2024, new Uint8Array());
    }
    set sc_info(value) {
        pb_1.Message.setField(this, 2024, value);
    }
    get ability_hash_code() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set ability_hash_code(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get register_cps() {
        return pb_1.Message.getFieldWithDefault(this, 2040, "");
    }
    set register_cps(value) {
        pb_1.Message.setField(this, 2040, value);
    }
    get Unk3100_EDIDPOKBKHG() {
        return pb_1.Message.getFieldWithDefault(this, 1649, false);
    }
    set Unk3100_EDIDPOKBKHG(value) {
        pb_1.Message.setField(this, 1649, value);
    }
    get is_use_ability_hash() {
        return pb_1.Message.getFieldWithDefault(this, 2, false);
    }
    set is_use_ability_hash(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get ability_hash_map() {
        return pb_1.Message.getField(this, 11);
    }
    set ability_hash_map(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get short_ability_hash_map() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_4.ShortAbilityHashPair, 250);
    }
    set short_ability_hash_map(value) {
        pb_1.Message.setRepeatedWrapperField(this, 250, value);
    }
    get client_md5() {
        return pb_1.Message.getFieldWithDefault(this, 1830, "");
    }
    set client_md5(value) {
        pb_1.Message.setField(this, 1830, value);
    }
    get country_code() {
        return pb_1.Message.getFieldWithDefault(this, 1900, "");
    }
    set country_code(value) {
        pb_1.Message.setField(this, 1900, value);
    }
    get is_data_need_relogin() {
        return pb_1.Message.getFieldWithDefault(this, 951, false);
    }
    set is_data_need_relogin(value) {
        pb_1.Message.setField(this, 951, value);
    }
    get res_version_config() {
        return pb_1.Message.getWrapperField(this, dependency_3.ResVersionConfig, 1969);
    }
    set res_version_config(value) {
        pb_1.Message.setWrapperField(this, 1969, value);
    }
    get has_res_version_config() {
        return pb_1.Message.getField(this, 1969) != null;
    }
    get feature_block_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.FeatureBlockInfo, 1352);
    }
    set feature_block_info_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 1352, value);
    }
    get birthday() {
        return pb_1.Message.getFieldWithDefault(this, 624, "");
    }
    set birthday(value) {
        pb_1.Message.setField(this, 624, value);
    }
    get target_uid() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set target_uid(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get player_data() {
        return pb_1.Message.getFieldWithDefault(this, 13, new Uint8Array());
    }
    set player_data(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get client_silence_version_suffix() {
        return pb_1.Message.getFieldWithDefault(this, 1299, "");
    }
    set client_silence_version_suffix(value) {
        pb_1.Message.setField(this, 1299, value);
    }
    get target_home_owner_uid() {
        return pb_1.Message.getFieldWithDefault(this, 553, 0);
    }
    set target_home_owner_uid(value) {
        pb_1.Message.setField(this, 553, value);
    }
    get player_data_version() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set player_data_version(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new PlayerLoginRsp({});
        if (data.client_data_version != null) {
            message.client_data_version = data.client_data_version;
        }
        if (data.is_sc_open != null) {
            message.is_sc_open = data.is_sc_open;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (typeof data.block_info_map == "object") {
            message.block_info_map = new Map(Object.entries(data.block_info_map).map(([key, value]) => [Number(key), dependency_1.BlockInfo.fromObject(value)]));
        }
        if (data.is_audit != null) {
            message.is_audit = data.is_audit;
        }
        if (data.is_transfer != null) {
            message.is_transfer = data.is_transfer;
        }
        if (data.client_silence_md5 != null) {
            message.client_silence_md5 = data.client_silence_md5;
        }
        if (data.next_res_version_config != null) {
            message.next_res_version_config = dependency_3.ResVersionConfig.fromObject(data.next_res_version_config);
        }
        if (data.client_silence_data_version != null) {
            message.client_silence_data_version = data.client_silence_data_version;
        }
        if (data.login_rand != null) {
            message.login_rand = data.login_rand;
        }
        if (data.is_new_player != null) {
            message.is_new_player = data.is_new_player;
        }
        if (data.client_version_suffix != null) {
            message.client_version_suffix = data.client_version_suffix;
        }
        if (data.game_biz != null) {
            message.game_biz = data.game_biz;
        }
        if (data.next_resource_url != null) {
            message.next_resource_url = data.next_resource_url;
        }
        if (data.is_relogin != null) {
            message.is_relogin = data.is_relogin;
        }
        if (data.total_tick_time != null) {
            message.total_tick_time = data.total_tick_time;
        }
        if (data.is_enable_client_hash_debug != null) {
            message.is_enable_client_hash_debug = data.is_enable_client_hash_debug;
        }
        if (data.sc_info != null) {
            message.sc_info = data.sc_info;
        }
        if (data.ability_hash_code != null) {
            message.ability_hash_code = data.ability_hash_code;
        }
        if (data.register_cps != null) {
            message.register_cps = data.register_cps;
        }
        if (data.Unk3100_EDIDPOKBKHG != null) {
            message.Unk3100_EDIDPOKBKHG = data.Unk3100_EDIDPOKBKHG;
        }
        if (data.is_use_ability_hash != null) {
            message.is_use_ability_hash = data.is_use_ability_hash;
        }
        if (typeof data.ability_hash_map == "object") {
            message.ability_hash_map = new Map(Object.entries(data.ability_hash_map));
        }
        if (data.short_ability_hash_map != null) {
            message.short_ability_hash_map = data.short_ability_hash_map.map(item => dependency_4.ShortAbilityHashPair.fromObject(item));
        }
        if (data.client_md5 != null) {
            message.client_md5 = data.client_md5;
        }
        if (data.country_code != null) {
            message.country_code = data.country_code;
        }
        if (data.is_data_need_relogin != null) {
            message.is_data_need_relogin = data.is_data_need_relogin;
        }
        if (data.res_version_config != null) {
            message.res_version_config = dependency_3.ResVersionConfig.fromObject(data.res_version_config);
        }
        if (data.feature_block_info_list != null) {
            message.feature_block_info_list = data.feature_block_info_list.map(item => dependency_2.FeatureBlockInfo.fromObject(item));
        }
        if (data.birthday != null) {
            message.birthday = data.birthday;
        }
        if (data.target_uid != null) {
            message.target_uid = data.target_uid;
        }
        if (data.player_data != null) {
            message.player_data = data.player_data;
        }
        if (data.client_silence_version_suffix != null) {
            message.client_silence_version_suffix = data.client_silence_version_suffix;
        }
        if (data.target_home_owner_uid != null) {
            message.target_home_owner_uid = data.target_home_owner_uid;
        }
        if (data.player_data_version != null) {
            message.player_data_version = data.player_data_version;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.client_data_version != null) {
            data.client_data_version = this.client_data_version;
        }
        if (this.is_sc_open != null) {
            data.is_sc_open = this.is_sc_open;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.block_info_map.size > 0) {
            data.block_info_map = (Object.fromEntries)((Array.from)(this.block_info_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.is_audit != null) {
            data.is_audit = this.is_audit;
        }
        if (this.is_transfer != null) {
            data.is_transfer = this.is_transfer;
        }
        if (this.client_silence_md5 != null) {
            data.client_silence_md5 = this.client_silence_md5;
        }
        if (this.next_res_version_config != null) {
            data.next_res_version_config = this.next_res_version_config.toObject();
        }
        if (this.client_silence_data_version != null) {
            data.client_silence_data_version = this.client_silence_data_version;
        }
        if (this.login_rand != null) {
            data.login_rand = this.login_rand;
        }
        if (this.is_new_player != null) {
            data.is_new_player = this.is_new_player;
        }
        if (this.client_version_suffix != null) {
            data.client_version_suffix = this.client_version_suffix;
        }
        if (this.game_biz != null) {
            data.game_biz = this.game_biz;
        }
        if (this.next_resource_url != null) {
            data.next_resource_url = this.next_resource_url;
        }
        if (this.is_relogin != null) {
            data.is_relogin = this.is_relogin;
        }
        if (this.total_tick_time != null) {
            data.total_tick_time = this.total_tick_time;
        }
        if (this.is_enable_client_hash_debug != null) {
            data.is_enable_client_hash_debug = this.is_enable_client_hash_debug;
        }
        if (this.sc_info != null) {
            data.sc_info = this.sc_info;
        }
        if (this.ability_hash_code != null) {
            data.ability_hash_code = this.ability_hash_code;
        }
        if (this.register_cps != null) {
            data.register_cps = this.register_cps;
        }
        if (this.Unk3100_EDIDPOKBKHG != null) {
            data.Unk3100_EDIDPOKBKHG = this.Unk3100_EDIDPOKBKHG;
        }
        if (this.is_use_ability_hash != null) {
            data.is_use_ability_hash = this.is_use_ability_hash;
        }
        if (this.ability_hash_map.size > 0) {
            data.ability_hash_map = (Object.fromEntries)(this.ability_hash_map);
        }
        if (this.short_ability_hash_map != null) {
            data.short_ability_hash_map = this.short_ability_hash_map.map((item) => item.toObject());
        }
        if (this.client_md5 != null) {
            data.client_md5 = this.client_md5;
        }
        if (this.country_code != null) {
            data.country_code = this.country_code;
        }
        if (this.is_data_need_relogin != null) {
            data.is_data_need_relogin = this.is_data_need_relogin;
        }
        if (this.res_version_config != null) {
            data.res_version_config = this.res_version_config.toObject();
        }
        if (this.feature_block_info_list != null) {
            data.feature_block_info_list = this.feature_block_info_list.map((item) => item.toObject());
        }
        if (this.birthday != null) {
            data.birthday = this.birthday;
        }
        if (this.target_uid != null) {
            data.target_uid = this.target_uid;
        }
        if (this.player_data != null) {
            data.player_data = this.player_data;
        }
        if (this.client_silence_version_suffix != null) {
            data.client_silence_version_suffix = this.client_silence_version_suffix;
        }
        if (this.target_home_owner_uid != null) {
            data.target_home_owner_uid = this.target_home_owner_uid;
        }
        if (this.player_data_version != null) {
            data.player_data_version = this.player_data_version;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.client_data_version != 0)
            writer.writeUint32(1, this.client_data_version);
        if (this.is_sc_open != false)
            writer.writeBool(1429, this.is_sc_open);
        if (this.retcode != 0)
            writer.writeInt32(15, this.retcode);
        for (const [key, value] of this.block_info_map) {
            writer.writeMessage(571, this.block_info_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.is_audit != false)
            writer.writeBool(1685, this.is_audit);
        if (this.is_transfer != false)
            writer.writeBool(2018, this.is_transfer);
        if (this.client_silence_md5.length)
            writer.writeString(1746, this.client_silence_md5);
        if (this.has_next_res_version_config)
            writer.writeMessage(1573, this.next_res_version_config, () => this.next_res_version_config.serialize(writer));
        if (this.client_silence_data_version != 0)
            writer.writeUint32(6, this.client_silence_data_version);
        if (this.login_rand != 0)
            writer.writeUint64(4, this.login_rand);
        if (this.is_new_player != false)
            writer.writeBool(8, this.is_new_player);
        if (this.client_version_suffix.length)
            writer.writeString(1047, this.client_version_suffix);
        if (this.game_biz.length)
            writer.writeString(5, this.game_biz);
        if (this.next_resource_url.length)
            writer.writeString(621, this.next_resource_url);
        if (this.is_relogin != false)
            writer.writeBool(10, this.is_relogin);
        if (this.total_tick_time != 0)
            writer.writeDouble(125, this.total_tick_time);
        if (this.is_enable_client_hash_debug != false)
            writer.writeBool(932, this.is_enable_client_hash_debug);
        if (this.sc_info.length)
            writer.writeBytes(2024, this.sc_info);
        if (this.ability_hash_code != 0)
            writer.writeInt32(12, this.ability_hash_code);
        if (this.register_cps.length)
            writer.writeString(2040, this.register_cps);
        if (this.Unk3100_EDIDPOKBKHG != false)
            writer.writeBool(1649, this.Unk3100_EDIDPOKBKHG);
        if (this.is_use_ability_hash != false)
            writer.writeBool(2, this.is_use_ability_hash);
        for (const [key, value] of this.ability_hash_map) {
            writer.writeMessage(11, this.ability_hash_map, () => {
                writer.writeString(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.short_ability_hash_map.length)
            writer.writeRepeatedMessage(250, this.short_ability_hash_map, (item) => item.serialize(writer));
        if (this.client_md5.length)
            writer.writeString(1830, this.client_md5);
        if (this.country_code.length)
            writer.writeString(1900, this.country_code);
        if (this.is_data_need_relogin != false)
            writer.writeBool(951, this.is_data_need_relogin);
        if (this.has_res_version_config)
            writer.writeMessage(1969, this.res_version_config, () => this.res_version_config.serialize(writer));
        if (this.feature_block_info_list.length)
            writer.writeRepeatedMessage(1352, this.feature_block_info_list, (item) => item.serialize(writer));
        if (this.birthday.length)
            writer.writeString(624, this.birthday);
        if (this.target_uid != 0)
            writer.writeUint32(14, this.target_uid);
        if (this.player_data.length)
            writer.writeBytes(13, this.player_data);
        if (this.client_silence_version_suffix.length)
            writer.writeString(1299, this.client_silence_version_suffix);
        if (this.target_home_owner_uid != 0)
            writer.writeUint32(553, this.target_home_owner_uid);
        if (this.player_data_version != 0)
            writer.writeUint32(7, this.player_data_version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerLoginRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.client_data_version = reader.readUint32();
                    break;
                case 1429:
                    message.is_sc_open = reader.readBool();
                    break;
                case 15:
                    message.retcode = reader.readInt32();
                    break;
                case 571:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.block_info_map, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.BlockInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 1685:
                    message.is_audit = reader.readBool();
                    break;
                case 2018:
                    message.is_transfer = reader.readBool();
                    break;
                case 1746:
                    message.client_silence_md5 = reader.readString();
                    break;
                case 1573:
                    reader.readMessage(message.next_res_version_config, () => message.next_res_version_config = dependency_3.ResVersionConfig.deserialize(reader));
                    break;
                case 6:
                    message.client_silence_data_version = reader.readUint32();
                    break;
                case 4:
                    message.login_rand = reader.readUint64();
                    break;
                case 8:
                    message.is_new_player = reader.readBool();
                    break;
                case 1047:
                    message.client_version_suffix = reader.readString();
                    break;
                case 5:
                    message.game_biz = reader.readString();
                    break;
                case 621:
                    message.next_resource_url = reader.readString();
                    break;
                case 10:
                    message.is_relogin = reader.readBool();
                    break;
                case 125:
                    message.total_tick_time = reader.readDouble();
                    break;
                case 932:
                    message.is_enable_client_hash_debug = reader.readBool();
                    break;
                case 2024:
                    message.sc_info = reader.readBytes();
                    break;
                case 12:
                    message.ability_hash_code = reader.readInt32();
                    break;
                case 2040:
                    message.register_cps = reader.readString();
                    break;
                case 1649:
                    message.Unk3100_EDIDPOKBKHG = reader.readBool();
                    break;
                case 2:
                    message.is_use_ability_hash = reader.readBool();
                    break;
                case 11:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ability_hash_map, reader, reader.readString, reader.readInt32));
                    break;
                case 250:
                    reader.readMessage(message.short_ability_hash_map, () => pb_1.Message.addToRepeatedWrapperField(message, 250, dependency_4.ShortAbilityHashPair.deserialize(reader), dependency_4.ShortAbilityHashPair));
                    break;
                case 1830:
                    message.client_md5 = reader.readString();
                    break;
                case 1900:
                    message.country_code = reader.readString();
                    break;
                case 951:
                    message.is_data_need_relogin = reader.readBool();
                    break;
                case 1969:
                    reader.readMessage(message.res_version_config, () => message.res_version_config = dependency_3.ResVersionConfig.deserialize(reader));
                    break;
                case 1352:
                    reader.readMessage(message.feature_block_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1352, dependency_2.FeatureBlockInfo.deserialize(reader), dependency_2.FeatureBlockInfo));
                    break;
                case 624:
                    message.birthday = reader.readString();
                    break;
                case 14:
                    message.target_uid = reader.readUint32();
                    break;
                case 13:
                    message.player_data = reader.readBytes();
                    break;
                case 1299:
                    message.client_silence_version_suffix = reader.readString();
                    break;
                case 553:
                    message.target_home_owner_uid = reader.readUint32();
                    break;
                case 7:
                    message.player_data_version = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlayerLoginRsp.deserialize(bytes);
    }
}
exports.PlayerLoginRsp = PlayerLoginRsp;
_PlayerLoginRsp_one_of_decls = new WeakMap();
