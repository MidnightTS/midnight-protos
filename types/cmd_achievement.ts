// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_achievement.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.Achievement
 */
export interface Achievement {
    /**
     * @generated from protobuf field: optional uint32 finish_timestamp = 11;
     */
    finishTimestamp?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Achievement.Status status = 13;
     */
    status?: Achievement_Status;
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 12;
     */
    curProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 14;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 total_progress = 8;
     */
    totalProgress?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.Achievement.Status
 */
export enum Achievement_Status {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: UNFINISHED = 1;
     */
    UNFINISHED = 1,
    /**
     * @generated from protobuf enum value: FINISHED = 2;
     */
    FINISHED = 2,
    /**
     * @generated from protobuf enum value: REWARD_TAKEN = 3;
     */
    REWARD_TAKEN = 3
}
/**
 * @generated from protobuf message com.midnights.game.AchievementAllDataNotify
 */
export interface AchievementAllDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Achievement achievement_list = 4;
     */
    achievementList: Achievement[];
    /**
     * @generated from protobuf field: repeated uint32 reward_taken_goal_id_list = 2;
     */
    rewardTakenGoalIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.AchievementAllDataNotify.CmdId
 */
export enum AchievementAllDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2676;
     */
    CMD_ID = 2676,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AchievementUpdateNotify
 */
export interface AchievementUpdateNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Achievement achievement_list = 14;
     */
    achievementList: Achievement[];
}
/**
 * @generated from protobuf enum com.midnights.game.AchievementUpdateNotify.CmdId
 */
export enum AchievementUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2668;
     */
    CMD_ID = 2668,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAchievementRewardReq
 */
export interface TakeAchievementRewardReq {
    /**
     * @generated from protobuf field: repeated uint32 id_list = 13;
     */
    idList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAchievementRewardReq.CmdId
 */
export enum TakeAchievementRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2675;
     */
    CMD_ID = 2675,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAchievementRewardRsp
 */
export interface TakeAchievementRewardRsp {
    /**
     * @generated from protobuf field: repeated uint32 id_list = 7;
     */
    idList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 10;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAchievementRewardRsp.CmdId
 */
export enum TakeAchievementRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2657;
     */
    CMD_ID = 2657,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAchievementGoalRewardReq
 */
export interface TakeAchievementGoalRewardReq {
    /**
     * @generated from protobuf field: repeated uint32 id_list = 5;
     */
    idList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAchievementGoalRewardReq.CmdId
 */
export enum TakeAchievementGoalRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2652;
     */
    CMD_ID = 2652,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAchievementGoalRewardRsp
 */
export interface TakeAchievementGoalRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 id_list = 12;
     */
    idList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 5;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAchievementGoalRewardRsp.CmdId
 */
export enum TakeAchievementGoalRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2681;
     */
    CMD_ID = 2681,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Achievement$Type extends MessageType<Achievement> {
    constructor() {
        super("com.midnights.game.Achievement", [
            { no: 11, name: "finish_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "status", kind: "enum", opt: true, T: () => ["com.midnights.game.Achievement.Status", Achievement_Status] },
            { no: 12, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Achievement>): Achievement {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Achievement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Achievement): Achievement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_timestamp */ 11:
                    message.finishTimestamp = reader.uint32();
                    break;
                case /* optional com.midnights.game.Achievement.Status status */ 13:
                    message.status = reader.int32();
                    break;
                case /* optional uint32 cur_progress */ 12:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 id */ 14:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 total_progress */ 8:
                    message.totalProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Achievement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finish_timestamp = 11; */
        if (message.finishTimestamp !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.finishTimestamp);
        /* optional com.midnights.game.Achievement.Status status = 13; */
        if (message.status !== undefined)
            writer.tag(13, WireType.Varint).int32(message.status);
        /* optional uint32 cur_progress = 12; */
        if (message.curProgress !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curProgress);
        /* optional uint32 id = 14; */
        if (message.id !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.id);
        /* optional uint32 total_progress = 8; */
        if (message.totalProgress !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.totalProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.Achievement
 */
export const Achievement = new Achievement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AchievementAllDataNotify$Type extends MessageType<AchievementAllDataNotify> {
    constructor() {
        super("com.midnights.game.AchievementAllDataNotify", [
            { no: 4, name: "achievement_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Achievement },
            { no: 2, name: "reward_taken_goal_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AchievementAllDataNotify>): AchievementAllDataNotify {
        const message = { achievementList: [], rewardTakenGoalIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AchievementAllDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AchievementAllDataNotify): AchievementAllDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Achievement achievement_list */ 4:
                    message.achievementList.push(Achievement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 reward_taken_goal_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rewardTakenGoalIdList.push(reader.uint32());
                    else
                        message.rewardTakenGoalIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AchievementAllDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Achievement achievement_list = 4; */
        for (let i = 0; i < message.achievementList.length; i++)
            Achievement.internalBinaryWrite(message.achievementList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 reward_taken_goal_id_list = 2; */
        for (let i = 0; i < message.rewardTakenGoalIdList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.rewardTakenGoalIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AchievementAllDataNotify
 */
export const AchievementAllDataNotify = new AchievementAllDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AchievementUpdateNotify$Type extends MessageType<AchievementUpdateNotify> {
    constructor() {
        super("com.midnights.game.AchievementUpdateNotify", [
            { no: 14, name: "achievement_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Achievement }
        ]);
    }
    create(value?: PartialMessage<AchievementUpdateNotify>): AchievementUpdateNotify {
        const message = { achievementList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AchievementUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AchievementUpdateNotify): AchievementUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Achievement achievement_list */ 14:
                    message.achievementList.push(Achievement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AchievementUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Achievement achievement_list = 14; */
        for (let i = 0; i < message.achievementList.length; i++)
            Achievement.internalBinaryWrite(message.achievementList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AchievementUpdateNotify
 */
export const AchievementUpdateNotify = new AchievementUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAchievementRewardReq$Type extends MessageType<TakeAchievementRewardReq> {
    constructor() {
        super("com.midnights.game.TakeAchievementRewardReq", [
            { no: 13, name: "id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeAchievementRewardReq>): TakeAchievementRewardReq {
        const message = { idList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAchievementRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAchievementRewardReq): TakeAchievementRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 id_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.idList.push(reader.uint32());
                    else
                        message.idList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAchievementRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 id_list = 13; */
        for (let i = 0; i < message.idList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.idList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAchievementRewardReq
 */
export const TakeAchievementRewardReq = new TakeAchievementRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAchievementRewardRsp$Type extends MessageType<TakeAchievementRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeAchievementRewardRsp", [
            { no: 7, name: "id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeAchievementRewardRsp>): TakeAchievementRewardRsp {
        const message = { idList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAchievementRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAchievementRewardRsp): TakeAchievementRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.idList.push(reader.uint32());
                    else
                        message.idList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 10:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAchievementRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 id_list = 7; */
        for (let i = 0; i < message.idList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.idList[i]);
        /* repeated com.midnights.game.ItemParam item_list = 10; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAchievementRewardRsp
 */
export const TakeAchievementRewardRsp = new TakeAchievementRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAchievementGoalRewardReq$Type extends MessageType<TakeAchievementGoalRewardReq> {
    constructor() {
        super("com.midnights.game.TakeAchievementGoalRewardReq", [
            { no: 5, name: "id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeAchievementGoalRewardReq>): TakeAchievementGoalRewardReq {
        const message = { idList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAchievementGoalRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAchievementGoalRewardReq): TakeAchievementGoalRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.idList.push(reader.uint32());
                    else
                        message.idList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAchievementGoalRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 id_list = 5; */
        for (let i = 0; i < message.idList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.idList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAchievementGoalRewardReq
 */
export const TakeAchievementGoalRewardReq = new TakeAchievementGoalRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAchievementGoalRewardRsp$Type extends MessageType<TakeAchievementGoalRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeAchievementGoalRewardRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<TakeAchievementGoalRewardRsp>): TakeAchievementGoalRewardRsp {
        const message = { idList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAchievementGoalRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAchievementGoalRewardRsp): TakeAchievementGoalRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.idList.push(reader.uint32());
                    else
                        message.idList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 5:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAchievementGoalRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* repeated uint32 id_list = 12; */
        for (let i = 0; i < message.idList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.idList[i]);
        /* repeated com.midnights.game.ItemParam item_list = 5; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAchievementGoalRewardRsp
 */
export const TakeAchievementGoalRewardRsp = new TakeAchievementGoalRewardRsp$Type();
