// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_gacha.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GetGachaInfoReq
 */
export interface GetGachaInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetGachaInfoReq.CmdId
 */
export enum GetGachaInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1572;
     */
    CMD_ID = 1572,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaUpInfo
 */
export interface GachaUpInfo {
    /**
     * @generated from protobuf field: optional uint32 item_parent_type = 7;
     */
    itemParentType?: number;
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 15;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.GachaInfo
 */
export interface GachaInfo {
    /**
     * @generated from protobuf field: optional uint32 ten_cost_item_id = 2;
     */
    tenCostItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 14;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: repeated uint32 display_up4_item_list = 1875;
     */
    displayUp4ItemList: number[];
    /**
     * @generated from protobuf field: optional uint32 cur_schedule_daily_gacha_times = 469;
     */
    curScheduleDailyGachaTimes?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GachaUpInfo gacha_up_info_list = 1233;
     */
    gachaUpInfoList: GachaUpInfo[];
    /**
     * @generated from protobuf field: optional string gacha_prob_url = 8;
     */
    gachaProbUrl?: string;
    /**
     * @generated from protobuf field: optional string gacha_prefab_path = 15;
     */
    gachaPrefabPath?: string;
    /**
     * @generated from protobuf field: optional uint32 wish_item_id = 1637;
     */
    wishItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 1;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_max_progress = 1222;
     */
    wishMaxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional string gacha_prob_url_oversea = 1481;
     */
    gachaProbUrlOversea?: string;
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 13;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 left_gacha_times = 5;
     */
    leftGachaTimes?: number;
    /**
     * @generated from protobuf field: repeated uint32 display_up5_item_list = 2006;
     */
    displayUp5ItemList: number[];
    /**
     * @generated from protobuf field: optional uint32 gacha_times_limit = 11;
     */
    gachaTimesLimit?: number;
    /**
     * @generated from protobuf field: optional uint32 cost_item_num = 3;
     */
    costItemNum?: number;
    /**
     * @generated from protobuf field: optional bool is_new_wish = 733;
     */
    isNewWish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cost_item_id = 9;
     */
    costItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 ten_cost_item_num = 6;
     */
    tenCostItemNum?: number;
    /**
     * @generated from protobuf field: optional string gacha_preview_prefab_path = 4;
     */
    gachaPreviewPrefabPath?: string;
    /**
     * @generated from protobuf field: optional uint32 wish_progress = 1819;
     */
    wishProgress?: number;
    /**
     * @generated from protobuf field: optional string title_textmap = 736;
     */
    titleTextmap?: string;
    /**
     * @generated from protobuf field: optional string gacha_record_url_oversea = 1854;
     */
    gachaRecordUrlOversea?: string;
    /**
     * @generated from protobuf field: optional uint32 gacha_sort_id = 7;
     */
    gachaSortId?: number;
    /**
     * @generated from protobuf field: optional string gacha_record_url = 12;
     */
    gachaRecordUrl?: string;
}
/**
 * @generated from protobuf message com.midnights.game.GetGachaInfoRsp
 */
export interface GetGachaInfoRsp {
    /**
     * @generated from protobuf field: optional bool is_under_general_restrict = 6;
     */
    isUnderGeneralRestrict?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gacha_random = 9;
     */
    gachaRandom?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_under_minors_restrict = 2;
     */
    isUnderMinorsRestrict?: boolean;
    /**
     * @generated from protobuf field: optional uint32 daily_gacha_times = 5;
     */
    dailyGachaTimes?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GachaInfo gacha_info_list = 13;
     */
    gachaInfoList: GachaInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetGachaInfoRsp.CmdId
 */
export enum GetGachaInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1598;
     */
    CMD_ID = 1598,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DoGachaReq
 */
export interface DoGachaReq {
    /**
     * @generated from protobuf field: optional uint32 gacha_times = 10;
     */
    gachaTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_schedule_id = 7;
     */
    gachaScheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 14;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_random = 13;
     */
    gachaRandom?: number;
    /**
     * @generated from protobuf field: optional string gacha_tag = 4;
     */
    gachaTag?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.DoGachaReq.CmdId
 */
export enum DoGachaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1512;
     */
    CMD_ID = 1512,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaTransferItem
 */
export interface GachaTransferItem {
    /**
     * @generated from protobuf field: optional com.midnights.game.ItemParam item = 3;
     */
    item?: ItemParam;
    /**
     * @generated from protobuf field: optional bool is_transfer_item_new = 1;
     */
    isTransferItemNew?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GachaItem
 */
export interface GachaItem {
    /**
     * @generated from protobuf field: optional com.midnights.game.ItemParam gacha_item = 7;
     */
    gachaItem?: ItemParam;
    /**
     * @generated from protobuf field: optional bool is_gacha_item_new = 6;
     */
    isGachaItemNew?: boolean;
    /**
     * @generated from protobuf field: optional bool is_flash_card = 8;
     */
    isFlashCard?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam token_item_list = 9;
     */
    tokenItemList: ItemParam[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.GachaTransferItem transfer_items = 12;
     */
    transferItems: GachaTransferItem[];
}
/**
 * @generated from protobuf message com.midnights.game.DoGachaRsp
 */
export interface DoGachaRsp {
    /**
     * @generated from protobuf field: optional uint32 cur_schedule_daily_gacha_times = 155;
     */
    curScheduleDailyGachaTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 cost_item_num = 10;
     */
    costItemNum?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_max_progress = 9;
     */
    wishMaxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_item_id = 8;
     */
    wishItemId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 ten_cost_item_num = 3;
     */
    tenCostItemNum?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_progress = 2;
     */
    wishProgress?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GachaItem gacha_item_list = 15;
     */
    gachaItemList: GachaItem[];
    /**
     * @generated from protobuf field: optional uint32 ten_cost_item_id = 7;
     */
    tenCostItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_times = 4;
     */
    gachaTimes?: number;
    /**
     * @generated from protobuf field: optional bool is_under_minors_restrict = 1435;
     */
    isUnderMinorsRestrict?: boolean;
    /**
     * @generated from protobuf field: optional bool is_under_general_restrict = 1868;
     */
    isUnderGeneralRestrict?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 12;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_times_limit = 1;
     */
    gachaTimesLimit?: number;
    /**
     * @generated from protobuf field: optional uint32 cost_item_id = 14;
     */
    costItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 daily_gacha_times = 1240;
     */
    dailyGachaTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 left_gacha_times = 6;
     */
    leftGachaTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 new_gacha_random = 11;
     */
    newGachaRandom?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_schedule_id = 5;
     */
    gachaScheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DoGachaRsp.CmdId
 */
export enum DoGachaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1535;
     */
    CMD_ID = 1535,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaWishReq
 */
export interface GachaWishReq {
    /**
     * @generated from protobuf field: optional uint32 gacha_schedule_id = 14;
     */
    gachaScheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 13;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 4;
     */
    itemId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaWishReq.CmdId
 */
export enum GachaWishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1507;
     */
    CMD_ID = 1507,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaWishRsp
 */
export interface GachaWishRsp {
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 8;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_schedule_id = 7;
     */
    gachaScheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_max_progress = 2;
     */
    wishMaxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_progress = 5;
     */
    wishProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 wish_item_id = 3;
     */
    wishItemId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaWishRsp.CmdId
 */
export enum GachaWishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1521;
     */
    CMD_ID = 1521,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaOpenWishNotify
 */
export interface GachaOpenWishNotify {
    /**
     * @generated from protobuf field: optional uint32 gacha_type = 2;
     */
    gachaType?: number;
    /**
     * @generated from protobuf field: optional uint32 gacha_schedule_id = 9;
     */
    gachaScheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaOpenWishNotify.CmdId
 */
export enum GachaOpenWishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1503;
     */
    CMD_ID = 1503,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaSimpleInfoNotify
 */
export interface GachaSimpleInfoNotify {
    /**
     * @generated from protobuf field: optional bool is_new = 5;
     */
    isNew?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaSimpleInfoNotify.CmdId
 */
export enum GachaSimpleInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1590;
     */
    CMD_ID = 1590,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class GetGachaInfoReq$Type extends MessageType<GetGachaInfoReq> {
    constructor() {
        super("com.midnights.game.GetGachaInfoReq", []);
    }
    create(value?: PartialMessage<GetGachaInfoReq>): GetGachaInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGachaInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGachaInfoReq): GetGachaInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetGachaInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGachaInfoReq
 */
export const GetGachaInfoReq = new GetGachaInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaUpInfo$Type extends MessageType<GachaUpInfo> {
    constructor() {
        super("com.midnights.game.GachaUpInfo", [
            { no: 7, name: "item_parent_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "item_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaUpInfo>): GachaUpInfo {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaUpInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaUpInfo): GachaUpInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_parent_type */ 7:
                    message.itemParentType = reader.uint32();
                    break;
                case /* repeated uint32 item_id_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaUpInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_parent_type = 7; */
        if (message.itemParentType !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.itemParentType);
        /* repeated uint32 item_id_list = 15; */
        for (let i = 0; i < message.itemIdList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.itemIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaUpInfo
 */
export const GachaUpInfo = new GachaUpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaInfo$Type extends MessageType<GachaInfo> {
    constructor() {
        super("com.midnights.game.GachaInfo", [
            { no: 2, name: "ten_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1875, name: "display_up4_item_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 469, name: "cur_schedule_daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1233, name: "gacha_up_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GachaUpInfo },
            { no: 8, name: "gacha_prob_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "gacha_prefab_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1637, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1222, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1481, name: "gacha_prob_url_oversea", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "left_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2006, name: "display_up5_item_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "gacha_times_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 733, name: "is_new_wish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "ten_cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_preview_prefab_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1819, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 736, name: "title_textmap", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1854, name: "gacha_record_url_oversea", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "gacha_sort_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "gacha_record_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GachaInfo>): GachaInfo {
        const message = { displayUp4ItemList: [], gachaUpInfoList: [], displayUp5ItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaInfo): GachaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 ten_cost_item_id */ 2:
                    message.tenCostItemId = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 14:
                    message.endTime = reader.uint32();
                    break;
                case /* repeated uint32 display_up4_item_list */ 1875:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.displayUp4ItemList.push(reader.uint32());
                    else
                        message.displayUp4ItemList.push(reader.uint32());
                    break;
                case /* optional uint32 cur_schedule_daily_gacha_times */ 469:
                    message.curScheduleDailyGachaTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaUpInfo gacha_up_info_list */ 1233:
                    message.gachaUpInfoList.push(GachaUpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string gacha_prob_url */ 8:
                    message.gachaProbUrl = reader.string();
                    break;
                case /* optional string gacha_prefab_path */ 15:
                    message.gachaPrefabPath = reader.string();
                    break;
                case /* optional uint32 wish_item_id */ 1637:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 1:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 1222:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional string gacha_prob_url_oversea */ 1481:
                    message.gachaProbUrlOversea = reader.string();
                    break;
                case /* optional uint32 gacha_type */ 13:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 left_gacha_times */ 5:
                    message.leftGachaTimes = reader.uint32();
                    break;
                case /* repeated uint32 display_up5_item_list */ 2006:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.displayUp5ItemList.push(reader.uint32());
                    else
                        message.displayUp5ItemList.push(reader.uint32());
                    break;
                case /* optional uint32 gacha_times_limit */ 11:
                    message.gachaTimesLimit = reader.uint32();
                    break;
                case /* optional uint32 cost_item_num */ 3:
                    message.costItemNum = reader.uint32();
                    break;
                case /* optional bool is_new_wish */ 733:
                    message.isNewWish = reader.bool();
                    break;
                case /* optional uint32 cost_item_id */ 9:
                    message.costItemId = reader.uint32();
                    break;
                case /* optional uint32 ten_cost_item_num */ 6:
                    message.tenCostItemNum = reader.uint32();
                    break;
                case /* optional string gacha_preview_prefab_path */ 4:
                    message.gachaPreviewPrefabPath = reader.string();
                    break;
                case /* optional uint32 wish_progress */ 1819:
                    message.wishProgress = reader.uint32();
                    break;
                case /* optional string title_textmap */ 736:
                    message.titleTextmap = reader.string();
                    break;
                case /* optional string gacha_record_url_oversea */ 1854:
                    message.gachaRecordUrlOversea = reader.string();
                    break;
                case /* optional uint32 gacha_sort_id */ 7:
                    message.gachaSortId = reader.uint32();
                    break;
                case /* optional string gacha_record_url */ 12:
                    message.gachaRecordUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 ten_cost_item_id = 2; */
        if (message.tenCostItemId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.tenCostItemId);
        /* optional uint32 end_time = 14; */
        if (message.endTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.endTime);
        /* repeated uint32 display_up4_item_list = 1875; */
        for (let i = 0; i < message.displayUp4ItemList.length; i++)
            writer.tag(1875, WireType.Varint).uint32(message.displayUp4ItemList[i]);
        /* optional uint32 cur_schedule_daily_gacha_times = 469; */
        if (message.curScheduleDailyGachaTimes !== undefined)
            writer.tag(469, WireType.Varint).uint32(message.curScheduleDailyGachaTimes);
        /* repeated com.midnights.game.GachaUpInfo gacha_up_info_list = 1233; */
        for (let i = 0; i < message.gachaUpInfoList.length; i++)
            GachaUpInfo.internalBinaryWrite(message.gachaUpInfoList[i], writer.tag(1233, WireType.LengthDelimited).fork(), options).join();
        /* optional string gacha_prob_url = 8; */
        if (message.gachaProbUrl !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.gachaProbUrl);
        /* optional string gacha_prefab_path = 15; */
        if (message.gachaPrefabPath !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.gachaPrefabPath);
        /* optional uint32 wish_item_id = 1637; */
        if (message.wishItemId !== undefined)
            writer.tag(1637, WireType.Varint).uint32(message.wishItemId);
        /* optional uint32 begin_time = 1; */
        if (message.beginTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.beginTime);
        /* optional uint32 wish_max_progress = 1222; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(1222, WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        /* optional string gacha_prob_url_oversea = 1481; */
        if (message.gachaProbUrlOversea !== undefined)
            writer.tag(1481, WireType.LengthDelimited).string(message.gachaProbUrlOversea);
        /* optional uint32 gacha_type = 13; */
        if (message.gachaType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 left_gacha_times = 5; */
        if (message.leftGachaTimes !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.leftGachaTimes);
        /* repeated uint32 display_up5_item_list = 2006; */
        for (let i = 0; i < message.displayUp5ItemList.length; i++)
            writer.tag(2006, WireType.Varint).uint32(message.displayUp5ItemList[i]);
        /* optional uint32 gacha_times_limit = 11; */
        if (message.gachaTimesLimit !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.gachaTimesLimit);
        /* optional uint32 cost_item_num = 3; */
        if (message.costItemNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.costItemNum);
        /* optional bool is_new_wish = 733; */
        if (message.isNewWish !== undefined)
            writer.tag(733, WireType.Varint).bool(message.isNewWish);
        /* optional uint32 cost_item_id = 9; */
        if (message.costItemId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.costItemId);
        /* optional uint32 ten_cost_item_num = 6; */
        if (message.tenCostItemNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tenCostItemNum);
        /* optional string gacha_preview_prefab_path = 4; */
        if (message.gachaPreviewPrefabPath !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.gachaPreviewPrefabPath);
        /* optional uint32 wish_progress = 1819; */
        if (message.wishProgress !== undefined)
            writer.tag(1819, WireType.Varint).uint32(message.wishProgress);
        /* optional string title_textmap = 736; */
        if (message.titleTextmap !== undefined)
            writer.tag(736, WireType.LengthDelimited).string(message.titleTextmap);
        /* optional string gacha_record_url_oversea = 1854; */
        if (message.gachaRecordUrlOversea !== undefined)
            writer.tag(1854, WireType.LengthDelimited).string(message.gachaRecordUrlOversea);
        /* optional uint32 gacha_sort_id = 7; */
        if (message.gachaSortId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gachaSortId);
        /* optional string gacha_record_url = 12; */
        if (message.gachaRecordUrl !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.gachaRecordUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaInfo
 */
export const GachaInfo = new GachaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGachaInfoRsp$Type extends MessageType<GetGachaInfoRsp> {
    constructor() {
        super("com.midnights.game.GetGachaInfoRsp", [
            { no: 6, name: "is_under_general_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_under_minors_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GachaInfo }
        ]);
    }
    create(value?: PartialMessage<GetGachaInfoRsp>): GetGachaInfoRsp {
        const message = { gachaInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGachaInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGachaInfoRsp): GetGachaInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_under_general_restrict */ 6:
                    message.isUnderGeneralRestrict = reader.bool();
                    break;
                case /* optional uint32 gacha_random */ 9:
                    message.gachaRandom = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_under_minors_restrict */ 2:
                    message.isUnderMinorsRestrict = reader.bool();
                    break;
                case /* optional uint32 daily_gacha_times */ 5:
                    message.dailyGachaTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaInfo gacha_info_list */ 13:
                    message.gachaInfoList.push(GachaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGachaInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_under_general_restrict = 6; */
        if (message.isUnderGeneralRestrict !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isUnderGeneralRestrict);
        /* optional uint32 gacha_random = 9; */
        if (message.gachaRandom !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gachaRandom);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional bool is_under_minors_restrict = 2; */
        if (message.isUnderMinorsRestrict !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isUnderMinorsRestrict);
        /* optional uint32 daily_gacha_times = 5; */
        if (message.dailyGachaTimes !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.dailyGachaTimes);
        /* repeated com.midnights.game.GachaInfo gacha_info_list = 13; */
        for (let i = 0; i < message.gachaInfoList.length; i++)
            GachaInfo.internalBinaryWrite(message.gachaInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGachaInfoRsp
 */
export const GetGachaInfoRsp = new GetGachaInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoGachaReq$Type extends MessageType<DoGachaReq> {
    constructor() {
        super("com.midnights.game.DoGachaReq", [
            { no: 10, name: "gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DoGachaReq>): DoGachaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoGachaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoGachaReq): DoGachaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_times */ 10:
                    message.gachaTimes = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 7:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 gacha_type */ 14:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_random */ 13:
                    message.gachaRandom = reader.uint32();
                    break;
                case /* optional string gacha_tag */ 4:
                    message.gachaTag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoGachaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gacha_times = 10; */
        if (message.gachaTimes !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.gachaTimes);
        /* optional uint32 gacha_schedule_id = 7; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 gacha_type = 14; */
        if (message.gachaType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_random = 13; */
        if (message.gachaRandom !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gachaRandom);
        /* optional string gacha_tag = 4; */
        if (message.gachaTag !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.gachaTag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoGachaReq
 */
export const DoGachaReq = new DoGachaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaTransferItem$Type extends MessageType<GachaTransferItem> {
    constructor() {
        super("com.midnights.game.GachaTransferItem", [
            { no: 3, name: "item", kind: "message", T: () => ItemParam },
            { no: 1, name: "is_transfer_item_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GachaTransferItem>): GachaTransferItem {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaTransferItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaTransferItem): GachaTransferItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ItemParam item */ 3:
                    message.item = ItemParam.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional bool is_transfer_item_new */ 1:
                    message.isTransferItemNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaTransferItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ItemParam item = 3; */
        if (message.item)
            ItemParam.internalBinaryWrite(message.item, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfer_item_new = 1; */
        if (message.isTransferItemNew !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isTransferItemNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaTransferItem
 */
export const GachaTransferItem = new GachaTransferItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaItem$Type extends MessageType<GachaItem> {
    constructor() {
        super("com.midnights.game.GachaItem", [
            { no: 7, name: "gacha_item", kind: "message", T: () => ItemParam },
            { no: 6, name: "is_gacha_item_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_flash_card", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "token_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 12, name: "transfer_items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GachaTransferItem }
        ]);
    }
    create(value?: PartialMessage<GachaItem>): GachaItem {
        const message = { tokenItemList: [], transferItems: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaItem): GachaItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ItemParam gacha_item */ 7:
                    message.gachaItem = ItemParam.internalBinaryRead(reader, reader.uint32(), options, message.gachaItem);
                    break;
                case /* optional bool is_gacha_item_new */ 6:
                    message.isGachaItemNew = reader.bool();
                    break;
                case /* optional bool is_flash_card */ 8:
                    message.isFlashCard = reader.bool();
                    break;
                case /* repeated com.midnights.game.ItemParam token_item_list */ 9:
                    message.tokenItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.GachaTransferItem transfer_items */ 12:
                    message.transferItems.push(GachaTransferItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ItemParam gacha_item = 7; */
        if (message.gachaItem)
            ItemParam.internalBinaryWrite(message.gachaItem, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_gacha_item_new = 6; */
        if (message.isGachaItemNew !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isGachaItemNew);
        /* optional bool is_flash_card = 8; */
        if (message.isFlashCard !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isFlashCard);
        /* repeated com.midnights.game.ItemParam token_item_list = 9; */
        for (let i = 0; i < message.tokenItemList.length; i++)
            ItemParam.internalBinaryWrite(message.tokenItemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.GachaTransferItem transfer_items = 12; */
        for (let i = 0; i < message.transferItems.length; i++)
            GachaTransferItem.internalBinaryWrite(message.transferItems[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaItem
 */
export const GachaItem = new GachaItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoGachaRsp$Type extends MessageType<DoGachaRsp> {
    constructor() {
        super("com.midnights.game.DoGachaRsp", [
            { no: 155, name: "cur_schedule_daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ten_cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "gacha_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GachaItem },
            { no: 7, name: "ten_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1435, name: "is_under_minors_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1868, name: "is_under_general_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "gacha_times_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1240, name: "daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "left_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "new_gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DoGachaRsp>): DoGachaRsp {
        const message = { gachaItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoGachaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoGachaRsp): DoGachaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_schedule_daily_gacha_times */ 155:
                    message.curScheduleDailyGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 cost_item_num */ 10:
                    message.costItemNum = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 9:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_item_id */ 8:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 ten_cost_item_num */ 3:
                    message.tenCostItemNum = reader.uint32();
                    break;
                case /* optional uint32 wish_progress */ 2:
                    message.wishProgress = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaItem gacha_item_list */ 15:
                    message.gachaItemList.push(GachaItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 ten_cost_item_id */ 7:
                    message.tenCostItemId = reader.uint32();
                    break;
                case /* optional uint32 gacha_times */ 4:
                    message.gachaTimes = reader.uint32();
                    break;
                case /* optional bool is_under_minors_restrict */ 1435:
                    message.isUnderMinorsRestrict = reader.bool();
                    break;
                case /* optional bool is_under_general_restrict */ 1868:
                    message.isUnderGeneralRestrict = reader.bool();
                    break;
                case /* optional uint32 gacha_type */ 12:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_times_limit */ 1:
                    message.gachaTimesLimit = reader.uint32();
                    break;
                case /* optional uint32 cost_item_id */ 14:
                    message.costItemId = reader.uint32();
                    break;
                case /* optional uint32 daily_gacha_times */ 1240:
                    message.dailyGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 left_gacha_times */ 6:
                    message.leftGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 new_gacha_random */ 11:
                    message.newGachaRandom = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 5:
                    message.gachaScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoGachaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_schedule_daily_gacha_times = 155; */
        if (message.curScheduleDailyGachaTimes !== undefined)
            writer.tag(155, WireType.Varint).uint32(message.curScheduleDailyGachaTimes);
        /* optional uint32 cost_item_num = 10; */
        if (message.costItemNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.costItemNum);
        /* optional uint32 wish_max_progress = 9; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 wish_item_id = 8; */
        if (message.wishItemId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.wishItemId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 ten_cost_item_num = 3; */
        if (message.tenCostItemNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.tenCostItemNum);
        /* optional uint32 wish_progress = 2; */
        if (message.wishProgress !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.wishProgress);
        /* repeated com.midnights.game.GachaItem gacha_item_list = 15; */
        for (let i = 0; i < message.gachaItemList.length; i++)
            GachaItem.internalBinaryWrite(message.gachaItemList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 ten_cost_item_id = 7; */
        if (message.tenCostItemId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.tenCostItemId);
        /* optional uint32 gacha_times = 4; */
        if (message.gachaTimes !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.gachaTimes);
        /* optional bool is_under_minors_restrict = 1435; */
        if (message.isUnderMinorsRestrict !== undefined)
            writer.tag(1435, WireType.Varint).bool(message.isUnderMinorsRestrict);
        /* optional bool is_under_general_restrict = 1868; */
        if (message.isUnderGeneralRestrict !== undefined)
            writer.tag(1868, WireType.Varint).bool(message.isUnderGeneralRestrict);
        /* optional uint32 gacha_type = 12; */
        if (message.gachaType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_times_limit = 1; */
        if (message.gachaTimesLimit !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.gachaTimesLimit);
        /* optional uint32 cost_item_id = 14; */
        if (message.costItemId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.costItemId);
        /* optional uint32 daily_gacha_times = 1240; */
        if (message.dailyGachaTimes !== undefined)
            writer.tag(1240, WireType.Varint).uint32(message.dailyGachaTimes);
        /* optional uint32 left_gacha_times = 6; */
        if (message.leftGachaTimes !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.leftGachaTimes);
        /* optional uint32 new_gacha_random = 11; */
        if (message.newGachaRandom !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.newGachaRandom);
        /* optional uint32 gacha_schedule_id = 5; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gachaScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoGachaRsp
 */
export const DoGachaRsp = new DoGachaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaWishReq$Type extends MessageType<GachaWishReq> {
    constructor() {
        super("com.midnights.game.GachaWishReq", [
            { no: 14, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaWishReq>): GachaWishReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaWishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaWishReq): GachaWishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_schedule_id */ 14:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 gacha_type */ 13:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 4:
                    message.itemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaWishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gacha_schedule_id = 14; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 gacha_type = 13; */
        if (message.gachaType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 item_id = 4; */
        if (message.itemId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaWishReq
 */
export const GachaWishReq = new GachaWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaWishRsp$Type extends MessageType<GachaWishRsp> {
    constructor() {
        super("com.midnights.game.GachaWishRsp", [
            { no: 8, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaWishRsp>): GachaWishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaWishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaWishRsp): GachaWishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_type */ 8:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 7:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 2:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_progress */ 5:
                    message.wishProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_item_id */ 3:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaWishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gacha_type = 8; */
        if (message.gachaType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_schedule_id = 7; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 wish_max_progress = 2; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 wish_progress = 5; */
        if (message.wishProgress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.wishProgress);
        /* optional uint32 wish_item_id = 3; */
        if (message.wishItemId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.wishItemId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaWishRsp
 */
export const GachaWishRsp = new GachaWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaOpenWishNotify$Type extends MessageType<GachaOpenWishNotify> {
    constructor() {
        super("com.midnights.game.GachaOpenWishNotify", [
            { no: 2, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaOpenWishNotify>): GachaOpenWishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaOpenWishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaOpenWishNotify): GachaOpenWishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_type */ 2:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 9:
                    message.gachaScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaOpenWishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gacha_type = 2; */
        if (message.gachaType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_schedule_id = 9; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gachaScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaOpenWishNotify
 */
export const GachaOpenWishNotify = new GachaOpenWishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaSimpleInfoNotify$Type extends MessageType<GachaSimpleInfoNotify> {
    constructor() {
        super("com.midnights.game.GachaSimpleInfoNotify", [
            { no: 5, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GachaSimpleInfoNotify>): GachaSimpleInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaSimpleInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaSimpleInfoNotify): GachaSimpleInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 5:
                    message.isNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaSimpleInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new = 5; */
        if (message.isNew !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaSimpleInfoNotify
 */
export const GachaSimpleInfoNotify = new GachaSimpleInfoNotify$Type();
