/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CodexTypeData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CodexType";
import * as pb_1 from "google-protobuf";
export class CodexTypeData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        codex_id_list?: number[];
        weapon_max_promote_level_map?: Map<number, number>;
        type?: dependency_1.CodexType;
        have_viewed_list?: boolean[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("codex_id_list" in data && data.codex_id_list != undefined) {
                this.codex_id_list = data.codex_id_list;
            }
            if ("weapon_max_promote_level_map" in data && data.weapon_max_promote_level_map != undefined) {
                this.weapon_max_promote_level_map = data.weapon_max_promote_level_map;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("have_viewed_list" in data && data.have_viewed_list != undefined) {
                this.have_viewed_list = data.have_viewed_list;
            }
        }
        if (!this.weapon_max_promote_level_map)
            this.weapon_max_promote_level_map = new Map();
    }
    get codex_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as number[];
    }
    set codex_id_list(value: number[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get weapon_max_promote_level_map() {
        return pb_1.Message.getField(this, 4) as any as Map<number, number>;
    }
    set weapon_max_promote_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 13, dependency_1.CodexType.CODEX_TYPE_NONE) as dependency_1.CodexType;
    }
    set type(value: dependency_1.CodexType) {
        pb_1.Message.setField(this, 13, value);
    }
    get have_viewed_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as boolean[];
    }
    set have_viewed_list(value: boolean[]) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        codex_id_list?: number[];
        weapon_max_promote_level_map?: {
            [key: number]: number;
        };
        type?: dependency_1.CodexType;
        have_viewed_list?: boolean[];
    }): CodexTypeData {
        const message = new CodexTypeData({});
        if (data.codex_id_list != null) {
            message.codex_id_list = data.codex_id_list;
        }
        if (typeof data.weapon_max_promote_level_map == "object") {
            message.weapon_max_promote_level_map = new Map(Object.entries(data.weapon_max_promote_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.have_viewed_list != null) {
            message.have_viewed_list = data.have_viewed_list;
        }
        return message;
    }
    toObject() {
        const data: {
            codex_id_list?: number[];
            weapon_max_promote_level_map?: {
                [key: number]: number;
            };
            type?: dependency_1.CodexType;
            have_viewed_list?: boolean[];
        } = {};
        if (this.codex_id_list != null) {
            data.codex_id_list = this.codex_id_list;
        }
        if (this.weapon_max_promote_level_map.size > 0) {
            data.weapon_max_promote_level_map = (Object.fromEntries)(this.weapon_max_promote_level_map);
        }
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.have_viewed_list != null) {
            data.have_viewed_list = this.have_viewed_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.codex_id_list.length)
            writer.writePackedUint32(14, this.codex_id_list);
        for (const [key, value] of this.weapon_max_promote_level_map) {
            writer.writeMessage(4, this.weapon_max_promote_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.type != dependency_1.CodexType.CODEX_TYPE_NONE)
            writer.writeEnum(13, this.type);
        if (this.have_viewed_list.length)
            writer.writePackedBool(5, this.have_viewed_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodexTypeData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodexTypeData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.codex_id_list = reader.readPackedUint32();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.weapon_max_promote_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 13:
                    message.type = reader.readEnum();
                    break;
                case 5:
                    message.have_viewed_list = reader.readPackedBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CodexTypeData {
        return CodexTypeData.deserialize(bytes);
    }
}
