/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PrivateChatReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PrivateChatReq extends pb_1.Message {
    #one_of_decls: number[][] = [[3, 4]];
    constructor(data?: any[] | ({
        target_uid?: number;
    } & (({
        text?: string;
        icon?: never;
    } | {
        text?: never;
        icon?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("target_uid" in data && data.target_uid != undefined) {
                this.target_uid = data.target_uid;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
        }
    }
    get target_uid() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set target_uid(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_text() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set icon(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_icon() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get content() {
        const cases: {
            [index: number]: "none" | "text" | "icon";
        } = {
            0: "none",
            3: "text",
            4: "icon"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
    }
    static fromObject(data: {
        target_uid?: number;
        text?: string;
        icon?: number;
    }): PrivateChatReq {
        const message = new PrivateChatReq({});
        if (data.target_uid != null) {
            message.target_uid = data.target_uid;
        }
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        return message;
    }
    toObject() {
        const data: {
            target_uid?: number;
            text?: string;
            icon?: number;
        } = {};
        if (this.target_uid != null) {
            data.target_uid = this.target_uid;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.target_uid != 0)
            writer.writeUint32(7, this.target_uid);
        if (this.has_text)
            writer.writeString(3, this.text);
        if (this.has_icon)
            writer.writeUint32(4, this.icon);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateChatReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateChatReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.target_uid = reader.readUint32();
                    break;
                case 3:
                    message.text = reader.readString();
                    break;
                case 4:
                    message.icon = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrivateChatReq {
        return PrivateChatReq.deserialize(bytes);
    }
}
