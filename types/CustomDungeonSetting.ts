// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "CustomDungeonSetting.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message CustomDungeonSetting
 */
export interface CustomDungeonSetting {
    /**
     * @generated from protobuf field: uint32 start_room_id = 3;
     */
    startRoomId: number;
    /**
     * @generated from protobuf field: uint32 time_limit = 9;
     */
    timeLimit: number;
    /**
     * @generated from protobuf field: repeated uint32 open_room_list = 14;
     */
    openRoomList: number[];
    /**
     * @generated from protobuf field: uint32 coin_limit = 5;
     */
    coinLimit: number;
    /**
     * @generated from protobuf field: bool is_forbid_skill = 7;
     */
    isForbidSkill: boolean;
    /**
     * @generated from protobuf field: bool is_arrive_finish = 6;
     */
    isArriveFinish: boolean;
    /**
     * @generated from protobuf field: uint32 life_num = 8;
     */
    lifeNum: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class CustomDungeonSetting$Type extends MessageType<CustomDungeonSetting> {
    constructor() {
        super("CustomDungeonSetting", [
            { no: 3, name: "start_room_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "time_limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "open_room_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "coin_limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_forbid_skill", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_arrive_finish", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "life_num", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CustomDungeonSetting>): CustomDungeonSetting {
        const message = { startRoomId: 0, timeLimit: 0, openRoomList: [], coinLimit: 0, isForbidSkill: false, isArriveFinish: false, lifeNum: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CustomDungeonSetting>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomDungeonSetting): CustomDungeonSetting {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 start_room_id */ 3:
                    message.startRoomId = reader.uint32();
                    break;
                case /* uint32 time_limit */ 9:
                    message.timeLimit = reader.uint32();
                    break;
                case /* repeated uint32 open_room_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.openRoomList.push(reader.uint32());
                    else
                        message.openRoomList.push(reader.uint32());
                    break;
                case /* uint32 coin_limit */ 5:
                    message.coinLimit = reader.uint32();
                    break;
                case /* bool is_forbid_skill */ 7:
                    message.isForbidSkill = reader.bool();
                    break;
                case /* bool is_arrive_finish */ 6:
                    message.isArriveFinish = reader.bool();
                    break;
                case /* uint32 life_num */ 8:
                    message.lifeNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomDungeonSetting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 start_room_id = 3; */
        if (message.startRoomId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.startRoomId);
        /* uint32 time_limit = 9; */
        if (message.timeLimit !== 0)
            writer.tag(9, WireType.Varint).uint32(message.timeLimit);
        /* repeated uint32 open_room_list = 14; */
        if (message.openRoomList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.openRoomList.length; i++)
                writer.uint32(message.openRoomList[i]);
            writer.join();
        }
        /* uint32 coin_limit = 5; */
        if (message.coinLimit !== 0)
            writer.tag(5, WireType.Varint).uint32(message.coinLimit);
        /* bool is_forbid_skill = 7; */
        if (message.isForbidSkill !== false)
            writer.tag(7, WireType.Varint).bool(message.isForbidSkill);
        /* bool is_arrive_finish = 6; */
        if (message.isArriveFinish !== false)
            writer.tag(6, WireType.Varint).bool(message.isArriveFinish);
        /* uint32 life_num = 8; */
        if (message.lifeNum !== 0)
            writer.tag(8, WireType.Varint).uint32(message.lifeNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message CustomDungeonSetting
 */
export const CustomDungeonSetting = new CustomDungeonSetting$Type();
