/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DungeonSettleNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ChannelerSlabLoopDungeonResultInfo";
import * as dependency_2 from "./CrystalLinkSettleInfo";
import * as dependency_3 from "./DungeonSettleExhibitionInfo";
import * as dependency_4 from "./EffigyChallengeDungeonResultInfo";
import * as dependency_5 from "./InstableSpraySettleInfo";
import * as dependency_6 from "./ParamList";
import * as dependency_7 from "./RoguelikeDungeonSettleInfo";
import * as dependency_8 from "./StrengthenPointData";
import * as dependency_9 from "./SummerTimeV2DungeonSettleInfo";
import * as dependency_10 from "./TowerLevelEndNotify";
import * as dependency_11 from "./TrialAvatarFirstPassDungeonNotify";
import * as dependency_12 from "./WindFieldDungeonSettleInfo";
import * as pb_1 from "google-protobuf";
export class DungeonSettleNotify extends pb_1.Message {
    #one_of_decls: number[][] = [[351, 635, 686, 328, 1482, 112, 1882, 193, 1825]];
    constructor(data?: any[] | ({
        result?: number;
        dungeon_id?: number;
        strengthen_point_data_map?: Map<number, dependency_8.StrengthenPointData>;
        exhibition_info_list?: dependency_3.DungeonSettleExhibitionInfo[];
        Unk3100_PIFIBCAMAIG?: number;
        fail_cond_list?: number[];
        Unk2700_OMCCFBBDJMI?: number;
        close_time?: number;
        is_success?: boolean;
        settle_show?: Map<number, dependency_6.ParamList>;
    } & (({
        tower_level_end_notify?: dependency_10.TowerLevelEndNotify;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: dependency_11.TrialAvatarFirstPassDungeonNotify;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: dependency_1.ChannelerSlabLoopDungeonResultInfo;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: dependency_4.EffigyChallengeDungeonResultInfo;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: dependency_7.RoguelikeDungeonSettleInfo;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: dependency_2.CrystalLinkSettleInfo;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: dependency_9.SummerTimeV2DungeonSettleInfo;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: dependency_5.InstableSpraySettleInfo;
        wind_field_dungeon_settle_info?: never;
    } | {
        tower_level_end_notify?: never;
        trial_avatar_first_pass_dungeon_notify?: never;
        channeller_slab_loop_dungeon_result_info?: never;
        effigy_challenge_dungeon_result_info?: never;
        roguelike_dungeon_settle_info?: never;
        crystal_link_settle_info?: never;
        summer_time_v2_dungeon_settle_info?: never;
        instable_spray_settle_info?: never;
        wind_field_dungeon_settle_info?: dependency_12.WindFieldDungeonSettleInfo;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("strengthen_point_data_map" in data && data.strengthen_point_data_map != undefined) {
                this.strengthen_point_data_map = data.strengthen_point_data_map;
            }
            if ("exhibition_info_list" in data && data.exhibition_info_list != undefined) {
                this.exhibition_info_list = data.exhibition_info_list;
            }
            if ("Unk3100_PIFIBCAMAIG" in data && data.Unk3100_PIFIBCAMAIG != undefined) {
                this.Unk3100_PIFIBCAMAIG = data.Unk3100_PIFIBCAMAIG;
            }
            if ("fail_cond_list" in data && data.fail_cond_list != undefined) {
                this.fail_cond_list = data.fail_cond_list;
            }
            if ("Unk2700_OMCCFBBDJMI" in data && data.Unk2700_OMCCFBBDJMI != undefined) {
                this.Unk2700_OMCCFBBDJMI = data.Unk2700_OMCCFBBDJMI;
            }
            if ("close_time" in data && data.close_time != undefined) {
                this.close_time = data.close_time;
            }
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
            if ("settle_show" in data && data.settle_show != undefined) {
                this.settle_show = data.settle_show;
            }
            if ("tower_level_end_notify" in data && data.tower_level_end_notify != undefined) {
                this.tower_level_end_notify = data.tower_level_end_notify;
            }
            if ("trial_avatar_first_pass_dungeon_notify" in data && data.trial_avatar_first_pass_dungeon_notify != undefined) {
                this.trial_avatar_first_pass_dungeon_notify = data.trial_avatar_first_pass_dungeon_notify;
            }
            if ("channeller_slab_loop_dungeon_result_info" in data && data.channeller_slab_loop_dungeon_result_info != undefined) {
                this.channeller_slab_loop_dungeon_result_info = data.channeller_slab_loop_dungeon_result_info;
            }
            if ("effigy_challenge_dungeon_result_info" in data && data.effigy_challenge_dungeon_result_info != undefined) {
                this.effigy_challenge_dungeon_result_info = data.effigy_challenge_dungeon_result_info;
            }
            if ("roguelike_dungeon_settle_info" in data && data.roguelike_dungeon_settle_info != undefined) {
                this.roguelike_dungeon_settle_info = data.roguelike_dungeon_settle_info;
            }
            if ("crystal_link_settle_info" in data && data.crystal_link_settle_info != undefined) {
                this.crystal_link_settle_info = data.crystal_link_settle_info;
            }
            if ("summer_time_v2_dungeon_settle_info" in data && data.summer_time_v2_dungeon_settle_info != undefined) {
                this.summer_time_v2_dungeon_settle_info = data.summer_time_v2_dungeon_settle_info;
            }
            if ("instable_spray_settle_info" in data && data.instable_spray_settle_info != undefined) {
                this.instable_spray_settle_info = data.instable_spray_settle_info;
            }
            if ("wind_field_dungeon_settle_info" in data && data.wind_field_dungeon_settle_info != undefined) {
                this.wind_field_dungeon_settle_info = data.wind_field_dungeon_settle_info;
            }
        }
        if (!this.strengthen_point_data_map)
            this.strengthen_point_data_map = new Map();
        if (!this.settle_show)
            this.settle_show = new Map();
    }
    get result() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set result(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get strengthen_point_data_map() {
        return pb_1.Message.getField(this, 14) as any as Map<number, dependency_8.StrengthenPointData>;
    }
    set strengthen_point_data_map(value: Map<number, dependency_8.StrengthenPointData>) {
        pb_1.Message.setField(this, 14, value as any);
    }
    get exhibition_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.DungeonSettleExhibitionInfo, 8) as dependency_3.DungeonSettleExhibitionInfo[];
    }
    set exhibition_info_list(value: dependency_3.DungeonSettleExhibitionInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get Unk3100_PIFIBCAMAIG() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set Unk3100_PIFIBCAMAIG(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get fail_cond_list() {
        return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
    }
    set fail_cond_list(value: number[]) {
        pb_1.Message.setField(this, 11, value);
    }
    get Unk2700_OMCCFBBDJMI() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set Unk2700_OMCCFBBDJMI(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get close_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set close_time(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get settle_show() {
        return pb_1.Message.getField(this, 5) as any as Map<number, dependency_6.ParamList>;
    }
    set settle_show(value: Map<number, dependency_6.ParamList>) {
        pb_1.Message.setField(this, 5, value as any);
    }
    get tower_level_end_notify() {
        return pb_1.Message.getWrapperField(this, dependency_10.TowerLevelEndNotify, 351) as dependency_10.TowerLevelEndNotify;
    }
    set tower_level_end_notify(value: dependency_10.TowerLevelEndNotify) {
        pb_1.Message.setOneofWrapperField(this, 351, this.#one_of_decls[0], value);
    }
    get has_tower_level_end_notify() {
        return pb_1.Message.getField(this, 351) != null;
    }
    get trial_avatar_first_pass_dungeon_notify() {
        return pb_1.Message.getWrapperField(this, dependency_11.TrialAvatarFirstPassDungeonNotify, 635) as dependency_11.TrialAvatarFirstPassDungeonNotify;
    }
    set trial_avatar_first_pass_dungeon_notify(value: dependency_11.TrialAvatarFirstPassDungeonNotify) {
        pb_1.Message.setOneofWrapperField(this, 635, this.#one_of_decls[0], value);
    }
    get has_trial_avatar_first_pass_dungeon_notify() {
        return pb_1.Message.getField(this, 635) != null;
    }
    get channeller_slab_loop_dungeon_result_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.ChannelerSlabLoopDungeonResultInfo, 686) as dependency_1.ChannelerSlabLoopDungeonResultInfo;
    }
    set channeller_slab_loop_dungeon_result_info(value: dependency_1.ChannelerSlabLoopDungeonResultInfo) {
        pb_1.Message.setOneofWrapperField(this, 686, this.#one_of_decls[0], value);
    }
    get has_channeller_slab_loop_dungeon_result_info() {
        return pb_1.Message.getField(this, 686) != null;
    }
    get effigy_challenge_dungeon_result_info() {
        return pb_1.Message.getWrapperField(this, dependency_4.EffigyChallengeDungeonResultInfo, 328) as dependency_4.EffigyChallengeDungeonResultInfo;
    }
    set effigy_challenge_dungeon_result_info(value: dependency_4.EffigyChallengeDungeonResultInfo) {
        pb_1.Message.setOneofWrapperField(this, 328, this.#one_of_decls[0], value);
    }
    get has_effigy_challenge_dungeon_result_info() {
        return pb_1.Message.getField(this, 328) != null;
    }
    get roguelike_dungeon_settle_info() {
        return pb_1.Message.getWrapperField(this, dependency_7.RoguelikeDungeonSettleInfo, 1482) as dependency_7.RoguelikeDungeonSettleInfo;
    }
    set roguelike_dungeon_settle_info(value: dependency_7.RoguelikeDungeonSettleInfo) {
        pb_1.Message.setOneofWrapperField(this, 1482, this.#one_of_decls[0], value);
    }
    get has_roguelike_dungeon_settle_info() {
        return pb_1.Message.getField(this, 1482) != null;
    }
    get crystal_link_settle_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.CrystalLinkSettleInfo, 112) as dependency_2.CrystalLinkSettleInfo;
    }
    set crystal_link_settle_info(value: dependency_2.CrystalLinkSettleInfo) {
        pb_1.Message.setOneofWrapperField(this, 112, this.#one_of_decls[0], value);
    }
    get has_crystal_link_settle_info() {
        return pb_1.Message.getField(this, 112) != null;
    }
    get summer_time_v2_dungeon_settle_info() {
        return pb_1.Message.getWrapperField(this, dependency_9.SummerTimeV2DungeonSettleInfo, 1882) as dependency_9.SummerTimeV2DungeonSettleInfo;
    }
    set summer_time_v2_dungeon_settle_info(value: dependency_9.SummerTimeV2DungeonSettleInfo) {
        pb_1.Message.setOneofWrapperField(this, 1882, this.#one_of_decls[0], value);
    }
    get has_summer_time_v2_dungeon_settle_info() {
        return pb_1.Message.getField(this, 1882) != null;
    }
    get instable_spray_settle_info() {
        return pb_1.Message.getWrapperField(this, dependency_5.InstableSpraySettleInfo, 193) as dependency_5.InstableSpraySettleInfo;
    }
    set instable_spray_settle_info(value: dependency_5.InstableSpraySettleInfo) {
        pb_1.Message.setOneofWrapperField(this, 193, this.#one_of_decls[0], value);
    }
    get has_instable_spray_settle_info() {
        return pb_1.Message.getField(this, 193) != null;
    }
    get wind_field_dungeon_settle_info() {
        return pb_1.Message.getWrapperField(this, dependency_12.WindFieldDungeonSettleInfo, 1825) as dependency_12.WindFieldDungeonSettleInfo;
    }
    set wind_field_dungeon_settle_info(value: dependency_12.WindFieldDungeonSettleInfo) {
        pb_1.Message.setOneofWrapperField(this, 1825, this.#one_of_decls[0], value);
    }
    get has_wind_field_dungeon_settle_info() {
        return pb_1.Message.getField(this, 1825) != null;
    }
    get detail() {
        const cases: {
            [index: number]: "none" | "tower_level_end_notify" | "trial_avatar_first_pass_dungeon_notify" | "channeller_slab_loop_dungeon_result_info" | "effigy_challenge_dungeon_result_info" | "roguelike_dungeon_settle_info" | "crystal_link_settle_info" | "summer_time_v2_dungeon_settle_info" | "instable_spray_settle_info" | "wind_field_dungeon_settle_info";
        } = {
            0: "none",
            351: "tower_level_end_notify",
            635: "trial_avatar_first_pass_dungeon_notify",
            686: "channeller_slab_loop_dungeon_result_info",
            328: "effigy_challenge_dungeon_result_info",
            1482: "roguelike_dungeon_settle_info",
            112: "crystal_link_settle_info",
            1882: "summer_time_v2_dungeon_settle_info",
            193: "instable_spray_settle_info",
            1825: "wind_field_dungeon_settle_info"
        };
        return cases[pb_1.Message.computeOneofCase(this, [351, 635, 686, 328, 1482, 112, 1882, 193, 1825])];
    }
    static fromObject(data: {
        result?: number;
        dungeon_id?: number;
        strengthen_point_data_map?: {
            [key: number]: ReturnType<typeof dependency_8.StrengthenPointData.prototype.toObject>;
        };
        exhibition_info_list?: ReturnType<typeof dependency_3.DungeonSettleExhibitionInfo.prototype.toObject>[];
        Unk3100_PIFIBCAMAIG?: number;
        fail_cond_list?: number[];
        Unk2700_OMCCFBBDJMI?: number;
        close_time?: number;
        is_success?: boolean;
        settle_show?: {
            [key: number]: ReturnType<typeof dependency_6.ParamList.prototype.toObject>;
        };
        tower_level_end_notify?: ReturnType<typeof dependency_10.TowerLevelEndNotify.prototype.toObject>;
        trial_avatar_first_pass_dungeon_notify?: ReturnType<typeof dependency_11.TrialAvatarFirstPassDungeonNotify.prototype.toObject>;
        channeller_slab_loop_dungeon_result_info?: ReturnType<typeof dependency_1.ChannelerSlabLoopDungeonResultInfo.prototype.toObject>;
        effigy_challenge_dungeon_result_info?: ReturnType<typeof dependency_4.EffigyChallengeDungeonResultInfo.prototype.toObject>;
        roguelike_dungeon_settle_info?: ReturnType<typeof dependency_7.RoguelikeDungeonSettleInfo.prototype.toObject>;
        crystal_link_settle_info?: ReturnType<typeof dependency_2.CrystalLinkSettleInfo.prototype.toObject>;
        summer_time_v2_dungeon_settle_info?: ReturnType<typeof dependency_9.SummerTimeV2DungeonSettleInfo.prototype.toObject>;
        instable_spray_settle_info?: ReturnType<typeof dependency_5.InstableSpraySettleInfo.prototype.toObject>;
        wind_field_dungeon_settle_info?: ReturnType<typeof dependency_12.WindFieldDungeonSettleInfo.prototype.toObject>;
    }): DungeonSettleNotify {
        const message = new DungeonSettleNotify({});
        if (data.result != null) {
            message.result = data.result;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (typeof data.strengthen_point_data_map == "object") {
            message.strengthen_point_data_map = new Map(Object.entries(data.strengthen_point_data_map).map(([key, value]) => [Number(key), dependency_8.StrengthenPointData.fromObject(value)]));
        }
        if (data.exhibition_info_list != null) {
            message.exhibition_info_list = data.exhibition_info_list.map(item => dependency_3.DungeonSettleExhibitionInfo.fromObject(item));
        }
        if (data.Unk3100_PIFIBCAMAIG != null) {
            message.Unk3100_PIFIBCAMAIG = data.Unk3100_PIFIBCAMAIG;
        }
        if (data.fail_cond_list != null) {
            message.fail_cond_list = data.fail_cond_list;
        }
        if (data.Unk2700_OMCCFBBDJMI != null) {
            message.Unk2700_OMCCFBBDJMI = data.Unk2700_OMCCFBBDJMI;
        }
        if (data.close_time != null) {
            message.close_time = data.close_time;
        }
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        if (typeof data.settle_show == "object") {
            message.settle_show = new Map(Object.entries(data.settle_show).map(([key, value]) => [Number(key), dependency_6.ParamList.fromObject(value)]));
        }
        if (data.tower_level_end_notify != null) {
            message.tower_level_end_notify = dependency_10.TowerLevelEndNotify.fromObject(data.tower_level_end_notify);
        }
        if (data.trial_avatar_first_pass_dungeon_notify != null) {
            message.trial_avatar_first_pass_dungeon_notify = dependency_11.TrialAvatarFirstPassDungeonNotify.fromObject(data.trial_avatar_first_pass_dungeon_notify);
        }
        if (data.channeller_slab_loop_dungeon_result_info != null) {
            message.channeller_slab_loop_dungeon_result_info = dependency_1.ChannelerSlabLoopDungeonResultInfo.fromObject(data.channeller_slab_loop_dungeon_result_info);
        }
        if (data.effigy_challenge_dungeon_result_info != null) {
            message.effigy_challenge_dungeon_result_info = dependency_4.EffigyChallengeDungeonResultInfo.fromObject(data.effigy_challenge_dungeon_result_info);
        }
        if (data.roguelike_dungeon_settle_info != null) {
            message.roguelike_dungeon_settle_info = dependency_7.RoguelikeDungeonSettleInfo.fromObject(data.roguelike_dungeon_settle_info);
        }
        if (data.crystal_link_settle_info != null) {
            message.crystal_link_settle_info = dependency_2.CrystalLinkSettleInfo.fromObject(data.crystal_link_settle_info);
        }
        if (data.summer_time_v2_dungeon_settle_info != null) {
            message.summer_time_v2_dungeon_settle_info = dependency_9.SummerTimeV2DungeonSettleInfo.fromObject(data.summer_time_v2_dungeon_settle_info);
        }
        if (data.instable_spray_settle_info != null) {
            message.instable_spray_settle_info = dependency_5.InstableSpraySettleInfo.fromObject(data.instable_spray_settle_info);
        }
        if (data.wind_field_dungeon_settle_info != null) {
            message.wind_field_dungeon_settle_info = dependency_12.WindFieldDungeonSettleInfo.fromObject(data.wind_field_dungeon_settle_info);
        }
        return message;
    }
    toObject() {
        const data: {
            result?: number;
            dungeon_id?: number;
            strengthen_point_data_map?: {
                [key: number]: ReturnType<typeof dependency_8.StrengthenPointData.prototype.toObject>;
            };
            exhibition_info_list?: ReturnType<typeof dependency_3.DungeonSettleExhibitionInfo.prototype.toObject>[];
            Unk3100_PIFIBCAMAIG?: number;
            fail_cond_list?: number[];
            Unk2700_OMCCFBBDJMI?: number;
            close_time?: number;
            is_success?: boolean;
            settle_show?: {
                [key: number]: ReturnType<typeof dependency_6.ParamList.prototype.toObject>;
            };
            tower_level_end_notify?: ReturnType<typeof dependency_10.TowerLevelEndNotify.prototype.toObject>;
            trial_avatar_first_pass_dungeon_notify?: ReturnType<typeof dependency_11.TrialAvatarFirstPassDungeonNotify.prototype.toObject>;
            channeller_slab_loop_dungeon_result_info?: ReturnType<typeof dependency_1.ChannelerSlabLoopDungeonResultInfo.prototype.toObject>;
            effigy_challenge_dungeon_result_info?: ReturnType<typeof dependency_4.EffigyChallengeDungeonResultInfo.prototype.toObject>;
            roguelike_dungeon_settle_info?: ReturnType<typeof dependency_7.RoguelikeDungeonSettleInfo.prototype.toObject>;
            crystal_link_settle_info?: ReturnType<typeof dependency_2.CrystalLinkSettleInfo.prototype.toObject>;
            summer_time_v2_dungeon_settle_info?: ReturnType<typeof dependency_9.SummerTimeV2DungeonSettleInfo.prototype.toObject>;
            instable_spray_settle_info?: ReturnType<typeof dependency_5.InstableSpraySettleInfo.prototype.toObject>;
            wind_field_dungeon_settle_info?: ReturnType<typeof dependency_12.WindFieldDungeonSettleInfo.prototype.toObject>;
        } = {};
        if (this.result != null) {
            data.result = this.result;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.strengthen_point_data_map.size > 0) {
            data.strengthen_point_data_map = (Object.fromEntries)((Array.from)(this.strengthen_point_data_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.exhibition_info_list != null) {
            data.exhibition_info_list = this.exhibition_info_list.map((item: dependency_3.DungeonSettleExhibitionInfo) => item.toObject());
        }
        if (this.Unk3100_PIFIBCAMAIG != null) {
            data.Unk3100_PIFIBCAMAIG = this.Unk3100_PIFIBCAMAIG;
        }
        if (this.fail_cond_list != null) {
            data.fail_cond_list = this.fail_cond_list;
        }
        if (this.Unk2700_OMCCFBBDJMI != null) {
            data.Unk2700_OMCCFBBDJMI = this.Unk2700_OMCCFBBDJMI;
        }
        if (this.close_time != null) {
            data.close_time = this.close_time;
        }
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        if (this.settle_show.size > 0) {
            data.settle_show = (Object.fromEntries)((Array.from)(this.settle_show).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.tower_level_end_notify != null) {
            data.tower_level_end_notify = this.tower_level_end_notify.toObject();
        }
        if (this.trial_avatar_first_pass_dungeon_notify != null) {
            data.trial_avatar_first_pass_dungeon_notify = this.trial_avatar_first_pass_dungeon_notify.toObject();
        }
        if (this.channeller_slab_loop_dungeon_result_info != null) {
            data.channeller_slab_loop_dungeon_result_info = this.channeller_slab_loop_dungeon_result_info.toObject();
        }
        if (this.effigy_challenge_dungeon_result_info != null) {
            data.effigy_challenge_dungeon_result_info = this.effigy_challenge_dungeon_result_info.toObject();
        }
        if (this.roguelike_dungeon_settle_info != null) {
            data.roguelike_dungeon_settle_info = this.roguelike_dungeon_settle_info.toObject();
        }
        if (this.crystal_link_settle_info != null) {
            data.crystal_link_settle_info = this.crystal_link_settle_info.toObject();
        }
        if (this.summer_time_v2_dungeon_settle_info != null) {
            data.summer_time_v2_dungeon_settle_info = this.summer_time_v2_dungeon_settle_info.toObject();
        }
        if (this.instable_spray_settle_info != null) {
            data.instable_spray_settle_info = this.instable_spray_settle_info.toObject();
        }
        if (this.wind_field_dungeon_settle_info != null) {
            data.wind_field_dungeon_settle_info = this.wind_field_dungeon_settle_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.result != 0)
            writer.writeUint32(10, this.result);
        if (this.dungeon_id != 0)
            writer.writeUint32(13, this.dungeon_id);
        for (const [key, value] of this.strengthen_point_data_map) {
            writer.writeMessage(14, this.strengthen_point_data_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.exhibition_info_list.length)
            writer.writeRepeatedMessage(8, this.exhibition_info_list, (item: dependency_3.DungeonSettleExhibitionInfo) => item.serialize(writer));
        if (this.Unk3100_PIFIBCAMAIG != 0)
            writer.writeUint32(12, this.Unk3100_PIFIBCAMAIG);
        if (this.fail_cond_list.length)
            writer.writePackedUint32(11, this.fail_cond_list);
        if (this.Unk2700_OMCCFBBDJMI != 0)
            writer.writeUint32(1, this.Unk2700_OMCCFBBDJMI);
        if (this.close_time != 0)
            writer.writeUint32(4, this.close_time);
        if (this.is_success != false)
            writer.writeBool(7, this.is_success);
        for (const [key, value] of this.settle_show) {
            writer.writeMessage(5, this.settle_show, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.has_tower_level_end_notify)
            writer.writeMessage(351, this.tower_level_end_notify, () => this.tower_level_end_notify.serialize(writer));
        if (this.has_trial_avatar_first_pass_dungeon_notify)
            writer.writeMessage(635, this.trial_avatar_first_pass_dungeon_notify, () => this.trial_avatar_first_pass_dungeon_notify.serialize(writer));
        if (this.has_channeller_slab_loop_dungeon_result_info)
            writer.writeMessage(686, this.channeller_slab_loop_dungeon_result_info, () => this.channeller_slab_loop_dungeon_result_info.serialize(writer));
        if (this.has_effigy_challenge_dungeon_result_info)
            writer.writeMessage(328, this.effigy_challenge_dungeon_result_info, () => this.effigy_challenge_dungeon_result_info.serialize(writer));
        if (this.has_roguelike_dungeon_settle_info)
            writer.writeMessage(1482, this.roguelike_dungeon_settle_info, () => this.roguelike_dungeon_settle_info.serialize(writer));
        if (this.has_crystal_link_settle_info)
            writer.writeMessage(112, this.crystal_link_settle_info, () => this.crystal_link_settle_info.serialize(writer));
        if (this.has_summer_time_v2_dungeon_settle_info)
            writer.writeMessage(1882, this.summer_time_v2_dungeon_settle_info, () => this.summer_time_v2_dungeon_settle_info.serialize(writer));
        if (this.has_instable_spray_settle_info)
            writer.writeMessage(193, this.instable_spray_settle_info, () => this.instable_spray_settle_info.serialize(writer));
        if (this.has_wind_field_dungeon_settle_info)
            writer.writeMessage(1825, this.wind_field_dungeon_settle_info, () => this.wind_field_dungeon_settle_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DungeonSettleNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DungeonSettleNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.result = reader.readUint32();
                    break;
                case 13:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.strengthen_point_data_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_8.StrengthenPointData.deserialize(reader));
                        return value;
                    }));
                    break;
                case 8:
                    reader.readMessage(message.exhibition_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_3.DungeonSettleExhibitionInfo.deserialize(reader), dependency_3.DungeonSettleExhibitionInfo));
                    break;
                case 12:
                    message.Unk3100_PIFIBCAMAIG = reader.readUint32();
                    break;
                case 11:
                    message.fail_cond_list = reader.readPackedUint32();
                    break;
                case 1:
                    message.Unk2700_OMCCFBBDJMI = reader.readUint32();
                    break;
                case 4:
                    message.close_time = reader.readUint32();
                    break;
                case 7:
                    message.is_success = reader.readBool();
                    break;
                case 5:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.settle_show as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_6.ParamList.deserialize(reader));
                        return value;
                    }));
                    break;
                case 351:
                    reader.readMessage(message.tower_level_end_notify, () => message.tower_level_end_notify = dependency_10.TowerLevelEndNotify.deserialize(reader));
                    break;
                case 635:
                    reader.readMessage(message.trial_avatar_first_pass_dungeon_notify, () => message.trial_avatar_first_pass_dungeon_notify = dependency_11.TrialAvatarFirstPassDungeonNotify.deserialize(reader));
                    break;
                case 686:
                    reader.readMessage(message.channeller_slab_loop_dungeon_result_info, () => message.channeller_slab_loop_dungeon_result_info = dependency_1.ChannelerSlabLoopDungeonResultInfo.deserialize(reader));
                    break;
                case 328:
                    reader.readMessage(message.effigy_challenge_dungeon_result_info, () => message.effigy_challenge_dungeon_result_info = dependency_4.EffigyChallengeDungeonResultInfo.deserialize(reader));
                    break;
                case 1482:
                    reader.readMessage(message.roguelike_dungeon_settle_info, () => message.roguelike_dungeon_settle_info = dependency_7.RoguelikeDungeonSettleInfo.deserialize(reader));
                    break;
                case 112:
                    reader.readMessage(message.crystal_link_settle_info, () => message.crystal_link_settle_info = dependency_2.CrystalLinkSettleInfo.deserialize(reader));
                    break;
                case 1882:
                    reader.readMessage(message.summer_time_v2_dungeon_settle_info, () => message.summer_time_v2_dungeon_settle_info = dependency_9.SummerTimeV2DungeonSettleInfo.deserialize(reader));
                    break;
                case 193:
                    reader.readMessage(message.instable_spray_settle_info, () => message.instable_spray_settle_info = dependency_5.InstableSpraySettleInfo.deserialize(reader));
                    break;
                case 1825:
                    reader.readMessage(message.wind_field_dungeon_settle_info, () => message.wind_field_dungeon_settle_info = dependency_12.WindFieldDungeonSettleInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DungeonSettleNotify {
        return DungeonSettleNotify.deserialize(bytes);
    }
}
