// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "GetQuestLackingResourceRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 424;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message GetQuestLackingResourceRsp
 */
export interface GetQuestLackingResourceRsp {
    /**
     * @generated from protobuf field: map<uint32, uint32> lacked_place_map = 2;
     */
    lackedPlaceMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> lacked_npc_map = 7;
     */
    lackedNpcMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: repeated uint32 lacked_place_list = 11;
     */
    lackedPlaceList: number[];
    /**
     * @generated from protobuf field: uint32 quest_id = 3;
     */
    questId: number;
    /**
     * @generated from protobuf field: int32 retcode = 6;
     */
    retcode: number;
    /**
     * @generated from protobuf field: repeated uint32 lacked_npc_list = 14;
     */
    lackedNpcList: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetQuestLackingResourceRsp$Type extends MessageType<GetQuestLackingResourceRsp> {
    constructor() {
        super("GetQuestLackingResourceRsp", [
            { no: 2, name: "lacked_place_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "lacked_npc_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "lacked_place_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "quest_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "lacked_npc_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetQuestLackingResourceRsp>): GetQuestLackingResourceRsp {
        const message = { lackedPlaceMap: {}, lackedNpcMap: {}, lackedPlaceList: [], questId: 0, retcode: 0, lackedNpcList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQuestLackingResourceRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQuestLackingResourceRsp): GetQuestLackingResourceRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> lacked_place_map */ 2:
                    this.binaryReadMap2(message.lackedPlaceMap, reader, options);
                    break;
                case /* map<uint32, uint32> lacked_npc_map */ 7:
                    this.binaryReadMap7(message.lackedNpcMap, reader, options);
                    break;
                case /* repeated uint32 lacked_place_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lackedPlaceList.push(reader.uint32());
                    else
                        message.lackedPlaceList.push(reader.uint32());
                    break;
                case /* uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                case /* int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 lacked_npc_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lackedNpcList.push(reader.uint32());
                    else
                        message.lackedNpcList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: GetQuestLackingResourceRsp["lackedPlaceMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetQuestLackingResourceRsp["lackedPlaceMap"] | undefined, val: GetQuestLackingResourceRsp["lackedPlaceMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GetQuestLackingResourceRsp.lacked_place_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap7(map: GetQuestLackingResourceRsp["lackedNpcMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetQuestLackingResourceRsp["lackedNpcMap"] | undefined, val: GetQuestLackingResourceRsp["lackedNpcMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field GetQuestLackingResourceRsp.lacked_npc_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GetQuestLackingResourceRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> lacked_place_map = 2; */
        for (let k of Object.keys(message.lackedPlaceMap))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.lackedPlaceMap[k as any]).join();
        /* map<uint32, uint32> lacked_npc_map = 7; */
        for (let k of Object.keys(message.lackedNpcMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.lackedNpcMap[k as any]).join();
        /* repeated uint32 lacked_place_list = 11; */
        if (message.lackedPlaceList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lackedPlaceList.length; i++)
                writer.uint32(message.lackedPlaceList[i]);
            writer.join();
        }
        /* uint32 quest_id = 3; */
        if (message.questId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.questId);
        /* int32 retcode = 6; */
        if (message.retcode !== 0)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* repeated uint32 lacked_npc_list = 14; */
        if (message.lackedNpcList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lackedNpcList.length; i++)
                writer.uint32(message.lackedNpcList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetQuestLackingResourceRsp
 */
export const GetQuestLackingResourceRsp = new GetQuestLackingResourceRsp$Type();
