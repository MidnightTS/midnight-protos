/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ForgeQueueData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ForgeQueueData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        finish_count?: number;
        total_finish_timestamp?: number;
        avatar_id?: number;
        queue_id?: number;
        unfinish_count?: number;
        next_finish_timestamp?: number;
        forge_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("finish_count" in data && data.finish_count != undefined) {
                this.finish_count = data.finish_count;
            }
            if ("total_finish_timestamp" in data && data.total_finish_timestamp != undefined) {
                this.total_finish_timestamp = data.total_finish_timestamp;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("queue_id" in data && data.queue_id != undefined) {
                this.queue_id = data.queue_id;
            }
            if ("unfinish_count" in data && data.unfinish_count != undefined) {
                this.unfinish_count = data.unfinish_count;
            }
            if ("next_finish_timestamp" in data && data.next_finish_timestamp != undefined) {
                this.next_finish_timestamp = data.next_finish_timestamp;
            }
            if ("forge_id" in data && data.forge_id != undefined) {
                this.forge_id = data.forge_id;
            }
        }
    }
    get finish_count() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set finish_count(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get total_finish_timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set total_finish_timestamp(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get queue_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set queue_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get unfinish_count() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set unfinish_count(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get next_finish_timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set next_finish_timestamp(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get forge_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set forge_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        finish_count?: number;
        total_finish_timestamp?: number;
        avatar_id?: number;
        queue_id?: number;
        unfinish_count?: number;
        next_finish_timestamp?: number;
        forge_id?: number;
    }): ForgeQueueData {
        const message = new ForgeQueueData({});
        if (data.finish_count != null) {
            message.finish_count = data.finish_count;
        }
        if (data.total_finish_timestamp != null) {
            message.total_finish_timestamp = data.total_finish_timestamp;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.queue_id != null) {
            message.queue_id = data.queue_id;
        }
        if (data.unfinish_count != null) {
            message.unfinish_count = data.unfinish_count;
        }
        if (data.next_finish_timestamp != null) {
            message.next_finish_timestamp = data.next_finish_timestamp;
        }
        if (data.forge_id != null) {
            message.forge_id = data.forge_id;
        }
        return message;
    }
    toObject() {
        const data: {
            finish_count?: number;
            total_finish_timestamp?: number;
            avatar_id?: number;
            queue_id?: number;
            unfinish_count?: number;
            next_finish_timestamp?: number;
            forge_id?: number;
        } = {};
        if (this.finish_count != null) {
            data.finish_count = this.finish_count;
        }
        if (this.total_finish_timestamp != null) {
            data.total_finish_timestamp = this.total_finish_timestamp;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.queue_id != null) {
            data.queue_id = this.queue_id;
        }
        if (this.unfinish_count != null) {
            data.unfinish_count = this.unfinish_count;
        }
        if (this.next_finish_timestamp != null) {
            data.next_finish_timestamp = this.next_finish_timestamp;
        }
        if (this.forge_id != null) {
            data.forge_id = this.forge_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.finish_count != 0)
            writer.writeUint32(13, this.finish_count);
        if (this.total_finish_timestamp != 0)
            writer.writeUint32(14, this.total_finish_timestamp);
        if (this.avatar_id != 0)
            writer.writeUint32(7, this.avatar_id);
        if (this.queue_id != 0)
            writer.writeUint32(1, this.queue_id);
        if (this.unfinish_count != 0)
            writer.writeUint32(10, this.unfinish_count);
        if (this.next_finish_timestamp != 0)
            writer.writeUint32(11, this.next_finish_timestamp);
        if (this.forge_id != 0)
            writer.writeUint32(15, this.forge_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgeQueueData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgeQueueData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.finish_count = reader.readUint32();
                    break;
                case 14:
                    message.total_finish_timestamp = reader.readUint32();
                    break;
                case 7:
                    message.avatar_id = reader.readUint32();
                    break;
                case 1:
                    message.queue_id = reader.readUint32();
                    break;
                case 10:
                    message.unfinish_count = reader.readUint32();
                    break;
                case 11:
                    message.next_finish_timestamp = reader.readUint32();
                    break;
                case 15:
                    message.forge_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ForgeQueueData {
        return ForgeQueueData.deserialize(bytes);
    }
}
