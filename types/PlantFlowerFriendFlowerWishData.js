"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlantFlowerFriendFlowerWishData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlantFlowerFriendFlowerWishData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlantFlowerFriendFlowerWishData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ProfilePicture");
const pb_1 = require("google-protobuf");
class PlantFlowerFriendFlowerWishData extends pb_1.Message {
    constructor(data) {
        super();
        _PlantFlowerFriendFlowerWishData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PlantFlowerFriendFlowerWishData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("flower_num_map" in data && data.flower_num_map != undefined) {
                this.flower_num_map = data.flower_num_map;
            }
        }
        if (!this.flower_num_map)
            this.flower_num_map = new Map();
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProfilePicture, 3);
    }
    set profile_picture(value) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 14, "");
    }
    set nickname(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get flower_num_map() {
        return pb_1.Message.getField(this, 12);
    }
    set flower_num_map(value) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data) {
        const message = new PlantFlowerFriendFlowerWishData({});
        if (data.profile_picture != null) {
            message.profile_picture = dependency_1.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (typeof data.flower_num_map == "object") {
            message.flower_num_map = new Map(Object.entries(data.flower_num_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.flower_num_map.size > 0) {
            data.flower_num_map = (Object.fromEntries)(this.flower_num_map);
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile_picture)
            writer.writeMessage(3, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.uid != 0)
            writer.writeUint32(5, this.uid);
        if (this.nickname.length)
            writer.writeString(14, this.nickname);
        for (const [key, value] of this.flower_num_map) {
            writer.writeMessage(12, this.flower_num_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlantFlowerFriendFlowerWishData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_1.ProfilePicture.deserialize(reader));
                    break;
                case 5:
                    message.uid = reader.readUint32();
                    break;
                case 14:
                    message.nickname = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.flower_num_map, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlantFlowerFriendFlowerWishData.deserialize(bytes);
    }
}
exports.PlantFlowerFriendFlowerWishData = PlantFlowerFriendFlowerWishData;
_PlantFlowerFriendFlowerWishData_one_of_decls = new WeakMap();
