/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TakeRegionSearchRewardRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class TakeRegionSearchRewardRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        search_id?: number;
        id?: number;
        retcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("search_id" in data && data.search_id != undefined) {
                this.search_id = data.search_id;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
        }
    }
    get search_id() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set search_id(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        search_id?: number;
        id?: number;
        retcode?: number;
    }): TakeRegionSearchRewardRsp {
        const message = new TakeRegionSearchRewardRsp({});
        if (data.search_id != null) {
            message.search_id = data.search_id;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        return message;
    }
    toObject() {
        const data: {
            search_id?: number;
            id?: number;
            retcode?: number;
        } = {};
        if (this.search_id != null) {
            data.search_id = this.search_id;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.search_id != 0)
            writer.writeUint32(14, this.search_id);
        if (this.id != 0)
            writer.writeUint32(1, this.id);
        if (this.retcode != 0)
            writer.writeInt32(5, this.retcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TakeRegionSearchRewardRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TakeRegionSearchRewardRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.search_id = reader.readUint32();
                    break;
                case 1:
                    message.id = reader.readUint32();
                    break;
                case 5:
                    message.retcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TakeRegionSearchRewardRsp {
        return TakeRegionSearchRewardRsp.deserialize(bytes);
    }
}
