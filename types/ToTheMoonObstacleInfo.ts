// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "ToTheMoonObstacleInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MathQuaternion } from "./MathQuaternion";
import { Vector } from "./Vector";
/**
 * @generated from protobuf message ToTheMoonObstacleInfo
 */
export interface ToTheMoonObstacleInfo {
    /**
     * @generated from protobuf field: int32 handle_id = 1;
     */
    handleId: number;
    /**
     * @generated from protobuf field: ToTheMoonObstacleInfo.ShapeType type = 8;
     */
    type: ToTheMoonObstacleInfo_ShapeType;
    /**
     * @generated from protobuf field: Vector half_extents = 7;
     */
    halfExtents?: Vector;
    /**
     * @generated from protobuf field: Vector center = 11;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: MathQuaternion rotation = 12;
     */
    rotation?: MathQuaternion;
}
/**
 * @generated from protobuf enum ToTheMoonObstacleInfo.ShapeType
 */
export enum ToTheMoonObstacleInfo_ShapeType {
    /**
     * @generated from protobuf enum value: SHAPE_TYPE_OBSTACLE_SHAPE_CAPSULE = 0;
     */
    OBSTACLE_SHAPE_CAPSULE = 0,
    /**
     * @generated from protobuf enum value: SHAPE_TYPE_OBSTACLE_SHAPE_BOX = 1;
     */
    OBSTACLE_SHAPE_BOX = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonObstacleInfo$Type extends MessageType<ToTheMoonObstacleInfo> {
    constructor() {
        super("ToTheMoonObstacleInfo", [
            { no: 1, name: "handle_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "type", kind: "enum", T: () => ["ToTheMoonObstacleInfo.ShapeType", ToTheMoonObstacleInfo_ShapeType, "SHAPE_TYPE_"] },
            { no: 7, name: "half_extents", kind: "message", T: () => Vector },
            { no: 11, name: "center", kind: "message", T: () => Vector },
            { no: 12, name: "rotation", kind: "message", T: () => MathQuaternion }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonObstacleInfo>): ToTheMoonObstacleInfo {
        const message = { handleId: 0, type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonObstacleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonObstacleInfo): ToTheMoonObstacleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 handle_id */ 1:
                    message.handleId = reader.int32();
                    break;
                case /* ToTheMoonObstacleInfo.ShapeType type */ 8:
                    message.type = reader.int32();
                    break;
                case /* Vector half_extents */ 7:
                    message.halfExtents = Vector.internalBinaryRead(reader, reader.uint32(), options, message.halfExtents);
                    break;
                case /* Vector center */ 11:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* MathQuaternion rotation */ 12:
                    message.rotation = MathQuaternion.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonObstacleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 handle_id = 1; */
        if (message.handleId !== 0)
            writer.tag(1, WireType.Varint).int32(message.handleId);
        /* ToTheMoonObstacleInfo.ShapeType type = 8; */
        if (message.type !== 0)
            writer.tag(8, WireType.Varint).int32(message.type);
        /* Vector half_extents = 7; */
        if (message.halfExtents)
            Vector.internalBinaryWrite(message.halfExtents, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* Vector center = 11; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* MathQuaternion rotation = 12; */
        if (message.rotation)
            MathQuaternion.internalBinaryWrite(message.rotation, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ToTheMoonObstacleInfo
 */
export const ToTheMoonObstacleInfo = new ToTheMoonObstacleInfo$Type();
