/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WeaponAwakenReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class WeaponAwakenReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        item_guid?: number;
        affix_level_map?: Map<number, number>;
        target_weapon_guid?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("item_guid" in data && data.item_guid != undefined) {
                this.item_guid = data.item_guid;
            }
            if ("affix_level_map" in data && data.affix_level_map != undefined) {
                this.affix_level_map = data.affix_level_map;
            }
            if ("target_weapon_guid" in data && data.target_weapon_guid != undefined) {
                this.target_weapon_guid = data.target_weapon_guid;
            }
        }
        if (!this.affix_level_map)
            this.affix_level_map = new Map();
    }
    get item_guid() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set item_guid(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get affix_level_map() {
        return pb_1.Message.getField(this, 7) as any as Map<number, number>;
    }
    set affix_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    get target_weapon_guid() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set target_weapon_guid(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        item_guid?: number;
        affix_level_map?: {
            [key: number]: number;
        };
        target_weapon_guid?: number;
    }): WeaponAwakenReq {
        const message = new WeaponAwakenReq({});
        if (data.item_guid != null) {
            message.item_guid = data.item_guid;
        }
        if (typeof data.affix_level_map == "object") {
            message.affix_level_map = new Map(Object.entries(data.affix_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.target_weapon_guid != null) {
            message.target_weapon_guid = data.target_weapon_guid;
        }
        return message;
    }
    toObject() {
        const data: {
            item_guid?: number;
            affix_level_map?: {
                [key: number]: number;
            };
            target_weapon_guid?: number;
        } = {};
        if (this.item_guid != null) {
            data.item_guid = this.item_guid;
        }
        if (this.affix_level_map.size > 0) {
            data.affix_level_map = (Object.fromEntries)(this.affix_level_map);
        }
        if (this.target_weapon_guid != null) {
            data.target_weapon_guid = this.target_weapon_guid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.item_guid != 0)
            writer.writeUint64(10, this.item_guid);
        for (const [key, value] of this.affix_level_map) {
            writer.writeMessage(7, this.affix_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.target_weapon_guid != 0)
            writer.writeUint64(9, this.target_weapon_guid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WeaponAwakenReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WeaponAwakenReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.item_guid = reader.readUint64();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.affix_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 9:
                    message.target_weapon_guid = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WeaponAwakenReq {
        return WeaponAwakenReq.deserialize(bytes);
    }
}
