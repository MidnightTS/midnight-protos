/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SeaLampActivityInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./SeaLampSectionInfo";
import * as pb_1 from "google-protobuf";
export class SeaLampActivityInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_mechanicus_open?: boolean;
        day_index?: number;
        section_info_list?: dependency_1.SeaLampSectionInfo[];
        popularity?: number;
        sea_lamp_coin?: number;
        first_day_start_time?: number;
        mechanicus_id?: number;
        is_mechanicus_feature_close?: boolean;
        is_content_closed?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_mechanicus_open" in data && data.is_mechanicus_open != undefined) {
                this.is_mechanicus_open = data.is_mechanicus_open;
            }
            if ("day_index" in data && data.day_index != undefined) {
                this.day_index = data.day_index;
            }
            if ("section_info_list" in data && data.section_info_list != undefined) {
                this.section_info_list = data.section_info_list;
            }
            if ("popularity" in data && data.popularity != undefined) {
                this.popularity = data.popularity;
            }
            if ("sea_lamp_coin" in data && data.sea_lamp_coin != undefined) {
                this.sea_lamp_coin = data.sea_lamp_coin;
            }
            if ("first_day_start_time" in data && data.first_day_start_time != undefined) {
                this.first_day_start_time = data.first_day_start_time;
            }
            if ("mechanicus_id" in data && data.mechanicus_id != undefined) {
                this.mechanicus_id = data.mechanicus_id;
            }
            if ("is_mechanicus_feature_close" in data && data.is_mechanicus_feature_close != undefined) {
                this.is_mechanicus_feature_close = data.is_mechanicus_feature_close;
            }
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
        }
    }
    get is_mechanicus_open() {
        return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
    }
    set is_mechanicus_open(value: boolean) {
        pb_1.Message.setField(this, 14, value);
    }
    get day_index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set day_index(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get section_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SeaLampSectionInfo, 6) as dependency_1.SeaLampSectionInfo[];
    }
    set section_info_list(value: dependency_1.SeaLampSectionInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get popularity() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set popularity(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get sea_lamp_coin() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set sea_lamp_coin(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get first_day_start_time() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set first_day_start_time(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get mechanicus_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set mechanicus_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get is_mechanicus_feature_close() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set is_mechanicus_feature_close(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_content_closed(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        is_mechanicus_open?: boolean;
        day_index?: number;
        section_info_list?: ReturnType<typeof dependency_1.SeaLampSectionInfo.prototype.toObject>[];
        popularity?: number;
        sea_lamp_coin?: number;
        first_day_start_time?: number;
        mechanicus_id?: number;
        is_mechanicus_feature_close?: boolean;
        is_content_closed?: boolean;
    }): SeaLampActivityInfo {
        const message = new SeaLampActivityInfo({});
        if (data.is_mechanicus_open != null) {
            message.is_mechanicus_open = data.is_mechanicus_open;
        }
        if (data.day_index != null) {
            message.day_index = data.day_index;
        }
        if (data.section_info_list != null) {
            message.section_info_list = data.section_info_list.map(item => dependency_1.SeaLampSectionInfo.fromObject(item));
        }
        if (data.popularity != null) {
            message.popularity = data.popularity;
        }
        if (data.sea_lamp_coin != null) {
            message.sea_lamp_coin = data.sea_lamp_coin;
        }
        if (data.first_day_start_time != null) {
            message.first_day_start_time = data.first_day_start_time;
        }
        if (data.mechanicus_id != null) {
            message.mechanicus_id = data.mechanicus_id;
        }
        if (data.is_mechanicus_feature_close != null) {
            message.is_mechanicus_feature_close = data.is_mechanicus_feature_close;
        }
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        return message;
    }
    toObject() {
        const data: {
            is_mechanicus_open?: boolean;
            day_index?: number;
            section_info_list?: ReturnType<typeof dependency_1.SeaLampSectionInfo.prototype.toObject>[];
            popularity?: number;
            sea_lamp_coin?: number;
            first_day_start_time?: number;
            mechanicus_id?: number;
            is_mechanicus_feature_close?: boolean;
            is_content_closed?: boolean;
        } = {};
        if (this.is_mechanicus_open != null) {
            data.is_mechanicus_open = this.is_mechanicus_open;
        }
        if (this.day_index != null) {
            data.day_index = this.day_index;
        }
        if (this.section_info_list != null) {
            data.section_info_list = this.section_info_list.map((item: dependency_1.SeaLampSectionInfo) => item.toObject());
        }
        if (this.popularity != null) {
            data.popularity = this.popularity;
        }
        if (this.sea_lamp_coin != null) {
            data.sea_lamp_coin = this.sea_lamp_coin;
        }
        if (this.first_day_start_time != null) {
            data.first_day_start_time = this.first_day_start_time;
        }
        if (this.mechanicus_id != null) {
            data.mechanicus_id = this.mechanicus_id;
        }
        if (this.is_mechanicus_feature_close != null) {
            data.is_mechanicus_feature_close = this.is_mechanicus_feature_close;
        }
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_mechanicus_open != false)
            writer.writeBool(14, this.is_mechanicus_open);
        if (this.day_index != 0)
            writer.writeUint32(1, this.day_index);
        if (this.section_info_list.length)
            writer.writeRepeatedMessage(6, this.section_info_list, (item: dependency_1.SeaLampSectionInfo) => item.serialize(writer));
        if (this.popularity != 0)
            writer.writeUint32(10, this.popularity);
        if (this.sea_lamp_coin != 0)
            writer.writeUint32(15, this.sea_lamp_coin);
        if (this.first_day_start_time != 0)
            writer.writeUint32(11, this.first_day_start_time);
        if (this.mechanicus_id != 0)
            writer.writeUint32(9, this.mechanicus_id);
        if (this.is_mechanicus_feature_close != false)
            writer.writeBool(12, this.is_mechanicus_feature_close);
        if (this.is_content_closed != false)
            writer.writeBool(5, this.is_content_closed);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeaLampActivityInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeaLampActivityInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    message.is_mechanicus_open = reader.readBool();
                    break;
                case 1:
                    message.day_index = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.section_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.SeaLampSectionInfo.deserialize(reader), dependency_1.SeaLampSectionInfo));
                    break;
                case 10:
                    message.popularity = reader.readUint32();
                    break;
                case 15:
                    message.sea_lamp_coin = reader.readUint32();
                    break;
                case 11:
                    message.first_day_start_time = reader.readUint32();
                    break;
                case 9:
                    message.mechanicus_id = reader.readUint32();
                    break;
                case 12:
                    message.is_mechanicus_feature_close = reader.readBool();
                    break;
                case 5:
                    message.is_content_closed = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SeaLampActivityInfo {
        return SeaLampActivityInfo.deserialize(bytes);
    }
}
