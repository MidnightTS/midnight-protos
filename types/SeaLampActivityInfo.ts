// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "SeaLampActivityInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SeaLampSectionInfo } from "./SeaLampSectionInfo";
/**
 * @generated from protobuf message SeaLampActivityInfo
 */
export interface SeaLampActivityInfo {
    /**
     * @generated from protobuf field: uint32 day_index = 14;
     */
    dayIndex: number;
    /**
     * @generated from protobuf field: bool is_content_closed = 15;
     */
    isContentClosed: boolean;
    /**
     * @generated from protobuf field: repeated SeaLampSectionInfo section_info_list = 1;
     */
    sectionInfoList: SeaLampSectionInfo[];
    /**
     * @generated from protobuf field: uint32 mechanicus_id = 7;
     */
    mechanicusId: number;
    /**
     * @generated from protobuf field: uint32 first_day_start_time = 6;
     */
    firstDayStartTime: number;
    /**
     * @generated from protobuf field: uint32 sea_lamp_coin = 11;
     */
    seaLampCoin: number;
    /**
     * @generated from protobuf field: uint32 popularity = 2;
     */
    popularity: number;
    /**
     * @generated from protobuf field: bool Unk3300_JMPCJGJHPIH = 13 [json_name = "Unk3300JMPCJGJHPIH"];
     */
    unk3300JMPCJGJHPIH: boolean;
    /**
     * @generated from protobuf field: bool Unk3300_BAJIGNGJALG = 9 [json_name = "Unk3300BAJIGNGJALG"];
     */
    unk3300BAJIGNGJALG: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampActivityInfo$Type extends MessageType<SeaLampActivityInfo> {
    constructor() {
        super("SeaLampActivityInfo", [
            { no: 14, name: "day_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "section_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SeaLampSectionInfo },
            { no: 7, name: "mechanicus_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "first_day_start_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "sea_lamp_coin", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "popularity", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "Unk3300_JMPCJGJHPIH", kind: "scalar", jsonName: "Unk3300JMPCJGJHPIH", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "Unk3300_BAJIGNGJALG", kind: "scalar", jsonName: "Unk3300BAJIGNGJALG", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampActivityInfo>): SeaLampActivityInfo {
        const message = { dayIndex: 0, isContentClosed: false, sectionInfoList: [], mechanicusId: 0, firstDayStartTime: 0, seaLampCoin: 0, popularity: 0, unk3300JMPCJGJHPIH: false, unk3300BAJIGNGJALG: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampActivityInfo): SeaLampActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 day_index */ 14:
                    message.dayIndex = reader.uint32();
                    break;
                case /* bool is_content_closed */ 15:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated SeaLampSectionInfo section_info_list */ 1:
                    message.sectionInfoList.push(SeaLampSectionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 mechanicus_id */ 7:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* uint32 first_day_start_time */ 6:
                    message.firstDayStartTime = reader.uint32();
                    break;
                case /* uint32 sea_lamp_coin */ 11:
                    message.seaLampCoin = reader.uint32();
                    break;
                case /* uint32 popularity */ 2:
                    message.popularity = reader.uint32();
                    break;
                case /* bool Unk3300_JMPCJGJHPIH = 13 [json_name = "Unk3300JMPCJGJHPIH"];*/ 13:
                    message.unk3300JMPCJGJHPIH = reader.bool();
                    break;
                case /* bool Unk3300_BAJIGNGJALG = 9 [json_name = "Unk3300BAJIGNGJALG"];*/ 9:
                    message.unk3300BAJIGNGJALG = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 day_index = 14; */
        if (message.dayIndex !== 0)
            writer.tag(14, WireType.Varint).uint32(message.dayIndex);
        /* bool is_content_closed = 15; */
        if (message.isContentClosed !== false)
            writer.tag(15, WireType.Varint).bool(message.isContentClosed);
        /* repeated SeaLampSectionInfo section_info_list = 1; */
        for (let i = 0; i < message.sectionInfoList.length; i++)
            SeaLampSectionInfo.internalBinaryWrite(message.sectionInfoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 mechanicus_id = 7; */
        if (message.mechanicusId !== 0)
            writer.tag(7, WireType.Varint).uint32(message.mechanicusId);
        /* uint32 first_day_start_time = 6; */
        if (message.firstDayStartTime !== 0)
            writer.tag(6, WireType.Varint).uint32(message.firstDayStartTime);
        /* uint32 sea_lamp_coin = 11; */
        if (message.seaLampCoin !== 0)
            writer.tag(11, WireType.Varint).uint32(message.seaLampCoin);
        /* uint32 popularity = 2; */
        if (message.popularity !== 0)
            writer.tag(2, WireType.Varint).uint32(message.popularity);
        /* bool Unk3300_JMPCJGJHPIH = 13 [json_name = "Unk3300JMPCJGJHPIH"]; */
        if (message.unk3300JMPCJGJHPIH !== false)
            writer.tag(13, WireType.Varint).bool(message.unk3300JMPCJGJHPIH);
        /* bool Unk3300_BAJIGNGJALG = 9 [json_name = "Unk3300BAJIGNGJALG"]; */
        if (message.unk3300BAJIGNGJALG !== false)
            writer.tag(9, WireType.Varint).bool(message.unk3300BAJIGNGJALG);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SeaLampActivityInfo
 */
export const SeaLampActivityInfo = new SeaLampActivityInfo$Type();
