// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_activity.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ExhibitionDisplayInfo } from "./define";
import { IslandPartyGallerySettleInfo } from "./cmd_gallery";
import { GalleryStopReason } from "./cmd_gallery";
import { SummerTimeV2BoatGallerySettleInfo } from "./cmd_gallery";
import { ActivityDungeonAvatar } from "./define";
import { LuminanceStoneChallengeGallerySettleInfo } from "./cmd_gallery";
import { IrodoriMasterGallerySettleInfo } from "./cmd_gallery";
import { IrodoriChessEntranceDetailInfo } from "./cmd_multistage_play";
import { SalvageEscortGallerySettleInfo } from "./cmd_gallery";
import { SalvagePreventGallerySettleInfo } from "./cmd_gallery";
import { ClientInputType } from "./define";
import { UgcMusicBriefInfo } from "./cmd_ugc";
import { CustomGadgetTreeInfo } from "./define";
import { LunaRiteHintStatusType } from "./define";
import { LunaRiteHintPointType } from "./define";
import { FishingGallerySettleInfo } from "./cmd_gallery";
import { BounceConjuringGallerySettleInfo } from "./cmd_gallery";
import { BuoyantCombatGallerySettleInfo } from "./cmd_gallery";
import { FallSettleInfo } from "./cmd_gallery";
import { BalloonSettleInfo } from "./cmd_gallery";
import { ExpeditionState } from "./define";
import { AsterLittleStageState } from "./define";
import { ProfilePicture } from "./define";
import { SalesmanStatusType } from "./define";
import { ItemParam } from "./define";
import { Vector } from "./define";
import { Uint32Pair } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GetActivityScheduleReq
 */
export interface GetActivityScheduleReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetActivityScheduleReq.CmdId
 */
export enum GetActivityScheduleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2136;
     */
    CMD_ID = 2136,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityScheduleInfo
 */
export interface ActivityScheduleInfo {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 2;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 14;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 1;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 10;
     */
    beginTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetActivityScheduleRsp
 */
export interface GetActivityScheduleRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 9;
     */
    activityScheduleList: ActivityScheduleInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 remain_fly_sea_lamp_num = 4;
     */
    remainFlySeaLampNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetActivityScheduleRsp.CmdId
 */
export enum GetActivityScheduleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2107;
     */
    CMD_ID = 2107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetActivityInfoReq
 */
export interface GetActivityInfoReq {
    /**
     * @generated from protobuf field: repeated uint32 activity_id_list = 4;
     */
    activityIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetActivityInfoReq.CmdId
 */
export enum GetActivityInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2095;
     */
    CMD_ID = 2095,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityInfo
 */
export interface ActivityInfo {
    /**
     * @generated from protobuf field: optional bool is_finished = 6;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 activity_type = 4;
     */
    activityType?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 8;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: repeated uint32 taken_reward_list = 329;
     */
    takenRewardList: number[];
    /**
     * @generated from protobuf field: optional bool is_hidden = 919;
     */
    isHidden?: boolean;
    /**
     * @generated from protobuf field: optional bool is_quick_open = 1449;
     */
    isQuickOpen?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 meet_cond_list = 10;
     */
    meetCondList: number[];
    /**
     * @generated from protobuf field: map<uint32, uint32> activity_coin_map = 682;
     */
    activityCoinMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional bool is_banner_cleared = 102;
     */
    isBannerCleared?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_score = 1906;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional uint32 first_day_start_time = 592;
     */
    firstDayStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 12;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional bool is_play_open_anim = 13;
     */
    isPlayOpenAnim?: boolean;
    /**
     * @generated from protobuf field: optional uint32 end_time = 5;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 score_limit = 1958;
     */
    scoreLimit?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> wish_gift_num_map = 1399;
     */
    wishGiftNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 selected_avatar_reward_id = 1290;
     */
    selectedAvatarRewardId?: number;
    /**
     * @generated from protobuf field: optional bool is_common_content_closed = 1963;
     */
    isCommonContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 expire_cond_list = 3;
     */
    expireCondList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 864;
     */
    activityPushTipsDataList: ActivityPushTipsData[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityWatcherInfo watcher_info_list = 2;
     */
    watcherInfoList: ActivityWatcherInfo[];
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 15;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional bool is_starting = 9;
     */
    isStarting?: boolean;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "samLampInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SeaLampActivityDetailInfo sam_lamp_info = 7;
         */
        samLampInfo: SeaLampActivityDetailInfo;
    } | {
        oneofKind: "crucibleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.CrucibleActivityDetailInfo crucible_info = 14;
         */
        crucibleInfo: CrucibleActivityDetailInfo;
    } | {
        oneofKind: "salesmanInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SalesmanActivityDetailInfo salesman_info = 11;
         */
        salesmanInfo: SalesmanActivityDetailInfo;
    } | {
        oneofKind: "trialAvatarInfo";
        /**
         * @generated from protobuf field: com.midnights.game.TrialAvatarActivityDetailInfo trial_avatar_info = 1;
         */
        trialAvatarInfo: TrialAvatarActivityDetailInfo;
    } | {
        oneofKind: "deliveryInfo";
        /**
         * @generated from protobuf field: com.midnights.game.DeliveryActivityDetailInfo delivery_info = 1092;
         */
        deliveryInfo: DeliveryActivityDetailInfo;
    } | {
        oneofKind: "asterInfo";
        /**
         * @generated from protobuf field: com.midnights.game.AsterActivityDetailInfo aster_info = 557;
         */
        asterInfo: AsterActivityDetailInfo;
    } | {
        oneofKind: "flightInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FlightActivityDetailInfo flight_info = 1365;
         */
        flightInfo: FlightActivityDetailInfo;
    } | {
        oneofKind: "dragonSpineInfo";
        /**
         * @generated from protobuf field: com.midnights.game.DragonSpineActivityDetailInfo dragon_spine_info = 1727;
         */
        dragonSpineInfo: DragonSpineActivityDetailInfo;
    } | {
        oneofKind: "effigyInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EffigyActivityDetailInfo effigy_info = 391;
         */
        effigyInfo: EffigyActivityDetailInfo;
    } | {
        oneofKind: "treasureMapInfo";
        /**
         * @generated from protobuf field: com.midnights.game.TreasureMapActivityDetailInfo treasure_map_info = 1114;
         */
        treasureMapInfo: TreasureMapActivityDetailInfo;
    } | {
        oneofKind: "blessingInfo";
        /**
         * @generated from protobuf field: com.midnights.game.BlessingActivityDetailInfo blessing_info = 1869;
         */
        blessingInfo: BlessingActivityDetailInfo;
    } | {
        oneofKind: "seaLampInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SeaLampActivityInfo sea_lamp_info = 494;
         */
        seaLampInfo: SeaLampActivityInfo;
    } | {
        oneofKind: "expeditionInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ExpeditionActivityDetailInfo expedition_info = 202;
         */
        expeditionInfo: ExpeditionActivityDetailInfo;
    } | {
        oneofKind: "arenaChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ArenaChallengeActivityDetailInfo arena_challenge_info = 859;
         */
        arenaChallengeInfo: ArenaChallengeActivityDetailInfo;
    } | {
        oneofKind: "fleurFairInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FleurFairActivityDetailInfo fleur_fair_info = 857;
         */
        fleurFairInfo: FleurFairActivityDetailInfo;
    } | {
        oneofKind: "waterSpiritInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WaterSpiritActivityDetailInfo water_spirit_info = 1675;
         */
        waterSpiritInfo: WaterSpiritActivityDetailInfo;
    } | {
        oneofKind: "challnelerSlabInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ChannelerSlabActivityDetailInfo challneler_slab_info = 1015;
         */
        challnelerSlabInfo: ChannelerSlabActivityDetailInfo;
    } | {
        oneofKind: "mistTrialActivityInfo";
        /**
         * @generated from protobuf field: com.midnights.game.MistTrialActivityDetailInfo mist_trial_activity_info = 156;
         */
        mistTrialActivityInfo: MistTrialActivityDetailInfo;
    } | {
        oneofKind: "hideAndSeekInfo";
        /**
         * @generated from protobuf field: com.midnights.game.HideAndSeekActivityDetailInfo hide_and_seek_info = 427;
         */
        hideAndSeekInfo: HideAndSeekActivityDetailInfo;
    } | {
        oneofKind: "findHilichurlInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FindHilichurlDetailInfo find_hilichurl_info = 1411;
         */
        findHilichurlInfo: FindHilichurlDetailInfo;
    } | {
        oneofKind: "summerTimeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SummerTimeDetailInfo summer_time_info = 1372;
         */
        summerTimeInfo: SummerTimeDetailInfo;
    } | {
        oneofKind: "buoyantCombatInfo";
        /**
         * @generated from protobuf field: com.midnights.game.BuoyantCombatDetailInfo buoyant_combat_info = 1842;
         */
        buoyantCombatInfo: BuoyantCombatDetailInfo;
    } | {
        oneofKind: "echoShellInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EchoShellDetailInfo echo_shell_info = 1113;
         */
        echoShellInfo: EchoShellDetailInfo;
    } | {
        oneofKind: "bounceConjuringInfo";
        /**
         * @generated from protobuf field: com.midnights.game.BounceConjuringActivityDetailInfo bounce_conjuring_info = 767;
         */
        bounceConjuringInfo: BounceConjuringActivityDetailInfo;
    } | {
        oneofKind: "blitzRushInfo";
        /**
         * @generated from protobuf field: com.midnights.game.BlitzRushActivityDetailInfo blitz_rush_info = 794;
         */
        blitzRushInfo: BlitzRushActivityDetailInfo;
    } | {
        oneofKind: "chessInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ChessActivityDetailInfo chess_info = 927;
         */
        chessInfo: ChessActivityDetailInfo;
    } | {
        oneofKind: "sumoInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SumoActivityDetailInfo sumo_info = 1261;
         */
        sumoInfo: SumoActivityDetailInfo;
    } | {
        oneofKind: "moonfinTrialInfo";
        /**
         * @generated from protobuf field: com.midnights.game.MoonfinTrialActivityDetailInfo moonfin_trial_info = 1588;
         */
        moonfinTrialInfo: MoonfinTrialActivityDetailInfo;
    } | {
        oneofKind: "lunaRiteInfo";
        /**
         * @generated from protobuf field: com.midnights.game.LunaRiteDetailInfo luna_rite_info = 814;
         */
        lunaRiteInfo: LunaRiteDetailInfo;
    } | {
        oneofKind: "plantFlowerInfo";
        /**
         * @generated from protobuf field: com.midnights.game.PlantFlowerActivityDetailInfo plant_flower_info = 54;
         */
        plantFlowerInfo: PlantFlowerActivityDetailInfo;
    } | {
        oneofKind: "musicGameInfo";
        /**
         * @generated from protobuf field: com.midnights.game.MusicGameActivityDetailInfo music_game_info = 460;
         */
        musicGameInfo: MusicGameActivityDetailInfo;
    } | {
        oneofKind: "roguelikeDungoenInfo";
        /**
         * @generated from protobuf field: com.midnights.game.RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 219;
         */
        roguelikeDungoenInfo: RoguelikeDungeonActivityDetailInfo;
    } | {
        oneofKind: "digInfo";
        /**
         * @generated from protobuf field: com.midnights.game.DigActivityDetailInfo dig_info = 403;
         */
        digInfo: DigActivityDetailInfo;
    } | {
        oneofKind: "hachiInfo";
        /**
         * @generated from protobuf field: com.midnights.game.HachiActivityDetailInfo hachi_info = 491;
         */
        hachiInfo: HachiActivityDetailInfo;
    } | {
        oneofKind: "winterCampInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WinterCampActivityDetailInfo winter_camp_info = 1083;
         */
        winterCampInfo: WinterCampActivityDetailInfo;
    } | {
        oneofKind: "potionInfo";
        /**
         * @generated from protobuf field: com.midnights.game.PotionActivityDetailInfo potion_info = 1273;
         */
        potionInfo: PotionActivityDetailInfo;
    } | {
        oneofKind: "tanukiTravelActivityInfo";
        /**
         * @generated from protobuf field: com.midnights.game.TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1796;
         */
        tanukiTravelActivityInfo: TanukiTravelActivityDetailInfo;
    } | {
        oneofKind: "lanternRiteActivityInfo";
        /**
         * @generated from protobuf field: com.midnights.game.LanternRiteActivityDetailInfo lantern_rite_activity_info = 1876;
         */
        lanternRiteActivityInfo: LanternRiteActivityDetailInfo;
    } | {
        oneofKind: "michiaeMatsuriInfo";
        /**
         * @generated from protobuf field: com.midnights.game.MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 194;
         */
        michiaeMatsuriInfo: MichiaeMatsuriActivityDetailInfo;
    } | {
        oneofKind: "bartenderInfo";
        /**
         * @generated from protobuf field: com.midnights.game.BartenderActivityDetailInfo bartender_info = 1725;
         */
        bartenderInfo: BartenderActivityDetailInfo;
    } | {
        oneofKind: "ugcInfo";
        /**
         * @generated from protobuf field: com.midnights.game.UgcActivityDetailInfo ugc_info = 703;
         */
        ugcInfo: UgcActivityDetailInfo;
    } | {
        oneofKind: "crystalLinkInfo";
        /**
         * @generated from protobuf field: com.midnights.game.CrystalLinkActivityDetailInfo crystal_link_info = 1226;
         */
        crystalLinkInfo: CrystalLinkActivityDetailInfo;
    } | {
        oneofKind: "irodoriInfo";
        /**
         * @generated from protobuf field: com.midnights.game.IrodoriActivityDetailInfo irodori_info = 750;
         */
        irodoriInfo: IrodoriActivityDetailInfo;
    } | {
        oneofKind: "photoInfo";
        /**
         * @generated from protobuf field: com.midnights.game.PhotoActivityDetailInfo photo_info = 328;
         */
        photoInfo: PhotoActivityDetailInfo;
    } | {
        oneofKind: "spiceInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SpiceActivityDetailInfo spice_info = 1891;
         */
        spiceInfo: SpiceActivityDetailInfo;
    } | {
        oneofKind: "gachaInfo";
        /**
         * @generated from protobuf field: com.midnights.game.GachaActivityDetailInfo gacha_info = 825;
         */
        gachaInfo: GachaActivityDetailInfo;
    } | {
        oneofKind: "luminanceStoneChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 1308;
         */
        luminanceStoneChallengeInfo: LuminanceStoneChallengeActivityDetailInfo;
    } | {
        oneofKind: "rogueDiaryInfo";
        /**
         * @generated from protobuf field: com.midnights.game.RogueDiaryActivityDetailInfo rogue_diary_info = 812;
         */
        rogueDiaryInfo: RogueDiaryActivityDetailInfo;
    } | {
        oneofKind: "summerTimeV2Info";
        /**
         * @generated from protobuf field: com.midnights.game.SummerTimeV2DetailInfo summer_time_v2_info = 622;
         */
        summerTimeV2Info: SummerTimeV2DetailInfo;
    } | {
        oneofKind: "islandPartyInfo";
        /**
         * @generated from protobuf field: com.midnights.game.IslandPartyDetailInfo island_party_info = 1885;
         */
        islandPartyInfo: IslandPartyDetailInfo;
    } | {
        oneofKind: "gearInfo";
        /**
         * @generated from protobuf field: com.midnights.game.GearActivityDetailInfo gear_info = 722;
         */
        gearInfo: GearActivityDetailInfo;
    } | {
        oneofKind: "gravenInnocenceInfo";
        /**
         * @generated from protobuf field: com.midnights.game.GravenInnocenceDetailInfo graven_innocence_info = 1911;
         */
        gravenInnocenceInfo: GravenInnocenceDetailInfo;
    } | {
        oneofKind: "instableSprayInfo";
        /**
         * @generated from protobuf field: com.midnights.game.InstableSprayDetailInfo instable_spray_info = 1043;
         */
        instableSprayInfo: InstableSprayDetailInfo;
    } | {
        oneofKind: "muqadasPotionInfo";
        /**
         * @generated from protobuf field: com.midnights.game.MuqadasPotionActivityDetailInfo muqadas_potion_info = 1157;
         */
        muqadasPotionInfo: MuqadasPotionActivityDetailInfo;
    } | {
        oneofKind: "treasureSeelieInfo";
        /**
         * @generated from protobuf field: com.midnights.game.TreasureSeelieActivityDetailInfo treasure_seelie_info = 966;
         */
        treasureSeelieInfo: TreasureSeelieActivityDetailInfo;
    } | {
        oneofKind: "rockBoardExploreInfo";
        /**
         * @generated from protobuf field: com.midnights.game.RockBoardExploreDetailInfo rock_board_explore_info = 1078;
         */
        rockBoardExploreInfo: RockBoardExploreDetailInfo;
    } | {
        oneofKind: "vintageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageActivityDetailInfo vintage_info = 445;
         */
        vintageInfo: VintageActivityDetailInfo;
    } | {
        oneofKind: "windFieldInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WindFieldDetailInfo wind_field_info = 352;
         */
        windFieldInfo: WindFieldDetailInfo;
    } | {
        oneofKind: "fungusFighterInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FungusFighterDetailInfo fungus_fighter_info = 490;
         */
        fungusFighterInfo: FungusFighterDetailInfo;
    } | {
        oneofKind: "charAmusementInfo";
        /**
         * @generated from protobuf field: com.midnights.game.CharAmusementDetailInfo char_amusement_info = 1496;
         */
        charAmusementInfo: CharAmusementDetailInfo;
    } | {
        oneofKind: "effigyChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EffigyChallengeV2DetailInfo effigy_challenge_info = 1025;
         */
        effigyChallengeInfo: EffigyChallengeV2DetailInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.GetActivityInfoRsp
 */
export interface GetActivityInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityInfo activity_info_list = 5;
     */
    activityInfoList: ActivityInfo[];
    /**
     * @generated from protobuf field: repeated uint32 activated_sale_id_list = 11;
     */
    activatedSaleIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 10;
     */
    disableTransferPointInteractionList: Uint32Pair[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetActivityInfoRsp.CmdId
 */
export enum GetActivityInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2041;
     */
    CMD_ID = 2041,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityPlayOpenAnimNotify
 */
export interface ActivityPlayOpenAnimNotify {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 8;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityPlayOpenAnimNotify.CmdId
 */
export enum ActivityPlayOpenAnimNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2157;
     */
    CMD_ID = 2157,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityInfoNotify
 */
export interface ActivityInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ActivityInfo activity_info = 9;
     */
    activityInfo?: ActivityInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityInfoNotify.CmdId
 */
export enum ActivityInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2060;
     */
    CMD_ID = 2060,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityScheduleInfoNotify
 */
export interface ActivityScheduleInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 12;
     */
    activityScheduleList: ActivityScheduleInfo[];
    /**
     * @generated from protobuf field: optional uint32 remain_fly_sea_lamp_num = 6;
     */
    remainFlySeaLampNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityScheduleInfoNotify.CmdId
 */
export enum ActivityScheduleInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2073;
     */
    CMD_ID = 2073,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityWatcherInfo
 */
export interface ActivityWatcherInfo {
    /**
     * @generated from protobuf field: optional bool is_taken_reward = 8;
     */
    isTakenReward?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 2;
     */
    curProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 total_progress = 4;
     */
    totalProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 watcher_id = 5;
     */
    watcherId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeWatcherRewardReq
 */
export interface ActivityTakeWatcherRewardReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 watcher_id = 14;
     */
    watcherId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardReq.CmdId
 */
export enum ActivityTakeWatcherRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2038;
     */
    CMD_ID = 2038,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeWatcherRewardRsp
 */
export interface ActivityTakeWatcherRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 14;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 watcher_id = 7;
     */
    watcherId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardRsp.CmdId
 */
export enum ActivityTakeWatcherRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2034;
     */
    CMD_ID = 2034,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityUpdateWatcherNotify
 */
export interface ActivityUpdateWatcherNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ActivityWatcherInfo watcher_info = 2;
     */
    watcherInfo?: ActivityWatcherInfo;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 1;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityUpdateWatcherNotify.CmdId
 */
export enum ActivityUpdateWatcherNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2156;
     */
    CMD_ID = 2156,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivitySelectAvatarCardReq
 */
export interface ActivitySelectAvatarCardReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 15;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 10;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivitySelectAvatarCardReq.CmdId
 */
export enum ActivitySelectAvatarCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2028;
     */
    CMD_ID = 2028,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivitySelectAvatarCardRsp
 */
export interface ActivitySelectAvatarCardRsp {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 9;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivitySelectAvatarCardRsp.CmdId
 */
export enum ActivitySelectAvatarCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2189;
     */
    CMD_ID = 2189,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityCoinInfoNotify
 */
export interface ActivityCoinInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 8;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 10;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> activity_coin_map = 2;
     */
    activityCoinMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityCoinInfoNotify.CmdId
 */
export enum ActivityCoinInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2008;
     */
    CMD_ID = 2008,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampActivityDetailInfo
 */
export interface SeaLampActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 phase_id = 14;
     */
    phaseId?: number;
    /**
     * @generated from protobuf field: repeated uint32 taken_phase_reward_list = 1;
     */
    takenPhaseRewardList: number[];
    /**
     * @generated from protobuf field: repeated uint32 taken_contribution_reward_list = 7;
     */
    takenContributionRewardList: number[];
    /**
     * @generated from protobuf field: optional uint32 progress = 8;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 contribution = 15;
     */
    contribution?: number;
    /**
     * @generated from protobuf field: optional uint32 factor = 13;
     */
    factor?: number;
    /**
     * @generated from protobuf field: optional uint32 days = 4;
     */
    days?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampFlyLampReq
 */
export interface SeaLampFlyLampReq {
    /**
     * @generated from protobuf field: optional uint32 item_id = 9;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional int32 param = 10;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 7;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 item_num = 5;
     */
    itemNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampReq.CmdId
 */
export enum SeaLampFlyLampReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2199;
     */
    CMD_ID = 2199,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampFlyLampRsp
 */
export interface SeaLampFlyLampRsp {
    /**
     * @generated from protobuf field: optional uint32 item_num = 9;
     */
    itemNum?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 15;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampRsp.CmdId
 */
export enum SeaLampFlyLampRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2192;
     */
    CMD_ID = 2192,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampTakeContributionRewardReq
 */
export interface SeaLampTakeContributionRewardReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 10;
     */
    configId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakeContributionRewardReq.CmdId
 */
export enum SeaLampTakeContributionRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2019;
     */
    CMD_ID = 2019,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampTakeContributionRewardRsp
 */
export interface SeaLampTakeContributionRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 config_id = 9;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakeContributionRewardRsp.CmdId
 */
export enum SeaLampTakeContributionRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2177;
     */
    CMD_ID = 2177,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampTakePhaseRewardReq
 */
export interface SeaLampTakePhaseRewardReq {
    /**
     * @generated from protobuf field: optional uint32 phase_id = 12;
     */
    phaseId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 11;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakePhaseRewardReq.CmdId
 */
export enum SeaLampTakePhaseRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2176;
     */
    CMD_ID = 2176,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampTakePhaseRewardRsp
 */
export interface SeaLampTakePhaseRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 phase_id = 2;
     */
    phaseId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakePhaseRewardRsp.CmdId
 */
export enum SeaLampTakePhaseRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2190;
     */
    CMD_ID = 2190,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampContributeItemReq
 */
export interface SeaLampContributeItemReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 8;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 1;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampContributeItemReq.CmdId
 */
export enum SeaLampContributeItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2123;
     */
    CMD_ID = 2123,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampContributeItemRsp
 */
export interface SeaLampContributeItemRsp {
    /**
     * @generated from protobuf field: optional uint32 add_contribution = 7;
     */
    addContribution?: number;
    /**
     * @generated from protobuf field: optional uint32 add_progress = 1;
     */
    addProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 total_contribution = 14;
     */
    totalContribution?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampContributeItemRsp.CmdId
 */
export enum SeaLampContributeItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2139;
     */
    CMD_ID = 2139,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampSectionInfo
 */
export interface SeaLampSectionInfo {
    /**
     * @generated from protobuf field: optional uint32 section_id = 11;
     */
    sectionId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampActivityInfo
 */
export interface SeaLampActivityInfo {
    /**
     * @generated from protobuf field: optional bool is_mechanicus_open = 14;
     */
    isMechanicusOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 day_index = 1;
     */
    dayIndex?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SeaLampSectionInfo section_info_list = 6;
     */
    sectionInfoList: SeaLampSectionInfo[];
    /**
     * @generated from protobuf field: optional uint32 popularity = 10;
     */
    popularity?: number;
    /**
     * @generated from protobuf field: optional uint32 sea_lamp_coin = 15;
     */
    seaLampCoin?: number;
    /**
     * @generated from protobuf field: optional uint32 first_day_start_time = 11;
     */
    firstDayStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 9;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional bool is_mechanicus_feature_close = 12;
     */
    isMechanicusFeatureClose?: boolean;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 5;
     */
    isContentClosed?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampFlyLampNotify
 */
export interface SeaLampFlyLampNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 11;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 item_num = 10;
     */
    itemNum?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 7;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional int32 param = 5;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampNotify.CmdId
 */
export enum SeaLampFlyLampNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2105;
     */
    CMD_ID = 2105,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampCoinNotify
 */
export interface SeaLampCoinNotify {
    /**
     * @generated from protobuf field: optional uint32 sea_lamp_coin = 8;
     */
    seaLampCoin?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampCoinNotify.CmdId
 */
export enum SeaLampCoinNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2114;
     */
    CMD_ID = 2114,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SeaLampPopularityNotify
 */
export interface SeaLampPopularityNotify {
    /**
     * @generated from protobuf field: optional uint32 popularity = 4;
     */
    popularity?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SeaLampPopularityNotify.CmdId
 */
export enum SeaLampPopularityNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2032;
     */
    CMD_ID = 2032,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AnnounceData
 */
export interface AnnounceData {
    /**
     * @generated from protobuf field: optional string count_down_text = 9;
     */
    countDownText?: string;
    /**
     * @generated from protobuf field: optional string center_system_text = 8;
     */
    centerSystemText?: string;
    /**
     * @generated from protobuf field: optional uint32 count_down_frequency = 1;
     */
    countDownFrequency?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 7;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 4;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: optional uint32 center_system_frequency = 11;
     */
    centerSystemFrequency?: number;
    /**
     * @generated from protobuf field: optional string dungeon_confirm_text = 2;
     */
    dungeonConfirmText?: string;
    /**
     * @generated from protobuf field: optional bool is_center_system_last_5_every_minutes = 14;
     */
    isCenterSystemLast5EveryMinutes?: boolean;
    /**
     * @generated from protobuf field: optional uint32 end_time = 10;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LoadActivityTerrainNotify
 */
export interface LoadActivityTerrainNotify {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 3;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LoadActivityTerrainNotify.CmdId
 */
export enum LoadActivityTerrainNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2029;
     */
    CMD_ID = 2029,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerAnnounceNotify
 */
export interface ServerAnnounceNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AnnounceData announce_data_list = 11;
     */
    announceDataList: AnnounceData[];
}
/**
 * @generated from protobuf enum com.midnights.game.ServerAnnounceNotify.CmdId
 */
export enum ServerAnnounceNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2197;
     */
    CMD_ID = 2197,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerAnnounceRevokeNotify
 */
export interface ServerAnnounceRevokeNotify {
    /**
     * @generated from protobuf field: repeated uint32 config_id_list = 15;
     */
    configIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ServerAnnounceRevokeNotify.CmdId
 */
export enum ServerAnnounceRevokeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2092;
     */
    CMD_ID = 2092,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityBannerNotify
 */
export interface ActivityBannerNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 3;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerNotify.CmdId
 */
export enum ActivityBannerNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2155;
     */
    CMD_ID = 2155,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityBannerClearReq
 */
export interface ActivityBannerClearReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 15;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 12;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerClearReq.CmdId
 */
export enum ActivityBannerClearReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2009;
     */
    CMD_ID = 2009,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityBannerClearRsp
 */
export interface ActivityBannerClearRsp {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 11;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerClearRsp.CmdId
 */
export enum ActivityBannerClearRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2163;
     */
    CMD_ID = 2163,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanActivityDetailInfo
 */
export interface SalesmanActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 special_reward_preview_id = 3;
     */
    specialRewardPreviewId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalesmanStatusType status = 4;
     */
    status?: SalesmanStatusType;
    /**
     * @generated from protobuf field: optional uint32 last_deliver_time = 2;
     */
    lastDeliverTime?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> selected_reward_id_map = 5;
     */
    selectedRewardIdMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 deliver_count = 11;
     */
    deliverCount?: number;
    /**
     * @generated from protobuf field: optional bool is_has_taken_special_reward = 7;
     */
    isHasTakenSpecialReward?: boolean;
    /**
     * @generated from protobuf field: optional uint32 day_index = 12;
     */
    dayIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 cond_day_count = 6;
     */
    condDayCount?: number;
    /**
     * @generated from protobuf field: optional uint32 day_reward_id = 9;
     */
    dayRewardId?: number;
    /**
     * @generated from protobuf field: optional bool is_today_has_delivered = 13;
     */
    isTodayHasDelivered?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanDeliverItemReq
 */
export interface SalesmanDeliverItemReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 4;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanDeliverItemReq.CmdId
 */
export enum SalesmanDeliverItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2138;
     */
    CMD_ID = 2138,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanDeliverItemRsp
 */
export interface SalesmanDeliverItemRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 9;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanDeliverItemRsp.CmdId
 */
export enum SalesmanDeliverItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2104;
     */
    CMD_ID = 2104,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanTakeRewardReq
 */
export interface SalesmanTakeRewardReq {
    /**
     * @generated from protobuf field: optional uint32 position = 8;
     */
    position?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeRewardReq.CmdId
 */
export enum SalesmanTakeRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2191;
     */
    CMD_ID = 2191,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanTakeRewardRsp
 */
export interface SalesmanTakeRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 position = 13;
     */
    position?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 9;
     */
    rewardId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeRewardRsp.CmdId
 */
export enum SalesmanTakeRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2110;
     */
    CMD_ID = 2110,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityCondStateChangeNotify
 */
export interface ActivityCondStateChangeNotify {
    /**
     * @generated from protobuf field: repeated uint32 activated_sale_id_list = 9;
     */
    activatedSaleIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: repeated uint32 expire_cond_list = 11;
     */
    expireCondList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 12;
     */
    disableTransferPointInteractionList: Uint32Pair[];
    /**
     * @generated from protobuf field: repeated uint32 meet_cond_list = 1;
     */
    meetCondList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityCondStateChangeNotify.CmdId
 */
export enum ActivityCondStateChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2140;
     */
    CMD_ID = 2140,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanTakeSpecialRewardReq
 */
export interface SalesmanTakeSpecialRewardReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeSpecialRewardReq.CmdId
 */
export enum SalesmanTakeSpecialRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2145;
     */
    CMD_ID = 2145,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalesmanTakeSpecialRewardRsp
 */
export interface SalesmanTakeSpecialRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeSpecialRewardRsp.CmdId
 */
export enum SalesmanTakeSpecialRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2124;
     */
    CMD_ID = 2124,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetAuthSalesmanInfoReq
 */
export interface GetAuthSalesmanInfoReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 8;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetAuthSalesmanInfoReq.CmdId
 */
export enum GetAuthSalesmanInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2070;
     */
    CMD_ID = 2070,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetAuthSalesmanInfoRsp
 */
export interface GetAuthSalesmanInfoRsp {
    /**
     * @generated from protobuf field: optional uint32 day_reward_id = 5;
     */
    dayRewardId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 11;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetAuthSalesmanInfoRsp.CmdId
 */
export enum GetAuthSalesmanInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2004;
     */
    CMD_ID = 2004,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TrialAvatarActivityRewardDetailInfo
 */
export interface TrialAvatarActivityRewardDetailInfo {
    /**
     * @generated from protobuf field: optional bool passed_dungeon = 2;
     */
    passedDungeon?: boolean;
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 4;
     */
    trialAvatarIndexId?: number;
    /**
     * @generated from protobuf field: optional bool received_reward = 5;
     */
    receivedReward?: boolean;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 7;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TrialAvatarActivityDetailInfo
 */
export interface TrialAvatarActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.TrialAvatarActivityRewardDetailInfo reward_info_list = 13;
     */
    rewardInfoList: TrialAvatarActivityRewardDetailInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonReq
 */
export interface EnterTrialAvatarActivityDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 enter_point_id = 10;
     */
    enterPointId?: number;
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 5;
     */
    trialAvatarIndexId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 14;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterTrialAvatarActivityDungeonReq.CmdId
 */
export enum EnterTrialAvatarActivityDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2118;
     */
    CMD_ID = 2118,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonRsp
 */
export interface EnterTrialAvatarActivityDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 13;
     */
    trialAvatarIndexId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 10;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterTrialAvatarActivityDungeonRsp.CmdId
 */
export enum EnterTrialAvatarActivityDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2183;
     */
    CMD_ID = 2183,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardReq
 */
export interface ReceivedTrialAvatarActivityRewardReq {
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 4;
     */
    trialAvatarIndexId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReceivedTrialAvatarActivityRewardReq.CmdId
 */
export enum ReceivedTrialAvatarActivityRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2130;
     */
    CMD_ID = 2130,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardRsp
 */
export interface ReceivedTrialAvatarActivityRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 13;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 9;
     */
    trialAvatarIndexId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReceivedTrialAvatarActivityRewardRsp.CmdId
 */
export enum ReceivedTrialAvatarActivityRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2076;
     */
    CMD_ID = 2076,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TrialAvatarFirstPassDungeonNotify
 */
export interface TrialAvatarFirstPassDungeonNotify {
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 10;
     */
    trialAvatarIndexId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TrialAvatarFirstPassDungeonNotify.CmdId
 */
export enum TrialAvatarFirstPassDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2013;
     */
    CMD_ID = 2013,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TrialAvatarInDungeonIndexNotify
 */
export interface TrialAvatarInDungeonIndexNotify {
    /**
     * @generated from protobuf field: optional uint32 trial_avatar_index_id = 14;
     */
    trialAvatarIndexId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TrialAvatarInDungeonIndexNotify.CmdId
 */
export enum TrialAvatarInDungeonIndexNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2186;
     */
    CMD_ID = 2186,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CrucibleBattleUidInfo
 */
export interface CrucibleBattleUidInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 15;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional uint32 uid = 4;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 5;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string online_id = 13;
     */
    onlineId?: string;
    /**
     * @generated from protobuf field: optional uint32 icon = 11;
     */
    icon?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CrucibleActivityDetailInfo
 */
export interface CrucibleActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 cost_time = 5;
     */
    costTime?: number;
    /**
     * @generated from protobuf field: optional uint32 battle_world_level = 12;
     */
    battleWorldLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrucibleBattleUidInfo uid_info_list = 3;
     */
    uidInfoList: CrucibleBattleUidInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 9;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.DeliveryActivityDetailInfo
 */
export interface DeliveryActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 day_index = 14;
     */
    dayIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_taken_reward = 13;
     */
    isTakenReward?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 finished_delivery_quest_index = 4;
     */
    finishedDeliveryQuestIndex: number[];
}
/**
 * @generated from protobuf message com.midnights.game.TakeDeliveryDailyRewardReq
 */
export interface TakeDeliveryDailyRewardReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 9;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeDeliveryDailyRewardReq.CmdId
 */
export enum TakeDeliveryDailyRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2121;
     */
    CMD_ID = 2121,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeDeliveryDailyRewardRsp
 */
export interface TakeDeliveryDailyRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeDeliveryDailyRewardRsp.CmdId
 */
export enum TakeDeliveryDailyRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2162;
     */
    CMD_ID = 2162,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FinishDeliveryNotify
 */
export interface FinishDeliveryNotify {
    /**
     * @generated from protobuf field: optional uint32 finished_quest_index = 1;
     */
    finishedQuestIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 day_index = 12;
     */
    dayIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FinishDeliveryNotify.CmdId
 */
export enum FinishDeliveryNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2089;
     */
    CMD_ID = 2089,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterLittleDetailInfo
 */
export interface AsterLittleDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 4;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterLittleStageState stage_state = 7;
     */
    stageState?: AsterLittleStageState;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 6;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_begin_time = 5;
     */
    stageBeginTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AsterMidCampInfo
 */
export interface AsterMidCampInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 3;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 camp_id = 8;
     */
    campId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AsterMidDetailInfo
 */
export interface AsterMidDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 begin_time = 10;
     */
    beginTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.AsterMidCampInfo camp_list = 7;
     */
    campList: AsterMidCampInfo[];
    /**
     * @generated from protobuf field: optional bool is_open = 4;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 collect_count = 11;
     */
    collectCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AsterLargeDetailInfo
 */
export interface AsterLargeDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 3;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 13;
     */
    beginTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AsterProgressDetailInfo
 */
export interface AsterProgressDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 last_auto_add_time = 3;
     */
    lastAutoAddTime?: number;
    /**
     * @generated from protobuf field: optional uint32 count = 1;
     */
    count?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AsterActivityDetailInfo
 */
export interface AsterActivityDetailInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterLittleDetailInfo aster_little = 7;
     */
    asterLittle?: AsterLittleDetailInfo;
    /**
     * @generated from protobuf field: optional uint32 aster_credit = 14;
     */
    asterCredit?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterLargeDetailInfo aster_large = 9;
     */
    asterLarge?: AsterLargeDetailInfo;
    /**
     * @generated from protobuf field: optional bool is_special_reward_taken = 1;
     */
    isSpecialRewardTaken?: boolean;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 13;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 8;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional uint32 aster_token = 5;
     */
    asterToken?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterMidDetailInfo aster_mid = 6;
     */
    asterMid?: AsterMidDetailInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterProgressDetailInfo aster_progress = 2;
     */
    asterProgress?: AsterProgressDetailInfo;
}
/**
 * @generated from protobuf message com.midnights.game.SelectAsterMidDifficultyReq
 */
export interface SelectAsterMidDifficultyReq {
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 13;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 5;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectAsterMidDifficultyReq.CmdId
 */
export enum SelectAsterMidDifficultyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2134;
     */
    CMD_ID = 2134,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectAsterMidDifficultyRsp
 */
export interface SelectAsterMidDifficultyRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 2;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 5;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 14;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectAsterMidDifficultyRsp.CmdId
 */
export enum SelectAsterMidDifficultyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2180;
     */
    CMD_ID = 2180,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterProgressInfoNotify
 */
export interface AsterProgressInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterProgressDetailInfo info = 1;
     */
    info?: AsterProgressDetailInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.AsterProgressInfoNotify.CmdId
 */
export enum AsterProgressInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2016;
     */
    CMD_ID = 2016,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterLittleInfoNotify
 */
export interface AsterLittleInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterLittleDetailInfo info = 1;
     */
    info?: AsterLittleDetailInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.AsterLittleInfoNotify.CmdId
 */
export enum AsterLittleInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2068;
     */
    CMD_ID = 2068,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterMidInfoNotify
 */
export interface AsterMidInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterMidDetailInfo info = 4;
     */
    info?: AsterMidDetailInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.AsterMidInfoNotify.CmdId
 */
export enum AsterMidInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2031;
     */
    CMD_ID = 2031,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterMiscInfoNotify
 */
export interface AsterMiscInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 aster_token = 2;
     */
    asterToken?: number;
    /**
     * @generated from protobuf field: optional uint32 aster_credit = 15;
     */
    asterCredit?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AsterMiscInfoNotify.CmdId
 */
export enum AsterMiscInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2036;
     */
    CMD_ID = 2036,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAsterSpecialRewardReq
 */
export interface TakeAsterSpecialRewardReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAsterSpecialRewardReq.CmdId
 */
export enum TakeAsterSpecialRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2097;
     */
    CMD_ID = 2097,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeAsterSpecialRewardRsp
 */
export interface TakeAsterSpecialRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 14;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeAsterSpecialRewardRsp.CmdId
 */
export enum TakeAsterSpecialRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2193;
     */
    CMD_ID = 2193,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterLargeInfoNotify
 */
export interface AsterLargeInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.AsterLargeDetailInfo info = 10;
     */
    info?: AsterLargeDetailInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.AsterLargeInfoNotify.CmdId
 */
export enum AsterLargeInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2146;
     */
    CMD_ID = 2146,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FlightDailyRecord
 */
export interface FlightDailyRecord {
    /**
     * @generated from protobuf field: optional uint32 group_id = 4;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional bool is_touched = 1;
     */
    isTouched?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 watcher_id_list = 11;
     */
    watcherIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 best_score = 7;
     */
    bestScore?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 3;
     */
    startTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FlightActivityDetailInfo
 */
export interface FlightActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 preview_reward_id = 15;
     */
    previewRewardId?: number;
    /**
     * @generated from protobuf field: optional uint32 min_open_player_level = 11;
     */
    minOpenPlayerLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FlightDailyRecord daily_record_list = 1;
     */
    dailyRecordList: FlightDailyRecord[];
}
/**
 * @generated from protobuf message com.midnights.game.FlightActivitySettleNotify
 */
export interface FlightActivitySettleNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 1;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 medal_level = 6;
     */
    medalLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 left_time = 13;
     */
    leftTime?: number;
    /**
     * @generated from protobuf field: optional uint32 collect_num = 9;
     */
    collectNum?: number;
    /**
     * @generated from protobuf field: optional uint32 total_num = 5;
     */
    totalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 8;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 10;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 4;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.FlightActivitySettleNotify.CmdId
 */
export enum FlightActivitySettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2195;
     */
    CMD_ID = 2195,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FlightActivityRestartReq
 */
export interface FlightActivityRestartReq {
    /**
     * @generated from protobuf field: optional uint32 group_id = 4;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FlightActivityRestartReq.CmdId
 */
export enum FlightActivityRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2037;
     */
    CMD_ID = 2037,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FlightActivityRestartRsp
 */
export interface FlightActivityRestartRsp {
    /**
     * @generated from protobuf field: optional uint32 group_id = 11;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FlightActivityRestartRsp.CmdId
 */
export enum FlightActivityRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2165;
     */
    CMD_ID = 2165,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AsterMidCampInfoNotify
 */
export interface AsterMidCampInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AsterMidCampInfo camp_list = 5;
     */
    campList: AsterMidCampInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.AsterMidCampInfoNotify.CmdId
 */
export enum AsterMidCampInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2133;
     */
    CMD_ID = 2133,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineActivityDetailInfo
 */
export interface DragonSpineActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_content_closed = 10;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DragonSpineChapterInfo chapter_info_list = 4;
     */
    chapterInfoList: DragonSpineChapterInfo[];
    /**
     * @generated from protobuf field: optional uint32 weapon_enhance_level = 2;
     */
    weaponEnhanceLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 content_finish_time = 15;
     */
    contentFinishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 shimmering_essence = 13;
     */
    shimmeringEssence?: number;
    /**
     * @generated from protobuf field: optional uint32 warm_essence = 11;
     */
    warmEssence?: number;
    /**
     * @generated from protobuf field: optional uint32 wondrous_essence = 7;
     */
    wondrousEssence?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineChapterInfo
 */
export interface DragonSpineChapterInfo {
    /**
     * @generated from protobuf field: optional uint32 progress = 14;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 6;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 11;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 9;
     */
    chapterId?: number;
    /**
     * @generated from protobuf field: optional uint32 finished_mission_num = 10;
     */
    finishedMissionNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineChapterOpenNotify
 */
export interface DragonSpineChapterOpenNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 12;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 10;
     */
    chapterId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterOpenNotify.CmdId
 */
export enum DragonSpineChapterOpenNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2022;
     */
    CMD_ID = 2022,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineChapterProgressChangeNotify
 */
export interface DragonSpineChapterProgressChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 11;
     */
    chapterId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 5;
     */
    curProgress?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterProgressChangeNotify.CmdId
 */
export enum DragonSpineChapterProgressChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2065;
     */
    CMD_ID = 2065,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineChapterFinishNotify
 */
export interface DragonSpineChapterFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 11;
     */
    chapterId?: number;
    /**
     * @generated from protobuf field: optional uint32 weapon_enhance_level = 14;
     */
    weaponEnhanceLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterFinishNotify.CmdId
 */
export enum DragonSpineChapterFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2069;
     */
    CMD_ID = 2069,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DragonSpineCoinChangeNotify
 */
export interface DragonSpineCoinChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 shimmering_essence = 4;
     */
    shimmeringEssence?: number;
    /**
     * @generated from protobuf field: optional uint32 warm_essence = 13;
     */
    warmEssence?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 12;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 wondrous_essence = 11;
     */
    wondrousEssence?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineCoinChangeNotify.CmdId
 */
export enum DragonSpineCoinChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2088;
     */
    CMD_ID = 2088,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivitySaleChangeNotify
 */
export interface ActivitySaleChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 sale_id = 5;
     */
    saleId?: number;
    /**
     * @generated from protobuf field: optional bool is_close = 1;
     */
    isClose?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivitySaleChangeNotify.CmdId
 */
export enum ActivitySaleChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2071;
     */
    CMD_ID = 2071,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyDailyInfo
 */
export interface EffigyDailyInfo {
    /**
     * @generated from protobuf field: optional uint32 challenge_max_score = 6;
     */
    challengeMaxScore?: number;
    /**
     * @generated from protobuf field: optional bool is_first_pass_reward_taken = 12;
     */
    isFirstPassRewardTaken?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_total_score = 15;
     */
    challengeTotalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 1;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_count = 3;
     */
    challengeCount?: number;
    /**
     * @generated from protobuf field: optional uint32 day_index = 14;
     */
    dayIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 begin_time = 2;
     */
    beginTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EffigyActivityDetailInfo
 */
export interface EffigyActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 cur_score = 5;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.EffigyDailyInfo daily_info_list = 14;
     */
    dailyInfoList: EffigyDailyInfo[];
    /**
     * @generated from protobuf field: optional uint32 last_difficulty_id = 9;
     */
    lastDifficultyId?: number;
    /**
     * @generated from protobuf field: repeated uint32 taken_reward_index_list = 2;
     */
    takenRewardIndexList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.StartEffigyChallengeReq
 */
export interface StartEffigyChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 9;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 6;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 1;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartEffigyChallengeReq.CmdId
 */
export enum StartEffigyChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2169;
     */
    CMD_ID = 2169,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartEffigyChallengeRsp
 */
export interface StartEffigyChallengeRsp {
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 2;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 15;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 10;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartEffigyChallengeRsp.CmdId
 */
export enum StartEffigyChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2173;
     */
    CMD_ID = 2173,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeInfoNotify
 */
export interface EffigyChallengeInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 9;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 11;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 challenge_score = 14;
     */
    challengeScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 8;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeInfoNotify.CmdId
 */
export enum EffigyChallengeInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2090;
     */
    CMD_ID = 2090,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeDungeonResultInfo
 */
export interface EffigyChallengeDungeonResultInfo {
    /**
     * @generated from protobuf field: optional uint32 challenge_score = 7;
     */
    challengeScore?: number;
    /**
     * @generated from protobuf field: optional bool is_in_time_limit = 8;
     */
    isInTimeLimit?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 6;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 15;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_max_score = 13;
     */
    challengeMaxScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeResultNotify
 */
export interface EffigyChallengeResultNotify {
    /**
     * @generated from protobuf field: optional bool is_success = 5;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_max_score = 12;
     */
    challengeMaxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_score = 3;
     */
    challengeScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 7;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeResultNotify.CmdId
 */
export enum EffigyChallengeResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2046;
     */
    CMD_ID = 2046,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeEffigyFirstPassRewardReq
 */
export interface TakeEffigyFirstPassRewardReq {
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 6;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyFirstPassRewardReq.CmdId
 */
export enum TakeEffigyFirstPassRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2196;
     */
    CMD_ID = 2196,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeEffigyFirstPassRewardRsp
 */
export interface TakeEffigyFirstPassRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 2;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyFirstPassRewardRsp.CmdId
 */
export enum TakeEffigyFirstPassRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2061;
     */
    CMD_ID = 2061,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeEffigyRewardReq
 */
export interface TakeEffigyRewardReq {
    /**
     * @generated from protobuf field: optional uint32 reward_index = 14;
     */
    rewardIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyRewardReq.CmdId
 */
export enum TakeEffigyRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2040;
     */
    CMD_ID = 2040,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeEffigyRewardRsp
 */
export interface TakeEffigyRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_index = 7;
     */
    rewardIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyRewardRsp.CmdId
 */
export enum TakeEffigyRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2007;
     */
    CMD_ID = 2007,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectEffigyChallengeConditionReq
 */
export interface SelectEffigyChallengeConditionReq {
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 15;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 7;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 9;
     */
    conditionIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.SelectEffigyChallengeConditionReq.CmdId
 */
export enum SelectEffigyChallengeConditionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2064;
     */
    CMD_ID = 2064,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectEffigyChallengeConditionRsp
 */
export interface SelectEffigyChallengeConditionRsp {
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 12;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 7;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 2;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectEffigyChallengeConditionRsp.CmdId
 */
export enum SelectEffigyChallengeConditionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2039;
     */
    CMD_ID = 2039,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RestartEffigyChallengeReq
 */
export interface RestartEffigyChallengeReq {
}
/**
 * @generated from protobuf enum com.midnights.game.RestartEffigyChallengeReq.CmdId
 */
export enum RestartEffigyChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2148;
     */
    CMD_ID = 2148,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RestartEffigyChallengeRsp
 */
export interface RestartEffigyChallengeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RestartEffigyChallengeRsp.CmdId
 */
export enum RestartEffigyChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2042;
     */
    CMD_ID = 2042,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapRegionInfo
 */
export interface TreasureMapRegionInfo {
    /**
     * @generated from protobuf field: optional uint32 start_time = 6;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 current_progress = 11;
     */
    currentProgress?: number;
    /**
     * @generated from protobuf field: optional bool is_done_mp_spot = 3;
     */
    isDoneMpSpot?: boolean;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 2;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 goal_points = 12;
     */
    goalPoints?: number;
    /**
     * @generated from protobuf field: optional bool is_find_mp_spot = 4;
     */
    isFindMpSpot?: boolean;
    /**
     * @generated from protobuf field: optional uint32 region_radius = 1;
     */
    regionRadius?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector region_center_pos = 9;
     */
    regionCenterPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 region_id = 5;
     */
    regionId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapBonusChallengeInfo
 */
export interface TreasureMapBonusChallengeInfo {
    /**
     * @generated from protobuf field: optional bool is_done = 5;
     */
    isDone?: boolean;
    /**
     * @generated from protobuf field: optional uint32 config_id = 10;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional bool is_active = 1;
     */
    isActive?: boolean;
    /**
     * @generated from protobuf field: map<uint32, bool> fragment_map = 12;
     */
    fragmentMap: {
        [key: number]: boolean;
    };
    /**
     * @generated from protobuf field: optional uint32 solution_id = 8;
     */
    solutionId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapActivityDetailInfo
 */
export interface TreasureMapActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 active_region_index = 1;
     */
    activeRegionIndex?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TreasureMapRegionInfo region_info_list = 6;
     */
    regionInfoList: TreasureMapRegionInfo[];
    /**
     * @generated from protobuf field: optional bool is_mp_challenge_touched = 7;
     */
    isMpChallengeTouched?: boolean;
    /**
     * @generated from protobuf field: optional uint32 treasure_close_time = 10;
     */
    treasureCloseTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TreasureMapBonusChallengeInfo bonus_challenge_list = 5;
     */
    bonusChallengeList: TreasureMapBonusChallengeInfo[];
    /**
     * @generated from protobuf field: optional uint32 currency_num = 2;
     */
    currencyNum?: number;
    /**
     * @generated from protobuf field: optional uint32 preview_reward_id = 14;
     */
    previewRewardId?: number;
    /**
     * @generated from protobuf field: optional uint32 min_open_player_level = 8;
     */
    minOpenPlayerLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 total_mp_spot_num = 13;
     */
    totalMpSpotNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapRegionInfoNotify
 */
export interface TreasureMapRegionInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.TreasureMapRegionInfo region_info = 14;
     */
    regionInfo?: TreasureMapRegionInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapRegionInfoNotify.CmdId
 */
export enum TreasureMapRegionInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2185;
     */
    CMD_ID = 2185,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapCurrencyNotify
 */
export interface TreasureMapCurrencyNotify {
    /**
     * @generated from protobuf field: optional uint32 currency_num = 8;
     */
    currencyNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapCurrencyNotify.CmdId
 */
export enum TreasureMapCurrencyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2171;
     */
    CMD_ID = 2171,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapRegionActiveNotify
 */
export interface TreasureMapRegionActiveNotify {
    /**
     * @generated from protobuf field: optional uint32 active_region_index = 14;
     */
    activeRegionIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapRegionActiveNotify.CmdId
 */
export enum TreasureMapRegionActiveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2122;
     */
    CMD_ID = 2122,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapMpChallengeNotify
 */
export interface TreasureMapMpChallengeNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapMpChallengeNotify.CmdId
 */
export enum TreasureMapMpChallengeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2048;
     */
    CMD_ID = 2048,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapBonusChallengeNotify
 */
export interface TreasureMapBonusChallengeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.TreasureMapBonusChallengeInfo info = 5;
     */
    info?: TreasureMapBonusChallengeInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapBonusChallengeNotify.CmdId
 */
export enum TreasureMapBonusChallengeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2115;
     */
    CMD_ID = 2115,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapGuideTaskDoneNotify
 */
export interface TreasureMapGuideTaskDoneNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapGuideTaskDoneNotify.CmdId
 */
export enum TreasureMapGuideTaskDoneNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2119;
     */
    CMD_ID = 2119,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapPreTaskDoneNotify
 */
export interface TreasureMapPreTaskDoneNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapPreTaskDoneNotify.CmdId
 */
export enum TreasureMapPreTaskDoneNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2152;
     */
    CMD_ID = 2152,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingActivityDetailInfo
 */
export interface BlessingActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 cur_day_scan_type = 9;
     */
    curDayScanType?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 11;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> pic_num_map = 15;
     */
    picNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 2;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_day_scan_num = 4;
     */
    curDayScanNum?: number;
    /**
     * @generated from protobuf field: optional uint32 redeem_reward_num = 1;
     */
    redeemRewardNum?: number;
    /**
     * @generated from protobuf field: optional bool is_activated = 13;
     */
    isActivated?: boolean;
    /**
     * @generated from protobuf field: optional uint32 next_refresh_time = 6;
     */
    nextRefreshTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BlessingScanReq
 */
export interface BlessingScanReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingScanReq.CmdId
 */
export enum BlessingScanReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2081;
     */
    CMD_ID = 2081,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingScanRsp
 */
export interface BlessingScanRsp {
    /**
     * @generated from protobuf field: optional uint32 scan_pic_id = 4;
     */
    scanPicId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_day_scan_num = 1;
     */
    curDayScanNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingScanRsp.CmdId
 */
export enum BlessingScanRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2093;
     */
    CMD_ID = 2093,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingRedeemRewardReq
 */
export interface BlessingRedeemRewardReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingRedeemRewardReq.CmdId
 */
export enum BlessingRedeemRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2137;
     */
    CMD_ID = 2137,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingRedeemRewardRsp
 */
export interface BlessingRedeemRewardRsp {
    /**
     * @generated from protobuf field: map<uint32, uint32> pic_num_map = 12;
     */
    picNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingRedeemRewardRsp.CmdId
 */
export enum BlessingRedeemRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2098;
     */
    CMD_ID = 2098,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingFriendPicData
 */
export interface BlessingFriendPicData {
    /**
     * @generated from protobuf field: map<uint32, uint32> pic_num_map = 4;
     */
    picNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 5;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional string remark_name = 11;
     */
    remarkName?: string;
    /**
     * @generated from protobuf field: optional string nickname = 14;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string signature = 1;
     */
    signature?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 6;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional uint32 uid = 9;
     */
    uid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BlessingRecvPicRecord
 */
export interface BlessingRecvPicRecord {
    /**
     * @generated from protobuf field: optional string nickname = 1;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string remark_name = 2;
     */
    remarkName?: string;
    /**
     * @generated from protobuf field: optional uint32 pic_id = 3;
     */
    picId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 5;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 6;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional string signature = 10;
     */
    signature?: string;
    /**
     * @generated from protobuf field: optional uint32 index = 14;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional bool is_recv = 7;
     */
    isRecv?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 9;
     */
    profilePicture?: ProfilePicture;
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGetFriendPicListReq
 */
export interface BlessingGetFriendPicListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetFriendPicListReq.CmdId
 */
export enum BlessingGetFriendPicListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2043;
     */
    CMD_ID = 2043,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGetFriendPicListRsp
 */
export interface BlessingGetFriendPicListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.BlessingFriendPicData friend_pic_data_list = 6;
     */
    friendPicDataList: BlessingFriendPicData[];
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetFriendPicListRsp.CmdId
 */
export enum BlessingGetFriendPicListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2056;
     */
    CMD_ID = 2056,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGiveFriendPicReq
 */
export interface BlessingGiveFriendPicReq {
    /**
     * @generated from protobuf field: optional uint32 uid = 11;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 pic_id = 3;
     */
    picId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGiveFriendPicReq.CmdId
 */
export enum BlessingGiveFriendPicReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2062;
     */
    CMD_ID = 2062,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGiveFriendPicRsp
 */
export interface BlessingGiveFriendPicRsp {
    /**
     * @generated from protobuf field: optional uint32 pic_id = 10;
     */
    picId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 13;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGiveFriendPicRsp.CmdId
 */
export enum BlessingGiveFriendPicRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2053;
     */
    CMD_ID = 2053,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingAcceptGivePicReq
 */
export interface BlessingAcceptGivePicReq {
    /**
     * @generated from protobuf field: optional uint32 index = 9;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 1;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptGivePicReq.CmdId
 */
export enum BlessingAcceptGivePicReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2006;
     */
    CMD_ID = 2006,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingAcceptGivePicRsp
 */
export interface BlessingAcceptGivePicRsp {
    /**
     * @generated from protobuf field: optional uint32 pic_id = 1;
     */
    picId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 index = 5;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 14;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptGivePicRsp.CmdId
 */
export enum BlessingAcceptGivePicRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2055;
     */
    CMD_ID = 2055,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListReq
 */
export interface BlessingGetAllRecvPicRecordListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetAllRecvPicRecordListReq.CmdId
 */
export enum BlessingGetAllRecvPicRecordListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2096;
     */
    CMD_ID = 2096,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListRsp
 */
export interface BlessingGetAllRecvPicRecordListRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BlessingRecvPicRecord recv_pic_record_list = 15;
     */
    recvPicRecordList: BlessingRecvPicRecord[];
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetAllRecvPicRecordListRsp.CmdId
 */
export enum BlessingGetAllRecvPicRecordListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2083;
     */
    CMD_ID = 2083,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingRecvFriendPicNotify
 */
export interface BlessingRecvFriendPicNotify {
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 pic_id = 5;
     */
    picId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingRecvFriendPicNotify.CmdId
 */
export enum BlessingRecvFriendPicNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2178;
     */
    CMD_ID = 2178,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingAcceptAllGivePicReq
 */
export interface BlessingAcceptAllGivePicReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptAllGivePicReq.CmdId
 */
export enum BlessingAcceptAllGivePicReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2045;
     */
    CMD_ID = 2045,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlessingAcceptAllGivePicRsp
 */
export interface BlessingAcceptAllGivePicRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> accept_pic_num_map = 14;
     */
    acceptPicNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: repeated uint32 accept_index_list = 5;
     */
    acceptIndexList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptAllGivePicRsp.CmdId
 */
export enum BlessingAcceptAllGivePicRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2044;
     */
    CMD_ID = 2044,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionPathInfo
 */
export interface ExpeditionPathInfo {
    /**
     * @generated from protobuf field: optional uint32 mark_id = 12;
     */
    markId?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 9;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 assist_avatar_id = 7;
     */
    assistAvatarId?: number;
    /**
     * @generated from protobuf field: optional float bonus_probability = 4;
     */
    bonusProbability?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ExpeditionState state = 15;
     */
    state?: ExpeditionState;
    /**
     * @generated from protobuf field: repeated uint32 avatar_id_list = 2;
     */
    avatarIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 assist_costume_id = 5;
     */
    assistCostumeId?: number;
    /**
     * @generated from protobuf field: optional uint32 path_id = 8;
     */
    pathId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 11;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 assist_uid = 10;
     */
    assistUid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionChallengeInfo
 */
export interface ExpeditionChallengeInfo {
    /**
     * @generated from protobuf field: optional bool is_finished = 5;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 id = 11;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 9;
     */
    openTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionActivityDetailInfo
 */
export interface ExpeditionActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 cur_challenge_id = 5;
     */
    curChallengeId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExpeditionChallengeInfo challenge_info_list = 10;
     */
    challengeInfoList: ExpeditionChallengeInfo[];
    /**
     * @generated from protobuf field: optional uint32 expedition_count = 2;
     */
    expeditionCount?: number;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 4;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 8;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExpeditionPathInfo path_info_list = 15;
     */
    pathInfoList: ExpeditionPathInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionStartReq
 */
export interface ExpeditionStartReq {
    /**
     * @generated from protobuf field: repeated uint32 avatar_id_list = 1;
     */
    avatarIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 assist_uid = 5;
     */
    assistUid?: number;
    /**
     * @generated from protobuf field: optional uint32 assist_avatar_id = 8;
     */
    assistAvatarId?: number;
    /**
     * @generated from protobuf field: optional uint32 path_id = 7;
     */
    pathId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionStartReq.CmdId
 */
export enum ExpeditionStartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2087;
     */
    CMD_ID = 2087,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionStartRsp
 */
export interface ExpeditionStartRsp {
    /**
     * @generated from protobuf field: optional uint32 assist_uid = 1;
     */
    assistUid?: number;
    /**
     * @generated from protobuf field: optional uint32 path_id = 7;
     */
    pathId?: number;
    /**
     * @generated from protobuf field: repeated uint32 avatar_id_list = 4;
     */
    avatarIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 assist_avatar_id = 2;
     */
    assistAvatarId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionStartRsp.CmdId
 */
export enum ExpeditionStartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2135;
     */
    CMD_ID = 2135,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionRecallReq
 */
export interface ExpeditionRecallReq {
    /**
     * @generated from protobuf field: optional uint32 path_id = 13;
     */
    pathId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionRecallReq.CmdId
 */
export enum ExpeditionRecallReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2131;
     */
    CMD_ID = 2131,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionRecallRsp
 */
export interface ExpeditionRecallRsp {
    /**
     * @generated from protobuf field: optional uint32 path_id = 1;
     */
    pathId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionRecallRsp.CmdId
 */
export enum ExpeditionRecallRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2129;
     */
    CMD_ID = 2129,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionTakeRewardReq
 */
export interface ExpeditionTakeRewardReq {
    /**
     * @generated from protobuf field: optional uint32 path_id = 3;
     */
    pathId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionTakeRewardReq.CmdId
 */
export enum ExpeditionTakeRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2149;
     */
    CMD_ID = 2149,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionTakeRewardRsp
 */
export interface ExpeditionTakeRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_bonus = 11;
     */
    isBonus?: boolean;
    /**
     * @generated from protobuf field: optional uint32 reward_level = 1;
     */
    rewardLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 path_id = 9;
     */
    pathId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionTakeRewardRsp.CmdId
 */
export enum ExpeditionTakeRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2080;
     */
    CMD_ID = 2080,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionAssistInfo
 */
export interface ExpeditionAssistInfo {
    /**
     * @generated from protobuf field: optional string online_id = 14;
     */
    onlineId?: string;
    /**
     * @generated from protobuf field: optional uint32 assist_time = 1;
     */
    assistTime?: number;
    /**
     * @generated from protobuf field: optional uint32 costume_id = 6;
     */
    costumeId?: number;
    /**
     * @generated from protobuf field: optional string target_nick_name = 4;
     */
    targetNickName?: string;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 12;
     */
    avatarId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetExpeditionAssistInfoListReq
 */
export interface GetExpeditionAssistInfoListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetExpeditionAssistInfoListReq.CmdId
 */
export enum GetExpeditionAssistInfoListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2150;
     */
    CMD_ID = 2150,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetExpeditionAssistInfoListRsp
 */
export interface GetExpeditionAssistInfoListRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExpeditionAssistInfo assist_info_list = 6;
     */
    assistInfoList: ExpeditionAssistInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetExpeditionAssistInfoListRsp.CmdId
 */
export enum GetExpeditionAssistInfoListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2035;
     */
    CMD_ID = 2035,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetCurExpeditionChallengeIdReq
 */
export interface SetCurExpeditionChallengeIdReq {
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetCurExpeditionChallengeIdReq.CmdId
 */
export enum SetCurExpeditionChallengeIdReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2021;
     */
    CMD_ID = 2021,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetCurExpeditionChallengeIdRsp
 */
export interface SetCurExpeditionChallengeIdRsp {
    /**
     * @generated from protobuf field: optional uint32 id = 14;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetCurExpeditionChallengeIdRsp.CmdId
 */
export enum SetCurExpeditionChallengeIdRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2049;
     */
    CMD_ID = 2049,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionChallengeEnterRegionNotify
 */
export interface ExpeditionChallengeEnterRegionNotify {
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional bool is_puzzle_finished = 10;
     */
    isPuzzleFinished?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionChallengeEnterRegionNotify.CmdId
 */
export enum ExpeditionChallengeEnterRegionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2154;
     */
    CMD_ID = 2154,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExpeditionChallengeFinishedNotify
 */
export interface ExpeditionChallengeFinishedNotify {
    /**
     * @generated from protobuf field: optional uint32 id = 13;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionChallengeFinishedNotify.CmdId
 */
export enum ExpeditionChallengeFinishedNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2091;
     */
    CMD_ID = 2091,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WaterSpiritActivityDetailInfo
 */
export interface WaterSpiritActivityDetailInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> search_time_map = 9;
     */
    searchTimeMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 region_search_id = 2;
     */
    regionSearchId?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 15;
     */
    mpPlayId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairChapterInfo
 */
export interface FleurFairChapterInfo {
    /**
     * @generated from protobuf field: optional uint32 open_time = 15;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 11;
     */
    chapterId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairBalloonInfo
 */
export interface FleurFairBalloonInfo {
    /**
     * @generated from protobuf field: optional uint32 best_score = 4;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairFallInfo
 */
export interface FleurFairFallInfo {
    /**
     * @generated from protobuf field: optional uint32 best_score = 10;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicRecord
 */
export interface FleurFairMusicRecord {
    /**
     * @generated from protobuf field: optional uint32 max_combo = 1;
     */
    maxCombo?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 11;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional bool is_unlock = 12;
     */
    isUnlock?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicGameInfo
 */
export interface FleurFairMusicGameInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FleurFairMusicRecord> music_record_map = 10;
     */
    musicRecordMap: {
        [key: number]: FleurFairMusicRecord;
    };
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMinigameInfo
 */
export interface FleurFairMinigameInfo {
    /**
     * @generated from protobuf field: optional uint32 minigame_id = 13;
     */
    minigameId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 8;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 15;
     */
    openTime?: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "balloonInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FleurFairBalloonInfo balloon_info = 12;
         */
        balloonInfo: FleurFairBalloonInfo;
    } | {
        oneofKind: "fallInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FleurFairFallInfo fall_info = 11;
         */
        fallInfo: FleurFairFallInfo;
    } | {
        oneofKind: "musicInfo";
        /**
         * @generated from protobuf field: com.midnights.game.FleurFairMusicGameInfo music_info = 9;
         */
        musicInfo: FleurFairMusicGameInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairDungeonSectionInfo
 */
export interface FleurFairDungeonSectionInfo {
    /**
     * @generated from protobuf field: optional uint32 section_id = 10;
     */
    sectionId?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 13;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairActivityDetailInfo
 */
export interface FleurFairActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_content_closed = 4;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 dungeon_punish_over_time = 6;
     */
    dungeonPunishOverTime?: number;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 15;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional uint32 obtained_token = 13;
     */
    obtainedToken?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FleurFairChapterInfo chapter_info_list = 14;
     */
    chapterInfoList: FleurFairChapterInfo[];
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FleurFairMinigameInfo> minigame_info_map = 9;
     */
    minigameInfoMap: {
        [key: number]: FleurFairMinigameInfo;
    };
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FleurFairDungeonSectionInfo> dungeon_section_info_map = 3;
     */
    dungeonSectionInfoMap: {
        [key: number]: FleurFairDungeonSectionInfo;
    };
    /**
     * @generated from protobuf field: optional bool is_dungeon_unlocked = 11;
     */
    isDungeonUnlocked?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairBalloonSettleInfo
 */
export interface FleurFairBalloonSettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.BalloonSettleInfo settle_info = 10;
     */
    settleInfo?: BalloonSettleInfo;
    /**
     * @generated from protobuf field: optional bool is_new_record = 7;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairFallSettleInfo
 */
export interface FleurFairFallSettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.FallSettleInfo settle_info = 4;
     */
    settleInfo?: FallSettleInfo;
    /**
     * @generated from protobuf field: optional bool is_new_record = 10;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairBalloonSettleNotify
 */
export interface FleurFairBalloonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 minigame_id = 9;
     */
    minigameId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FleurFairBalloonSettleInfo> settle_info_map = 15;
     */
    settleInfoMap: {
        [key: number]: FleurFairBalloonSettleInfo;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairBalloonSettleNotify.CmdId
 */
export enum FleurFairBalloonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2099;
     */
    CMD_ID = 2099,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairFallSettleNotify
 */
export interface FleurFairFallSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 minigame_id = 15;
     */
    minigameId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FleurFairFallSettleInfo> settle_info_map = 11;
     */
    settleInfoMap: {
        [key: number]: FleurFairFallSettleInfo;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairFallSettleNotify.CmdId
 */
export enum FleurFairFallSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2017;
     */
    CMD_ID = 2017,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicGameSettleReq
 */
export interface FleurFairMusicGameSettleReq {
    /**
     * @generated from protobuf field: optional uint32 score = 3;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 combo = 6;
     */
    combo?: number;
    /**
     * @generated from protobuf field: optional uint32 correct_hit = 10;
     */
    correctHit?: number;
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 11;
     */
    musicBasicId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameSettleReq.CmdId
 */
export enum FleurFairMusicGameSettleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2194;
     */
    CMD_ID = 2194,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicGameSettleRsp
 */
export interface FleurFairMusicGameSettleRsp {
    /**
     * @generated from protobuf field: optional bool is_unlock_next_level = 4;
     */
    isUnlockNextLevel?: boolean;
    /**
     * @generated from protobuf field: optional bool is_new_record = 12;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 9;
     */
    musicBasicId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameSettleRsp.CmdId
 */
export enum FleurFairMusicGameSettleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2113;
     */
    CMD_ID = 2113,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicGameStartReq
 */
export interface FleurFairMusicGameStartReq {
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 2;
     */
    musicBasicId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameStartReq.CmdId
 */
export enum FleurFairMusicGameStartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2167;
     */
    CMD_ID = 2167,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairMusicGameStartRsp
 */
export interface FleurFairMusicGameStartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 7;
     */
    musicBasicId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameStartRsp.CmdId
 */
export enum FleurFairMusicGameStartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2079;
     */
    CMD_ID = 2079,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairReplayMiniGameReq
 */
export interface FleurFairReplayMiniGameReq {
    /**
     * @generated from protobuf field: optional uint32 minigame_id = 5;
     */
    minigameId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairReplayMiniGameReq.CmdId
 */
export enum FleurFairReplayMiniGameReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2181;
     */
    CMD_ID = 2181,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FleurFairReplayMiniGameRsp
 */
export interface FleurFairReplayMiniGameRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 minigame_id = 8;
     */
    minigameId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FleurFairReplayMiniGameRsp.CmdId
 */
export enum FleurFairReplayMiniGameRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2052;
     */
    CMD_ID = 2052,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ArenaChallengeMonsterLevel
 */
export interface ArenaChallengeMonsterLevel {
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_level = 7;
     */
    arenaChallengeLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_id = 15;
     */
    arenaChallengeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ArenaChallengeActivityDetailInfo
 */
export interface ArenaChallengeActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_finish_any_level = 14;
     */
    isFinishAnyLevel?: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> level_open_time_map = 3;
     */
    levelOpenTimeMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 world_level = 15;
     */
    worldLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ArenaChallengeMonsterLevel level_list = 9;
     */
    levelList: ArenaChallengeMonsterLevel[];
}
/**
 * @generated from protobuf message com.midnights.game.StartArenaChallengeLevelReq
 */
export interface StartArenaChallengeLevelReq {
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_id = 4;
     */
    arenaChallengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 5;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_level = 2;
     */
    arenaChallengeLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartArenaChallengeLevelReq.CmdId
 */
export enum StartArenaChallengeLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2127;
     */
    CMD_ID = 2127,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartArenaChallengeLevelRsp
 */
export interface StartArenaChallengeLevelRsp {
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_level = 1;
     */
    arenaChallengeLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 3;
     */
    gadgetEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_id = 6;
     */
    arenaChallengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartArenaChallengeLevelRsp.CmdId
 */
export enum StartArenaChallengeLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2125;
     */
    CMD_ID = 2125,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ArenaChallengeChildChallengeInfo
 */
export interface ArenaChallengeChildChallengeInfo {
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 12;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_type = 5;
     */
    challengeType?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 4;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 7;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional bool is_settled = 11;
     */
    isSettled?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.ArenaChallengeFinishNotify
 */
export interface ArenaChallengeFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_level = 13;
     */
    arenaChallengeLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 arena_challenge_id = 3;
     */
    arenaChallengeId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ArenaChallengeChildChallengeInfo child_challenge_list = 2;
     */
    childChallengeList: ArenaChallengeChildChallengeInfo[];
    /**
     * @generated from protobuf field: optional bool is_success = 12;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ArenaChallengeFinishNotify.CmdId
 */
export enum ArenaChallengeFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2030;
     */
    CMD_ID = 2030,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WaterSpritePhaseFinishNotify
 */
export interface WaterSpritePhaseFinishNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.WaterSpritePhaseFinishNotify.CmdId
 */
export enum WaterSpritePhaseFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2025;
     */
    CMD_ID = 2025,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchReq
 */
export interface ActivityTakeWatcherRewardBatchReq {
    /**
     * @generated from protobuf field: repeated uint32 watcher_id_list = 11;
     */
    watcherIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 activity_id = 3;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardBatchReq.CmdId
 */
export enum ActivityTakeWatcherRewardBatchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2159;
     */
    CMD_ID = 2159,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchRsp
 */
export interface ActivityTakeWatcherRewardBatchRsp {
    /**
     * @generated from protobuf field: repeated uint32 watcher_id_list = 6;
     */
    watcherIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 7;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 1;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardBatchRsp.CmdId
 */
export enum ActivityTakeWatcherRewardBatchRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2109;
     */
    CMD_ID = 2109,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabCamp
 */
export interface ChannelerSlabCamp {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 11;
     */
    rewardId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 8;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 buff_num = 7;
     */
    buffNum?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 3;
     */
    groupId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabChallenge
 */
export interface ChannelerSlabChallenge {
    /**
     * @generated from protobuf field: optional uint32 active_camp_index = 5;
     */
    activeCampIndex?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannelerSlabCamp camp_list = 14;
     */
    campList: ChannelerSlabCamp[];
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabOneoffDungeon
 */
export interface ChannelerSlabOneoffDungeon {
    /**
     * @generated from protobuf field: optional bool is_done = 8;
     */
    isDone?: boolean;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 12;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_id = 13;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabChallengeStage
 */
export interface ChannelerSlabChallengeStage {
    /**
     * @generated from protobuf field: optional uint32 open_time = 3;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannelerSlabChallenge challenge_list = 14;
     */
    challengeList: ChannelerSlabChallenge[];
    /**
     * @generated from protobuf field: optional bool is_open = 7;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ChannelerSlabOneoffDungeon dungeon_info = 13;
     */
    dungeonInfo?: ChannelerSlabOneoffDungeon;
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabBuffSchemeInfo
 */
export interface ChannellerSlabBuffSchemeInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> slot_map = 9;
     */
    slotMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 total_energy = 13;
     */
    totalEnergy?: number;
    /**
     * @generated from protobuf field: optional uint32 self_energy = 15;
     */
    selfEnergy?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabAssistInfo
 */
export interface ChannellerSlabAssistInfo {
    /**
     * @generated from protobuf field: optional uint32 uid = 10;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_level = 12;
     */
    avatarLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 6;
     */
    avatarId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabBuffInfo
 */
export interface ChannellerSlabBuffInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 6;
     */
    mpBuffSchemeInfo?: ChannellerSlabBuffSchemeInfo;
    /**
     * @generated from protobuf field: repeated uint32 buff_id_list = 8;
     */
    buffIdList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 7;
     */
    singleBuffSchemeInfo?: ChannellerSlabBuffSchemeInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 15;
     */
    assistInfoList: ChannellerSlabAssistInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonInfo
 */
export interface ChannellerSlabLoopDungeonInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 7;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 4;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 12;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_first_pass_reward_taken = 9;
     */
    isFirstPassRewardTaken?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 last_condition_id_list = 14;
     */
    lastConditionIdList: number[];
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonStageInfo
 */
export interface ChannellerSlabLoopDungeonStageInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannellerSlabLoopDungeonInfo dungeon_info_list = 15;
     */
    dungeonInfoList: ChannellerSlabLoopDungeonInfo[];
    /**
     * @generated from protobuf field: repeated uint32 taken_reward_index_list = 5;
     */
    takenRewardIndexList: number[];
    /**
     * @generated from protobuf field: optional bool is_open = 11;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 last_difficulty_id = 6;
     */
    lastDifficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 3;
     */
    openTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabActivityDetailInfo
 */
export interface ChannelerSlabActivityDetailInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.ChannellerSlabBuffInfo buff_info = 1;
     */
    buffInfo?: ChannellerSlabBuffInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 7;
     */
    loopDungeonStageInfo?: ChannellerSlabLoopDungeonStageInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannelerSlabChallengeStage stage_list = 15;
     */
    stageList: ChannelerSlabChallengeStage[];
    /**
     * @generated from protobuf field: optional uint32 play_end_time = 3;
     */
    playEndTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify
 */
export interface ChannelerSlabStageActiveChallengeIndexNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 12;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 active_camp_index = 6;
     */
    activeCampIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify.CmdId
 */
export enum ChannelerSlabStageActiveChallengeIndexNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8734;
     */
    CMD_ID = 8734,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannelerSlabStageOneoffDungeonNotify
 */
export interface ChannelerSlabStageOneoffDungeonNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_done = 8;
     */
    isDone?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannelerSlabStageOneoffDungeonNotify.CmdId
 */
export enum ChannelerSlabStageOneoffDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8203;
     */
    CMD_ID = 8203,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabWearBuffReq
 */
export interface ChannellerSlabWearBuffReq {
    /**
     * @generated from protobuf field: optional uint32 buff_id = 3;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional bool is_mp = 5;
     */
    isMp?: boolean;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 13;
     */
    slotId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabWearBuffReq.CmdId
 */
export enum ChannellerSlabWearBuffReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8107;
     */
    CMD_ID = 8107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabWearBuffRsp
 */
export interface ChannellerSlabWearBuffRsp {
    /**
     * @generated from protobuf field: optional uint32 buff_id = 15;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_mp = 9;
     */
    isMp?: boolean;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 8;
     */
    slotId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabWearBuffRsp.CmdId
 */
export enum ChannellerSlabWearBuffRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8600;
     */
    CMD_ID = 8600,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabTakeoffBuffReq
 */
export interface ChannellerSlabTakeoffBuffReq {
    /**
     * @generated from protobuf field: optional bool is_mp = 10;
     */
    isMp?: boolean;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 12;
     */
    slotId?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_id = 9;
     */
    buffId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabTakeoffBuffReq.CmdId
 */
export enum ChannellerSlabTakeoffBuffReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8516;
     */
    CMD_ID = 8516,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabTakeoffBuffRsp
 */
export interface ChannellerSlabTakeoffBuffRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_mp = 13;
     */
    isMp?: boolean;
    /**
     * @generated from protobuf field: optional uint32 buff_id = 14;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional uint32 slot_id = 8;
     */
    slotId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabTakeoffBuffRsp.CmdId
 */
export enum ChannellerSlabTakeoffBuffRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8237;
     */
    CMD_ID = 8237,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonReq
 */
export interface ChannellerSlabEnterLoopDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 point_id = 9;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 10;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 5;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 12;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabEnterLoopDungeonReq.CmdId
 */
export enum ChannellerSlabEnterLoopDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8869;
     */
    CMD_ID = 8869,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonRsp
 */
export interface ChannellerSlabEnterLoopDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 6;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 15;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 3;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabEnterLoopDungeonRsp.CmdId
 */
export enum ChannellerSlabEnterLoopDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8081;
     */
    CMD_ID = 8081,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq
 */
export interface ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 10;
     */
    dungeonIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq.CmdId
 */
export enum ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8589;
     */
    CMD_ID = 8589,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp
 */
export interface ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 8;
     */
    dungeonIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp.CmdId
 */
export enum ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8539;
     */
    CMD_ID = 8539,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq
 */
export interface ChannellerSlabLoopDungeonTakeScoreRewardReq {
    /**
     * @generated from protobuf field: optional uint32 reward_index = 8;
     */
    rewardIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq.CmdId
 */
export enum ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8684;
     */
    CMD_ID = 8684,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp
 */
export interface ChannellerSlabLoopDungeonTakeScoreRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 reward_index = 12;
     */
    rewardIndex?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp.CmdId
 */
export enum ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8433;
     */
    CMD_ID = 8433,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify
 */
export interface ChannellerSlabLoopDungeonChallengeInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 12;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_score = 4;
     */
    challengeScore?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 2;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 3;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 scheme_buff_id_list = 6;
     */
    schemeBuffIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify.CmdId
 */
export enum ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8224;
     */
    CMD_ID = 8224,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq
 */
export interface ChannellerSlabLoopDungeonSelectConditionReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 4;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 3;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 8;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq.CmdId
 */
export enum ChannellerSlabLoopDungeonSelectConditionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8503;
     */
    CMD_ID = 8503,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp
 */
export interface ChannellerSlabLoopDungeonSelectConditionRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 5;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: repeated uint32 condition_id_list = 13;
     */
    conditionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 14;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp.CmdId
 */
export enum ChannellerSlabLoopDungeonSelectConditionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8509;
     */
    CMD_ID = 8509,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabLoopDungeonResultInfo
 */
export interface ChannellerSlabLoopDungeonResultInfo {
    /**
     * @generated from protobuf field: optional bool is_success = 11;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_max_score = 8;
     */
    challengeMaxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_index = 7;
     */
    dungeonIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_in_time_limit = 10;
     */
    isInTimeLimit?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_score = 12;
     */
    challengeScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoReq
 */
export interface ChannellerSlabOneOffDungeonInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoReq.CmdId
 */
export enum ChannellerSlabOneOffDungeonInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8409;
     */
    CMD_ID = 8409,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp
 */
export interface ChannellerSlabOneOffDungeonInfoRsp {
    /**
     * @generated from protobuf field: repeated uint32 scheme_buff_id_list = 3;
     */
    schemeBuffIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp.CmdId
 */
export enum ChannellerSlabOneOffDungeonInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8268;
     */
    CMD_ID = 8268,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify
 */
export interface ChannellerSlabOneOffDungeonInfoNotify {
    /**
     * @generated from protobuf field: repeated uint32 scheme_buff_id_list = 6;
     */
    schemeBuffIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify.CmdId
 */
export enum ChannellerSlabOneOffDungeonInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8729;
     */
    CMD_ID = 8729,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoReq
 */
export interface ChannellerSlabSaveAssistInfoReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8;
     */
    assistInfoList: ChannellerSlabAssistInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabSaveAssistInfoReq.CmdId
 */
export enum ChannellerSlabSaveAssistInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8416;
     */
    CMD_ID = 8416,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoRsp
 */
export interface ChannellerSlabSaveAssistInfoRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8;
     */
    assistInfoList: ChannellerSlabAssistInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabSaveAssistInfoRsp.CmdId
 */
export enum ChannellerSlabSaveAssistInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8932;
     */
    CMD_ID = 8932,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialLevelData
 */
export interface MistTrialLevelData {
    /**
     * @generated from protobuf field: optional uint32 open_time = 1;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 12;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 7;
     */
    levelId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialActivityDetailInfo
 */
export interface MistTrialActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MistTrialLevelData trial_level_data_list = 5;
     */
    trialLevelDataList: MistTrialLevelData[];
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq
 */
export interface MistTrialSelectAvatarAndEnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 4;
     */
    trialId?: number;
    /**
     * @generated from protobuf field: repeated uint32 select_trial_avatar_id_list = 10;
     */
    selectTrialAvatarIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 enter_point_id = 7;
     */
    enterPointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq.CmdId
 */
export enum MistTrialSelectAvatarAndEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8666;
     */
    CMD_ID = 8666,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp
 */
export interface MistTrialSelectAvatarAndEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 1;
     */
    trialId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp.CmdId
 */
export enum MistTrialSelectAvatarAndEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8239;
     */
    CMD_ID = 8239,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialMissionInfo
 */
export interface MistTrialMissionInfo {
    /**
     * @generated from protobuf field: optional uint32 param = 9;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional uint32 watcher_list_id = 13;
     */
    watcherListId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialGetChallengeMissionReq
 */
export interface MistTrialGetChallengeMissionReq {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 9;
     */
    trialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetChallengeMissionReq.CmdId
 */
export enum MistTrialGetChallengeMissionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8893;
     */
    CMD_ID = 8893,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialGetChallengeMissionRsp
 */
export interface MistTrialGetChallengeMissionRsp {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 1;
     */
    trialId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MistTrialMissionInfo mission_info_list = 15;
     */
    missionInfoList: MistTrialMissionInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetChallengeMissionRsp.CmdId
 */
export enum MistTrialGetChallengeMissionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8508;
     */
    CMD_ID = 8508,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialDunegonFailNotify
 */
export interface MistTrialDunegonFailNotify {
    /**
     * @generated from protobuf field: optional int32 dungeon_id = 9;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialDunegonFailNotify.CmdId
 */
export enum MistTrialDunegonFailNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8135;
     */
    CMD_ID = 8135,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq
 */
export interface ChannellerSlabCheckEnterLoopDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq.CmdId
 */
export enum ChannellerSlabCheckEnterLoopDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8745;
     */
    CMD_ID = 8745,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp
 */
export interface ChannellerSlabCheckEnterLoopDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp.CmdId
 */
export enum ChannellerSlabCheckEnterLoopDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8452;
     */
    CMD_ID = 8452,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HideAndSeekMapInfo
 */
export interface HideAndSeekMapInfo {
    /**
     * @generated from protobuf field: repeated uint32 match_lock_reason_list = 11;
     */
    matchLockReasonList: number[];
    /**
     * @generated from protobuf field: optional uint32 id = 7;
     */
    id?: number;
}
/**
 * @generated from protobuf message com.midnights.game.HideAndSeekActivityDetailInfo
 */
export interface HideAndSeekActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.HideAndSeekMapInfo open_map_info_list = 1;
     */
    openMapInfoList: HideAndSeekMapInfo[];
    /**
     * @generated from protobuf field: repeated uint32 chosen_hunter_skill_list = 4;
     */
    chosenHunterSkillList: number[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_map_list = 13;
     */
    unlockMapList: number[];
    /**
     * @generated from protobuf field: repeated uint32 chosen_hider_skill_list = 6;
     */
    chosenHiderSkillList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.HideAndSeekSelectSkillReq
 */
export interface HideAndSeekSelectSkillReq {
    /**
     * @generated from protobuf field: repeated uint32 skill_list = 13;
     */
    skillList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.HideAndSeekSelectSkillReq.CmdId
 */
export enum HideAndSeekSelectSkillReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8183;
     */
    CMD_ID = 8183,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.HideAndSeekSelectSkillRsp
 */
export interface HideAndSeekSelectSkillRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 skill_list = 12;
     */
    skillList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.HideAndSeekSelectSkillRsp.CmdId
 */
export enum HideAndSeekSelectSkillRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8088;
     */
    CMD_ID = 8088,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeScoreRewardReq
 */
export interface ActivityTakeScoreRewardReq {
    /**
     * @generated from protobuf field: optional uint32 reward_config_id = 12;
     */
    rewardConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 9;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeScoreRewardReq.CmdId
 */
export enum ActivityTakeScoreRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8971;
     */
    CMD_ID = 8971,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeScoreRewardRsp
 */
export interface ActivityTakeScoreRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 13;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 reward_config_id = 15;
     */
    rewardConfigId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeScoreRewardRsp.CmdId
 */
export enum ActivityTakeScoreRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8583;
     */
    CMD_ID = 8583,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeAllScoreRewardReq
 */
export interface ActivityTakeAllScoreRewardReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 9;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeAllScoreRewardReq.CmdId
 */
export enum ActivityTakeAllScoreRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8372;
     */
    CMD_ID = 8372,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityTakeAllScoreRewardRsp
 */
export interface ActivityTakeAllScoreRewardRsp {
    /**
     * @generated from protobuf field: repeated uint32 reward_config_list = 14;
     */
    rewardConfigList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 7;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeAllScoreRewardRsp.CmdId
 */
export enum ActivityTakeAllScoreRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8043;
     */
    CMD_ID = 8043,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FindHilichurlDayContentInfo
 */
export interface FindHilichurlDayContentInfo {
    /**
     * @generated from protobuf field: optional uint32 start_time = 1;
     */
    startTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FindHilichurlDetailInfo
 */
export interface FindHilichurlDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.FindHilichurlDayContentInfo day_content_info_list = 1;
     */
    dayContentInfoList: FindHilichurlDayContentInfo[];
    /**
     * @generated from protobuf field: optional uint32 min_open_player_level = 12;
     */
    minOpenPlayerLevel?: number;
    /**
     * @generated from protobuf field: optional bool is_end_quest_accept = 7;
     */
    isEndQuestAccept?: boolean;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 6;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 9;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 player_day_index = 4;
     */
    playerDayIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 day_index = 15;
     */
    dayIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CommonPlayerTipsNotify
 */
export interface CommonPlayerTipsNotify {
    /**
     * @generated from protobuf field: optional uint32 notify_type = 3;
     */
    notifyType?: number;
    /**
     * @generated from protobuf field: repeated string text_map_id_list = 9;
     */
    textMapIdList: string[];
}
/**
 * @generated from protobuf enum com.midnights.game.CommonPlayerTipsNotify.CmdId
 */
export enum CommonPlayerTipsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8466;
     */
    CMD_ID = 8466,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FindHilichurlFinishSecondQuestNotify
 */
export interface FindHilichurlFinishSecondQuestNotify {
    /**
     * @generated from protobuf field: optional uint32 day_index = 11;
     */
    dayIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FindHilichurlFinishSecondQuestNotify.CmdId
 */
export enum FindHilichurlFinishSecondQuestNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8901;
     */
    CMD_ID = 8901,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FindHilichurlAcceptQuestNotify
 */
export interface FindHilichurlAcceptQuestNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.FindHilichurlAcceptQuestNotify.CmdId
 */
export enum FindHilichurlAcceptQuestNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8659;
     */
    CMD_ID = 8659,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeSprintBoatRecord
 */
export interface SummerTimeSprintBoatRecord {
    /**
     * @generated from protobuf field: optional uint32 best_score = 3;
     */
    bestScore?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 13;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional bool is_touched = 7;
     */
    isTouched?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 watcher_id_list = 10;
     */
    watcherIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 group_id = 2;
     */
    groupId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeSprintBoatInfo
 */
export interface SummerTimeSprintBoatInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SummerTimeSprintBoatRecord record_list = 7;
     */
    recordList: SummerTimeSprintBoatRecord[];
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeDetailInfo
 */
export interface SummerTimeDetailInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.SummerTimeStageInfo> stage_map = 3;
     */
    stageMap: {
        [key: number]: SummerTimeStageInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 11;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 13;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.SummerTimeSprintBoatInfo sprint_boat_info = 4;
     */
    sprintBoatInfo?: SummerTimeSprintBoatInfo;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeStageInfo
 */
export interface SummerTimeStageInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 13;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 10;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeFloatSignalPositionNotify
 */
export interface SummerTimeFloatSignalPositionNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 1;
     */
    position?: Vector;
    /**
     * @generated from protobuf field: optional bool is_transfer_anchor = 5;
     */
    isTransferAnchor?: boolean;
    /**
     * @generated from protobuf field: optional uint32 float_signal_id = 7;
     */
    floatSignalId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeFloatSignalPositionNotify.CmdId
 */
export enum SummerTimeFloatSignalPositionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8077;
     */
    CMD_ID = 8077,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeFloatSignalUpdateNotify
 */
export interface SummerTimeFloatSignalUpdateNotify {
    /**
     * @generated from protobuf field: optional bool is_transfer_anchor = 4;
     */
    isTransferAnchor?: boolean;
    /**
     * @generated from protobuf field: optional uint32 float_signal_id = 8;
     */
    floatSignalId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 10;
     */
    position?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeFloatSignalUpdateNotify.CmdId
 */
export enum SummerTimeFloatSignalUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8781;
     */
    CMD_ID = 8781,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeSprintBoatSettleNotify
 */
export interface SummerTimeSprintBoatSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 total_num = 13;
     */
    totalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 12;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 15;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 collect_num = 6;
     */
    collectNum?: number;
    /**
     * @generated from protobuf field: optional uint32 left_time = 8;
     */
    leftTime?: number;
    /**
     * @generated from protobuf field: optional uint32 medal_level = 2;
     */
    medalLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 10;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 7;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatSettleNotify.CmdId
 */
export enum SummerTimeSprintBoatSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8651;
     */
    CMD_ID = 8651,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeSprintBoatRestartReq
 */
export interface SummerTimeSprintBoatRestartReq {
    /**
     * @generated from protobuf field: optional uint32 group_id = 10;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 14;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatRestartReq.CmdId
 */
export enum SummerTimeSprintBoatRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8410;
     */
    CMD_ID = 8410,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeSprintBoatRestartRsp
 */
export interface SummerTimeSprintBoatRestartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 4;
     */
    groupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatRestartRsp.CmdId
 */
export enum SummerTimeSprintBoatRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8356;
     */
    CMD_ID = 8356,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuoyantCombatDailyInfo
 */
export interface BuoyantCombatDailyInfo {
    /**
     * @generated from protobuf field: optional uint32 start_time = 2;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 best_score = 13;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BuoyantCombatDetailInfo
 */
export interface BuoyantCombatDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BuoyantCombatDailyInfo daily_info_list = 8;
     */
    dailyInfoList: BuoyantCombatDailyInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.StartBuoyantCombatGalleryReq
 */
export interface StartBuoyantCombatGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 15;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_level = 13;
     */
    galleryLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartBuoyantCombatGalleryReq.CmdId
 */
export enum StartBuoyantCombatGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8732;
     */
    CMD_ID = 8732,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartBuoyantCombatGalleryRsp
 */
export interface StartBuoyantCombatGalleryRsp {
    /**
     * @generated from protobuf field: optional uint32 gallery_level = 12;
     */
    galleryLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 8;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartBuoyantCombatGalleryRsp.CmdId
 */
export enum StartBuoyantCombatGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8680;
     */
    CMD_ID = 8680,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuoyantCombatSettleInfo
 */
export interface BuoyantCombatSettleInfo {
    /**
     * @generated from protobuf field: optional bool is_new_record = 1;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.BuoyantCombatGallerySettleInfo settle_info = 3;
     */
    settleInfo?: BuoyantCombatGallerySettleInfo;
}
/**
 * @generated from protobuf message com.midnights.game.BuoyantCombatSettleNotify
 */
export interface BuoyantCombatSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 8;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.BuoyantCombatSettleInfo settle_info = 11;
     */
    settleInfo?: BuoyantCombatSettleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.BuoyantCombatSettleNotify.CmdId
 */
export enum BuoyantCombatSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8305;
     */
    CMD_ID = 8305,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetLimitOptimizationNotify
 */
export interface SetLimitOptimizationNotify {
    /**
     * @generated from protobuf field: optional bool is_active = 3;
     */
    isActive?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SetLimitOptimizationNotify.CmdId
 */
export enum SetLimitOptimizationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8851;
     */
    CMD_ID = 8851,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeDungeonInfo
 */
export interface SummerTimeDungeonInfo {
    /**
     * @generated from protobuf field: optional uint32 taken_chest_count = 15;
     */
    takenChestCount?: number;
    /**
     * @generated from protobuf field: optional uint32 total_chest_count = 12;
     */
    totalChestCount?: number;
    /**
     * @generated from protobuf field: optional uint32 taken_shell_count = 14;
     */
    takenShellCount?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 4;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 total_shell_count = 13;
     */
    totalShellCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EchoShellDetailInfo
 */
export interface EchoShellDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SummerTimeDungeonInfo summer_time_dungeon_list = 8;
     */
    summerTimeDungeonList: SummerTimeDungeonInfo[];
    /**
     * @generated from protobuf field: repeated uint32 shell_list = 13;
     */
    shellList: number[];
    /**
     * @generated from protobuf field: repeated uint32 pass_dungeon_list = 4;
     */
    passDungeonList: number[];
    /**
     * @generated from protobuf field: repeated uint32 taken_reward_list = 2;
     */
    takenRewardList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.EchoShellUpdateNotify
 */
export interface EchoShellUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 shell_id = 1;
     */
    shellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EchoShellUpdateNotify.CmdId
 */
export enum EchoShellUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8150;
     */
    CMD_ID = 8150,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EchoShellTakeRewardReq
 */
export interface EchoShellTakeRewardReq {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 10;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EchoShellTakeRewardReq.CmdId
 */
export enum EchoShellTakeRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8114;
     */
    CMD_ID = 8114,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EchoShellTakeRewardRsp
 */
export interface EchoShellTakeRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 6;
     */
    rewardId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EchoShellTakeRewardRsp.CmdId
 */
export enum EchoShellTakeRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8797;
     */
    CMD_ID = 8797,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BounceConjuringChapterInfo
 */
export interface BounceConjuringChapterInfo {
    /**
     * @generated from protobuf field: optional uint32 best_score = 12;
     */
    bestScore?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 9;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 13;
     */
    chapterId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BounceConjuringActivityDetailInfo
 */
export interface BounceConjuringActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BounceConjuringChapterInfo chapter_info_list = 8;
     */
    chapterInfoList: BounceConjuringChapterInfo[];
    /**
     * @generated from protobuf field: optional bool is_content_closed = 12;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 7;
     */
    contentCloseTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BounceConjuringSettleNotify
 */
export interface BounceConjuringSettleNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 14;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.BounceConjuringGallerySettleInfo> settle_info_map = 4;
     */
    settleInfoMap: {
        [key: number]: BounceConjuringGallerySettleInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 total_score = 2;
     */
    totalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 chapter_id = 13;
     */
    chapterId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BounceConjuringSettleNotify.CmdId
 */
export enum BounceConjuringSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8084;
     */
    CMD_ID = 8084,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlitzRushStage
 */
export interface BlitzRushStage {
    /**
     * @generated from protobuf field: optional bool is_open = 13;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 11;
     */
    openTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ParkourLevelInfo
 */
export interface ParkourLevelInfo {
    /**
     * @generated from protobuf field: optional uint32 best_record = 12;
     */
    bestRecord?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 7;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 2;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.BlitzRushActivityDetailInfo
 */
export interface BlitzRushActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.BlitzRushStage stage_list = 10;
     */
    stageList: BlitzRushStage[];
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 14;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 2;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ParkourLevelInfo parkour_level_info_list = 6;
     */
    parkourLevelInfoList: ParkourLevelInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.BlitzRushParkourRestartReq
 */
export interface BlitzRushParkourRestartReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 2;
     */
    groupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlitzRushParkourRestartReq.CmdId
 */
export enum BlitzRushParkourRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8653;
     */
    CMD_ID = 8653,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BlitzRushParkourRestartRsp
 */
export interface BlitzRushParkourRestartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 15;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BlitzRushParkourRestartRsp.CmdId
 */
export enum BlitzRushParkourRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8944;
     */
    CMD_ID = 8944,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChessActivityDetailInfo
 */
export interface ChessActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 level = 4;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional bool is_teach_dungeon_finished = 9;
     */
    isTeachDungeonFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 14;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional uint32 obtained_exp = 8;
     */
    obtainedExp?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 5;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 available_exp = 2;
     */
    availableExp?: number;
    /**
     * @generated from protobuf field: optional uint32 exp = 13;
     */
    exp?: number;
    /**
     * @generated from protobuf field: repeated uint32 finished_map_id_list = 1;
     */
    finishedMapIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 punish_over_time = 3;
     */
    punishOverTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EnterChessDungeonReq
 */
export interface EnterChessDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 map_id = 12;
     */
    mapId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterChessDungeonReq.CmdId
 */
export enum EnterChessDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8191;
     */
    CMD_ID = 8191,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterChessDungeonRsp
 */
export interface EnterChessDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 map_id = 13;
     */
    mapId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterChessDungeonRsp.CmdId
 */
export enum EnterChessDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8592;
     */
    CMD_ID = 8592,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureMapHostInfoNotify
 */
export interface TreasureMapHostInfoNotify {
    /**
     * @generated from protobuf field: repeated uint32 mp_challenge_region_list = 8;
     */
    mpChallengeRegionList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapHostInfoNotify.CmdId
 */
export enum TreasureMapHostInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8681;
     */
    CMD_ID = 8681,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoActivityDetailInfo
 */
export interface SumoActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 11;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.SumoStageData> sumo_stage_map = 13;
     */
    sumoStageMap: {
        [key: number]: SumoStageData;
    };
    /**
     * @generated from protobuf field: optional uint32 last_stage_id = 14;
     */
    lastStageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SumoAvatarInfo
 */
export interface SumoAvatarInfo {
    /**
     * @generated from protobuf field: optional bool is_trial = 2;
     */
    isTrial?: boolean;
    /**
     * @generated from protobuf field: optional uint64 avatar_id = 1;
     */
    avatarId?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.SumoTeamData
 */
export interface SumoTeamData {
    /**
     * @generated from protobuf field: repeated uint32 skill_id_list = 14;
     */
    skillIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoAvatarInfo avatar_info_list = 3;
     */
    avatarInfoList: SumoAvatarInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.SumoStageData
 */
export interface SumoStageData {
    /**
     * @generated from protobuf field: optional uint32 max_score = 1;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 5;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 3;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoTeamData team_list = 7;
     */
    teamList: SumoTeamData[];
    /**
     * @generated from protobuf field: optional bool is_open = 11;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SumoSaveTeamReq
 */
export interface SumoSaveTeamReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 11;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 7;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoTeamData team_list = 12;
     */
    teamList: SumoTeamData[];
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSaveTeamReq.CmdId
 */
export enum SumoSaveTeamReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8313;
     */
    CMD_ID = 8313,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSaveTeamRsp
 */
export interface SumoSaveTeamRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 11;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoTeamData team_list = 13;
     */
    teamList: SumoTeamData[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 10;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSaveTeamRsp.CmdId
 */
export enum SumoSaveTeamRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8319;
     */
    CMD_ID = 8319,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonReq
 */
export interface SumoSelectTeamAndEnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 1;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 4;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoTeamData team_list = 10;
     */
    teamList: SumoTeamData[];
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSelectTeamAndEnterDungeonReq.CmdId
 */
export enum SumoSelectTeamAndEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8215;
     */
    CMD_ID = 8215,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonRsp
 */
export interface SumoSelectTeamAndEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 14;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 12;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoTeamData team_list = 2;
     */
    teamList: SumoTeamData[];
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSelectTeamAndEnterDungeonRsp.CmdId
 */
export enum SumoSelectTeamAndEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8193;
     */
    CMD_ID = 8193,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoDungeonSettleNotify
 */
export interface SumoDungeonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 final_score = 7;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 14;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_elite_monster_num = 15;
     */
    killEliteMonsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_monster_num = 4;
     */
    killMonsterNum?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 5;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoDungeonSettleNotify.CmdId
 */
export enum SumoDungeonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8291;
     */
    CMD_ID = 8291,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoDungeonAvatar
 */
export interface SumoDungeonAvatar {
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 11;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional bool is_avlive = 13;
     */
    isAvlive?: boolean;
    /**
     * @generated from protobuf field: optional bool is_trial = 4;
     */
    isTrial?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SumoDungeonTeam
 */
export interface SumoDungeonTeam {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoDungeonAvatar dungeon_avatar_list = 15;
     */
    dungeonAvatarList: SumoDungeonAvatar[];
}
/**
 * @generated from protobuf message com.midnights.game.SumoEnterDungeonNotify
 */
export interface SumoEnterDungeonNotify {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 15;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11;
     */
    dungeonTeamList: SumoDungeonTeam[];
    /**
     * @generated from protobuf field: optional uint32 no_switch_punish_time = 10;
     */
    noSwitchPunishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 next_valid_switch_time = 13;
     */
    nextValidSwitchTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_team_index = 5;
     */
    curTeamIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoEnterDungeonNotify.CmdId
 */
export enum SumoEnterDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8013;
     */
    CMD_ID = 8013,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSwitchTeamReq
 */
export interface SumoSwitchTeamReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 5;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSwitchTeamReq.CmdId
 */
export enum SumoSwitchTeamReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8351;
     */
    CMD_ID = 8351,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSwitchTeamRsp
 */
export interface SumoSwitchTeamRsp {
    /**
     * @generated from protobuf field: optional uint32 next_valid_switch_time = 7;
     */
    nextValidSwitchTime?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 10;
     */
    dungeonTeamList: SumoDungeonTeam[];
    /**
     * @generated from protobuf field: optional uint32 activity_id = 6;
     */
    activityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_team_index = 11;
     */
    curTeamIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 5;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSwitchTeamRsp.CmdId
 */
export enum SumoSwitchTeamRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8525;
     */
    CMD_ID = 8525,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoLeaveDungeonNotify
 */
export interface SumoLeaveDungeonNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.SumoLeaveDungeonNotify.CmdId
 */
export enum SumoLeaveDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8640;
     */
    CMD_ID = 8640,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoRestartDungeonReq
 */
export interface SumoRestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.SumoRestartDungeonReq.CmdId
 */
export enum SumoRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8612;
     */
    CMD_ID = 8612,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoRestartDungeonRsp
 */
export interface SumoRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 4;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoRestartDungeonRsp.CmdId
 */
export enum SumoRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8214;
     */
    CMD_ID = 8214,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityDisableTransferPointInteractionNotify
 */
export interface ActivityDisableTransferPointInteractionNotify {
    /**
     * @generated from protobuf field: optional bool is_disable = 10;
     */
    isDisable?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Uint32Pair scene_point_pair = 5;
     */
    scenePointPair?: Uint32Pair;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityDisableTransferPointInteractionNotify.CmdId
 */
export enum ActivityDisableTransferPointInteractionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8982;
     */
    CMD_ID = 8982,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SumoSetNoSwitchPunishTimeNotify
 */
export interface SumoSetNoSwitchPunishTimeNotify {
    /**
     * @generated from protobuf field: optional uint32 cur_team_index = 15;
     */
    curTeamIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11;
     */
    dungeonTeamList: SumoDungeonTeam[];
    /**
     * @generated from protobuf field: optional uint32 no_switch_punish_time = 2;
     */
    noSwitchPunishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 next_valid_switch_time = 14;
     */
    nextValidSwitchTime?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 9;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SumoSetNoSwitchPunishTimeNotify.CmdId
 */
export enum SumoSetNoSwitchPunishTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8935;
     */
    CMD_ID = 8935,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MoonfinTrialLevelInfo
 */
export interface MoonfinTrialLevelInfo {
    /**
     * @generated from protobuf field: optional uint32 best_record = 3;
     */
    bestRecord?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 1;
     */
    openTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MoonfinTrialActivityDetailInfo
 */
export interface MoonfinTrialActivityDetailInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.MoonfinTrialLevelInfo> level_info_map = 5;
     */
    levelInfoMap: {
        [key: number]: MoonfinTrialLevelInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 special_fish_count = 11;
     */
    specialFishCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FishingGallerySettleNotify
 */
export interface FishingGallerySettleNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 6;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.FishingGallerySettleInfo settle_info = 13;
     */
    settleInfo?: FishingGallerySettleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.FishingGallerySettleNotify.CmdId
 */
export enum FishingGallerySettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8780;
     */
    CMD_ID = 8780,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteHintPoint
 */
export interface LunaRiteHintPoint {
    /**
     * @generated from protobuf field: optional uint32 area_id = 11;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 index = 7;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.LunaRiteHintPointType type = 2;
     */
    type?: LunaRiteHintPointType;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteAreaInfo
 */
export interface LunaRiteAreaInfo {
    /**
     * @generated from protobuf field: repeated uint32 sacrifice_list = 11;
     */
    sacrificeList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.LunaRiteHintStatusType hint_status = 7;
     */
    hintStatus?: LunaRiteHintStatusType;
    /**
     * @generated from protobuf field: repeated uint32 sacrifice_reward_list = 4;
     */
    sacrificeRewardList: number[];
    /**
     * @generated from protobuf field: optional uint32 area_id = 8;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 6;
     */
    challengeIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteDetailInfo
 */
export interface LunaRiteDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.LunaRiteHintPoint hint_point = 3;
     */
    hintPoint: LunaRiteHintPoint[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.LunaRiteAreaInfo area_info_list = 13;
     */
    areaInfoList: LunaRiteAreaInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteSacrificeReq
 */
export interface LunaRiteSacrificeReq {
    /**
     * @generated from protobuf field: optional uint32 area_id = 15;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 index = 14;
     */
    index?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteSacrificeReq.CmdId
 */
export enum LunaRiteSacrificeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8805;
     */
    CMD_ID = 8805,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteSacrificeRsp
 */
export interface LunaRiteSacrificeRsp {
    /**
     * @generated from protobuf field: optional uint32 area_id = 13;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: repeated uint32 sacrifice_list = 14;
     */
    sacrificeList: number[];
    /**
     * @generated from protobuf field: optional uint32 index = 8;
     */
    index?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteSacrificeRsp.CmdId
 */
export enum LunaRiteSacrificeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8080;
     */
    CMD_ID = 8080,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardReq
 */
export interface LunaRiteTakeSacrificeRewardReq {
    /**
     * @generated from protobuf field: optional uint32 area_id = 11;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 index = 3;
     */
    index?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteTakeSacrificeRewardReq.CmdId
 */
export enum LunaRiteTakeSacrificeRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8045;
     */
    CMD_ID = 8045,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardRsp
 */
export interface LunaRiteTakeSacrificeRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 index = 11;
     */
    index?: number;
    /**
     * @generated from protobuf field: repeated uint32 sacrifice_reward_list = 2;
     */
    sacrificeRewardList: number[];
    /**
     * @generated from protobuf field: optional uint32 sacrifice_reward_index = 14;
     */
    sacrificeRewardIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 area_id = 6;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteTakeSacrificeRewardRsp.CmdId
 */
export enum LunaRiteTakeSacrificeRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8397;
     */
    CMD_ID = 8397,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteHintPointReq
 */
export interface LunaRiteHintPointReq {
    /**
     * @generated from protobuf field: optional uint32 area_id = 13;
     */
    areaId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointReq.CmdId
 */
export enum LunaRiteHintPointReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8195;
     */
    CMD_ID = 8195,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteHintPointRsp
 */
export interface LunaRiteHintPointRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.LunaRiteHintStatusType hint_status = 4;
     */
    hintStatus?: LunaRiteHintStatusType;
    /**
     * @generated from protobuf field: optional uint32 area_id = 5;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.LunaRiteHintPoint hint_point = 9;
     */
    hintPoint: LunaRiteHintPoint[];
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointRsp.CmdId
 */
export enum LunaRiteHintPointRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8765;
     */
    CMD_ID = 8765,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteHintPointRemoveNotify
 */
export interface LunaRiteHintPointRemoveNotify {
    /**
     * @generated from protobuf field: repeated uint32 hint_point_index = 14;
     */
    hintPointIndex: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointRemoveNotify.CmdId
 */
export enum LunaRiteHintPointRemoveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8787;
     */
    CMD_ID = 8787,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteGroupBundleRegisterNotify
 */
export interface LunaRiteGroupBundleRegisterNotify {
    /**
     * @generated from protobuf field: optional uint32 group_link_bundle_id = 11;
     */
    groupLinkBundleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteGroupBundleRegisterNotify.CmdId
 */
export enum LunaRiteGroupBundleRegisterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8465;
     */
    CMD_ID = 8465,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LunaRiteAreaFinishNotify
 */
export interface LunaRiteAreaFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 area_id = 2;
     */
    areaId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteAreaFinishNotify.CmdId
 */
export enum LunaRiteAreaFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8213;
     */
    CMD_ID = 8213,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerActivityDetailInfo
 */
export interface PlantFlowerActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_content_closed = 3;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> wish_flower_num_map = 10;
     */
    wishFlowerNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 today_seed_reward_id = 11;
     */
    todaySeedRewardId?: number;
    /**
     * @generated from protobuf field: optional uint32 day_index = 1;
     */
    dayIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_today_has_awarded = 13;
     */
    isTodayHasAwarded?: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> used_flower_num_map = 7;
     */
    usedFlowerNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetSeedInfoReq
 */
export interface PlantFlowerGetSeedInfoReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 6;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetSeedInfoReq.CmdId
 */
export enum PlantFlowerGetSeedInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8560;
     */
    CMD_ID = 8560,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetSeedInfoRsp
 */
export interface PlantFlowerGetSeedInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 12;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 seed_reward_id = 5;
     */
    seedRewardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetSeedInfoRsp.CmdId
 */
export enum PlantFlowerGetSeedInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8764;
     */
    CMD_ID = 8764,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerTakeSeedRewardReq
 */
export interface PlantFlowerTakeSeedRewardReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 12;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerTakeSeedRewardReq.CmdId
 */
export enum PlantFlowerTakeSeedRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8968;
     */
    CMD_ID = 8968,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerTakeSeedRewardRsp
 */
export interface PlantFlowerTakeSeedRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerTakeSeedRewardRsp.CmdId
 */
export enum PlantFlowerTakeSeedRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8860;
     */
    CMD_ID = 8860,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerSetFlowerWishReq
 */
export interface PlantFlowerSetFlowerWishReq {
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_num_map = 12;
     */
    flowerNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 5;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerSetFlowerWishReq.CmdId
 */
export enum PlantFlowerSetFlowerWishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8547;
     */
    CMD_ID = 8547,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerSetFlowerWishRsp
 */
export interface PlantFlowerSetFlowerWishRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerSetFlowerWishRsp.CmdId
 */
export enum PlantFlowerSetFlowerWishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8910;
     */
    CMD_ID = 8910,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListReq
 */
export interface PlantFlowerGetFriendFlowerWishListReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetFriendFlowerWishListReq.CmdId
 */
export enum PlantFlowerGetFriendFlowerWishListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8126;
     */
    CMD_ID = 8126,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerFriendFlowerWishData
 */
export interface PlantFlowerFriendFlowerWishData {
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 3;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional uint32 uid = 5;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 14;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_num_map = 12;
     */
    flowerNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp
 */
export interface PlantFlowerGetFriendFlowerWishListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 2;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlantFlowerFriendFlowerWishData friend_flower_wish_list = 9;
     */
    friendFlowerWishList: PlantFlowerFriendFlowerWishData[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp.CmdId
 */
export enum PlantFlowerGetFriendFlowerWishListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8511;
     */
    CMD_ID = 8511,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerReq
 */
export interface PlantFlowerGiveFriendFlowerReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 11;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 13;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_num_map = 12;
     */
    flowerNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGiveFriendFlowerReq.CmdId
 */
export enum PlantFlowerGiveFriendFlowerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8846;
     */
    CMD_ID = 8846,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerRsp
 */
export interface PlantFlowerGiveFriendFlowerRsp {
    /**
     * @generated from protobuf field: repeated uint32 limit_flower_list = 5;
     */
    limitFlowerList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 14;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGiveFriendFlowerRsp.CmdId
 */
export enum PlantFlowerGiveFriendFlowerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8386;
     */
    CMD_ID = 8386,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListReq
 */
export interface PlantFlowerGetRecvFlowerListReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetRecvFlowerListReq.CmdId
 */
export enum PlantFlowerGetRecvFlowerListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8270;
     */
    CMD_ID = 8270,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerRecvFlowerData
 */
export interface PlantFlowerRecvFlowerData {
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 13;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional string nickname = 5;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional uint32 uid = 9;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_num_map = 14;
     */
    flowerNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListRsp
 */
export interface PlantFlowerGetRecvFlowerListRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 6;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlantFlowerRecvFlowerData recv_flower_list = 4;
     */
    recvFlowerList: PlantFlowerRecvFlowerData[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetRecvFlowerListRsp.CmdId
 */
export enum PlantFlowerGetRecvFlowerListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8374;
     */
    CMD_ID = 8374,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerHaveRecvFlowerNotify
 */
export interface PlantFlowerHaveRecvFlowerNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerHaveRecvFlowerNotify.CmdId
 */
export enum PlantFlowerHaveRecvFlowerNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8078;
     */
    CMD_ID = 8078,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerReq
 */
export interface PlantFlowerAcceptGiveFlowerReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 2;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 12;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptGiveFlowerReq.CmdId
 */
export enum PlantFlowerAcceptGiveFlowerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8383;
     */
    CMD_ID = 8383,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerAcceptFlowerResultInfo
 */
export interface PlantFlowerAcceptFlowerResultInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> unaccept_flower_num_map = 4;
     */
    unacceptFlowerNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 uid = 7;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> accept_flower_num_map = 10;
     */
    acceptFlowerNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerRsp
 */
export interface PlantFlowerAcceptGiveFlowerRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 15;
     */
    acceptFlowerResultInfo?: PlantFlowerAcceptFlowerResultInfo;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptGiveFlowerRsp.CmdId
 */
export enum PlantFlowerAcceptGiveFlowerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8567;
     */
    CMD_ID = 8567,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq
 */
export interface PlantFlowerAcceptAllGiveFlowerReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 11;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq.CmdId
 */
export enum PlantFlowerAcceptAllGiveFlowerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8808;
     */
    CMD_ID = 8808,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp
 */
export interface PlantFlowerAcceptAllGiveFlowerRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13;
     */
    acceptFlowerResultInfoList: PlantFlowerAcceptFlowerResultInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp.CmdId
 */
export enum PlantFlowerAcceptAllGiveFlowerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8888;
     */
    CMD_ID = 8888,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq
 */
export interface PlantFlowerGetCanGiveFriendFlowerReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 15;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq.CmdId
 */
export enum PlantFlowerGetCanGiveFriendFlowerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8716;
     */
    CMD_ID = 8716,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp
 */
export interface PlantFlowerGetCanGiveFriendFlowerRsp {
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_num_map = 6;
     */
    flowerNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 4;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp.CmdId
 */
export enum PlantFlowerGetCanGiveFriendFlowerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8766;
     */
    CMD_ID = 8766,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationReq
 */
export interface PlantFlowerEditFlowerCombinationReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo flower_combination_info = 10;
     */
    flowerCombinationInfo?: CustomGadgetTreeInfo;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 14;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 9;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerEditFlowerCombinationReq.CmdId
 */
export enum PlantFlowerEditFlowerCombinationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8843;
     */
    CMD_ID = 8843,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationRsp
 */
export interface PlantFlowerEditFlowerCombinationRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 13;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerEditFlowerCombinationRsp.CmdId
 */
export enum PlantFlowerEditFlowerCombinationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8788;
     */
    CMD_ID = 8788,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameRecord
 */
export interface MusicGameRecord {
    /**
     * @generated from protobuf field: optional bool is_unlock = 9;
     */
    isUnlock?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_score = 11;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 max_combo = 6;
     */
    maxCombo?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameActivityDetailInfo
 */
export interface MusicGameActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.UgcMusicBriefInfo ugc_record_list = 4;
     */
    ugcRecordList: UgcMusicBriefInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.UgcMusicBriefInfo ugc_search_list = 7;
     */
    ugcSearchList: UgcMusicBriefInfo[];
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.MusicGameRecord> music_game_record_map = 8;
     */
    musicGameRecordMap: {
        [key: number]: MusicGameRecord;
    };
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameSettleReq
 */
export interface MusicGameSettleReq {
    /**
     * @generated from protobuf field: repeated uint32 button_list = 384;
     */
    buttonList: number[];
    /**
     * @generated from protobuf field: optional uint32 delay = 795;
     */
    delay?: number;
    /**
     * @generated from protobuf field: repeated uint32 note_list = 4;
     */
    noteList: number[];
    /**
     * @generated from protobuf field: optional uint32 score_rating = 15;
     */
    scoreRating?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 9;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 6;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 restart_times = 13;
     */
    restartTimes?: number;
    /**
     * @generated from protobuf field: optional bool is_custom_delay = 422;
     */
    isCustomDelay?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_combo = 5;
     */
    maxCombo?: number;
    /**
     * @generated from protobuf field: optional uint32 is_full_combo = 1058;
     */
    isFullCombo?: number;
    /**
     * @generated from protobuf field: optional float speed = 409;
     */
    speed?: number;
    /**
     * @generated from protobuf field: optional bool is_save_score = 3;
     */
    isSaveScore?: boolean;
    /**
     * @generated from protobuf field: optional uint32 combo = 1;
     */
    combo?: number;
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 7;
     */
    musicBasicId?: number;
    /**
     * @generated from protobuf field: optional uint32 star_rating = 2;
     */
    starRating?: number;
    /**
     * @generated from protobuf field: optional uint32 volume = 1953;
     */
    volume?: number;
    /**
     * @generated from protobuf field: optional uint32 correct_hit = 14;
     */
    correctHit?: number;
    /**
     * @generated from protobuf field: optional bool is_custom_speed = 1285;
     */
    isCustomSpeed?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MusicGameSettleReq.CmdId
 */
export enum MusicGameSettleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8892;
     */
    CMD_ID = 8892,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameSettleRsp
 */
export interface MusicGameSettleRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 5;
     */
    musicBasicId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 6;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional bool is_unlock_next_level = 2;
     */
    isUnlockNextLevel?: boolean;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 10;
     */
    ugcGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.MusicGameSettleRsp.CmdId
 */
export enum MusicGameSettleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8673;
     */
    CMD_ID = 8673,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameStartReq
 */
export interface MusicGameStartReq {
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 2;
     */
    musicBasicId?: number;
    /**
     * @generated from protobuf field: optional bool is_save_score = 11;
     */
    isSaveScore?: boolean;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 3;
     */
    ugcGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.MusicGameStartReq.CmdId
 */
export enum MusicGameStartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8406;
     */
    CMD_ID = 8406,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MusicGameStartRsp
 */
export interface MusicGameStartRsp {
    /**
     * @generated from protobuf field: optional uint32 music_basic_id = 4;
     */
    musicBasicId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 15;
     */
    ugcGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.MusicGameStartRsp.CmdId
 */
export enum MusicGameStartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8326;
     */
    CMD_ID = 8326,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueAvatarInfo
 */
export interface RogueAvatarInfo {
    /**
     * @generated from protobuf field: optional bool is_onstage = 5;
     */
    isOnstage?: boolean;
    /**
     * @generated from protobuf field: optional bool is_alive = 3;
     */
    isAlive?: boolean;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 14;
     */
    avatarId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RogueShowAvatarTeamInfo
 */
export interface RogueShowAvatarTeamInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueAvatarInfo avatar_list = 12;
     */
    avatarList: RogueAvatarInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeShikigamiRecord
 */
export interface RoguelikeShikigamiRecord {
    /**
     * @generated from protobuf field: optional uint32 id = 6;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 3;
     */
    level?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RogueEffectRecord
 */
export interface RogueEffectRecord {
    /**
     * @generated from protobuf field: optional uint32 source_id = 6;
     */
    sourceId?: number;
    /**
     * @generated from protobuf field: repeated uint32 extra_param_list = 9;
     */
    extraParamList: number[];
    /**
     * @generated from protobuf field: optional uint32 count = 10;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional bool is_new = 5;
     */
    isNew?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeRuneRecord
 */
export interface RoguelikeRuneRecord {
    /**
     * @generated from protobuf field: optional uint32 left_count = 14;
     */
    leftCount?: number;
    /**
     * @generated from protobuf field: optional uint32 rune_id = 6;
     */
    runeId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_count = 4;
     */
    maxCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RogueStageInfo
 */
export interface RogueStageInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueShowAvatarTeamInfo avatar_team = 2;
     */
    avatarTeam?: RogueShowAvatarTeamInfo;
    /**
     * @generated from protobuf field: optional bool is_passed = 5;
     */
    isPassed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 revise_monster_level = 205;
     */
    reviseMonsterLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6;
     */
    runeRecordList: RoguelikeRuneRecord[];
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_level = 4;
     */
    curLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 cached_coin_c_num = 1409;
     */
    cachedCoinCNum?: number;
    /**
     * @generated from protobuf field: optional bool is_taken_reward = 11;
     */
    isTakenReward?: boolean;
    /**
     * @generated from protobuf field: optional bool is_in_combat = 12;
     */
    isInCombat?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cached_coin_b_num = 14;
     */
    cachedCoinBNum?: number;
    /**
     * @generated from protobuf field: optional uint32 explore_cell_num = 15;
     */
    exploreCellNum?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_c_num = 8;
     */
    coinCNum?: number;
    /**
     * @generated from protobuf field: optional bool is_explored = 9;
     */
    isExplored?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_passed_level = 3;
     */
    maxPassedLevel?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeDungeonActivityDetailInfo
 */
export interface RoguelikeDungeonActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueStageInfo stage_list = 8;
     */
    stageList: RogueStageInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RoguelikeShikigamiRecord shikigami_list = 5;
     */
    shikigamiList: RoguelikeShikigamiRecord[];
    /**
     * @generated from protobuf field: repeated uint32 equipped_rune_list = 14;
     */
    equippedRuneList: number[];
    /**
     * @generated from protobuf field: optional uint32 content_close_time = 6;
     */
    contentCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 10;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 rune_list = 2;
     */
    runeList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaReq
 */
export interface DoRoguelikeDungeonCardGachaReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 13;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 6;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DoRoguelikeDungeonCardGachaReq.CmdId
 */
export enum DoRoguelikeDungeonCardGachaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8148;
     */
    CMD_ID = 8148,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaRsp
 */
export interface DoRoguelikeDungeonCardGachaRsp {
    /**
     * @generated from protobuf field: optional bool is_can_refresh = 8;
     */
    isCanRefresh?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 card_list = 15;
     */
    cardList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DoRoguelikeDungeonCardGachaRsp.CmdId
 */
export enum DoRoguelikeDungeonCardGachaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8472;
     */
    CMD_ID = 8472,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RefreshRoguelikeDungeonCardReq
 */
export interface RefreshRoguelikeDungeonCardReq {
}
/**
 * @generated from protobuf enum com.midnights.game.RefreshRoguelikeDungeonCardReq.CmdId
 */
export enum RefreshRoguelikeDungeonCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8279;
     */
    CMD_ID = 8279,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RefreshRoguelikeDungeonCardRsp
 */
export interface RefreshRoguelikeDungeonCardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 res_card_list = 9;
     */
    resCardList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.RefreshRoguelikeDungeonCardRsp.CmdId
 */
export enum RefreshRoguelikeDungeonCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8349;
     */
    CMD_ID = 8349,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectRoguelikeDungeonCardReq
 */
export interface SelectRoguelikeDungeonCardReq {
    /**
     * @generated from protobuf field: optional uint32 card_id = 13;
     */
    cardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectRoguelikeDungeonCardReq.CmdId
 */
export enum SelectRoguelikeDungeonCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8085;
     */
    CMD_ID = 8085,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SelectRoguelikeDungeonCardRsp
 */
export interface SelectRoguelikeDungeonCardRsp {
    /**
     * @generated from protobuf field: optional uint32 card_id = 9;
     */
    cardId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SelectRoguelikeDungeonCardRsp.CmdId
 */
export enum SelectRoguelikeDungeonCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8138;
     */
    CMD_ID = 8138,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EquipRoguelikeRuneReq
 */
export interface EquipRoguelikeRuneReq {
    /**
     * @generated from protobuf field: repeated uint32 rune_list = 3;
     */
    runeList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.EquipRoguelikeRuneReq.CmdId
 */
export enum EquipRoguelikeRuneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8306;
     */
    CMD_ID = 8306,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EquipRoguelikeRuneRsp
 */
export interface EquipRoguelikeRuneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 rune_list = 1;
     */
    runeList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.EquipRoguelikeRuneRsp.CmdId
 */
export enum EquipRoguelikeRuneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8705;
     */
    CMD_ID = 8705,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TriggerRoguelikeRuneReq
 */
export interface TriggerRoguelikeRuneReq {
    /**
     * @generated from protobuf field: optional uint32 rune_id = 8;
     */
    runeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeRuneReq.CmdId
 */
export enum TriggerRoguelikeRuneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8463;
     */
    CMD_ID = 8463,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TriggerRoguelikeRuneRsp
 */
export interface TriggerRoguelikeRuneRsp {
    /**
     * @generated from protobuf field: optional uint32 available_count = 4;
     */
    availableCount?: number;
    /**
     * @generated from protobuf field: optional uint32 rune_id = 14;
     */
    runeId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeRuneRsp.CmdId
 */
export enum TriggerRoguelikeRuneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8065;
     */
    CMD_ID = 8065,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TriggerRoguelikeCurseNotify
 */
export interface TriggerRoguelikeCurseNotify {
    /**
     * @generated from protobuf field: repeated uint32 effect_param_list = 14;
     */
    effectParamList: number[];
    /**
     * @generated from protobuf field: optional uint32 curse_group_id = 9;
     */
    curseGroupId?: number;
    /**
     * @generated from protobuf field: optional bool is_trigger_curse = 13;
     */
    isTriggerCurse?: boolean;
    /**
     * @generated from protobuf field: optional uint32 curse_level = 3;
     */
    curseLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeCurseNotify.CmdId
 */
export enum TriggerRoguelikeCurseNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8412;
     */
    CMD_ID = 8412,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpgradeRoguelikeShikigamiReq
 */
export interface UpgradeRoguelikeShikigamiReq {
    /**
     * @generated from protobuf field: optional uint32 upgrade_level = 6;
     */
    upgradeLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 shikigami_group_id = 15;
     */
    shikigamiGroupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UpgradeRoguelikeShikigamiReq.CmdId
 */
export enum UpgradeRoguelikeShikigamiReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8151;
     */
    CMD_ID = 8151,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpgradeRoguelikeShikigamiRsp
 */
export interface UpgradeRoguelikeShikigamiRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 shikigami_group_id = 14;
     */
    shikigamiGroupId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_level = 4;
     */
    curLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UpgradeRoguelikeShikigamiRsp.CmdId
 */
export enum UpgradeRoguelikeShikigamiRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8966;
     */
    CMD_ID = 8966,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq
 */
export interface RoguelikeSelectAvatarAndEnterDungeonReq {
    /**
     * @generated from protobuf field: repeated uint64 onstage_avatar_guid_list = 14;
     */
    onstageAvatarGuidList: bigint[];
    /**
     * @generated from protobuf field: optional uint32 stage_id = 4;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint64 backstage_avatar_guid_list = 11;
     */
    backstageAvatarGuidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq.CmdId
 */
export enum RoguelikeSelectAvatarAndEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8457;
     */
    CMD_ID = 8457,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp
 */
export interface RoguelikeSelectAvatarAndEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp.CmdId
 */
export enum RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8538;
     */
    CMD_ID = 8538,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeGiveUpReq
 */
export interface RoguelikeGiveUpReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeGiveUpReq.CmdId
 */
export enum RoguelikeGiveUpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8660;
     */
    CMD_ID = 8660,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeGiveUpRsp
 */
export interface RoguelikeGiveUpRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf oneof: info
     */
    info: {
        oneofKind: "settleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.RoguelikeDungeonSettleInfo settle_info = 8;
         */
        settleInfo: RoguelikeDungeonSettleInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeGiveUpRsp.CmdId
 */
export enum RoguelikeGiveUpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8139;
     */
    CMD_ID = 8139,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardReq
 */
export interface RoguelikeTakeStageFirstPassRewardReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeTakeStageFirstPassRewardReq.CmdId
 */
export enum RoguelikeTakeStageFirstPassRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8421;
     */
    CMD_ID = 8421,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp
 */
export interface RoguelikeTakeStageFirstPassRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 14;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp.CmdId
 */
export enum RoguelikeTakeStageFirstPassRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8552;
     */
    CMD_ID = 8552,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardReq
 */
export interface GiveUpRoguelikeDungeonCardReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GiveUpRoguelikeDungeonCardReq.CmdId
 */
export enum GiveUpRoguelikeDungeonCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8353;
     */
    CMD_ID = 8353,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardRsp
 */
export interface GiveUpRoguelikeDungeonCardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GiveUpRoguelikeDungeonCardRsp.CmdId
 */
export enum GiveUpRoguelikeDungeonCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8497;
     */
    CMD_ID = 8497,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueCellInfo
 */
export interface RogueCellInfo {
    /**
     * @generated from protobuf field: optional uint32 cell_config_id = 14;
     */
    cellConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 4;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 9;
     */
    cellId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_type = 13;
     */
    cellType?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueCellState state = 10;
     */
    state?: RogueCellState;
}
/**
 * @generated from protobuf message com.midnights.game.EnterRoguelikeDungeonNotify
 */
export interface EnterRoguelikeDungeonNotify {
    /**
     * @generated from protobuf field: optional bool is_mist_clear = 14;
     */
    isMistClear?: boolean;
    /**
     * @generated from protobuf field: optional uint32 dungeon_weight_config_id = 2;
     */
    dungeonWeightConfigId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6;
     */
    runeRecordList: RoguelikeRuneRecord[];
    /**
     * @generated from protobuf field: repeated uint64 onstage_avatar_guid_list = 9;
     */
    onstageAvatarGuidList: bigint[];
    /**
     * @generated from protobuf field: optional bool is_first_enter = 205;
     */
    isFirstEnter?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 explored_cell_list = 3;
     */
    exploredCellList: number[];
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.RogueCellInfo> cell_info_map = 11;
     */
    cellInfoMap: {
        [key: number]: RogueCellInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 1;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 refresh_cost_item_count = 1999;
     */
    refreshCostItemCount?: number;
    /**
     * @generated from protobuf field: optional float bonus_resource_prop = 13;
     */
    bonusResourceProp?: number;
    /**
     * @generated from protobuf field: optional uint32 revise_monster_level = 1541;
     */
    reviseMonsterLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint64 backstage_avatar_guid_list = 10;
     */
    backstageAvatarGuidList: bigint[];
    /**
     * @generated from protobuf field: optional uint32 cur_cell_id = 12;
     */
    curCellId?: number;
    /**
     * @generated from protobuf field: optional uint32 refresh_cost_item_id = 7;
     */
    refreshCostItemId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_level = 8;
     */
    curLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterRoguelikeDungeonNotify.CmdId
 */
export enum EnterRoguelikeDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8652;
     */
    CMD_ID = 8652,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueEliteCellChallengeReq
 */
export interface StartRogueEliteCellChallengeReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueEliteCellDifficultyType difficulty = 1;
     */
    difficulty?: RogueEliteCellDifficultyType;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 11;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 4;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueEliteCellChallengeReq.CmdId
 */
export enum StartRogueEliteCellChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8242;
     */
    CMD_ID = 8242,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueEliteCellChallengeRsp
 */
export interface StartRogueEliteCellChallengeRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 12;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 9;
     */
    cellId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueEliteCellChallengeRsp.CmdId
 */
export enum StartRogueEliteCellChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8958;
     */
    CMD_ID = 8958,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueNormalCellChallengeReq
 */
export interface StartRogueNormalCellChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 3;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 8;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueNormalCellChallengeReq.CmdId
 */
export enum StartRogueNormalCellChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8205;
     */
    CMD_ID = 8205,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueNormalCellChallengeRsp
 */
export interface StartRogueNormalCellChallengeRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 10;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 2;
     */
    cellId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueNormalCellChallengeRsp.CmdId
 */
export enum StartRogueNormalCellChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8036;
     */
    CMD_ID = 8036,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueCellUpdateNotify
 */
export interface RogueCellUpdateNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueCellInfo cell_info = 7;
     */
    cellInfo?: RogueCellInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueCellUpdateNotify.CmdId
 */
export enum RogueCellUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8642;
     */
    CMD_ID = 8642,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDungeonPlayerCellChangeNotify
 */
export interface RogueDungeonPlayerCellChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 old_cell_id = 10;
     */
    oldCellId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 7;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDungeonPlayerCellChangeNotify.CmdId
 */
export enum RogueDungeonPlayerCellChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8347;
     */
    CMD_ID = 8347,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueHealAvatarsReq
 */
export interface RogueHealAvatarsReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 1;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 3;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueHealAvatarsReq.CmdId
 */
export enum RogueHealAvatarsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8947;
     */
    CMD_ID = 8947,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueHealAvatarsRsp
 */
export interface RogueHealAvatarsRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 10;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 14;
     */
    cellId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueHealAvatarsRsp.CmdId
 */
export enum RogueHealAvatarsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8949;
     */
    CMD_ID = 8949,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueResumeDungeonReq
 */
export interface RogueResumeDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueResumeDungeonReq.CmdId
 */
export enum RogueResumeDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8795;
     */
    CMD_ID = 8795,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueResumeDungeonRsp
 */
export interface RogueResumeDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueResumeDungeonRsp.CmdId
 */
export enum RogueResumeDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8647;
     */
    CMD_ID = 8647,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClearRoguelikeCurseNotify
 */
export interface ClearRoguelikeCurseNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> clear_curse_map = 10;
     */
    clearCurseMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional bool is_clear_all = 11;
     */
    isClearAll?: boolean;
    /**
     * @generated from protobuf field: optional uint32 card_id = 8;
     */
    cardId?: number;
    /**
     * @generated from protobuf field: optional bool is_curse_all_clear = 1;
     */
    isCurseAllClear?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ClearRoguelikeCurseNotify.CmdId
 */
export enum ClearRoguelikeCurseNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8207;
     */
    CMD_ID = 8207,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeCardGachaNotify
 */
export interface RoguelikeCardGachaNotify {
    /**
     * @generated from protobuf field: repeated uint32 card_list = 10;
     */
    cardList: number[];
    /**
     * @generated from protobuf field: optional bool is_can_refresh = 11;
     */
    isCanRefresh?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeCardGachaNotify.CmdId
 */
export enum RoguelikeCardGachaNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8925;
     */
    CMD_ID = 8925,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueSwitchAvatarReq
 */
export interface RogueSwitchAvatarReq {
    /**
     * @generated from protobuf field: optional uint32 cell_id = 15;
     */
    cellId?: number;
    /**
     * @generated from protobuf field: repeated uint64 onstage_avatar_guid_list = 3;
     */
    onstageAvatarGuidList: bigint[];
    /**
     * @generated from protobuf field: optional uint64 cur_avatar_guid = 11;
     */
    curAvatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 6;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueSwitchAvatarReq.CmdId
 */
export enum RogueSwitchAvatarReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8201;
     */
    CMD_ID = 8201,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueSwitchAvatarRsp
 */
export interface RogueSwitchAvatarRsp {
    /**
     * @generated from protobuf field: optional uint64 cur_avatar_guid = 4;
     */
    curAvatarGuid?: bigint;
    /**
     * @generated from protobuf field: repeated uint64 backstage_avatar_guid_list = 8;
     */
    backstageAvatarGuidList: bigint[];
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 14;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_id = 3;
     */
    cellId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint64 onstage_avatar_guid_list = 9;
     */
    onstageAvatarGuidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.RogueSwitchAvatarRsp.CmdId
 */
export enum RogueSwitchAvatarRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8915;
     */
    CMD_ID = 8915,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DisableRoguelikeTrapNotify
 */
export interface DisableRoguelikeTrapNotify {
    /**
     * @generated from protobuf field: optional uint32 card_id = 13;
     */
    cardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DisableRoguelikeTrapNotify.CmdId
 */
export enum DisableRoguelikeTrapNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8259;
     */
    CMD_ID = 8259,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeRuneRecordUpdateNotify
 */
export interface RoguelikeRuneRecordUpdateNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 11;
     */
    runeRecordList: RoguelikeRuneRecord[];
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeRuneRecordUpdateNotify.CmdId
 */
export enum RoguelikeRuneRecordUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8973;
     */
    CMD_ID = 8973,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeMistClearNotify
 */
export interface RoguelikeMistClearNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeMistClearNotify.CmdId
 */
export enum RoguelikeMistClearNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8324;
     */
    CMD_ID = 8324,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeEffectDataNotify
 */
export interface RoguelikeEffectDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueEffectRecord curse_list = 7;
     */
    curseList: RogueEffectRecord[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueEffectRecord card_list = 4;
     */
    cardList: RogueEffectRecord[];
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectDataNotify.CmdId
 */
export enum RoguelikeEffectDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8222;
     */
    CMD_ID = 8222,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeEffectViewReq
 */
export interface RoguelikeEffectViewReq {
    /**
     * @generated from protobuf field: repeated uint32 view_curse_list = 10;
     */
    viewCurseList: number[];
    /**
     * @generated from protobuf field: repeated uint32 view_card_list = 2;
     */
    viewCardList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectViewReq.CmdId
 */
export enum RoguelikeEffectViewReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8528;
     */
    CMD_ID = 8528,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeEffectViewRsp
 */
export interface RoguelikeEffectViewRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectViewRsp.CmdId
 */
export enum RoguelikeEffectViewRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8639;
     */
    CMD_ID = 8639,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeResourceBonusPropUpdateNotify
 */
export interface RoguelikeResourceBonusPropUpdateNotify {
    /**
     * @generated from protobuf field: optional float bonus_resource_prop = 12;
     */
    bonusResourceProp?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeResourceBonusPropUpdateNotify.CmdId
 */
export enum RoguelikeResourceBonusPropUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8555;
     */
    CMD_ID = 8555,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeSettleCoinInfo
 */
export interface RoguelikeSettleCoinInfo {
    /**
     * @generated from protobuf field: optional uint32 coin_c = 8;
     */
    coinC?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_b = 10;
     */
    coinB?: number;
    /**
     * @generated from protobuf field: optional uint32 cell_num = 1;
     */
    cellNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeDungeonSettleInfo
 */
export interface RoguelikeDungeonSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 5;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_final_level = 15;
     */
    isFinalLevel?: boolean;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3;
     */
    finishedChallengeCellNumMap: {
        [key: number]: RoguelikeSettleCoinInfo;
    };
    /**
     * @generated from protobuf field: optional bool is_coin_c_reach_limit = 13;
     */
    isCoinCReachLimit?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_level = 9;
     */
    curLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 total_coin_b_num = 6;
     */
    totalCoinBNum?: number;
    /**
     * @generated from protobuf field: optional uint32 total_coin_c_num = 10;
     */
    totalCoinCNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RoguelikeRefreshCardCostUpdateNotify
 */
export interface RoguelikeRefreshCardCostUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 item_count = 5;
     */
    itemCount?: number;
    /**
     * @generated from protobuf field: optional uint32 item_id = 1;
     */
    itemId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeRefreshCardCostUpdateNotify.CmdId
 */
export enum RoguelikeRefreshCardCostUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8927;
     */
    CMD_ID = 8927,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DigMarkPoint
 */
export interface DigMarkPoint {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 1;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 bundle_id = 13;
     */
    bundleId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 3;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.DigActivityDetailInfo
 */
export interface DigActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated uint32 stage_id_list = 15;
     */
    stageIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11;
     */
    digMarkPointList: DigMarkPoint[];
    /**
     * @generated from protobuf field: optional uint32 stage_id = 8;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DigActivityMarkPointChangeNotify
 */
export interface DigActivityMarkPointChangeNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11;
     */
    digMarkPointList: DigMarkPoint[];
}
/**
 * @generated from protobuf enum com.midnights.game.DigActivityMarkPointChangeNotify.CmdId
 */
export enum DigActivityMarkPointChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8109;
     */
    CMD_ID = 8109,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DigActivityChangeGadgetStateReq
 */
export interface DigActivityChangeGadgetStateReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 10;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DigActivityChangeGadgetStateReq.CmdId
 */
export enum DigActivityChangeGadgetStateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8464;
     */
    CMD_ID = 8464,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DigActivityChangeGadgetStateRsp
 */
export interface DigActivityChangeGadgetStateRsp {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 15;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DigActivityChangeGadgetStateRsp.CmdId
 */
export enum DigActivityChangeGadgetStateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8430;
     */
    CMD_ID = 8430,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HachiActivityDetailInfo
 */
export interface HachiActivityDetailInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.HachiStageInfo> stage_map = 6;
     */
    stageMap: {
        [key: number]: HachiStageInfo;
    };
}
/**
 * @generated from protobuf message com.midnights.game.HachiStageInfo
 */
export interface HachiStageInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 8;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional bool is_finished = 12;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 5;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 14;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampStageInfo
 */
export interface WinterCampStageInfo {
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 12;
     */
    curProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 6;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 8;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_finished = 10;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 total_progress = 9;
     */
    totalProgress?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 5;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampRaceStageInfo
 */
export interface WinterCampRaceStageInfo {
    /**
     * @generated from protobuf field: optional uint32 open_time = 5;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 14;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 max_score = 2;
     */
    maxScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampActivityDetailInfo
 */
export interface WinterCampActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WinterCampRaceStageInfo race_info_list = 9;
     */
    raceInfoList: WinterCampRaceStageInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampStageInfo battle_info = 10;
     */
    battleInfo?: WinterCampStageInfo;
    /**
     * @generated from protobuf field: repeated uint32 wish_id_list = 8;
     */
    wishIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 battle_taken_reward_list = 14;
     */
    battleTakenRewardList: number[];
    /**
     * @generated from protobuf field: repeated uint32 explore_taken_reward_list = 6;
     */
    exploreTakenRewardList: number[];
    /**
     * @generated from protobuf field: optional bool is_content_closed = 15;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampStageInfo explore_info = 11;
     */
    exploreInfo?: WinterCampStageInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam used_item_list = 2;
     */
    usedItemList: ItemParam[];
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampStageInfoChangeNotify
 */
export interface WinterCampStageInfoChangeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampStageInfo explore_info = 12;
     */
    exploreInfo?: WinterCampStageInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampStageInfo battle_info = 4;
     */
    battleInfo?: WinterCampStageInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampStageInfoChangeNotify.CmdId
 */
export enum WinterCampStageInfoChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8154;
     */
    CMD_ID = 8154,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampRaceScoreNotify
 */
export interface WinterCampRaceScoreNotify {
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 14;
     */
    maxScore?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampRaceScoreNotify.CmdId
 */
export enum WinterCampRaceScoreNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8149;
     */
    CMD_ID = 8149,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGiveFriendItemReq
 */
export interface WinterCampGiveFriendItemReq {
    /**
     * @generated from protobuf field: optional uint32 uid = 12;
     */
    uid?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 11;
     */
    itemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGiveFriendItemReq.CmdId
 */
export enum WinterCampGiveFriendItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8572;
     */
    CMD_ID = 8572,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGiveFriendItemRsp
 */
export interface WinterCampGiveFriendItemRsp {
    /**
     * @generated from protobuf field: repeated uint32 limit_item_id_list = 11;
     */
    limitItemIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGiveFriendItemRsp.CmdId
 */
export enum WinterCampGiveFriendItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8264;
     */
    CMD_ID = 8264,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampSetWishListReq
 */
export interface WinterCampSetWishListReq {
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 4;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampSetWishListReq.CmdId
 */
export enum WinterCampSetWishListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8753;
     */
    CMD_ID = 8753,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampSetWishListRsp
 */
export interface WinterCampSetWishListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 7;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampSetWishListRsp.CmdId
 */
export enum WinterCampSetWishListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8281;
     */
    CMD_ID = 8281,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampFriendWishData
 */
export interface WinterCampFriendWishData {
    /**
     * @generated from protobuf field: optional string nickname = 14;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional uint32 uid = 12;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 5;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 9;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetFriendWishListReq
 */
export interface WinterCampGetFriendWishListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetFriendWishListReq.CmdId
 */
export enum WinterCampGetFriendWishListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8946;
     */
    CMD_ID = 8946,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetFriendWishListRsp
 */
export interface WinterCampGetFriendWishListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.WinterCampFriendWishData wish_data_list = 5;
     */
    wishDataList: WinterCampFriendWishData[];
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetFriendWishListRsp.CmdId
 */
export enum WinterCampGetFriendWishListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8937;
     */
    CMD_ID = 8937,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampRecvItemNotify
 */
export interface WinterCampRecvItemNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampRecvItemData recv_item_data = 14;
     */
    recvItemData?: WinterCampRecvItemData;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampRecvItemNotify.CmdId
 */
export enum WinterCampRecvItemNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8580;
     */
    CMD_ID = 8580,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampAcceptItemResultInfo
 */
export interface WinterCampAcceptItemResultInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam accept_item_list = 2;
     */
    acceptItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 uid = 6;
     */
    uid?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam unaccept_item_list = 9;
     */
    unacceptItemList: ItemParam[];
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampAcceptGiveItemReq
 */
export interface WinterCampAcceptGiveItemReq {
    /**
     * @generated from protobuf field: optional uint32 uid = 11;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptGiveItemReq.CmdId
 */
export enum WinterCampAcceptGiveItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8387;
     */
    CMD_ID = 8387,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampAcceptGiveItemRsp
 */
export interface WinterCampAcceptGiveItemRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 3;
     */
    acceptItemResultInfo?: WinterCampAcceptItemResultInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptGiveItemRsp.CmdId
 */
export enum WinterCampAcceptGiveItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8185;
     */
    CMD_ID = 8185,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampAcceptAllGiveItemReq
 */
export interface WinterCampAcceptAllGiveItemReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptAllGiveItemReq.CmdId
 */
export enum WinterCampAcceptAllGiveItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 9000;
     */
    CMD_ID = 9000,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampAcceptAllGiveItemRsp
 */
export interface WinterCampAcceptAllGiveItemRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 14;
     */
    acceptItemResultInfo: WinterCampAcceptItemResultInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptAllGiveItemRsp.CmdId
 */
export enum WinterCampAcceptAllGiveItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8626;
     */
    CMD_ID = 8626,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemReq
 */
export interface WinterCampGetCanGiveFriendItemReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetCanGiveFriendItemReq.CmdId
 */
export enum WinterCampGetCanGiveFriendItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8964;
     */
    CMD_ID = 8964,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemRsp
 */
export interface WinterCampGetCanGiveFriendItemRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 8;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetCanGiveFriendItemRsp.CmdId
 */
export enum WinterCampGetCanGiveFriendItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8357;
     */
    CMD_ID = 8357,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampRecvItemData
 */
export interface WinterCampRecvItemData {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 2;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 uid = 8;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 1;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional string nickname = 12;
     */
    nickname?: string;
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetRecvItemListReq
 */
export interface WinterCampGetRecvItemListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetRecvItemListReq.CmdId
 */
export enum WinterCampGetRecvItemListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8143;
     */
    CMD_ID = 8143,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampGetRecvItemListRsp
 */
export interface WinterCampGetRecvItemListRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WinterCampRecvItemData recv_item_data_list = 8;
     */
    recvItemDataList: WinterCampRecvItemData[];
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetRecvItemListRsp.CmdId
 */
export enum WinterCampGetRecvItemListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8423;
     */
    CMD_ID = 8423,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampEditSnowmanCombinationReq
 */
export interface WinterCampEditSnowmanCombinationReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 9;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo combination_info = 6;
     */
    combinationInfo?: CustomGadgetTreeInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampEditSnowmanCombinationReq.CmdId
 */
export enum WinterCampEditSnowmanCombinationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8144;
     */
    CMD_ID = 8144,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampEditSnowmanCombinationRsp
 */
export interface WinterCampEditSnowmanCombinationRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampEditSnowmanCombinationRsp.CmdId
 */
export enum WinterCampEditSnowmanCombinationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8142;
     */
    CMD_ID = 8142,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTriathlonSettleNotify
 */
export interface WinterCampTriathlonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 limited_coin = 9;
     */
    limitedCoin?: number;
    /**
     * @generated from protobuf field: optional uint32 normal_coin = 2;
     */
    normalCoin?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 7;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional bool is_success = 3;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 remain_time = 4;
     */
    remainTime?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 11;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 race_id = 15;
     */
    raceId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonSettleNotify.CmdId
 */
export enum WinterCampTriathlonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8342;
     */
    CMD_ID = 8342,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTakeExploreRewardReq
 */
export interface WinterCampTakeExploreRewardReq {
    /**
     * @generated from protobuf field: optional uint32 id = 8;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeExploreRewardReq.CmdId
 */
export enum WinterCampTakeExploreRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8607;
     */
    CMD_ID = 8607,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTakeExploreRewardRsp
 */
export interface WinterCampTakeExploreRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 15;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeExploreRewardRsp.CmdId
 */
export enum WinterCampTakeExploreRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8978;
     */
    CMD_ID = 8978,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTakeBattleRewardReq
 */
export interface WinterCampTakeBattleRewardReq {
    /**
     * @generated from protobuf field: optional uint32 id = 2;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeBattleRewardReq.CmdId
 */
export enum WinterCampTakeBattleRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8401;
     */
    CMD_ID = 8401,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTakeBattleRewardRsp
 */
export interface WinterCampTakeBattleRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 15;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeBattleRewardRsp.CmdId
 */
export enum WinterCampTakeBattleRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8153;
     */
    CMD_ID = 8153,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTriathlonRestartReq
 */
export interface WinterCampTriathlonRestartReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 6;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonRestartReq.CmdId
 */
export enum WinterCampTriathlonRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8844;
     */
    CMD_ID = 8844,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WinterCampTriathlonRestartRsp
 */
export interface WinterCampTriathlonRestartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 14;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonRestartRsp.CmdId
 */
export enum WinterCampTriathlonRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8569;
     */
    CMD_ID = 8569,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialSettleNotify
 */
export interface MistTrialSettleNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> exhibition_list_data_record_map = 15;
     */
    exhibitionListDataRecordMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> exhibition_list_data_result_map = 14;
     */
    exhibitionListDataResultMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 dungeon_scene_id = 5;
     */
    dungeonSceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSettleNotify.CmdId
 */
export enum MistTrialSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8373;
     */
    CMD_ID = 8373,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataReq
 */
export interface MistTrialGetDungeonExhibitionDataReq {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 13;
     */
    trialId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetDungeonExhibitionDataReq.CmdId
 */
export enum MistTrialGetDungeonExhibitionDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8740;
     */
    CMD_ID = 8740,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataRsp
 */
export interface MistTrialGetDungeonExhibitionDataRsp {
    /**
     * @generated from protobuf field: optional uint32 trial_id = 12;
     */
    trialId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetDungeonExhibitionDataRsp.CmdId
 */
export enum MistTrialGetDungeonExhibitionDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8066;
     */
    CMD_ID = 8066,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionLevelData
 */
export interface PotionLevelData {
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 7;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 mode_id = 5;
     */
    modeId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_level = 2;
     */
    difficultyLevel?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PotionStageData
 */
export interface PotionStageData {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 11;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint32 cool_down_buff_id_list = 2;
     */
    coolDownBuffIdList: number[];
    /**
     * @generated from protobuf field: optional bool is_open = 15;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PotionLevelData level_list = 14;
     */
    levelList: PotionLevelData[];
    /**
     * @generated from protobuf field: repeated uint32 cool_down_avatar_id_list = 13;
     */
    coolDownAvatarIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.PotionActivityDetailInfo
 */
export interface PotionActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PotionStageData stage_list = 10;
     */
    stageList: PotionStageData[];
}
/**
 * @generated from protobuf message com.midnights.game.PotionResetChallengeReq
 */
export interface PotionResetChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionResetChallengeReq.CmdId
 */
export enum PotionResetChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8377;
     */
    CMD_ID = 8377,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionResetChallengeRsp
 */
export interface PotionResetChallengeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PotionStageData stage_data = 14;
     */
    stageData?: PotionStageData;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionResetChallengeRsp.CmdId
 */
export enum PotionResetChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8067;
     */
    CMD_ID = 8067,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionAvatarInfo
 */
export interface PotionAvatarInfo {
    /**
     * @generated from protobuf field: optional bool is_trial = 6;
     */
    isTrial?: boolean;
    /**
     * @generated from protobuf field: optional uint64 avatar_id = 8;
     */
    avatarId?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.PotionEnterDungeonReq
 */
export interface PotionEnterDungeonReq {
    /**
     * @generated from protobuf field: repeated uint32 buff_id_list = 15;
     */
    buffIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PotionAvatarInfo avatar_info_list = 14;
     */
    avatarInfoList: PotionAvatarInfo[];
    /**
     * @generated from protobuf field: optional uint32 mode_id = 2;
     */
    modeId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonReq.CmdId
 */
export enum PotionEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8261;
     */
    CMD_ID = 8261,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionEnterDungeonRsp
 */
export interface PotionEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonRsp.CmdId
 */
export enum PotionEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8482;
     */
    CMD_ID = 8482,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionDungeonAvatar
 */
export interface PotionDungeonAvatar {
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 8;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional bool is_trial = 2;
     */
    isTrial?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.PotionEnterDungeonNotify
 */
export interface PotionEnterDungeonNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_level = 7;
     */
    difficultyLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PotionDungeonAvatar dungeon_avatar_list = 6;
     */
    dungeonAvatarList: PotionDungeonAvatar[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 8;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 mode_id = 5;
     */
    modeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonNotify.CmdId
 */
export enum PotionEnterDungeonNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8531;
     */
    CMD_ID = 8531,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionSaveDungeonResultReq
 */
export interface PotionSaveDungeonResultReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 8;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionSaveDungeonResultReq.CmdId
 */
export enum PotionSaveDungeonResultReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8192;
     */
    CMD_ID = 8192,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionSaveDungeonResultRsp
 */
export interface PotionSaveDungeonResultRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionSaveDungeonResultRsp.CmdId
 */
export enum PotionSaveDungeonResultRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8688;
     */
    CMD_ID = 8688,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionRestartDungeonReq
 */
export interface PotionRestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.PotionRestartDungeonReq.CmdId
 */
export enum PotionRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8273;
     */
    CMD_ID = 8273,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionRestartDungeonRsp
 */
export interface PotionRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PotionRestartDungeonRsp.CmdId
 */
export enum PotionRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8062;
     */
    CMD_ID = 8062,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PotionDungeonResultInfo
 */
export interface PotionDungeonResultInfo {
    /**
     * @generated from protobuf field: optional uint32 final_score = 8;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 left_time = 9;
     */
    leftTime?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_level = 14;
     */
    difficultyLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 mode_id = 11;
     */
    modeId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 4;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TanukiTravelLevelData
 */
export interface TanukiTravelLevelData {
    /**
     * @generated from protobuf field: optional bool is_open = 5;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 route_id = 9;
     */
    routeId?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 15;
     */
    isFinish?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.TanukiTravelActivityDetailInfo
 */
export interface TanukiTravelActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.TanukiTravelLevelData tanuki_travel_level_data_list = 4;
     */
    tanukiTravelLevelDataList: TanukiTravelLevelData[];
    /**
     * @generated from protobuf field: optional bool is_content_closed = 11;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 finished_level_index = 10;
     */
    finishedLevelIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TanukiTravelFinishGuideQuestNotify
 */
export interface TanukiTravelFinishGuideQuestNotify {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 14;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TanukiTravelFinishGuideQuestNotify.CmdId
 */
export enum TanukiTravelFinishGuideQuestNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8924;
     */
    CMD_ID = 8924,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternProjectionLevelInfo
 */
export interface LanternProjectionLevelInfo {
    /**
     * @generated from protobuf field: optional uint32 min_finish_time = 1;
     */
    minFinishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 2;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional bool is_finished = 7;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional bool is_can_start = 9;
     */
    isCanStart?: boolean;
    /**
     * @generated from protobuf field: optional bool is_show_tips = 10;
     */
    isShowTips?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.LanternProjectionInfo
 */
export interface LanternProjectionInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ClientInputType view_switch_tips_list = 12;
     */
    viewSwitchTipsList: ClientInputType[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternProjectionLevelInfo level_list = 6;
     */
    levelList: LanternProjectionLevelInfo[];
    /**
     * @generated from protobuf field: repeated uint32 open_stage_list = 10;
     */
    openStageList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ClientInputType view_input_tips_list = 13;
     */
    viewInputTipsList: ClientInputType[];
}
/**
 * @generated from protobuf message com.midnights.game.SalvageBundleChallengeInfo
 */
export interface SalvageBundleChallengeInfo {
    /**
     * @generated from protobuf field: repeated uint32 finished_bundle_list = 13;
     */
    finishedBundleList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.SalvageScoreChallengeInfo
 */
export interface SalvageScoreChallengeInfo {
    /**
     * @generated from protobuf field: optional uint32 salvage_challenge_id = 13;
     */
    salvageChallengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 7;
     */
    maxScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SalvageChallengeInfo
 */
export interface SalvageChallengeInfo {
    /**
     * @generated from protobuf field: optional uint32 challenge_type = 5;
     */
    challengeType?: number;
    /**
     * @generated from protobuf field: optional bool is_unlock = 12;
     */
    isUnlock?: boolean;
    /**
     * @generated from protobuf oneof: challenge_detail
     */
    challengeDetail: {
        oneofKind: "bundleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SalvageBundleChallengeInfo bundle_info = 11;
         */
        bundleInfo: SalvageBundleChallengeInfo;
    } | {
        oneofKind: "scoreChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SalvageScoreChallengeInfo score_challenge_info = 13;
         */
        scoreChallengeInfo: SalvageScoreChallengeInfo;
    } | {
        oneofKind: "bossChallengeId";
        /**
         * @generated from protobuf field: uint32 boss_challenge_id = 2;
         */
        bossChallengeId: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.SalvageStageInfo
 */
export interface SalvageStageInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SalvageChallengeInfo challenge_info_list = 9;
     */
    challengeInfoList: SalvageChallengeInfo[];
    /**
     * @generated from protobuf field: optional bool is_open = 10;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteFireworksChallengeInfo
 */
export interface LanternRiteFireworksChallengeInfo {
    /**
     * @generated from protobuf field: optional bool is_full_score = 13;
     */
    isFullScore?: boolean;
    /**
     * @generated from protobuf field: optional uint32 best_score = 7;
     */
    bestScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 3;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteFireworksStageInfo
 */
export interface LanternRiteFireworksStageInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 8;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternRiteFireworksChallengeInfo challenge_info_list = 9;
     */
    challengeInfoList: LanternRiteFireworksChallengeInfo[];
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteFireworksInfo
 */
export interface LanternRiteFireworksInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternRiteFireworksStageInfo stage_info_list = 6;
     */
    stageInfoList: LanternRiteFireworksStageInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteActivityDetailInfo
 */
export interface LanternRiteActivityDetailInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.LanternProjectionInfo projection_info = 13;
     */
    projectionInfo?: LanternProjectionInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SalvageStageInfo stage_info_list = 5;
     */
    stageInfoList: SalvageStageInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.LanternRiteFireworksInfo fireworks_info = 8;
     */
    fireworksInfo?: LanternRiteFireworksInfo;
    /**
     * @generated from protobuf field: optional bool is_mini_eldritch_dungeon_open = 2;
     */
    isMiniEldritchDungeonOpen?: boolean;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 14;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional bool is_taken_skin_reward = 6;
     */
    isTakenSkinReward?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FinishLanternProjectionReq
 */
export interface FinishLanternProjectionReq {
    /**
     * @generated from protobuf field: optional uint32 finish_time = 3;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 11;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FinishLanternProjectionReq.CmdId
 */
export enum FinishLanternProjectionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8704;
     */
    CMD_ID = 8704,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FinishLanternProjectionRsp
 */
export interface FinishLanternProjectionRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FinishLanternProjectionRsp.CmdId
 */
export enum FinishLanternProjectionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8713;
     */
    CMD_ID = 8713,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ViewLanternProjectionTipsReq
 */
export interface ViewLanternProjectionTipsReq {
    /**
     * @generated from protobuf field: optional bool is_input_tips = 9;
     */
    isInputTips?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.ClientInputType input_type = 10;
     */
    inputType?: ClientInputType;
}
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionTipsReq.CmdId
 */
export enum ViewLanternProjectionTipsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8218;
     */
    CMD_ID = 8218,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ViewLanternProjectionTipsRsp
 */
export interface ViewLanternProjectionTipsRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionTipsRsp.CmdId
 */
export enum ViewLanternProjectionTipsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8590;
     */
    CMD_ID = 8590,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ViewLanternProjectionLevelTipsReq
 */
export interface ViewLanternProjectionLevelTipsReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 7;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionLevelTipsReq.CmdId
 */
export enum ViewLanternProjectionLevelTipsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8758;
     */
    CMD_ID = 8758,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ViewLanternProjectionLevelTipsRsp
 */
export interface ViewLanternProjectionLevelTipsRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionLevelTipsRsp.CmdId
 */
export enum ViewLanternProjectionLevelTipsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8411;
     */
    CMD_ID = 8411,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvagePreventSettleInfo
 */
export interface SalvagePreventSettleInfo {
    /**
     * @generated from protobuf field: optional bool is_new_record = 8;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvagePreventGallerySettleInfo settle_info = 14;
     */
    settleInfo?: SalvagePreventGallerySettleInfo;
}
/**
 * @generated from protobuf message com.midnights.game.SalvagePreventSettleNotify
 */
export interface SalvagePreventSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvagePreventSettleInfo settle_info = 12;
     */
    settleInfo?: SalvagePreventSettleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventSettleNotify.CmdId
 */
export enum SalvagePreventSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8231;
     */
    CMD_ID = 8231,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvageEscortSettleInfo
 */
export interface SalvageEscortSettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvageEscortGallerySettleInfo settle_info = 3;
     */
    settleInfo?: SalvageEscortGallerySettleInfo;
    /**
     * @generated from protobuf field: optional bool is_new_record = 2;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SalvageEscortSettleNotify
 */
export interface SalvageEscortSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 14;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvageEscortSettleInfo settle_info = 15;
     */
    settleInfo?: SalvageEscortSettleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortSettleNotify.CmdId
 */
export enum SalvageEscortSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8499;
     */
    CMD_ID = 8499,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteTakeSkinRewardReq
 */
export interface LanternRiteTakeSkinRewardReq {
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteTakeSkinRewardReq.CmdId
 */
export enum LanternRiteTakeSkinRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8826;
     */
    CMD_ID = 8826,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteTakeSkinRewardRsp
 */
export interface LanternRiteTakeSkinRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteTakeSkinRewardRsp.CmdId
 */
export enum LanternRiteTakeSkinRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8777;
     */
    CMD_ID = 8777,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvagePreventRestartReq
 */
export interface SalvagePreventRestartReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventRestartReq.CmdId
 */
export enum SalvagePreventRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8367;
     */
    CMD_ID = 8367,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvagePreventRestartRsp
 */
export interface SalvagePreventRestartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 12;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventRestartRsp.CmdId
 */
export enum SalvagePreventRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8938;
     */
    CMD_ID = 8938,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvageEscortRestartReq
 */
export interface SalvageEscortRestartReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 4;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortRestartReq.CmdId
 */
export enum SalvageEscortRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8396;
     */
    CMD_ID = 8396,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SalvageEscortRestartRsp
 */
export interface SalvageEscortRestartRsp {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 14;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortRestartRsp.CmdId
 */
export enum SalvageEscortRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8959;
     */
    CMD_ID = 8959,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteStartFireworksReformReq
 */
export interface LanternRiteStartFireworksReformReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 7;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteStartFireworksReformReq.CmdId
 */
export enum LanternRiteStartFireworksReformReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8518;
     */
    CMD_ID = 8518,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteFireworksReformFactorInfo
 */
export interface LanternRiteFireworksReformFactorInfo {
    /**
     * @generated from protobuf field: optional uint32 factor_value = 5;
     */
    factorValue?: number;
    /**
     * @generated from protobuf field: optional uint32 factor_id = 13;
     */
    factorId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteFireworksReformSkillInfo
 */
export interface LanternRiteFireworksReformSkillInfo {
    /**
     * @generated from protobuf field: optional uint32 skill_id = 2;
     */
    skillId?: number;
    /**
     * @generated from protobuf field: optional bool is_unlock = 11;
     */
    isUnlock?: boolean;
    /**
     * @generated from protobuf field: optional uint32 unlock_challenge_time = 1;
     */
    unlockChallengeTime?: number;
    /**
     * @generated from protobuf field: optional uint32 unlock_challenge_id = 14;
     */
    unlockChallengeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteStartFireworksReformRsp
 */
export interface LanternRiteStartFireworksReformRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 15;
     */
    factorInfoList: LanternRiteFireworksReformFactorInfo[];
    /**
     * @generated from protobuf field: optional uint32 fire_element_addition_ratio = 13;
     */
    fireElementAdditionRatio?: number;
    /**
     * @generated from protobuf field: optional uint32 stamina_value = 2;
     */
    staminaValue?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternRiteFireworksReformSkillInfo skill_info_list = 8;
     */
    skillInfoList: LanternRiteFireworksReformSkillInfo[];
    /**
     * @generated from protobuf field: optional uint32 reform_score = 6;
     */
    reformScore?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 11;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 fire_element_value = 14;
     */
    fireElementValue?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteStartFireworksReformRsp.CmdId
 */
export enum LanternRiteStartFireworksReformRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8862;
     */
    CMD_ID = 8862,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteDoFireworksReformReq
 */
export interface LanternRiteDoFireworksReformReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 skill_id = 11;
     */
    skillId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 10;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 factor_id = 13;
     */
    factorId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteDoFireworksReformReq.CmdId
 */
export enum LanternRiteDoFireworksReformReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8226;
     */
    CMD_ID = 8226,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteDoFireworksReformRsp
 */
export interface LanternRiteDoFireworksReformRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_lucky = 13;
     */
    isLucky?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 8;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 2;
     */
    factorInfoList: LanternRiteFireworksReformFactorInfo[];
    /**
     * @generated from protobuf field: optional uint32 stamina_value = 10;
     */
    staminaValue?: number;
    /**
     * @generated from protobuf field: optional uint32 reform_score = 15;
     */
    reformScore?: number;
    /**
     * @generated from protobuf field: optional uint32 fire_element_value = 11;
     */
    fireElementValue?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 fire_element_addition_ratio = 12;
     */
    fireElementAdditionRatio?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteDoFireworksReformRsp.CmdId
 */
export enum LanternRiteDoFireworksReformRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8657;
     */
    CMD_ID = 8657,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteEndFireworksReformReq
 */
export interface LanternRiteEndFireworksReformReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 1;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteEndFireworksReformReq.CmdId
 */
export enum LanternRiteEndFireworksReformReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8277;
     */
    CMD_ID = 8277,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.LanternRiteEndFireworksReformRsp
 */
export interface LanternRiteEndFireworksReformRsp {
    /**
     * @generated from protobuf field: optional bool is_full_score = 10;
     */
    isFullScore?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_unlock_fireworks = 6;
     */
    isUnlockFireworks?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_unlock_new_skill = 12;
     */
    isUnlockNewSkill?: boolean;
    /**
     * @generated from protobuf field: optional bool is_stamina_up = 4;
     */
    isStaminaUp?: boolean;
    /**
     * @generated from protobuf field: optional uint32 final_score = 13;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 5;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 9;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteEndFireworksReformRsp.CmdId
 */
export enum LanternRiteEndFireworksReformRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8933;
     */
    CMD_ID = 8933,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpdateSalvageBundleMarkReq
 */
export interface UpdateSalvageBundleMarkReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 14;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_type = 13;
     */
    challengeType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UpdateSalvageBundleMarkReq.CmdId
 */
export enum UpdateSalvageBundleMarkReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8967;
     */
    CMD_ID = 8967,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpdateSalvageBundleMarkRsp
 */
export interface UpdateSalvageBundleMarkRsp {
    /**
     * @generated from protobuf field: optional uint32 challenge_type = 1;
     */
    challengeType?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UpdateSalvageBundleMarkRsp.CmdId
 */
export enum UpdateSalvageBundleMarkRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8459;
     */
    CMD_ID = 8459,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriStage
 */
export interface MichiaeMatsuriStage {
    /**
     * @generated from protobuf field: optional bool is_open = 11;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 5;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriChestPositionInfo
 */
export interface MichiaeMatsuriChestPositionInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 group_id = 2;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 11;
     */
    configId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriChallengePositionInfo
 */
export interface MichiaeMatsuriChallengePositionInfo {
    /**
     * @generated from protobuf field: optional uint32 group_id = 4;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 7;
     */
    gadgetId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 8;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriActivityDetailInfo
 */
export interface MichiaeMatsuriActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MichiaeMatsuriChallengePositionInfo challenge_pos_list = 6;
     */
    challengePosList: MichiaeMatsuriChallengePositionInfo[];
    /**
     * @generated from protobuf field: optional uint32 gain_crystal_exp = 13;
     */
    gainCrystalExp?: number;
    /**
     * @generated from protobuf field: repeated uint32 unlocked_crystal_skill_list = 2;
     */
    unlockedCrystalSkillList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.MichiaeMatsuriChestPositionInfo chest_pos_list = 10;
     */
    chestPosList: MichiaeMatsuriChestPositionInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.MichiaeMatsuriStage stage_list = 14;
     */
    stageList: MichiaeMatsuriStage[];
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify
 */
export interface MichiaeMatsuriDarkPressureLevelUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 dark_pressure_level = 8;
     */
    darkPressureLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify.CmdId
 */
export enum MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8825;
     */
    CMD_ID = 8825,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriInteractStatueReq
 */
export interface MichiaeMatsuriInteractStatueReq {
    /**
     * @generated from protobuf field: optional uint32 statue_entity_id = 7;
     */
    statueEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriInteractStatueReq.CmdId
 */
export enum MichiaeMatsuriInteractStatueReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8718;
     */
    CMD_ID = 8718,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriInteractStatueRsp
 */
export interface MichiaeMatsuriInteractStatueRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriInteractStatueRsp.CmdId
 */
export enum MichiaeMatsuriInteractStatueRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8449;
     */
    CMD_ID = 8449,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq
 */
export interface MichiaeMatsuriUnlockCrystalSkillReq {
    /**
     * @generated from protobuf field: optional uint32 crystal_skill_id = 1;
     */
    crystalSkillId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq.CmdId
 */
export enum MichiaeMatsuriUnlockCrystalSkillReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8345;
     */
    CMD_ID = 8345,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp
 */
export interface MichiaeMatsuriUnlockCrystalSkillRsp {
    /**
     * @generated from protobuf field: optional uint32 crystal_skill_id = 1;
     */
    crystalSkillId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp.CmdId
 */
export enum MichiaeMatsuriUnlockCrystalSkillRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8588;
     */
    CMD_ID = 8588,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeReq
 */
export interface MichiaeMatsuriStartBossChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 difficulty = 5;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 gadget_entity_id = 15;
     */
    gadgetEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartBossChallengeReq.CmdId
 */
export enum MichiaeMatsuriStartBossChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8703;
     */
    CMD_ID = 8703,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeRsp
 */
export interface MichiaeMatsuriStartBossChallengeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartBossChallengeRsp.CmdId
 */
export enum MichiaeMatsuriStartBossChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8426;
     */
    CMD_ID = 8426,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeReq
 */
export interface MichiaeMatsuriStartDarkChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 worktop_entity_id = 2;
     */
    worktopEntityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartDarkChallengeReq.CmdId
 */
export enum MichiaeMatsuriStartDarkChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8054;
     */
    CMD_ID = 8054,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp
 */
export interface MichiaeMatsuriStartDarkChallengeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp.CmdId
 */
export enum MichiaeMatsuriStartDarkChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8791;
     */
    CMD_ID = 8791,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify
 */
export interface MichiaeMatsuriRemoveChestMarkNotify {
    /**
     * @generated from protobuf field: optional uint32 config_id = 9;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 11;
     */
    groupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify.CmdId
 */
export enum MichiaeMatsuriRemoveChestMarkNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8726;
     */
    CMD_ID = 8726,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify
 */
export interface MichiaeMatsuriRemoveChallengeMarkNotify {
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 9;
     */
    gadgetId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 2;
     */
    groupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify.CmdId
 */
export enum MichiaeMatsuriRemoveChallengeMarkNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8072;
     */
    CMD_ID = 8072,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify
 */
export interface MichiaeMatsuriGainCrystalExpUpdateNotify {
    /**
     * @generated from protobuf field: optional uint32 gain_crystal_exp = 2;
     */
    gainCrystalExp?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 3;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify.CmdId
 */
export enum MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8523;
     */
    CMD_ID = 8523,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderTaskInfo
 */
export interface BartenderTaskInfo {
    /**
     * @generated from protobuf field: optional uint32 id = 1;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 14;
     */
    isFinish?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.BartenderLevelInfo
 */
export interface BartenderLevelInfo {
    /**
     * @generated from protobuf field: optional bool is_finish = 7;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_score = 9;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 4;
     */
    id?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BartenderActivityDetailInfo
 */
export interface BartenderActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated uint32 unlock_item_list = 3;
     */
    unlockItemList: number[];
    /**
     * @generated from protobuf field: optional bool is_develop_module_open = 13;
     */
    isDevelopModuleOpen?: boolean;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 6;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.BartenderLevelInfo unlock_level_list = 5;
     */
    unlockLevelList: BartenderLevelInfo[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_formula_list = 14;
     */
    unlockFormulaList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.BartenderTaskInfo unlock_task_list = 2;
     */
    unlockTaskList: BartenderTaskInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCompleteOrderReq
 */
export interface BartenderCompleteOrderReq {
    /**
     * @generated from protobuf field: optional uint32 cup_type = 14;
     */
    cupType?: number;
    /**
     * @generated from protobuf field: optional uint32 qte_count = 7;
     */
    qteCount?: number;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 11;
     */
    questId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 10;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional bool is_view_formula = 9;
     */
    isViewFormula?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 optional_order_list = 6;
     */
    optionalOrderList: number[];
    /**
     * @generated from protobuf field: optional uint32 retry_count = 3;
     */
    retryCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCompleteOrderReq.CmdId
 */
export enum BartenderCompleteOrderReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8414;
     */
    CMD_ID = 8414,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCompleteOrderRsp
 */
export interface BartenderCompleteOrderRsp {
    /**
     * @generated from protobuf field: optional bool is_new = 10;
     */
    isNew?: boolean;
    /**
     * @generated from protobuf field: optional uint32 finish_order_id = 3;
     */
    finishOrderId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 formula_id = 6;
     */
    formulaId?: number;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 15;
     */
    questId?: number;
    /**
     * @generated from protobuf field: repeated uint32 affix_list = 2;
     */
    affixList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCompleteOrderRsp.CmdId
 */
export enum BartenderCompleteOrderRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8125;
     */
    CMD_ID = 8125,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCancelOrderReq
 */
export interface BartenderCancelOrderReq {
    /**
     * @generated from protobuf field: optional uint32 quest_id = 3;
     */
    questId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelOrderReq.CmdId
 */
export enum BartenderCancelOrderReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8442;
     */
    CMD_ID = 8442,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCancelOrderRsp
 */
export interface BartenderCancelOrderRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 3;
     */
    questId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelOrderRsp.CmdId
 */
export enum BartenderCancelOrderRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8837;
     */
    CMD_ID = 8837,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderGetFormulaReq
 */
export interface BartenderGetFormulaReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 7;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 quest_id = 4;
     */
    questId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderGetFormulaReq.CmdId
 */
export enum BartenderGetFormulaReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8462;
     */
    CMD_ID = 8462,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderGetFormulaRsp
 */
export interface BartenderGetFormulaRsp {
    /**
     * @generated from protobuf field: optional bool is_new = 12;
     */
    isNew?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 affix_list = 8;
     */
    affixList: number[];
    /**
     * @generated from protobuf field: optional uint32 formula_id = 11;
     */
    formulaId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderGetFormulaRsp.CmdId
 */
export enum BartenderGetFormulaRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8842;
     */
    CMD_ID = 8842,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderStartLevelReq
 */
export interface BartenderStartLevelReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderStartLevelReq.CmdId
 */
export enum BartenderStartLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8507;
     */
    CMD_ID = 8507,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderStartLevelRsp
 */
export interface BartenderStartLevelRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 order_list = 13;
     */
    orderList: number[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 time = 8;
     */
    time?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderStartLevelRsp.CmdId
 */
export enum BartenderStartLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8402;
     */
    CMD_ID = 8402,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCancelLevelReq
 */
export interface BartenderCancelLevelReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 13;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelLevelReq.CmdId
 */
export enum BartenderCancelLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8771;
     */
    CMD_ID = 8771,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderCancelLevelRsp
 */
export interface BartenderCancelLevelRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 2;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelLevelRsp.CmdId
 */
export enum BartenderCancelLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8686;
     */
    CMD_ID = 8686,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderLevelProgressNotify
 */
export interface BartenderLevelProgressNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 9;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional bool is_finish = 3;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 8;
     */
    score?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderLevelProgressNotify.CmdId
 */
export enum BartenderLevelProgressNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8756;
     */
    CMD_ID = 8756,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderFinishLevelReq
 */
export interface BartenderFinishLevelReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 6;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderFinishLevelReq.CmdId
 */
export enum BartenderFinishLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8227;
     */
    CMD_ID = 8227,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BartenderFinishLevelRsp
 */
export interface BartenderFinishLevelRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 1;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BartenderFinishLevelRsp.CmdId
 */
export enum BartenderFinishLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8093;
     */
    CMD_ID = 8093,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OfficialCustomDungeon
 */
export interface OfficialCustomDungeon {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 11;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 win_times = 3;
     */
    winTimes?: number;
}
/**
 * @generated from protobuf message com.midnights.game.UgcActivityDetailInfo
 */
export interface UgcActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_ugc_feature_closed = 10;
     */
    isUgcFeatureClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 custom_dungeon_group_id = 12;
     */
    customDungeonGroupId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.OfficialCustomDungeon official_custom_dungeon_list = 5;
     */
    officialCustomDungeonList: OfficialCustomDungeon[];
    /**
     * @generated from protobuf field: optional bool is_enable_ugc = 11;
     */
    isEnableUgc?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkActivityDetailInfo
 */
export interface CrystalLinkActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkLevelInfo level_info_list = 3;
     */
    levelInfoList: CrystalLinkLevelInfo[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 7;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkLevelInfo
 */
export interface CrystalLinkLevelInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 10;
     */
    teamInfoList: CrystalLinkTeamInfo[];
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 14;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 best_score = 5;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkTeamInfo
 */
export interface CrystalLinkTeamInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 2;
     */
    buffInfoList: CrystalLinkBuffInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkAvatarInfo avatar_info_list = 11;
     */
    avatarInfoList: CrystalLinkAvatarInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkAvatarInfo
 */
export interface CrystalLinkAvatarInfo {
    /**
     * @generated from protobuf field: optional uint64 avatar_id = 3;
     */
    avatarId?: bigint;
    /**
     * @generated from protobuf field: optional bool is_trial = 13;
     */
    isTrial?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkBuffInfo
 */
export interface CrystalLinkBuffInfo {
    /**
     * @generated from protobuf field: optional uint32 effect_buff_id = 1;
     */
    effectBuffId?: number;
    /**
     * @generated from protobuf field: optional uint32 cond_buff_id = 10;
     */
    condBuffId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkEnterDungeonReq
 */
export interface CrystalLinkEnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 7;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 13;
     */
    teamInfoList: CrystalLinkTeamInfo[];
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 10;
     */
    difficultyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkEnterDungeonReq.CmdId
 */
export enum CrystalLinkEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8325;
     */
    CMD_ID = 8325,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkEnterDungeonRsp
 */
export interface CrystalLinkEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 1;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 14;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 8;
     */
    teamInfoList: CrystalLinkTeamInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkEnterDungeonRsp.CmdId
 */
export enum CrystalLinkEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8147;
     */
    CMD_ID = 8147,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkDungeonAvatarInfo
 */
export interface CrystalLinkDungeonAvatarInfo {
    /**
     * @generated from protobuf field: optional bool is_trial = 8;
     */
    isTrial?: boolean;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 11;
     */
    avatarGuid?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkDungeonInfoNotify
 */
export interface CrystalLinkDungeonInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 8;
     */
    buffInfoList: CrystalLinkBuffInfo[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 1;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_upper_part = 15;
     */
    isUpperPart?: boolean;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 11;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 3;
     */
    dungeonAvatarInfoList: CrystalLinkDungeonAvatarInfo[];
    /**
     * @generated from protobuf field: optional uint32 init_gallery_progress = 7;
     */
    initGalleryProgress?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkDungeonInfoNotify.CmdId
 */
export enum CrystalLinkDungeonInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8858;
     */
    CMD_ID = 8858,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkRestartDungeonReq
 */
export interface CrystalLinkRestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkRestartDungeonReq.CmdId
 */
export enum CrystalLinkRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8022;
     */
    CMD_ID = 8022,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkRestartDungeonRsp
 */
export interface CrystalLinkRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkRestartDungeonRsp.CmdId
 */
export enum CrystalLinkRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8119;
     */
    CMD_ID = 8119,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.QuickOpenActivityReq
 */
export interface QuickOpenActivityReq {
    /**
     * @generated from protobuf field: optional uint32 activity_id = 1;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.QuickOpenActivityReq.CmdId
 */
export enum QuickOpenActivityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8178;
     */
    CMD_ID = 8178,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.QuickOpenActivityRsp
 */
export interface QuickOpenActivityRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 activity_id = 4;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.QuickOpenActivityRsp.CmdId
 */
export enum QuickOpenActivityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8882;
     */
    CMD_ID = 8882,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessMapData
 */
export interface IrodoriChessMapData {
    /**
     * @generated from protobuf field: optional uint32 map_id = 6;
     */
    mapId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriChessEntranceDetailInfo entrance_detail_info = 7;
     */
    entranceDetailInfo?: IrodoriChessEntranceDetailInfo;
    /**
     * @generated from protobuf field: repeated uint32 equiped_card_list = 3;
     */
    equipedCardList: number[];
    /**
     * @generated from protobuf field: optional uint32 best_score = 8;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessLevelData
 */
export interface IrodoriChessLevelData {
    /**
     * @generated from protobuf field: optional uint32 open_time = 8;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriChessMapData hard_map_data = 7;
     */
    hardMapData?: IrodoriChessMapData;
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriChessMapData normal_map_data = 11;
     */
    normalMapData?: IrodoriChessMapData;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessData
 */
export interface IrodoriChessData {
    /**
     * @generated from protobuf field: optional bool is_open = 8;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.IrodoriChessLevelData level_data_list = 1;
     */
    levelDataList: IrodoriChessLevelData[];
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriFlowerData
 */
export interface IrodoriFlowerData {
    /**
     * @generated from protobuf field: repeated uint32 finished_theme_list = 1;
     */
    finishedThemeList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam used_flower_list = 7;
     */
    usedFlowerList: ItemParam[];
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriPoetryThemeData
 */
export interface IrodoriPoetryThemeData {
    /**
     * @generated from protobuf field: repeated uint32 scanned_index_list = 1;
     */
    scannedIndexList: number[];
    /**
     * @generated from protobuf field: repeated uint32 line_id_list = 4;
     */
    lineIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 max_progress = 2;
     */
    maxProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 theme_id = 13;
     */
    themeId?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 5;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 min_progress = 12;
     */
    minProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 selected_line_id = 9;
     */
    selectedLineId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriPoetryData
 */
export interface IrodoriPoetryData {
    /**
     * @generated from protobuf field: repeated com.midnights.game.IrodoriPoetryThemeData theme_data_list = 3;
     */
    themeDataList: IrodoriPoetryThemeData[];
    /**
     * @generated from protobuf field: optional uint32 cur_theme_id = 14;
     */
    curThemeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterLevelDetailInfo
 */
export interface IrodoriMasterLevelDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_finish = 1;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 diffculty = 2;
     */
    diffculty?: number;
    /**
     * @generated from protobuf field: optional uint32 min_finish_time = 8;
     */
    minFinishTime?: number;
    /**
     * @generated from protobuf field: optional bool is_have_try = 7;
     */
    isHaveTry?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterLevelInfo
 */
export interface IrodoriMasterLevelInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.IrodoriMasterLevelDetailInfo detail_info = 11;
     */
    detailInfo: IrodoriMasterLevelDetailInfo[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 14;
     */
    levelId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriActivityDetailInfo
 */
export interface IrodoriActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.IrodoriMasterLevelInfo master_level_list = 11;
     */
    masterLevelList: IrodoriMasterLevelInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriFlowerData flower_data = 6;
     */
    flowerData?: IrodoriFlowerData;
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriPoetryData poetry_data = 8;
     */
    poetryData?: IrodoriPoetryData;
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriChessData chess_data = 14;
     */
    chessData?: IrodoriChessData;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriEditFlowerCombinationReq
 */
export interface IrodoriEditFlowerCombinationReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 13;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo combination_info = 1;
     */
    combinationInfo?: CustomGadgetTreeInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriEditFlowerCombinationReq.CmdId
 */
export enum IrodoriEditFlowerCombinationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8608;
     */
    CMD_ID = 8608,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriEditFlowerCombinationRsp
 */
export interface IrodoriEditFlowerCombinationRsp {
    /**
     * @generated from protobuf field: optional bool is_already_finished = 4;
     */
    isAlreadyFinished?: boolean;
    /**
     * @generated from protobuf field: optional bool is_can_take_reward = 3;
     */
    isCanTakeReward?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriEditFlowerCombinationRsp.CmdId
 */
export enum IrodoriEditFlowerCombinationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8833;
     */
    CMD_ID = 8833,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriScanEntityReq
 */
export interface IrodoriScanEntityReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriScanEntityReq.CmdId
 */
export enum IrodoriScanEntityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8767;
     */
    CMD_ID = 8767,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriScanEntityRsp
 */
export interface IrodoriScanEntityRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriPoetryThemeData theme_data = 10;
     */
    themeData?: IrodoriPoetryThemeData;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_get_inspiration = 1;
     */
    isGetInspiration?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriScanEntityRsp.CmdId
 */
export enum IrodoriScanEntityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8026;
     */
    CMD_ID = 8026,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriFillPoetryReq
 */
export interface IrodoriFillPoetryReq {
    /**
     * @generated from protobuf field: optional uint32 theme_id = 9;
     */
    themeId?: number;
    /**
     * @generated from protobuf field: optional uint32 line_id = 13;
     */
    lineId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriFillPoetryReq.CmdId
 */
export enum IrodoriFillPoetryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8129;
     */
    CMD_ID = 8129,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriFillPoetryRsp
 */
export interface IrodoriFillPoetryRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriPoetryThemeData theme_data = 13;
     */
    themeData?: IrodoriPoetryThemeData;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriFillPoetryRsp.CmdId
 */
export enum IrodoriFillPoetryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8880;
     */
    CMD_ID = 8880,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessEquipCardReq
 */
export interface IrodoriChessEquipCardReq {
    /**
     * @generated from protobuf field: optional bool is_hard_map = 2;
     */
    isHardMap?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 card_id = 9;
     */
    cardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessEquipCardReq.CmdId
 */
export enum IrodoriChessEquipCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8561;
     */
    CMD_ID = 8561,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessEquipCardRsp
 */
export interface IrodoriChessEquipCardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 card_id = 8;
     */
    cardId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_hard_map = 12;
     */
    isHardMap?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessEquipCardRsp.CmdId
 */
export enum IrodoriChessEquipCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8308;
     */
    CMD_ID = 8308,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessUnequipCardReq
 */
export interface IrodoriChessUnequipCardReq {
    /**
     * @generated from protobuf field: optional uint32 card_id = 8;
     */
    cardId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_hard_map = 10;
     */
    isHardMap?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessUnequipCardReq.CmdId
 */
export enum IrodoriChessUnequipCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8057;
     */
    CMD_ID = 8057,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriChessUnequipCardRsp
 */
export interface IrodoriChessUnequipCardRsp {
    /**
     * @generated from protobuf field: optional bool is_hard_map = 10;
     */
    isHardMap?: boolean;
    /**
     * @generated from protobuf field: optional uint32 card_id = 13;
     */
    cardId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 14;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessUnequipCardRsp.CmdId
 */
export enum IrodoriChessUnequipCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8817;
     */
    CMD_ID = 8817,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterIrodoriChessDungeonReq
 */
export interface EnterIrodoriChessDungeonReq {
    /**
     * @generated from protobuf field: optional bool is_hard_map = 1;
     */
    isHardMap?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 11;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterIrodoriChessDungeonReq.CmdId
 */
export enum EnterIrodoriChessDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8717;
     */
    CMD_ID = 8717,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterIrodoriChessDungeonRsp
 */
export interface EnterIrodoriChessDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_hard_map = 7;
     */
    isHardMap?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 13;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterIrodoriChessDungeonRsp.CmdId
 */
export enum EnterIrodoriChessDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8546;
     */
    CMD_ID = 8546,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterStartGalleryReq
 */
export interface IrodoriMasterStartGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 4;
     */
    difficulty?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterStartGalleryReq.CmdId
 */
export enum IrodoriMasterStartGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8165;
     */
    CMD_ID = 8165,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterStartGalleryRsp
 */
export interface IrodoriMasterStartGalleryRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterStartGalleryRsp.CmdId
 */
export enum IrodoriMasterStartGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8381;
     */
    CMD_ID = 8381,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterGalleryCgEndNotify
 */
export interface IrodoriMasterGalleryCgEndNotify {
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 4;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterGalleryCgEndNotify.CmdId
 */
export enum IrodoriMasterGalleryCgEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8061;
     */
    CMD_ID = 8061,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterGallerySettleNotify
 */
export interface IrodoriMasterGallerySettleNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.IrodoriMasterGallerySettleInfo settle_info = 13;
     */
    settleInfo?: IrodoriMasterGallerySettleInfo;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 5;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterGallerySettleNotify.CmdId
 */
export enum IrodoriMasterGallerySettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8340;
     */
    CMD_ID = 8340,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PhotoPosData
 */
export interface PhotoPosData {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 15;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional uint32 open_time = 2;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_view = 4;
     */
    isView?: boolean;
    /**
     * @generated from protobuf field: optional uint32 pos_id = 9;
     */
    posId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 6;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.PhotoActivityDetailInfo
 */
export interface PhotoActivityDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_content_closed = 4;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.PhotoPosData photo_pos_data_list = 12;
     */
    photoPosDataList: PhotoPosData[];
}
/**
 * @generated from protobuf message com.midnights.game.PhotoActivityFinishReq
 */
export interface PhotoActivityFinishReq {
    /**
     * @generated from protobuf field: optional uint32 pos_id = 15;
     */
    posId?: number;
    /**
     * @generated from protobuf field: optional uint32 check_root_id = 2;
     */
    checkRootId?: number;
    /**
     * @generated from protobuf field: optional bool is_succ = 5;
     */
    isSucc?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityFinishReq.CmdId
 */
export enum PhotoActivityFinishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8921;
     */
    CMD_ID = 8921,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PhotoActivityFinishRsp
 */
export interface PhotoActivityFinishRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 pos_id = 8;
     */
    posId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityFinishRsp.CmdId
 */
export enum PhotoActivityFinishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8854;
     */
    CMD_ID = 8854,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PhotoActivityClientViewReq
 */
export interface PhotoActivityClientViewReq {
    /**
     * @generated from protobuf field: optional uint32 pos_id = 13;
     */
    posId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityClientViewReq.CmdId
 */
export enum PhotoActivityClientViewReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8709;
     */
    CMD_ID = 8709,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PhotoActivityClientViewRsp
 */
export interface PhotoActivityClientViewRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 pos_id = 8;
     */
    posId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityClientViewRsp.CmdId
 */
export enum PhotoActivityClientViewRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8983;
     */
    CMD_ID = 8983,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SpiceStageData
 */
export interface SpiceStageData {
    /**
     * @generated from protobuf field: optional bool is_open = 12;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 success_times = 1;
     */
    successTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 6;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityDetailInfo
 */
export interface SpiceActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 current_increase_avatar_fetter_times = 15;
     */
    currentIncreaseAvatarFetterTimes?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SpiceStageData spice_stage_data_list = 7;
     */
    spiceStageDataList: SpiceStageData[];
    /**
     * @generated from protobuf field: optional uint32 increase_avatar_fetter_limit_times = 13;
     */
    increaseAvatarFetterLimitTimes?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceReq
 */
export interface SpiceActivityFinishMakeSpiceReq {
    /**
     * @generated from protobuf field: optional uint32 left_turns = 4;
     */
    leftTurns?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 9;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 left_material_id_list = 12;
     */
    leftMaterialIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityFinishMakeSpiceReq.CmdId
 */
export enum SpiceActivityFinishMakeSpiceReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8096;
     */
    CMD_ID = 8096,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceRsp
 */
export interface SpiceActivityFinishMakeSpiceRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 3;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityFinishMakeSpiceRsp.CmdId
 */
export enum SpiceActivityFinishMakeSpiceRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8481;
     */
    CMD_ID = 8481,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityProcessFoodReq
 */
export interface SpiceActivityProcessFoodReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam normal_food_list = 1;
     */
    normalFoodList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityProcessFoodReq.CmdId
 */
export enum SpiceActivityProcessFoodReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8216;
     */
    CMD_ID = 8216,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityProcessFoodRsp
 */
export interface SpiceActivityProcessFoodRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam special_food_list = 14;
     */
    specialFoodList: ItemParam[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam normal_food_list = 1;
     */
    normalFoodList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityProcessFoodRsp.CmdId
 */
export enum SpiceActivityProcessFoodRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8772;
     */
    CMD_ID = 8772,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SpiceActivityGivingRecordNotify
 */
export interface SpiceActivityGivingRecordNotify {
    /**
     * @generated from protobuf field: optional uint32 current_increase_avatar_fetter_times = 3;
     */
    currentIncreaseAvatarFetterTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 increase_avatar_fetter_limit_times = 7;
     */
    increaseAvatarFetterLimitTimes?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 11;
     */
    avatarId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityGivingRecordNotify.CmdId
 */
export enum SpiceActivityGivingRecordNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8407;
     */
    CMD_ID = 8407,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaStageData
 */
export interface GachaStageData {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> target_num_map = 14;
     */
    targetNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional bool is_open = 13;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityDetailInfo
 */
export interface GachaActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated uint32 have_get_robot_list = 6;
     */
    haveGetRobotList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.GachaStageData gacha_stage_data_list = 4;
     */
    gachaStageDataList: GachaStageData[];
    /**
     * @generated from protobuf field: map<uint32, uint32> have_reward_robot_num_map = 8;
     */
    haveRewardRobotNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 tech_create_robot_id = 3;
     */
    techCreateRobotId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> robot_num_map = 5;
     */
    robotNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 robot_finish_num = 12;
     */
    robotFinishNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityPercentNotify
 */
export interface GachaActivityPercentNotify {
    /**
     * @generated from protobuf field: optional uint32 item_stage = 14;
     */
    itemStage?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> target_num_map = 6;
     */
    targetNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 sub_item_stage = 2;
     */
    subItemStage?: number;
    /**
     * @generated from protobuf field: optional uint32 percent = 13;
     */
    percent?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityPercentNotify.CmdId
 */
export enum GachaActivityPercentNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8450;
     */
    CMD_ID = 8450,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityUpdateElemNotify
 */
export interface GachaActivityUpdateElemNotify {
    /**
     * @generated from protobuf field: optional uint32 elem_type = 10;
     */
    elemType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityUpdateElemNotify.CmdId
 */
export enum GachaActivityUpdateElemNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8919;
     */
    CMD_ID = 8919,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityCreateRobotReq
 */
export interface GachaActivityCreateRobotReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityCreateRobotReq.CmdId
 */
export enum GachaActivityCreateRobotReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8614;
     */
    CMD_ID = 8614,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityCreateRobotRsp
 */
export interface GachaActivityCreateRobotRsp {
    /**
     * @generated from protobuf field: optional uint32 robot_id = 1;
     */
    robotId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityCreateRobotRsp.CmdId
 */
export enum GachaActivityCreateRobotRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8610;
     */
    CMD_ID = 8610,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityTakeRewardReq
 */
export interface GachaActivityTakeRewardReq {
    /**
     * @generated from protobuf field: map<uint32, uint32> robot_num_map = 12;
     */
    robotNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityTakeRewardReq.CmdId
 */
export enum GachaActivityTakeRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8930;
     */
    CMD_ID = 8930,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityTakeRewardRsp
 */
export interface GachaActivityTakeRewardRsp {
    /**
     * @generated from protobuf field: map<uint32, uint32> robot_num_map = 3;
     */
    robotNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityTakeRewardRsp.CmdId
 */
export enum GachaActivityTakeRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8768;
     */
    CMD_ID = 8768,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityResetReq
 */
export interface GachaActivityResetReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityResetReq.CmdId
 */
export enum GachaActivityResetReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8163;
     */
    CMD_ID = 8163,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityResetRsp
 */
export interface GachaActivityResetRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 6;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityResetRsp.CmdId
 */
export enum GachaActivityResetRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8240;
     */
    CMD_ID = 8240,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityNextStageReq
 */
export interface GachaActivityNextStageReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityNextStageReq.CmdId
 */
export enum GachaActivityNextStageReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8257;
     */
    CMD_ID = 8257,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GachaActivityNextStageRsp
 */
export interface GachaActivityNextStageRsp {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityNextStageRsp.CmdId
 */
export enum GachaActivityNextStageRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8918;
     */
    CMD_ID = 8918,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGiveFriendGiftReq
 */
export interface ActivityGiveFriendGiftReq {
    /**
     * @generated from protobuf field: optional uint32 uid = 5;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 1;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> gift_num_map = 4;
     */
    giftNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGiveFriendGiftReq.CmdId
 */
export enum ActivityGiveFriendGiftReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8233;
     */
    CMD_ID = 8233,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGiveFriendGiftRsp
 */
export interface ActivityGiveFriendGiftRsp {
    /**
     * @generated from protobuf field: repeated uint32 limit_gift_list = 3;
     */
    limitGiftList: number[];
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 4;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGiveFriendGiftRsp.CmdId
 */
export enum ActivityGiveFriendGiftRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8696;
     */
    CMD_ID = 8696,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityRecvGiftData
 */
export interface ActivityRecvGiftData {
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 3;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string remark_name = 10;
     */
    remarkName?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 14;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: map<uint32, uint32> gift_num_map = 8;
     */
    giftNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetRecvGiftListReq
 */
export interface ActivityGetRecvGiftListReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 8;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetRecvGiftListReq.CmdId
 */
export enum ActivityGetRecvGiftListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8725;
     */
    CMD_ID = 8725,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetRecvGiftListRsp
 */
export interface ActivityGetRecvGiftListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityRecvGiftData recv_gift_list = 11;
     */
    recvGiftList: ActivityRecvGiftData[];
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 6;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetRecvGiftListRsp.CmdId
 */
export enum ActivityGetRecvGiftListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8120;
     */
    CMD_ID = 8120,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityHaveRecvGiftNotify
 */
export interface ActivityHaveRecvGiftNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityHaveRecvGiftNotify.CmdId
 */
export enum ActivityHaveRecvGiftNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8733;
     */
    CMD_ID = 8733,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityAcceptGiftResultInfo
 */
export interface ActivityAcceptGiftResultInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> unaccept_gift_num_map = 3;
     */
    unacceptGiftNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 uid = 6;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> accept_gift_num_map = 13;
     */
    acceptGiftNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.ActivityAcceptGiveGiftReq
 */
export interface ActivityAcceptGiveGiftReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 3;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 12;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptGiveGiftReq.CmdId
 */
export enum ActivityAcceptGiveGiftReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8095;
     */
    CMD_ID = 8095,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityAcceptGiveGiftRsp
 */
export interface ActivityAcceptGiveGiftRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info = 4;
     */
    acceptGiftResultInfo?: ActivityAcceptGiftResultInfo;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptGiveGiftRsp.CmdId
 */
export enum ActivityAcceptGiveGiftRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8502;
     */
    CMD_ID = 8502,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityAcceptAllGiveGiftReq
 */
export interface ActivityAcceptAllGiveGiftReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 3;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptAllGiveGiftReq.CmdId
 */
export enum ActivityAcceptAllGiveGiftReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8113;
     */
    CMD_ID = 8113,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityAcceptAllGiveGiftRsp
 */
export interface ActivityAcceptAllGiveGiftRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info_list = 5;
     */
    acceptGiftResultInfoList: ActivityAcceptGiftResultInfo[];
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptAllGiveGiftRsp.CmdId
 */
export enum ActivityAcceptAllGiveGiftRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8132;
     */
    CMD_ID = 8132,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftReq
 */
export interface ActivityGetCanGiveFriendGiftReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 8;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetCanGiveFriendGiftReq.CmdId
 */
export enum ActivityGetCanGiveFriendGiftReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8559;
     */
    CMD_ID = 8559,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftRsp
 */
export interface ActivityGetCanGiveFriendGiftRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 7;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> gift_num_map = 14;
     */
    giftNumMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetCanGiveFriendGiftRsp.CmdId
 */
export enum ActivityGetCanGiveFriendGiftRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8848;
     */
    CMD_ID = 8848,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivitySetGiftWishReq
 */
export interface ActivitySetGiftWishReq {
    /**
     * @generated from protobuf field: map<uint32, uint32> gift_num_map = 2;
     */
    giftNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 14;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivitySetGiftWishReq.CmdId
 */
export enum ActivitySetGiftWishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8017;
     */
    CMD_ID = 8017,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivitySetGiftWishRsp
 */
export interface ActivitySetGiftWishRsp {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 15;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivitySetGiftWishRsp.CmdId
 */
export enum ActivitySetGiftWishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8554;
     */
    CMD_ID = 8554,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityFriendGiftWishData
 */
export interface ActivityFriendGiftWishData {
    /**
     * @generated from protobuf field: optional string nickname = 7;
     */
    nickname?: string;
    /**
     * @generated from protobuf field: optional string remark_name = 3;
     */
    remarkName?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 11;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: map<uint32, uint32> gift_num_map = 9;
     */
    giftNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 uid = 8;
     */
    uid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetFriendGiftWishListReq
 */
export interface ActivityGetFriendGiftWishListReq {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 6;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetFriendGiftWishListReq.CmdId
 */
export enum ActivityGetFriendGiftWishListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8806;
     */
    CMD_ID = 8806,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityGetFriendGiftWishListRsp
 */
export interface ActivityGetFriendGiftWishListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityFriendGiftWishData friend_gift_wish_list = 11;
     */
    friendGiftWishList: ActivityFriendGiftWishData[];
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 10;
     */
    scheduleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetFriendGiftWishListRsp.CmdId
 */
export enum ActivityGetFriendGiftWishListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8253;
     */
    CMD_ID = 8253,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LuminanceStoneChallengeActivityDetailInfo
 */
export interface LuminanceStoneChallengeActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 best_score = 11;
     */
    bestScore?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 6;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional bool is_final_gallery_complete = 12;
     */
    isFinalGalleryComplete?: boolean;
    /**
     * @generated from protobuf field: optional uint32 current_stage_id = 15;
     */
    currentStageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.LuminanceStoneChallengeSettleInfo
 */
export interface LuminanceStoneChallengeSettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.LuminanceStoneChallengeGallerySettleInfo settle_info = 13;
     */
    settleInfo?: LuminanceStoneChallengeGallerySettleInfo;
    /**
     * @generated from protobuf field: optional bool is_new_record = 12;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.LuminanceStoneChallengeSettleNotify
 */
export interface LuminanceStoneChallengeSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 10;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.LuminanceStoneChallengeSettleInfo settle_info = 13;
     */
    settleInfo?: LuminanceStoneChallengeSettleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.LuminanceStoneChallengeSettleNotify.CmdId
 */
export enum LuminanceStoneChallengeSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8186;
     */
    CMD_ID = 8186,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryDungeonRecord
 */
export interface RogueDiaryDungeonRecord {
    /**
     * @generated from protobuf field: optional bool is_finish = 10;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_round = 5;
     */
    maxRound?: number;
    /**
     * @generated from protobuf field: optional uint32 finish_time = 15;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 13;
     */
    difficulty?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryStageInfo
 */
export interface RogueDiaryStageInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueDiaryDungeonRecord best_record = 12;
     */
    bestRecord?: RogueDiaryDungeonRecord;
    /**
     * @generated from protobuf field: optional bool is_have_try = 10;
     */
    isHaveTry?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryProgress
 */
export interface RogueDiaryProgress {
    /**
     * @generated from protobuf field: optional uint32 difficulty = 7;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: repeated uint32 optional_card_list = 4;
     */
    optionalCardList: number[];
    /**
     * @generated from protobuf field: optional bool is_enter_dungeon = 9;
     */
    isEnterDungeon?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_round = 3;
     */
    curRound?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryActivityDetailInfo
 */
export interface RogueDiaryActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryStageInfo stage_list = 11;
     */
    stageList: RogueDiaryStageInfo[];
    /**
     * @generated from protobuf field: optional bool is_have_progress = 10;
     */
    isHaveProgress?: boolean;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 2;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueDiaryProgress cur_progress = 7;
     */
    curProgress?: RogueDiaryProgress;
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryAvatar
 */
export interface RogueDiaryAvatar {
    /**
     * @generated from protobuf field: optional com.midnights.game.ActivityDungeonAvatar avatar = 2;
     */
    avatar?: ActivityDungeonAvatar;
    /**
     * @generated from protobuf field: optional uint32 level = 14;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 tired_round = 13;
     */
    tiredRound?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatarDisableStatus disable_status_list = 9;
     */
    disableStatusList: RogueDiaryAvatarDisableStatus[];
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryRoomInfo
 */
export interface RogueDiaryRoomInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Uint32Pair monster_list = 1;
     */
    monsterList: Uint32Pair[];
    /**
     * @generated from protobuf field: optional bool is_boss = 3;
     */
    isBoss?: boolean;
    /**
     * @generated from protobuf field: optional uint32 config_id = 7;
     */
    configId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueDiaryPlayReq
 */
export interface StartRogueDiaryPlayReq {
    /**
     * @generated from protobuf field: optional uint32 difficulty = 1;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryPlayReq.CmdId
 */
export enum StartRogueDiaryPlayReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8419;
     */
    CMD_ID = 8419,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueDiaryPlayRsp
 */
export interface StartRogueDiaryPlayRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 13;
     */
    trialAvatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated uint32 rand_card_list = 12;
     */
    randCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar avatar_list = 9;
     */
    avatarList: RogueDiaryAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryPlayRsp.CmdId
 */
export enum StartRogueDiaryPlayRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8385;
     */
    CMD_ID = 8385,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ResetRogueDiaryPlayReq
 */
export interface ResetRogueDiaryPlayReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 5;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ResetRogueDiaryPlayReq.CmdId
 */
export enum ResetRogueDiaryPlayReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8127;
     */
    CMD_ID = 8127,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ResetRogueDiaryPlayRsp
 */
export interface ResetRogueDiaryPlayRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ResetRogueDiaryPlayRsp.CmdId
 */
export enum ResetRogueDiaryPlayRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8948;
     */
    CMD_ID = 8948,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterRogueDiaryDungeonReq
 */
export interface EnterRogueDiaryDungeonReq {
    /**
     * @generated from protobuf field: repeated uint32 chosen_card_list = 9;
     */
    chosenCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 11;
     */
    chosenAvatarList: RogueDiaryAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.EnterRogueDiaryDungeonReq.CmdId
 */
export enum EnterRogueDiaryDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8943;
     */
    CMD_ID = 8943,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterRogueDiaryDungeonRsp
 */
export interface EnterRogueDiaryDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterRogueDiaryDungeonRsp.CmdId
 */
export enum EnterRogueDiaryDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8352;
     */
    CMD_ID = 8352,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ResumeRogueDiaryDungeonReq
 */
export interface ResumeRogueDiaryDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 2;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ResumeRogueDiaryDungeonReq.CmdId
 */
export enum ResumeRogueDiaryDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8838;
     */
    CMD_ID = 8838,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ResumeRogueDiaryDungeonRsp
 */
export interface ResumeRogueDiaryDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ResumeRogueDiaryDungeonRsp.CmdId
 */
export enum ResumeRogueDiaryDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8989;
     */
    CMD_ID = 8989,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryDungeonInfoNotify
 */
export interface RogueDiaryDungeonInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 12;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint32 round_monster_list = 15;
     */
    roundMonsterList: number[];
    /**
     * @generated from protobuf field: optional uint32 time = 4;
     */
    time?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_room = 5;
     */
    curRoom?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_round = 6;
     */
    curRound?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 11;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 8;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 14;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryRoomInfo room_list = 7;
     */
    roomList: RogueDiaryRoomInfo[];
    /**
     * @generated from protobuf field: repeated uint32 round_card_list = 10;
     */
    roundCardList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryDungeonInfoNotify.CmdId
 */
export enum RogueDiaryDungeonInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8597;
     */
    CMD_ID = 8597,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryDungeonSettleNotify
 */
export interface RogueDiaryDungeonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 explore_time = 1;
     */
    exploreTime?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 3;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cur_round = 2;
     */
    curRound?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryDungeonSettleNotify.CmdId
 */
export enum RogueDiaryDungeonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8895;
     */
    CMD_ID = 8895,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueDiaryRoomReq
 */
export interface StartRogueDiaryRoomReq {
    /**
     * @generated from protobuf field: optional uint32 room_difficulty = 13;
     */
    roomDifficulty?: number;
    /**
     * @generated from protobuf field: optional bool is_select_hard = 1;
     */
    isSelectHard?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryRoomReq.CmdId
 */
export enum StartRogueDiaryRoomReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8159;
     */
    CMD_ID = 8159,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.StartRogueDiaryRoomRsp
 */
export interface StartRogueDiaryRoomRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryRoomRsp.CmdId
 */
export enum StartRogueDiaryRoomRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8793;
     */
    CMD_ID = 8793,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryTiredAvatarNotify
 */
export interface RogueDiaryTiredAvatarNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar optianal_tired_avatar_list = 10;
     */
    optianalTiredAvatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: optional uint32 reserve_avatar_num = 6;
     */
    reserveAvatarNum?: number;
    /**
     * @generated from protobuf field: optional uint32 tired_type = 8;
     */
    tiredType?: number;
    /**
     * @generated from protobuf field: optional bool is_need_show = 7;
     */
    isNeedShow?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryTiredAvatarNotify.CmdId
 */
export enum RogueDiaryTiredAvatarNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8514;
     */
    CMD_ID = 8514,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReserveRogueDiaryAvatarReq
 */
export interface ReserveRogueDiaryAvatarReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar reserve_avatar_list = 6;
     */
    reserveAvatarList: RogueDiaryAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.ReserveRogueDiaryAvatarReq.CmdId
 */
export enum ReserveRogueDiaryAvatarReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8748;
     */
    CMD_ID = 8748,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReserveRogueDiaryAvatarRsp
 */
export interface ReserveRogueDiaryAvatarRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReserveRogueDiaryAvatarRsp.CmdId
 */
export enum ReserveRogueDiaryAvatarRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8799;
     */
    CMD_ID = 8799,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetRogueDairyRepairInfoReq
 */
export interface GetRogueDairyRepairInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetRogueDairyRepairInfoReq.CmdId
 */
export enum GetRogueDairyRepairInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8014;
     */
    CMD_ID = 8014,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetRogueDairyRepairInfoRsp
 */
export interface GetRogueDairyRepairInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetRogueDairyRepairInfoRsp.CmdId
 */
export enum GetRogueDairyRepairInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8447;
     */
    CMD_ID = 8447,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RefreshRogueDiaryCardReq
 */
export interface RefreshRogueDiaryCardReq {
    /**
     * @generated from protobuf field: repeated uint32 refresh_card_list = 8;
     */
    refreshCardList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.RefreshRogueDiaryCardReq.CmdId
 */
export enum RefreshRogueDiaryCardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8991;
     */
    CMD_ID = 8991,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RefreshRogueDiaryCardRsp
 */
export interface RefreshRogueDiaryCardRsp {
    /**
     * @generated from protobuf field: repeated uint32 rand_card_list = 15;
     */
    randCardList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RefreshRogueDiaryCardRsp.CmdId
 */
export enum RefreshRogueDiaryCardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8028;
     */
    CMD_ID = 8028,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueFinishRepairReq
 */
export interface RogueFinishRepairReq {
    /**
     * @generated from protobuf field: repeated uint32 chosen_card_list = 1;
     */
    chosenCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 8;
     */
    chosenAvatarList: RogueDiaryAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.RogueFinishRepairReq.CmdId
 */
export enum RogueFinishRepairReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8363;
     */
    CMD_ID = 8363,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueFinishRepairRsp
 */
export interface RogueFinishRepairRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueFinishRepairRsp.CmdId
 */
export enum RogueFinishRepairRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8535;
     */
    CMD_ID = 8535,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonReq
 */
export interface TryInterruptRogueDiaryDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.TryInterruptRogueDiaryDungeonReq.CmdId
 */
export enum TryInterruptRogueDiaryDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8617;
     */
    CMD_ID = 8617,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonRsp
 */
export interface TryInterruptRogueDiaryDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TryInterruptRogueDiaryDungeonRsp.CmdId
 */
export enum TryInterruptRogueDiaryDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8903;
     */
    CMD_ID = 8903,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryRepairInfoNotify
 */
export interface RogueDiaryRepairInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 8;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint32 select_card_list = 14;
     */
    selectCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar avatar_list = 13;
     */
    avatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryRoomInfo room_list = 2;
     */
    roomList: RogueDiaryRoomInfo[];
    /**
     * @generated from protobuf field: repeated uint32 rand_card_list = 10;
     */
    randCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar select_avatar_list = 9;
     */
    selectAvatarList: RogueDiaryAvatar[];
    /**
     * @generated from protobuf field: repeated uint32 chosen_card_list = 15;
     */
    chosenCardList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 11;
     */
    trialAvatarList: RogueDiaryAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryRepairInfoNotify.CmdId
 */
export enum RogueDiaryRepairInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8641;
     */
    CMD_ID = 8641,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RetryCurRogueDiaryDungeonReq
 */
export interface RetryCurRogueDiaryDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.RetryCurRogueDiaryDungeonReq.CmdId
 */
export enum RetryCurRogueDiaryDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8398;
     */
    CMD_ID = 8398,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RetryCurRogueDiaryDungeonRsp
 */
export interface RetryCurRogueDiaryDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RetryCurRogueDiaryDungeonRsp.CmdId
 */
export enum RetryCurRogueDiaryDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8334;
     */
    CMD_ID = 8334,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryReviveAvatarReq
 */
export interface RogueDiaryReviveAvatarReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.RogueDiaryAvatar revive_avatar = 2;
     */
    reviveAvatar?: RogueDiaryAvatar;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryReviveAvatarReq.CmdId
 */
export enum RogueDiaryReviveAvatarReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8038;
     */
    CMD_ID = 8038,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryReviveAvatarRsp
 */
export interface RogueDiaryReviveAvatarRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryReviveAvatarRsp.CmdId
 */
export enum RogueDiaryReviveAvatarRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8343;
     */
    CMD_ID = 8343,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonReq
 */
export interface TryEnterNextRogueDiaryDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.TryEnterNextRogueDiaryDungeonReq.CmdId
 */
export enum TryEnterNextRogueDiaryDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8280;
     */
    CMD_ID = 8280,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonRsp
 */
export interface TryEnterNextRogueDiaryDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TryEnterNextRogueDiaryDungeonRsp.CmdId
 */
export enum TryEnterNextRogueDiaryDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8362;
     */
    CMD_ID = 8362,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RogueDiaryCoinAddNotify
 */
export interface RogueDiaryCoinAddNotify {
    /**
     * @generated from protobuf field: optional uint32 num = 10;
     */
    num?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryCoinAddNotify.CmdId
 */
export enum RogueDiaryCoinAddNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8602;
     */
    CMD_ID = 8602,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2DetailInfo
 */
export interface SummerTimeV2DetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 13;
     */
    dungeonStageInfoList: SummerTimeV2DungeonStageInfo[];
    /**
     * @generated from protobuf field: optional uint32 cur_dungeon_reward_limit = 10;
     */
    curDungeonRewardLimit?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 4;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 taken_reward_count = 5;
     */
    takenRewardCount?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SummerTimeV2BoatStageInfo boat_stage_info_list = 15;
     */
    boatStageInfoList: SummerTimeV2BoatStageInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2DungeonStageInfo
 */
export interface SummerTimeV2DungeonStageInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 10;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 3;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 12;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_prev_dungeon_succeed = 15;
     */
    isPrevDungeonSucceed?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2BoatStageInfo
 */
export interface SummerTimeV2BoatStageInfo {
    /**
     * @generated from protobuf field: optional uint32 open_time = 7;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 14;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 10;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 best_score = 13;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2BoatSettleNotify
 */
export interface SummerTimeV2BoatSettleNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.SummerTimeV2BoatGallerySettleInfo settle_info = 11;
     */
    settleInfo?: SummerTimeV2BoatGallerySettleInfo;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 2;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 1;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2BoatSettleNotify.CmdId
 */
export enum SummerTimeV2BoatSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8870;
     */
    CMD_ID = 8870,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityPushTipsData
 */
export interface ActivityPushTipsData {
    /**
     * @generated from protobuf field: optional com.midnights.game.ActivityPushTipsState state = 10;
     */
    state?: ActivityPushTipsState;
    /**
     * @generated from protobuf field: optional uint32 activity_push_tips_id = 4;
     */
    activityPushTipsId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ActivityPushTipsInfoNotify
 */
export interface ActivityPushTipsInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 14;
     */
    scheduleId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 3;
     */
    activityPushTipsDataList: ActivityPushTipsData[];
    /**
     * @generated from protobuf field: optional uint32 activity_id = 10;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityPushTipsInfoNotify.CmdId
 */
export enum ActivityPushTipsInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8513;
     */
    CMD_ID = 8513,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityReadPushTipsReq
 */
export interface ActivityReadPushTipsReq {
    /**
     * @generated from protobuf field: repeated uint32 activity_push_tips_id_list = 14;
     */
    activityPushTipsIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 activity_id = 7;
     */
    activityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityReadPushTipsReq.CmdId
 */
export enum ActivityReadPushTipsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8145;
     */
    CMD_ID = 8145,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ActivityReadPushTipsRsp
 */
export interface ActivityReadPushTipsRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityReadPushTipsRsp.CmdId
 */
export enum ActivityReadPushTipsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8574;
     */
    CMD_ID = 8574,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryReq
 */
export interface SummerTimeV2RestartBoatGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 5;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartBoatGalleryReq.CmdId
 */
export enum SummerTimeV2RestartBoatGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8476;
     */
    CMD_ID = 8476,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryRsp
 */
export interface SummerTimeV2RestartBoatGalleryRsp {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartBoatGalleryRsp.CmdId
 */
export enum SummerTimeV2RestartBoatGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8004;
     */
    CMD_ID = 8004,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2RestartDungeonReq
 */
export interface SummerTimeV2RestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartDungeonReq.CmdId
 */
export enum SummerTimeV2RestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8346;
     */
    CMD_ID = 8346,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2RestartDungeonRsp
 */
export interface SummerTimeV2RestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartDungeonRsp.CmdId
 */
export enum SummerTimeV2RestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 8996;
     */
    CMD_ID = 8996,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartyStageData
 */
export interface IslandPartyStageData {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 14;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 best_score = 4;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartyDetailInfo
 */
export interface IslandPartyDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.IslandPartyStageData stage_data_list = 15;
     */
    stageDataList: IslandPartyStageData[];
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartySettleNotify
 */
export interface IslandPartySettleNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 13;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 1;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: repeated com.midnights.game.IslandPartyGallerySettleInfo settle_info_list = 8;
     */
    settleInfoList: IslandPartyGallerySettleInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExhibitionDisplayInfo score_list = 6;
     */
    scoreList: ExhibitionDisplayInfo[];
    /**
     * @generated from protobuf field: optional uint32 time_remain = 15;
     */
    timeRemain?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IslandPartySettleNotify.CmdId
 */
export enum IslandPartySettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24601;
     */
    CMD_ID = 24601,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearLevelData
 */
export interface GearLevelData {
    /**
     * @generated from protobuf field: optional uint32 shortest_time = 8;
     */
    shortestTime?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 11;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 last_duration = 5;
     */
    lastDuration?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_finished = 9;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional bool is_open = 3;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.JigsawPictureData
 */
export interface JigsawPictureData {
    /**
     * @generated from protobuf field: optional bool is_finished = 7;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 shortest_time = 10;
     */
    shortestTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 5;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 last_duration = 6;
     */
    lastDuration?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityDetailInfo
 */
export interface GearActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GearLevelData gear_level_data_list = 14;
     */
    gearLevelDataList: GearLevelData[];
    /**
     * @generated from protobuf field: optional com.midnights.game.JigsawPictureData jigsaw_picture_data = 8;
     */
    jigsawPictureData?: JigsawPictureData;
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityStartPlayGearReq
 */
export interface GearActivityStartPlayGearReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayGearReq.CmdId
 */
export enum GearActivityStartPlayGearReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23467;
     */
    CMD_ID = 23467,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityStartPlayGearRsp
 */
export interface GearActivityStartPlayGearRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 9;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayGearRsp.CmdId
 */
export enum GearActivityStartPlayGearRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21025;
     */
    CMD_ID = 21025,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearColumnInfo
 */
export interface GearColumnInfo {
    /**
     * @generated from protobuf field: optional uint32 gear_column_index = 7;
     */
    gearColumnIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_overturn = 3;
     */
    isOverturn?: boolean;
    /**
     * @generated from protobuf field: optional bool has_gear = 2;
     */
    hasGear?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gear_id = 11;
     */
    gearId?: number;
    /**
     * @generated from protobuf field: optional uint32 placement_layer = 6;
     */
    placementLayer?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityFinishPlayGearReq
 */
export interface GearActivityFinishPlayGearReq {
    /**
     * @generated from protobuf field: optional bool is_success = 4;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional bool use_clue = 12;
     */
    useClue?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GearColumnInfo gear_column_info_list = 9;
     */
    gearColumnInfoList: GearColumnInfo[];
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayGearReq.CmdId
 */
export enum GearActivityFinishPlayGearReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21834;
     */
    CMD_ID = 21834,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityFinishPlayGearRsp
 */
export interface GearActivityFinishPlayGearRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 15;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 3;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayGearRsp.CmdId
 */
export enum GearActivityFinishPlayGearRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21800;
     */
    CMD_ID = 21800,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityStartPlayPictureReq
 */
export interface GearActivityStartPlayPictureReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayPictureReq.CmdId
 */
export enum GearActivityStartPlayPictureReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24550;
     */
    CMD_ID = 24550,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityStartPlayPictureRsp
 */
export interface GearActivityStartPlayPictureRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayPictureRsp.CmdId
 */
export enum GearActivityStartPlayPictureRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23388;
     */
    CMD_ID = 23388,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityFinishPlayPictureReq
 */
export interface GearActivityFinishPlayPictureReq {
    /**
     * @generated from protobuf field: optional bool is_success = 8;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayPictureReq.CmdId
 */
export enum GearActivityFinishPlayPictureReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21054;
     */
    CMD_ID = 21054,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GearActivityFinishPlayPictureRsp
 */
export interface GearActivityFinishPlayPictureRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 6;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayPictureRsp.CmdId
 */
export enum GearActivityFinishPlayPictureRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21851;
     */
    CMD_ID = 21851,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoStageInfo
 */
export interface GravenInnocencePhotoStageInfo {
    /**
     * @generated from protobuf field: optional bool is_finished = 11;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 6;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoObjectInfo
 */
export interface GravenInnocencePhotoObjectInfo {
    /**
     * @generated from protobuf field: optional uint32 object_id = 1;
     */
    objectId?: number;
    /**
     * @generated from protobuf field: optional uint32 finish_time = 4;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 14;
     */
    param?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoInfo
 */
export interface GravenInnocencePhotoInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GravenInnocencePhotoStageInfo stage_info_list = 5;
     */
    stageInfoList: GravenInnocencePhotoStageInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.GravenInnocencePhotoObjectInfo object_info_list = 7;
     */
    objectInfoList: GravenInnocencePhotoObjectInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceCampStageInfo
 */
export interface GravenInnocenceCampStageInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 15;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_finished = 3;
     */
    isFinished?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceCampInfo
 */
export interface GravenInnocenceCampInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GravenInnocenceCampStageInfo stage_info_list = 5;
     */
    stageInfoList: GravenInnocenceCampStageInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceRaceLevelInfo
 */
export interface GravenInnocenceRaceLevelInfo {
    /**
     * @generated from protobuf field: optional uint32 level_id = 13;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 14;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceRaceInfo
 */
export interface GravenInnocenceRaceInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GravenInnocenceRaceLevelInfo level_info_list = 11;
     */
    levelInfoList: GravenInnocenceRaceLevelInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceCarveStageInfo
 */
export interface GravenInnocenceCarveStageInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 1;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceCarveInfo
 */
export interface GravenInnocenceCarveInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GravenInnocenceCarveStageInfo stage_info_list = 10;
     */
    stageInfoList: GravenInnocenceCarveStageInfo[];
    /**
     * @generated from protobuf field: optional uint32 can_edit_count = 7;
     */
    canEditCount?: number;
    /**
     * @generated from protobuf field: repeated uint32 has_edit_config_id_list = 6;
     */
    hasEditConfigIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceDetailInfo
 */
export interface GravenInnocenceDetailInfo {
    /**
     * @generated from protobuf field: optional bool is_content_closed = 8;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.GravenInnocenceRaceInfo race_info = 10;
     */
    raceInfo?: GravenInnocenceRaceInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.GravenInnocencePhotoInfo photo_info = 7;
     */
    photoInfo?: GravenInnocencePhotoInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.GravenInnocenceCarveInfo carve_info = 13;
     */
    carveInfo?: GravenInnocenceCarveInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.GravenInnocenceCampInfo camp_info = 12;
     */
    campInfo?: GravenInnocenceCampInfo;
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceRaceSettleNotify
 */
export interface GravenInnocenceRaceSettleNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 4;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 6;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 5;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 2;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 total_coint_count = 13;
     */
    totalCointCount?: number;
    /**
     * @generated from protobuf field: optional uint32 remain_time = 10;
     */
    remainTime?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_progress = 1;
     */
    challengeProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_count = 8;
     */
    coinCount?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 7;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 11;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceSettleNotify.CmdId
 */
export enum GravenInnocenceRaceSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20681;
     */
    CMD_ID = 20681,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceRaceRestartReq
 */
export interface GravenInnocenceRaceRestartReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 6;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceRestartReq.CmdId
 */
export enum GravenInnocenceRaceRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22882;
     */
    CMD_ID = 22882,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceRaceRestartRsp
 */
export interface GravenInnocenceRaceRestartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 6;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceRestartRsp.CmdId
 */
export enum GravenInnocenceRaceRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21880;
     */
    CMD_ID = 21880,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationReq
 */
export interface GravenInnocenceEditCarveCombinationReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11;
     */
    combinationInfo?: CustomGadgetTreeInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceEditCarveCombinationReq.CmdId
 */
export enum GravenInnocenceEditCarveCombinationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23107;
     */
    CMD_ID = 23107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationRsp
 */
export interface GravenInnocenceEditCarveCombinationRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceEditCarveCombinationRsp.CmdId
 */
export enum GravenInnocenceEditCarveCombinationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20702;
     */
    CMD_ID = 20702,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoFinishReq
 */
export interface GravenInnocencePhotoFinishReq {
    /**
     * @generated from protobuf field: optional uint32 param = 1;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional uint32 object_id = 4;
     */
    objectId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoFinishReq.CmdId
 */
export enum GravenInnocencePhotoFinishReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21750;
     */
    CMD_ID = 21750,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoFinishRsp
 */
export interface GravenInnocencePhotoFinishRsp {
    /**
     * @generated from protobuf field: optional uint32 object_id = 6;
     */
    objectId?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 11;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoFinishRsp.CmdId
 */
export enum GravenInnocencePhotoFinishRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23948;
     */
    CMD_ID = 23948,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GravenInnocencePhotoReminderNotify
 */
export interface GravenInnocencePhotoReminderNotify {
    /**
     * @generated from protobuf field: optional uint32 group_bundle_id = 14;
     */
    groupBundleId?: number;
    /**
     * @generated from protobuf field: optional uint32 reminder_id = 6;
     */
    reminderId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoReminderNotify.CmdId
 */
export enum GravenInnocencePhotoReminderNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23864;
     */
    CMD_ID = 23864,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayTeamInfo
 */
export interface InstableSprayTeamInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13;
     */
    avatarInfoList: InstableSprayAvatarInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayStageInfo
 */
export interface InstableSprayStageInfo {
    /**
     * @generated from protobuf field: optional bool is_finished = 10;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_score = 3;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 4;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayTeamInfo team_info_list = 6;
     */
    teamInfoList: InstableSprayTeamInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayDetailInfo
 */
export interface InstableSprayDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayStageInfo stage_info_list = 9;
     */
    stageInfoList: InstableSprayStageInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayAvatarInfo
 */
export interface InstableSprayAvatarInfo {
    /**
     * @generated from protobuf field: optional bool is_trial = 8;
     */
    isTrial?: boolean;
    /**
     * @generated from protobuf field: optional uint64 avatar_id = 2;
     */
    avatarId?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayEnterDungeonReq
 */
export interface InstableSprayEnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 13;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 2;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 7;
     */
    avatarInfoList: InstableSprayAvatarInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayEnterDungeonReq.CmdId
 */
export enum InstableSprayEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24312;
     */
    CMD_ID = 24312,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayEnterDungeonRsp
 */
export interface InstableSprayEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 11;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayEnterDungeonRsp.CmdId
 */
export enum InstableSprayEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23381;
     */
    CMD_ID = 23381,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSpraySwitchTeamReq
 */
export interface InstableSpraySwitchTeamReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13;
     */
    avatarInfoList: InstableSprayAvatarInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSpraySwitchTeamReq.CmdId
 */
export enum InstableSpraySwitchTeamReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24857;
     */
    CMD_ID = 24857,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSpraySwitchTeamRsp
 */
export interface InstableSpraySwitchTeamRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 1;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSpraySwitchTeamRsp.CmdId
 */
export enum InstableSpraySwitchTeamRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24152;
     */
    CMD_ID = 24152,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayLevelFinishNotify
 */
export interface InstableSprayLevelFinishNotify {
    /**
     * @generated from protobuf field: optional bool is_need_switch_team = 11;
     */
    isNeedSwitchTeam?: boolean;
    /**
     * @generated from protobuf field: optional bool is_skip_black_screen = 7;
     */
    isSkipBlackScreen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 round = 15;
     */
    round?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 8;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayLevelFinishNotify.CmdId
 */
export enum InstableSprayLevelFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21961;
     */
    CMD_ID = 21961,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayRestartDungeonReq
 */
export interface InstableSprayRestartDungeonReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 6;
     */
    avatarInfoList: InstableSprayAvatarInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayRestartDungeonReq.CmdId
 */
export enum InstableSprayRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23678;
     */
    CMD_ID = 23678,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayRestartDungeonRsp
 */
export interface InstableSprayRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 1;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayRestartDungeonRsp.CmdId
 */
export enum InstableSprayRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24923;
     */
    CMD_ID = 24923,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionLevelData
 */
export interface MuqadasPotionLevelData {
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 9;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 10;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionActivityDetailInfo
 */
export interface MuqadasPotionActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MuqadasPotionLevelData muqadas_potion_level_data_list = 8;
     */
    muqadasPotionLevelDataList: MuqadasPotionLevelData[];
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonReq
 */
export interface MuqadasPotionActivityEnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionActivityEnterDungeonReq.CmdId
 */
export enum MuqadasPotionActivityEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24602;
     */
    CMD_ID = 24602,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonRsp
 */
export interface MuqadasPotionActivityEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 9;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionActivityEnterDungeonRsp.CmdId
 */
export enum MuqadasPotionActivityEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21804;
     */
    CMD_ID = 21804,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionDungeonSettleNotify
 */
export interface MuqadasPotionDungeonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 final_score = 11;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 capture_weakness_count = 15;
     */
    captureWeaknessCount?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 6;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 level_id = 10;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 2;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionDungeonSettleNotify.CmdId
 */
export enum MuqadasPotionDungeonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20005;
     */
    CMD_ID = 20005,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionRestartDungeonReq
 */
export interface MuqadasPotionRestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionRestartDungeonReq.CmdId
 */
export enum MuqadasPotionRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22391;
     */
    CMD_ID = 22391,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionRestartDungeonRsp
 */
export interface MuqadasPotionRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionRestartDungeonRsp.CmdId
 */
export enum MuqadasPotionRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21208;
     */
    CMD_ID = 21208,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessReq
 */
export interface MuqadasPotionCaptureWeaknessReq {
    /**
     * @generated from protobuf field: optional uint32 capture_weakness_count = 10;
     */
    captureWeaknessCount?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionCaptureWeaknessReq.CmdId
 */
export enum MuqadasPotionCaptureWeaknessReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20011;
     */
    CMD_ID = 20011,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessRsp
 */
export interface MuqadasPotionCaptureWeaknessRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionCaptureWeaknessRsp.CmdId
 */
export enum MuqadasPotionCaptureWeaknessRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24081;
     */
    CMD_ID = 24081,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TreasureSeelieRegionData
 */
export interface TreasureSeelieRegionData {
    /**
     * @generated from protobuf field: optional bool is_done = 12;
     */
    isDone?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_day = 6;
     */
    openDay?: number;
    /**
     * @generated from protobuf field: optional uint32 opened_chest_num = 10;
     */
    openedChestNum?: number;
    /**
     * @generated from protobuf field: optional float region_radius = 7;
     */
    regionRadius?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 8;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector region_center_pos = 11;
     */
    regionCenterPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 13;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 total_chest_num = 15;
     */
    totalChestNum?: number;
    /**
     * @generated from protobuf field: optional uint32 region_id = 1;
     */
    regionId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TreasureSeelieActivityDetailInfo
 */
export interface TreasureSeelieActivityDetailInfo {
    /**
     * @generated from protobuf field: optional uint32 treasure_close_time = 10;
     */
    treasureCloseTime?: number;
    /**
     * @generated from protobuf field: optional bool is_content_closed = 8;
     */
    isContentClosed?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.TreasureSeelieRegionData region_data_list = 14;
     */
    regionDataList: TreasureSeelieRegionData[];
}
/**
 * @generated from protobuf message com.midnights.game.TreasureSeelieCollectOrbsNotify
 */
export interface TreasureSeelieCollectOrbsNotify {
    /**
     * @generated from protobuf field: optional uint32 current_num = 11;
     */
    currentNum?: number;
    /**
     * @generated from protobuf field: optional uint32 total_num = 5;
     */
    totalNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TreasureSeelieCollectOrbsNotify.CmdId
 */
export enum TreasureSeelieCollectOrbsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20754;
     */
    CMD_ID = 20754,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RockBoardExploreStageData
 */
export interface RockBoardExploreStageData {
    /**
     * @generated from protobuf field: optional bool is_finish = 6;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 7;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 5;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 3;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.RockBoardExploreDetailInfo
 */
export interface RockBoardExploreDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RockBoardExploreStageData stage_data_list = 9;
     */
    stageDataList: RockBoardExploreStageData[];
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingStageData
 */
export interface VintageHuntingStageData {
    /**
     * @generated from protobuf field: optional uint32 open_time = 10;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 3;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 record_value = 12;
     */
    recordValue?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintagePresentLevelData
 */
export interface VintagePresentLevelData {
    /**
     * @generated from protobuf field: optional uint32 present_id = 10;
     */
    presentId?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 11;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional bool is_finish = 5;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintagePresentStageData
 */
export interface VintagePresentStageData {
    /**
     * @generated from protobuf field: optional uint32 open_time = 1;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 13;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional bool is_open = 10;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintagePresentLevelData> present_level_map = 2;
     */
    presentLevelMap: {
        [key: number]: VintagePresentLevelData;
    };
}
/**
 * @generated from protobuf message com.midnights.game.VintageBoothUsedItemData
 */
export interface VintageBoothUsedItemData {
    /**
     * @generated from protobuf field: optional bool is_open = 7;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gadget_id = 8;
     */
    gadgetId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageCampChallengeLevelData
 */
export interface VintageCampChallengeLevelData {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 14;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 11;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 8;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional bool is_open = 6;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.VintageCampChallengeStageData
 */
export interface VintageCampChallengeStageData {
    /**
     * @generated from protobuf field: optional bool is_open = 5;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_finished_level = 11;
     */
    maxFinishedLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 open_time = 3;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 10;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 4;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintageCampChallengeLevelData> camp_level_map = 2;
     */
    campLevelMap: {
        [key: number]: VintageCampChallengeLevelData;
    };
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketTraderInfo
 */
export interface VintageMarketTraderInfo {
    /**
     * @generated from protobuf field: optional uint32 trader_id = 7;
     */
    traderId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam available_item_list = 9;
     */
    availableItemList: ItemParam[];
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketDealInfo
 */
export interface VintageMarketDealInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintageMarketTraderInfo> trader_item_info_map = 13;
     */
    traderItemInfoMap: {
        [key: number]: VintageMarketTraderInfo;
    };
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreInfo
 */
export interface VintageMarketStoreInfo {
    /**
     * @generated from protobuf field: repeated uint32 cur_attr_list = 5;
     */
    curAttrList: number[];
    /**
     * @generated from protobuf field: repeated uint32 next_aim_attr_list = 14;
     */
    nextAimAttrList: number[];
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 2;
     */
    strategyList: number[];
    /**
     * @generated from protobuf field: optional uint32 slot_count = 3;
     */
    slotCount?: number;
    /**
     * @generated from protobuf field: optional uint32 store_id = 10;
     */
    storeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreOpInfo
 */
export interface VintageMarketStoreOpInfo {
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 5;
     */
    strategyList: number[];
    /**
     * @generated from protobuf field: optional uint32 help_uid = 9;
     */
    helpUid?: number;
    /**
     * @generated from protobuf field: optional uint32 store_id = 2;
     */
    storeId?: number;
    /**
     * @generated from protobuf field: optional uint32 help_skill_id = 7;
     */
    helpSkillId?: number;
    /**
     * @generated from protobuf field: repeated uint32 add_attr_list = 15;
     */
    addAttrList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketInfo
 */
export interface VintageMarketInfo {
    /**
     * @generated from protobuf field: optional bool is_help_module_open = 1485;
     */
    isHelpModuleOpen?: boolean;
    /**
     * @generated from protobuf field: optional bool is_store_content_interrupt = 15;
     */
    isStoreContentInterrupt?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.VintageMarketDealInfo deal_info = 11;
     */
    dealInfo?: VintageMarketDealInfo;
    /**
     * @generated from protobuf field: optional uint32 store_round = 7;
     */
    storeRound?: number;
    /**
     * @generated from protobuf field: repeated uint32 store_round_income_list = 207;
     */
    storeRoundIncomeList: number[];
    /**
     * @generated from protobuf field: optional bool is_store_content_finish = 5;
     */
    isStoreContentFinish?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 cur_env_event_list = 8;
     */
    curEnvEventList: number[];
    /**
     * @generated from protobuf field: optional bool is_market_content_open = 10;
     */
    isMarketContentOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 next_can_use_help_round = 1800;
     */
    nextCanUseHelpRound?: number;
    /**
     * @generated from protobuf field: optional bool is_market_content_finish = 2;
     */
    isMarketContentFinish?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 viewed_strategy_list = 14;
     */
    viewedStrategyList: number[];
    /**
     * @generated from protobuf field: optional uint32 prev_coin_c_num = 3;
     */
    prevCoinCNum?: number;
    /**
     * @generated from protobuf field: map<uint32, bool> bargain_info_map = 6;
     */
    bargainInfoMap: {
        [key: number]: boolean;
    };
    /**
     * @generated from protobuf field: optional uint32 dividend_reward_count = 1798;
     */
    dividendRewardCount?: number;
    /**
     * @generated from protobuf field: repeated uint32 cur_npc_event_list = 4;
     */
    curNpcEventList: number[];
    /**
     * @generated from protobuf field: optional bool is_help_in_cd = 366;
     */
    isHelpInCd?: boolean;
    /**
     * @generated from protobuf field: optional uint32 prev_coin_b_num = 1;
     */
    prevCoinBNum?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.VintageMarketStoreInfo open_store_list = 9;
     */
    openStoreList: VintageMarketStoreInfo[];
    /**
     * @generated from protobuf field: optional uint32 help_skill_id = 760;
     */
    helpSkillId?: number;
    /**
     * @generated from protobuf field: optional bool is_round_tips_view = 12;
     */
    isRoundTipsView?: boolean;
    /**
     * @generated from protobuf field: optional bool is_strategy_module_open = 876;
     */
    isStrategyModuleOpen?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 unlock_strategy_list = 13;
     */
    unlockStrategyList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.VintageActivityDetailInfo
 */
export interface VintageActivityDetailInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.VintageMarketInfo market_info = 2;
     */
    marketInfo?: VintageMarketInfo;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintageHuntingStageData> hunting_stage_map = 7;
     */
    huntingStageMap: {
        [key: number]: VintageHuntingStageData;
    };
    /**
     * @generated from protobuf field: optional com.midnights.game.VintageBoothUsedItemData booth_data = 5;
     */
    boothData?: VintageBoothUsedItemData;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintageCampChallengeStageData> camp_stage_map = 13;
     */
    campStageMap: {
        [key: number]: VintageCampChallengeStageData;
    };
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.VintagePresentStageData> present_stage_map = 4;
     */
    presentStageMap: {
        [key: number]: VintagePresentStageData;
    };
    /**
     * @generated from protobuf field: optional bool is_content_closed = 11;
     */
    isContentClosed?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketDeliverItemReq
 */
export interface VintageMarketDeliverItemReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam deliver_item_list = 3;
     */
    deliverItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 trader_id = 5;
     */
    traderId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDeliverItemReq.CmdId
 */
export enum VintageMarketDeliverItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23141;
     */
    CMD_ID = 23141,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketDeliverItemRsp
 */
export interface VintageMarketDeliverItemRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 trader_id = 3;
     */
    traderId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDeliverItemRsp.CmdId
 */
export enum VintageMarketDeliverItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22181;
     */
    CMD_ID = 22181,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingFirstStageSettleInfo
 */
export interface VintageHuntingFirstStageSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 elite_cnt = 10;
     */
    eliteCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 timid_cnt = 2;
     */
    timidCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 brutal_cnt = 6;
     */
    brutalCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 14;
     */
    score?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingSecondStageSettleInfo
 */
export interface VintageHuntingSecondStageSettleInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> animal_count_map = 6;
     */
    animalCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 capture_animal_num = 7;
     */
    captureAnimalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 total_num = 15;
     */
    totalNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingThirdStageSettleInfo
 */
export interface VintageHuntingThirdStageSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 left_time = 13;
     */
    leftTime?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 9;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryVintageHuntingSettleNotify
 */
export interface SceneGalleryVintageHuntingSettleNotify {
    /**
     * @generated from protobuf field: optional bool has_new_watcher = 11;
     */
    hasNewWatcher?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 9;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: optional uint32 total_watcher_num = 12;
     */
    totalWatcherNum?: number;
    /**
     * @generated from protobuf field: optional uint32 finished_watcher_num = 6;
     */
    finishedWatcherNum?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 1;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf oneof: info
     */
    info: {
        oneofKind: "firstStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingFirstStageSettleInfo first_stage_info = 4;
         */
        firstStageInfo: VintageHuntingFirstStageSettleInfo;
    } | {
        oneofKind: "secondStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingSecondStageSettleInfo second_stage_info = 10;
         */
        secondStageInfo: VintageHuntingSecondStageSettleInfo;
    } | {
        oneofKind: "thirdStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingThirdStageSettleInfo third_stage_info = 8;
         */
        thirdStageInfo: VintageHuntingThirdStageSettleInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.SceneGalleryVintageHuntingSettleNotify.CmdId
 */
export enum SceneGalleryVintageHuntingSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20324;
     */
    CMD_ID = 20324,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintagePresentFinishNoify
 */
export interface VintagePresentFinishNoify {
    /**
     * @generated from protobuf field: optional uint32 present_id = 7;
     */
    presentId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintagePresentFinishNoify.CmdId
 */
export enum VintagePresentFinishNoify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24142;
     */
    CMD_ID = 24142,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageDecorateBoothReq
 */
export interface VintageDecorateBoothReq {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 6;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11;
     */
    combinationInfo?: CustomGadgetTreeInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageDecorateBoothReq.CmdId
 */
export enum VintageDecorateBoothReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20846;
     */
    CMD_ID = 20846,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageDecorateBoothRsp
 */
export interface VintageDecorateBoothRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageDecorateBoothRsp.CmdId
 */
export enum VintageDecorateBoothRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20993;
     */
    CMD_ID = 20993,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingStartGalleryReq
 */
export interface VintageHuntingStartGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageHuntingStartGalleryReq.CmdId
 */
export enum VintageHuntingStartGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21780;
     */
    CMD_ID = 21780,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingStartGalleryRsp
 */
export interface VintageHuntingStartGalleryRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageHuntingStartGalleryRsp.CmdId
 */
export enum VintageHuntingStartGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21951;
     */
    CMD_ID = 21951,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageCampGroupBundleRegisterNotify
 */
export interface VintageCampGroupBundleRegisterNotify {
    /**
     * @generated from protobuf field: optional uint32 group_bundle_id = 10;
     */
    groupBundleId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageCampGroupBundleRegisterNotify.CmdId
 */
export enum VintageCampGroupBundleRegisterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24244;
     */
    CMD_ID = 24244,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageCampStageFinishNotify
 */
export interface VintageCampStageFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 11;
     */
    stageId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageCampStageFinishNotify.CmdId
 */
export enum VintageCampStageFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22830;
     */
    CMD_ID = 22830,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStartStorePlayReq
 */
export interface VintageMarketStartStorePlayReq {
    /**
     * @generated from protobuf field: optional uint32 store_round = 5;
     */
    storeRound?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStartStorePlayReq.CmdId
 */
export enum VintageMarketStartStorePlayReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22864;
     */
    CMD_ID = 22864,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStartStorePlayRsp
 */
export interface VintageMarketStartStorePlayRsp {
    /**
     * @generated from protobuf field: optional uint32 prev_round_coin_b = 7;
     */
    prevRoundCoinB?: number;
    /**
     * @generated from protobuf field: optional uint32 store_round = 2;
     */
    storeRound?: number;
    /**
     * @generated from protobuf field: optional uint32 prev_round_coin_c = 5;
     */
    prevRoundCoinC?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStartStorePlayRsp.CmdId
 */
export enum VintageMarketStartStorePlayRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22130;
     */
    CMD_ID = 22130,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketFinishStorePlayReq
 */
export interface VintageMarketFinishStorePlayReq {
    /**
     * @generated from protobuf field: optional uint32 store_round = 9;
     */
    storeRound?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 3;
     */
    storeOpList: VintageMarketStoreOpInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketFinishStorePlayReq.CmdId
 */
export enum VintageMarketFinishStorePlayReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20676;
     */
    CMD_ID = 20676,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketFinishStorePlayRsp
 */
export interface VintageMarketFinishStorePlayRsp {
    /**
     * @generated from protobuf field: repeated uint32 trigger_env_event_list = 8;
     */
    triggerEnvEventList: number[];
    /**
     * @generated from protobuf field: optional uint32 store_round = 12;
     */
    storeRound?: number;
    /**
     * @generated from protobuf field: repeated uint32 trigger_npc_event_list = 10;
     */
    triggerNpcEventList: number[];
    /**
     * @generated from protobuf field: repeated uint32 low_attr_store_list = 11;
     */
    lowAttrStoreList: number[];
    /**
     * @generated from protobuf field: optional uint32 round_coin_b_income = 9;
     */
    roundCoinBIncome?: number;
    /**
     * @generated from protobuf field: optional uint32 round_delta_coin_c = 1;
     */
    roundDeltaCoinC?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> store_income_map = 3;
     */
    storeIncomeMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 round_total_income = 14;
     */
    roundTotalIncome?: number;
    /**
     * @generated from protobuf field: optional uint32 display_return_coin_b = 15;
     */
    displayReturnCoinB?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketFinishStorePlayRsp.CmdId
 */
export enum VintageMarketFinishStorePlayRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23462;
     */
    CMD_ID = 23462,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintagePresentFinishNotify
 */
export interface VintagePresentFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 present_id = 3;
     */
    presentId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintagePresentFinishNotify.CmdId
 */
export enum VintagePresentFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20086;
     */
    CMD_ID = 20086,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreUnlockSlotReq
 */
export interface VintageMarketStoreUnlockSlotReq {
    /**
     * @generated from protobuf field: optional uint32 store_id = 10;
     */
    storeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreUnlockSlotReq.CmdId
 */
export enum VintageMarketStoreUnlockSlotReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20626;
     */
    CMD_ID = 20626,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreUnlockSlotRsp
 */
export interface VintageMarketStoreUnlockSlotRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 slot_count = 6;
     */
    slotCount?: number;
    /**
     * @generated from protobuf field: optional uint32 store_id = 10;
     */
    storeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreUnlockSlotRsp.CmdId
 */
export enum VintageMarketStoreUnlockSlotRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20733;
     */
    CMD_ID = 20733,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreChooseStrategyReq
 */
export interface VintageMarketStoreChooseStrategyReq {
    /**
     * @generated from protobuf field: optional uint32 store_id = 6;
     */
    storeId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 9;
     */
    storeOpList: VintageMarketStoreOpInfo[];
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 8;
     */
    strategyList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreChooseStrategyReq.CmdId
 */
export enum VintageMarketStoreChooseStrategyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21248;
     */
    CMD_ID = 21248,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreChooseStrategyRsp
 */
export interface VintageMarketStoreChooseStrategyRsp {
    /**
     * @generated from protobuf field: optional uint32 store_id = 15;
     */
    storeId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 2;
     */
    strategyList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreChooseStrategyRsp.CmdId
 */
export enum VintageMarketStoreChooseStrategyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24860;
     */
    CMD_ID = 24860,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreViewStrategyReq
 */
export interface VintageMarketStoreViewStrategyReq {
    /**
     * @generated from protobuf field: optional uint32 strategy_id = 1;
     */
    strategyId?: number;
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 14;
     */
    strategyList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreViewStrategyReq.CmdId
 */
export enum VintageMarketStoreViewStrategyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21700;
     */
    CMD_ID = 21700,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketStoreViewStrategyRsp
 */
export interface VintageMarketStoreViewStrategyRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 strategy_list = 3;
     */
    strategyList: number[];
    /**
     * @generated from protobuf field: optional uint32 strategy_id = 14;
     */
    strategyId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreViewStrategyRsp.CmdId
 */
export enum VintageMarketStoreViewStrategyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21814;
     */
    CMD_ID = 21814,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketDividendFinishNotify
 */
export interface VintageMarketDividendFinishNotify {
    /**
     * @generated from protobuf field: optional uint32 coin_a = 5;
     */
    coinA?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_c = 11;
     */
    coinC?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDividendFinishNotify.CmdId
 */
export enum VintageMarketDividendFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23147;
     */
    CMD_ID = 23147,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.VintageMarketNpcEventFinishNotify
 */
export interface VintageMarketNpcEventFinishNotify {
    /**
     * @generated from protobuf field: repeated uint32 unlock_strategy_list = 15;
     */
    unlockStrategyList: number[];
    /**
     * @generated from protobuf field: optional uint32 coin_c = 12;
     */
    coinC?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_a = 4;
     */
    coinA?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketNpcEventFinishNotify.CmdId
 */
export enum VintageMarketNpcEventFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24201;
     */
    CMD_ID = 24201,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldDetailInfo
 */
export interface WindFieldDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.WindFieldStageInfo stage_info_list = 11;
     */
    stageInfoList: WindFieldStageInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldStageInfo
 */
export interface WindFieldStageInfo {
    /**
     * @generated from protobuf field: optional bool is_open = 12;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 open_time = 14;
     */
    openTime?: number;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 8;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldRestartDungeonReq
 */
export interface WindFieldRestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.WindFieldRestartDungeonReq.CmdId
 */
export enum WindFieldRestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20731;
     */
    CMD_ID = 20731,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldRestartDungeonRsp
 */
export interface WindFieldRestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WindFieldRestartDungeonRsp.CmdId
 */
export enum WindFieldRestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24712;
     */
    CMD_ID = 24712,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusDetail
 */
export interface FungusDetail {
    /**
     * @generated from protobuf field: optional bool is_cultivate = 5;
     */
    isCultivate?: boolean;
    /**
     * @generated from protobuf field: optional uint32 capture_order = 6;
     */
    captureOrder?: number;
    /**
     * @generated from protobuf field: optional uint32 name_id = 14;
     */
    nameId?: number;
    /**
     * @generated from protobuf field: optional uint32 min_cultivate_step = 1;
     */
    minCultivateStep?: number;
    /**
     * @generated from protobuf field: optional uint32 fungus_id = 9;
     */
    fungusId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FungusPlotStageDetail
 */
export interface FungusPlotStageDetail {
    /**
     * @generated from protobuf field: optional bool is_open = 3;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 15;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FungusTrainingDungeonDetail
 */
export interface FungusTrainingDungeonDetail {
    /**
     * @generated from protobuf field: optional bool is_open = 13;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 12;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 best_score = 9;
     */
    bestScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterMonsterDetail
 */
export interface FungusFighterMonsterDetail {
    /**
     * @generated from protobuf field: optional uint32 fungus_id = 2;
     */
    fungusId?: number;
    /**
     * @generated from protobuf field: optional float cur_hp_percentage = 7;
     */
    curHpPercentage?: number;
    /**
     * @generated from protobuf field: optional bool is_alive = 9;
     */
    isAlive?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FungusTrainingMonsterPreviewDetail
 */
export interface FungusTrainingMonsterPreviewDetail {
    /**
     * @generated from protobuf field: optional uint32 monster_id = 8;
     */
    monsterId?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 10;
     */
    level?: number;
    /**
     * @generated from protobuf field: repeated uint32 affix_list = 7;
     */
    affixList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.FungusTrainingPoolPreviewDetail
 */
export interface FungusTrainingPoolPreviewDetail {
    /**
     * @generated from protobuf field: optional uint32 pool_id = 8;
     */
    poolId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 6;
     */
    monsterPreviewDetailList: FungusTrainingMonsterPreviewDetail[];
}
/**
 * @generated from protobuf message com.midnights.game.FungusTrainingProgressDetail
 */
export interface FungusTrainingProgressDetail {
    /**
     * @generated from protobuf field: optional uint32 cur_round = 9;
     */
    curRound?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 10;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5;
     */
    monsterPoolPreviewList: FungusTrainingPoolPreviewDetail[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusFighterMonsterDetail monster_detail_list = 6;
     */
    monsterDetailList: FungusFighterMonsterDetail[];
    /**
     * @generated from protobuf field: optional uint32 total_used_time = 7;
     */
    totalUsedTime?: number;
    /**
     * @generated from protobuf field: repeated uint32 backup_monster_list = 4;
     */
    backupMonsterList: number[];
    /**
     * @generated from protobuf field: repeated uint32 choosen_monster_list = 8;
     */
    choosenMonsterList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterDetailInfo
 */
export interface FungusFighterDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusPlotStageDetail plot_stage_detail_list = 6;
     */
    plotStageDetailList: FungusPlotStageDetail[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusDetail fungus_detail_list = 4;
     */
    fungusDetailList: FungusDetail[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_camp_id_list = 12;
     */
    unlockCampIdList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3;
     */
    trainingDungeonProgressDetailList: FungusTrainingProgressDetail[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.FungusTrainingDungeonDetail training_dungeon_detail_list = 15;
     */
    trainingDungeonDetailList: FungusTrainingDungeonDetail[];
    /**
     * @generated from protobuf field: repeated uint32 finish_camp_id_list = 1;
     */
    finishCampIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 unlock_cultivate_id_list = 8;
     */
    unlockCultivateIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.EnterFungusFighterPlotDungeonReq
 */
export interface EnterFungusFighterPlotDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 14;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: repeated uint32 fungus_id_list = 8;
     */
    fungusIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterPlotDungeonReq.CmdId
 */
export enum EnterFungusFighterPlotDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23053;
     */
    CMD_ID = 23053,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterFungusFighterPlotDungeonRsp
 */
export interface EnterFungusFighterPlotDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 15;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: repeated uint32 fungus_id_list = 2;
     */
    fungusIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterPlotDungeonRsp.CmdId
 */
export enum EnterFungusFighterPlotDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21008;
     */
    CMD_ID = 21008,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterPlotInfoNotify
 */
export interface FungusFighterPlotInfoNotify {
    /**
     * @generated from protobuf field: repeated uint32 fungus_id_list = 11;
     */
    fungusIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 4;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterPlotInfoNotify.CmdId
 */
export enum FungusFighterPlotInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22174;
     */
    CMD_ID = 22174,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusCultivateReq
 */
export interface FungusCultivateReq {
    /**
     * @generated from protobuf field: optional uint32 cultivate_id = 8;
     */
    cultivateId?: number;
    /**
     * @generated from protobuf field: optional uint32 copy_step = 7;
     */
    copyStep?: number;
    /**
     * @generated from protobuf field: optional uint32 exchange_step = 11;
     */
    exchangeStep?: number;
    /**
     * @generated from protobuf field: optional uint32 cultivate_step = 13;
     */
    cultivateStep?: number;
    /**
     * @generated from protobuf field: optional uint32 rotate_step = 15;
     */
    rotateStep?: number;
    /**
     * @generated from protobuf field: optional uint32 undo_step = 6;
     */
    undoStep?: number;
    /**
     * @generated from protobuf field: optional uint32 time = 2;
     */
    time?: number;
    /**
     * @generated from protobuf field: optional uint32 place_step = 10;
     */
    placeStep?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusCultivateReq.CmdId
 */
export enum FungusCultivateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21749;
     */
    CMD_ID = 21749,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusCultivateRsp
 */
export interface FungusCultivateRsp {
    /**
     * @generated from protobuf field: optional uint32 cultivate_id = 4;
     */
    cultivateId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 13;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusCultivateRsp.CmdId
 */
export enum FungusCultivateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23532;
     */
    CMD_ID = 23532,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusRenameReq
 */
export interface FungusRenameReq {
    /**
     * @generated from protobuf field: optional uint32 name_id = 1;
     */
    nameId?: number;
    /**
     * @generated from protobuf field: optional uint32 fungus_id = 11;
     */
    fungusId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusRenameReq.CmdId
 */
export enum FungusRenameReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22006;
     */
    CMD_ID = 22006,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusRenameRsp
 */
export interface FungusRenameRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 fungus_id = 15;
     */
    fungusId?: number;
    /**
     * @generated from protobuf field: optional uint32 name_id = 12;
     */
    nameId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusRenameRsp.CmdId
 */
export enum FungusRenameRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 20066;
     */
    CMD_ID = 20066,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonReq
 */
export interface EnterFungusFighterTrainingDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 3;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterTrainingDungeonReq.CmdId
 */
export enum EnterFungusFighterTrainingDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23860;
     */
    CMD_ID = 23860,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonRsp
 */
export interface EnterFungusFighterTrainingDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 11;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterTrainingDungeonRsp.CmdId
 */
export enum EnterFungusFighterTrainingDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21593;
     */
    CMD_ID = 21593,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterRuntimeDataNotify
 */
export interface FungusFighterRuntimeDataNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.FungusTrainingProgressDetail progress_detail = 7;
     */
    progressDetail?: FungusTrainingProgressDetail;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRuntimeDataNotify.CmdId
 */
export enum FungusFighterRuntimeDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24674;
     */
    CMD_ID = 24674,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterTrainingSelectFungusReq
 */
export interface FungusFighterTrainingSelectFungusReq {
    /**
     * @generated from protobuf field: repeated uint32 backup_fungus_id_list = 11;
     */
    backupFungusIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 fight_fungus_id_list = 7;
     */
    fightFungusIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingSelectFungusReq.CmdId
 */
export enum FungusFighterTrainingSelectFungusReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23903;
     */
    CMD_ID = 23903,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterTrainingSelectFungusRsp
 */
export interface FungusFighterTrainingSelectFungusRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingSelectFungusRsp.CmdId
 */
export enum FungusFighterTrainingSelectFungusRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21570;
     */
    CMD_ID = 21570,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterTrainingGallerySettleNotify
 */
export interface FungusFighterTrainingGallerySettleNotify {
    /**
     * @generated from protobuf field: optional bool is_new_record = 14;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 total_used_time = 4;
     */
    totalUsedTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 5;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 dead_fungus_num = 1;
     */
    deadFungusNum?: number;
    /**
     * @generated from protobuf field: optional uint32 settle_round = 15;
     */
    settleRound?: number;
    /**
     * @generated from protobuf field: optional bool is_final_settle = 10;
     */
    isFinalSettle?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gadget_life_percentage = 11;
     */
    gadgetLifePercentage?: number;
    /**
     * @generated from protobuf field: optional uint32 final_score = 9;
     */
    finalScore?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingGallerySettleNotify.CmdId
 */
export enum FungusFighterTrainingGallerySettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23931;
     */
    CMD_ID = 23931,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataReq
 */
export interface FungusFighterClearTrainingRuntimeDataReq {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 6;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterClearTrainingRuntimeDataReq.CmdId
 */
export enum FungusFighterClearTrainingRuntimeDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24137;
     */
    CMD_ID = 24137,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp
 */
export interface FungusFighterClearTrainingRuntimeDataRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp.CmdId
 */
export enum FungusFighterClearTrainingRuntimeDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22991;
     */
    CMD_ID = 22991,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterUseBackupFungusReq
 */
export interface FungusFighterUseBackupFungusReq {
    /**
     * @generated from protobuf field: repeated uint32 backup_fungus_id_list = 1;
     */
    backupFungusIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterUseBackupFungusReq.CmdId
 */
export enum FungusFighterUseBackupFungusReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21266;
     */
    CMD_ID = 21266,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterUseBackupFungusRsp
 */
export interface FungusFighterUseBackupFungusRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterUseBackupFungusRsp.CmdId
 */
export enum FungusFighterUseBackupFungusRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23428;
     */
    CMD_ID = 23428,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterRestartTraningDungeonReq
 */
export interface FungusFighterRestartTraningDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRestartTraningDungeonReq.CmdId
 */
export enum FungusFighterRestartTraningDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23980;
     */
    CMD_ID = 23980,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterRestartTraningDungeonRsp
 */
export interface FungusFighterRestartTraningDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRestartTraningDungeonRsp.CmdId
 */
export enum FungusFighterRestartTraningDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22890;
     */
    CMD_ID = 22890,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CharAmusementStageData
 */
export interface CharAmusementStageData {
    /**
     * @generated from protobuf field: optional uint32 finish_time = 15;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 12;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 stage_id = 6;
     */
    stageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CharAmusementDetailInfo
 */
export interface CharAmusementDetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CharAmusementStageData stage_data_list = 1;
     */
    stageDataList: CharAmusementStageData[];
}
/**
 * @generated from protobuf message com.midnights.game.CharAmusementSettleNotify
 */
export interface CharAmusementSettleNotify {
    /**
     * @generated from protobuf field: optional bool is_succ = 3;
     */
    isSucc?: boolean;
    /**
     * @generated from protobuf field: optional uint32 finish_time = 14;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 2;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.CharAmusementSettleNotify.CmdId
 */
export enum CharAmusementSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23133;
     */
    CMD_ID = 23133,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2LevelData
 */
export interface EffigyChallengeV2LevelData {
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty_pass = 1;
     */
    challengeModeDifficultyPass?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 5;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_last_choose_skill_no = 10;
     */
    challengeModeLastChooseSkillNo?: number;
    /**
     * @generated from protobuf field: optional uint32 best_cost_time = 12;
     */
    bestCostTime?: number;
    /**
     * @generated from protobuf field: optional bool is_level_open = 7;
     */
    isLevelOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty_open = 13;
     */
    challengeModeDifficultyOpen?: number;
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2DetailInfo
 */
export interface EffigyChallengeV2DetailInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EffigyChallengeV2LevelData level_data_list = 3;
     */
    levelDataList: EffigyChallengeV2LevelData[];
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonReq
 */
export interface EffigyChallengeV2EnterDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty = 7;
     */
    challengeModeDifficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_skill_no = 11;
     */
    challengeModeSkillNo?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2EnterDungeonReq.CmdId
 */
export enum EffigyChallengeV2EnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23489;
     */
    CMD_ID = 23489,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonRsp
 */
export interface EffigyChallengeV2EnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_skill_no = 11;
     */
    challengeModeSkillNo?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty = 14;
     */
    challengeModeDifficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 13;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2EnterDungeonRsp.CmdId
 */
export enum EffigyChallengeV2EnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24917;
     */
    CMD_ID = 24917,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonReq
 */
export interface EffigyChallengeV2RestartDungeonReq {
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2RestartDungeonReq.CmdId
 */
export enum EffigyChallengeV2RestartDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 24522;
     */
    CMD_ID = 24522,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonRsp
 */
export interface EffigyChallengeV2RestartDungeonRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2RestartDungeonRsp.CmdId
 */
export enum EffigyChallengeV2RestartDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 23167;
     */
    CMD_ID = 23167,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillReq
 */
export interface EffigyChallengeV2ChooseSkillReq {
    /**
     * @generated from protobuf field: optional uint32 level_id = 6;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_skill_no = 7;
     */
    challengeModeSkillNo?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2ChooseSkillReq.CmdId
 */
export enum EffigyChallengeV2ChooseSkillReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21269;
     */
    CMD_ID = 21269,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillRsp
 */
export interface EffigyChallengeV2ChooseSkillRsp {
    /**
     * @generated from protobuf field: optional uint32 level_id = 15;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_skill_no = 3;
     */
    challengeModeSkillNo?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2ChooseSkillRsp.CmdId
 */
export enum EffigyChallengeV2ChooseSkillRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22448;
     */
    CMD_ID = 22448,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2DungeonInfoNotify
 */
export interface EffigyChallengeV2DungeonInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty = 2;
     */
    challengeModeDifficulty?: number;
    /**
     * @generated from protobuf field: optional uint32 skill_no = 4;
     */
    skillNo?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 13;
     */
    levelId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2DungeonInfoNotify.CmdId
 */
export enum EffigyChallengeV2DungeonInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22835;
     */
    CMD_ID = 22835,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.RogueCellState
 */
export enum RogueCellState {
    /**
     * @generated from protobuf enum value: ROGUE_CELL_NONE = 0;
     */
    ROGUE_CELL_NONE = 0,
    /**
     * @generated from protobuf enum value: ROGUE_CELL_BATTLE = 1;
     */
    ROGUE_CELL_BATTLE = 1,
    /**
     * @generated from protobuf enum value: ROGUE_CELL_SUCCESS = 2;
     */
    ROGUE_CELL_SUCCESS = 2,
    /**
     * @generated from protobuf enum value: ROGUE_CELL_FINISH = 3;
     */
    ROGUE_CELL_FINISH = 3,
    /**
     * @generated from protobuf enum value: ROGUE_CELL_TAKEN_CHEST = 4;
     */
    ROGUE_CELL_TAKEN_CHEST = 4
}
/**
 * @generated from protobuf enum com.midnights.game.RogueEliteCellDifficultyType
 */
export enum RogueEliteCellDifficultyType {
    /**
     * @generated from protobuf enum value: ROGUE_ELITE_NORMAL = 0;
     */
    ROGUE_ELITE_NORMAL = 0,
    /**
     * @generated from protobuf enum value: ROGUE_ELITE_HARD = 1;
     */
    ROGUE_ELITE_HARD = 1
}
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryAvatarDisableStatus
 */
export enum RogueDiaryAvatarDisableStatus {
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
     */
    ROGUE_DIARY_AVATAR_DISABLE_NONE = 0,
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
     */
    ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1,
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
     */
    ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2,
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
     */
    ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3
}
/**
 * @generated from protobuf enum com.midnights.game.ActivityPushTipsState
 */
export enum ActivityPushTipsState {
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_START = 1;
     */
    START = 1,
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_READ = 2;
     */
    READ = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityScheduleReq$Type extends MessageType<GetActivityScheduleReq> {
    constructor() {
        super("com.midnights.game.GetActivityScheduleReq", []);
    }
    create(value?: PartialMessage<GetActivityScheduleReq>): GetActivityScheduleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityScheduleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityScheduleReq): GetActivityScheduleReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetActivityScheduleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityScheduleReq
 */
export const GetActivityScheduleReq = new GetActivityScheduleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityScheduleInfo$Type extends MessageType<ActivityScheduleInfo> {
    constructor() {
        super("com.midnights.game.ActivityScheduleInfo", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityScheduleInfo>): ActivityScheduleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityScheduleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityScheduleInfo): ActivityScheduleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional bool is_open */ 2:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 1:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 10:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityScheduleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        /* optional bool is_open = 2; */
        if (message.isOpen !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isOpen);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activityId);
        /* optional uint32 end_time = 1; */
        if (message.endTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.endTime);
        /* optional uint32 begin_time = 10; */
        if (message.beginTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityScheduleInfo
 */
export const ActivityScheduleInfo = new ActivityScheduleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityScheduleRsp$Type extends MessageType<GetActivityScheduleRsp> {
    constructor() {
        super("com.midnights.game.GetActivityScheduleRsp", [
            { no: 9, name: "activity_schedule_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityScheduleInfo },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "remain_fly_sea_lamp_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetActivityScheduleRsp>): GetActivityScheduleRsp {
        const message = { activityScheduleList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityScheduleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityScheduleRsp): GetActivityScheduleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list */ 9:
                    message.activityScheduleList.push(ActivityScheduleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 remain_fly_sea_lamp_num */ 4:
                    message.remainFlySeaLampNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivityScheduleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 9; */
        for (let i = 0; i < message.activityScheduleList.length; i++)
            ActivityScheduleInfo.internalBinaryWrite(message.activityScheduleList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 remain_fly_sea_lamp_num = 4; */
        if (message.remainFlySeaLampNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.remainFlySeaLampNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityScheduleRsp
 */
export const GetActivityScheduleRsp = new GetActivityScheduleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfoReq$Type extends MessageType<GetActivityInfoReq> {
    constructor() {
        super("com.midnights.game.GetActivityInfoReq", [
            { no: 4, name: "activity_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetActivityInfoReq>): GetActivityInfoReq {
        const message = { activityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityInfoReq): GetActivityInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activity_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityIdList.push(reader.uint32());
                    else
                        message.activityIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivityInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 activity_id_list = 4; */
        for (let i = 0; i < message.activityIdList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.activityIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityInfoReq
 */
export const GetActivityInfoReq = new GetActivityInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInfo$Type extends MessageType<ActivityInfo> {
    constructor() {
        super("com.midnights.game.ActivityInfo", [
            { no: 6, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "activity_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 329, name: "taken_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 919, name: "is_hidden", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1449, name: "is_quick_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "meet_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 682, name: "activity_coin_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 102, name: "is_banner_cleared", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1906, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 592, name: "first_day_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_play_open_anim", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1958, name: "score_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1399, name: "wish_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 1290, name: "selected_avatar_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1963, name: "is_common_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "expire_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 864, name: "activity_push_tips_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityPushTipsData },
            { no: 2, name: "watcher_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityWatcherInfo },
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_starting", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "sam_lamp_info", kind: "message", oneof: "detail", T: () => SeaLampActivityDetailInfo },
            { no: 14, name: "crucible_info", kind: "message", oneof: "detail", T: () => CrucibleActivityDetailInfo },
            { no: 11, name: "salesman_info", kind: "message", oneof: "detail", T: () => SalesmanActivityDetailInfo },
            { no: 1, name: "trial_avatar_info", kind: "message", oneof: "detail", T: () => TrialAvatarActivityDetailInfo },
            { no: 1092, name: "delivery_info", kind: "message", oneof: "detail", T: () => DeliveryActivityDetailInfo },
            { no: 557, name: "aster_info", kind: "message", oneof: "detail", T: () => AsterActivityDetailInfo },
            { no: 1365, name: "flight_info", kind: "message", oneof: "detail", T: () => FlightActivityDetailInfo },
            { no: 1727, name: "dragon_spine_info", kind: "message", oneof: "detail", T: () => DragonSpineActivityDetailInfo },
            { no: 391, name: "effigy_info", kind: "message", oneof: "detail", T: () => EffigyActivityDetailInfo },
            { no: 1114, name: "treasure_map_info", kind: "message", oneof: "detail", T: () => TreasureMapActivityDetailInfo },
            { no: 1869, name: "blessing_info", kind: "message", oneof: "detail", T: () => BlessingActivityDetailInfo },
            { no: 494, name: "sea_lamp_info", kind: "message", oneof: "detail", T: () => SeaLampActivityInfo },
            { no: 202, name: "expedition_info", kind: "message", oneof: "detail", T: () => ExpeditionActivityDetailInfo },
            { no: 859, name: "arena_challenge_info", kind: "message", oneof: "detail", T: () => ArenaChallengeActivityDetailInfo },
            { no: 857, name: "fleur_fair_info", kind: "message", oneof: "detail", T: () => FleurFairActivityDetailInfo },
            { no: 1675, name: "water_spirit_info", kind: "message", oneof: "detail", T: () => WaterSpiritActivityDetailInfo },
            { no: 1015, name: "challneler_slab_info", kind: "message", oneof: "detail", T: () => ChannelerSlabActivityDetailInfo },
            { no: 156, name: "mist_trial_activity_info", kind: "message", oneof: "detail", T: () => MistTrialActivityDetailInfo },
            { no: 427, name: "hide_and_seek_info", kind: "message", oneof: "detail", T: () => HideAndSeekActivityDetailInfo },
            { no: 1411, name: "find_hilichurl_info", kind: "message", oneof: "detail", T: () => FindHilichurlDetailInfo },
            { no: 1372, name: "summer_time_info", kind: "message", oneof: "detail", T: () => SummerTimeDetailInfo },
            { no: 1842, name: "buoyant_combat_info", kind: "message", oneof: "detail", T: () => BuoyantCombatDetailInfo },
            { no: 1113, name: "echo_shell_info", kind: "message", oneof: "detail", T: () => EchoShellDetailInfo },
            { no: 767, name: "bounce_conjuring_info", kind: "message", oneof: "detail", T: () => BounceConjuringActivityDetailInfo },
            { no: 794, name: "blitz_rush_info", kind: "message", oneof: "detail", T: () => BlitzRushActivityDetailInfo },
            { no: 927, name: "chess_info", kind: "message", oneof: "detail", T: () => ChessActivityDetailInfo },
            { no: 1261, name: "sumo_info", kind: "message", oneof: "detail", T: () => SumoActivityDetailInfo },
            { no: 1588, name: "moonfin_trial_info", kind: "message", oneof: "detail", T: () => MoonfinTrialActivityDetailInfo },
            { no: 814, name: "luna_rite_info", kind: "message", oneof: "detail", T: () => LunaRiteDetailInfo },
            { no: 54, name: "plant_flower_info", kind: "message", oneof: "detail", T: () => PlantFlowerActivityDetailInfo },
            { no: 460, name: "music_game_info", kind: "message", oneof: "detail", T: () => MusicGameActivityDetailInfo },
            { no: 219, name: "roguelike_dungoen_info", kind: "message", oneof: "detail", T: () => RoguelikeDungeonActivityDetailInfo },
            { no: 403, name: "dig_info", kind: "message", oneof: "detail", T: () => DigActivityDetailInfo },
            { no: 491, name: "hachi_info", kind: "message", oneof: "detail", T: () => HachiActivityDetailInfo },
            { no: 1083, name: "winter_camp_info", kind: "message", oneof: "detail", T: () => WinterCampActivityDetailInfo },
            { no: 1273, name: "potion_info", kind: "message", oneof: "detail", T: () => PotionActivityDetailInfo },
            { no: 1796, name: "tanuki_travel_activity_info", kind: "message", oneof: "detail", T: () => TanukiTravelActivityDetailInfo },
            { no: 1876, name: "lantern_rite_activity_info", kind: "message", oneof: "detail", T: () => LanternRiteActivityDetailInfo },
            { no: 194, name: "michiae_matsuri_info", kind: "message", oneof: "detail", T: () => MichiaeMatsuriActivityDetailInfo },
            { no: 1725, name: "bartender_info", kind: "message", oneof: "detail", T: () => BartenderActivityDetailInfo },
            { no: 703, name: "ugc_info", kind: "message", oneof: "detail", T: () => UgcActivityDetailInfo },
            { no: 1226, name: "crystal_link_info", kind: "message", oneof: "detail", T: () => CrystalLinkActivityDetailInfo },
            { no: 750, name: "irodori_info", kind: "message", oneof: "detail", T: () => IrodoriActivityDetailInfo },
            { no: 328, name: "photo_info", kind: "message", oneof: "detail", T: () => PhotoActivityDetailInfo },
            { no: 1891, name: "spice_info", kind: "message", oneof: "detail", T: () => SpiceActivityDetailInfo },
            { no: 825, name: "gacha_info", kind: "message", oneof: "detail", T: () => GachaActivityDetailInfo },
            { no: 1308, name: "luminance_stone_challenge_info", kind: "message", oneof: "detail", T: () => LuminanceStoneChallengeActivityDetailInfo },
            { no: 812, name: "rogue_diary_info", kind: "message", oneof: "detail", T: () => RogueDiaryActivityDetailInfo },
            { no: 622, name: "summer_time_v2_info", kind: "message", oneof: "detail", T: () => SummerTimeV2DetailInfo },
            { no: 1885, name: "island_party_info", kind: "message", oneof: "detail", T: () => IslandPartyDetailInfo },
            { no: 722, name: "gear_info", kind: "message", oneof: "detail", T: () => GearActivityDetailInfo },
            { no: 1911, name: "graven_innocence_info", kind: "message", oneof: "detail", T: () => GravenInnocenceDetailInfo },
            { no: 1043, name: "instable_spray_info", kind: "message", oneof: "detail", T: () => InstableSprayDetailInfo },
            { no: 1157, name: "muqadas_potion_info", kind: "message", oneof: "detail", T: () => MuqadasPotionActivityDetailInfo },
            { no: 966, name: "treasure_seelie_info", kind: "message", oneof: "detail", T: () => TreasureSeelieActivityDetailInfo },
            { no: 1078, name: "rock_board_explore_info", kind: "message", oneof: "detail", T: () => RockBoardExploreDetailInfo },
            { no: 445, name: "vintage_info", kind: "message", oneof: "detail", T: () => VintageActivityDetailInfo },
            { no: 352, name: "wind_field_info", kind: "message", oneof: "detail", T: () => WindFieldDetailInfo },
            { no: 490, name: "fungus_fighter_info", kind: "message", oneof: "detail", T: () => FungusFighterDetailInfo },
            { no: 1496, name: "char_amusement_info", kind: "message", oneof: "detail", T: () => CharAmusementDetailInfo },
            { no: 1025, name: "effigy_challenge_info", kind: "message", oneof: "detail", T: () => EffigyChallengeV2DetailInfo }
        ]);
    }
    create(value?: PartialMessage<ActivityInfo>): ActivityInfo {
        const message = { takenRewardList: [], meetCondList: [], activityCoinMap: {}, wishGiftNumMap: {}, expireCondList: [], activityPushTipsDataList: [], watcherInfoList: [], detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityInfo): ActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 6:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 activity_type */ 4:
                    message.activityType = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 8:
                    message.beginTime = reader.uint32();
                    break;
                case /* repeated uint32 taken_reward_list */ 329:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardList.push(reader.uint32());
                    else
                        message.takenRewardList.push(reader.uint32());
                    break;
                case /* optional bool is_hidden */ 919:
                    message.isHidden = reader.bool();
                    break;
                case /* optional bool is_quick_open */ 1449:
                    message.isQuickOpen = reader.bool();
                    break;
                case /* repeated uint32 meet_cond_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.meetCondList.push(reader.uint32());
                    else
                        message.meetCondList.push(reader.uint32());
                    break;
                case /* map<uint32, uint32> activity_coin_map */ 682:
                    this.binaryReadMap682(message.activityCoinMap, reader, options);
                    break;
                case /* optional bool is_banner_cleared */ 102:
                    message.isBannerCleared = reader.bool();
                    break;
                case /* optional uint32 cur_score */ 1906:
                    message.curScore = reader.uint32();
                    break;
                case /* optional uint32 first_day_start_time */ 592:
                    message.firstDayStartTime = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 12:
                    message.activityId = reader.uint32();
                    break;
                case /* optional bool is_play_open_anim */ 13:
                    message.isPlayOpenAnim = reader.bool();
                    break;
                case /* optional uint32 end_time */ 5:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 score_limit */ 1958:
                    message.scoreLimit = reader.uint32();
                    break;
                case /* map<uint32, uint32> wish_gift_num_map */ 1399:
                    this.binaryReadMap1399(message.wishGiftNumMap, reader, options);
                    break;
                case /* optional uint32 selected_avatar_reward_id */ 1290:
                    message.selectedAvatarRewardId = reader.uint32();
                    break;
                case /* optional bool is_common_content_closed */ 1963:
                    message.isCommonContentClosed = reader.bool();
                    break;
                case /* repeated uint32 expire_cond_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.expireCondList.push(reader.uint32());
                    else
                        message.expireCondList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list */ 864:
                    message.activityPushTipsDataList.push(ActivityPushTipsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ActivityWatcherInfo watcher_info_list */ 2:
                    message.watcherInfoList.push(ActivityWatcherInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional bool is_starting */ 9:
                    message.isStarting = reader.bool();
                    break;
                case /* com.midnights.game.SeaLampActivityDetailInfo sam_lamp_info */ 7:
                    message.detail = {
                        oneofKind: "samLampInfo",
                        samLampInfo: SeaLampActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).samLampInfo)
                    };
                    break;
                case /* com.midnights.game.CrucibleActivityDetailInfo crucible_info */ 14:
                    message.detail = {
                        oneofKind: "crucibleInfo",
                        crucibleInfo: CrucibleActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).crucibleInfo)
                    };
                    break;
                case /* com.midnights.game.SalesmanActivityDetailInfo salesman_info */ 11:
                    message.detail = {
                        oneofKind: "salesmanInfo",
                        salesmanInfo: SalesmanActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).salesmanInfo)
                    };
                    break;
                case /* com.midnights.game.TrialAvatarActivityDetailInfo trial_avatar_info */ 1:
                    message.detail = {
                        oneofKind: "trialAvatarInfo",
                        trialAvatarInfo: TrialAvatarActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).trialAvatarInfo)
                    };
                    break;
                case /* com.midnights.game.DeliveryActivityDetailInfo delivery_info */ 1092:
                    message.detail = {
                        oneofKind: "deliveryInfo",
                        deliveryInfo: DeliveryActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).deliveryInfo)
                    };
                    break;
                case /* com.midnights.game.AsterActivityDetailInfo aster_info */ 557:
                    message.detail = {
                        oneofKind: "asterInfo",
                        asterInfo: AsterActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).asterInfo)
                    };
                    break;
                case /* com.midnights.game.FlightActivityDetailInfo flight_info */ 1365:
                    message.detail = {
                        oneofKind: "flightInfo",
                        flightInfo: FlightActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).flightInfo)
                    };
                    break;
                case /* com.midnights.game.DragonSpineActivityDetailInfo dragon_spine_info */ 1727:
                    message.detail = {
                        oneofKind: "dragonSpineInfo",
                        dragonSpineInfo: DragonSpineActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).dragonSpineInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyActivityDetailInfo effigy_info */ 391:
                    message.detail = {
                        oneofKind: "effigyInfo",
                        effigyInfo: EffigyActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).effigyInfo)
                    };
                    break;
                case /* com.midnights.game.TreasureMapActivityDetailInfo treasure_map_info */ 1114:
                    message.detail = {
                        oneofKind: "treasureMapInfo",
                        treasureMapInfo: TreasureMapActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).treasureMapInfo)
                    };
                    break;
                case /* com.midnights.game.BlessingActivityDetailInfo blessing_info */ 1869:
                    message.detail = {
                        oneofKind: "blessingInfo",
                        blessingInfo: BlessingActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).blessingInfo)
                    };
                    break;
                case /* com.midnights.game.SeaLampActivityInfo sea_lamp_info */ 494:
                    message.detail = {
                        oneofKind: "seaLampInfo",
                        seaLampInfo: SeaLampActivityInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).seaLampInfo)
                    };
                    break;
                case /* com.midnights.game.ExpeditionActivityDetailInfo expedition_info */ 202:
                    message.detail = {
                        oneofKind: "expeditionInfo",
                        expeditionInfo: ExpeditionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).expeditionInfo)
                    };
                    break;
                case /* com.midnights.game.ArenaChallengeActivityDetailInfo arena_challenge_info */ 859:
                    message.detail = {
                        oneofKind: "arenaChallengeInfo",
                        arenaChallengeInfo: ArenaChallengeActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).arenaChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairActivityDetailInfo fleur_fair_info */ 857:
                    message.detail = {
                        oneofKind: "fleurFairInfo",
                        fleurFairInfo: FleurFairActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).fleurFairInfo)
                    };
                    break;
                case /* com.midnights.game.WaterSpiritActivityDetailInfo water_spirit_info */ 1675:
                    message.detail = {
                        oneofKind: "waterSpiritInfo",
                        waterSpiritInfo: WaterSpiritActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).waterSpiritInfo)
                    };
                    break;
                case /* com.midnights.game.ChannelerSlabActivityDetailInfo challneler_slab_info */ 1015:
                    message.detail = {
                        oneofKind: "challnelerSlabInfo",
                        challnelerSlabInfo: ChannelerSlabActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).challnelerSlabInfo)
                    };
                    break;
                case /* com.midnights.game.MistTrialActivityDetailInfo mist_trial_activity_info */ 156:
                    message.detail = {
                        oneofKind: "mistTrialActivityInfo",
                        mistTrialActivityInfo: MistTrialActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).mistTrialActivityInfo)
                    };
                    break;
                case /* com.midnights.game.HideAndSeekActivityDetailInfo hide_and_seek_info */ 427:
                    message.detail = {
                        oneofKind: "hideAndSeekInfo",
                        hideAndSeekInfo: HideAndSeekActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).hideAndSeekInfo)
                    };
                    break;
                case /* com.midnights.game.FindHilichurlDetailInfo find_hilichurl_info */ 1411:
                    message.detail = {
                        oneofKind: "findHilichurlInfo",
                        findHilichurlInfo: FindHilichurlDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).findHilichurlInfo)
                    };
                    break;
                case /* com.midnights.game.SummerTimeDetailInfo summer_time_info */ 1372:
                    message.detail = {
                        oneofKind: "summerTimeInfo",
                        summerTimeInfo: SummerTimeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).summerTimeInfo)
                    };
                    break;
                case /* com.midnights.game.BuoyantCombatDetailInfo buoyant_combat_info */ 1842:
                    message.detail = {
                        oneofKind: "buoyantCombatInfo",
                        buoyantCombatInfo: BuoyantCombatDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).buoyantCombatInfo)
                    };
                    break;
                case /* com.midnights.game.EchoShellDetailInfo echo_shell_info */ 1113:
                    message.detail = {
                        oneofKind: "echoShellInfo",
                        echoShellInfo: EchoShellDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).echoShellInfo)
                    };
                    break;
                case /* com.midnights.game.BounceConjuringActivityDetailInfo bounce_conjuring_info */ 767:
                    message.detail = {
                        oneofKind: "bounceConjuringInfo",
                        bounceConjuringInfo: BounceConjuringActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).bounceConjuringInfo)
                    };
                    break;
                case /* com.midnights.game.BlitzRushActivityDetailInfo blitz_rush_info */ 794:
                    message.detail = {
                        oneofKind: "blitzRushInfo",
                        blitzRushInfo: BlitzRushActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).blitzRushInfo)
                    };
                    break;
                case /* com.midnights.game.ChessActivityDetailInfo chess_info */ 927:
                    message.detail = {
                        oneofKind: "chessInfo",
                        chessInfo: ChessActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).chessInfo)
                    };
                    break;
                case /* com.midnights.game.SumoActivityDetailInfo sumo_info */ 1261:
                    message.detail = {
                        oneofKind: "sumoInfo",
                        sumoInfo: SumoActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).sumoInfo)
                    };
                    break;
                case /* com.midnights.game.MoonfinTrialActivityDetailInfo moonfin_trial_info */ 1588:
                    message.detail = {
                        oneofKind: "moonfinTrialInfo",
                        moonfinTrialInfo: MoonfinTrialActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).moonfinTrialInfo)
                    };
                    break;
                case /* com.midnights.game.LunaRiteDetailInfo luna_rite_info */ 814:
                    message.detail = {
                        oneofKind: "lunaRiteInfo",
                        lunaRiteInfo: LunaRiteDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).lunaRiteInfo)
                    };
                    break;
                case /* com.midnights.game.PlantFlowerActivityDetailInfo plant_flower_info */ 54:
                    message.detail = {
                        oneofKind: "plantFlowerInfo",
                        plantFlowerInfo: PlantFlowerActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).plantFlowerInfo)
                    };
                    break;
                case /* com.midnights.game.MusicGameActivityDetailInfo music_game_info */ 460:
                    message.detail = {
                        oneofKind: "musicGameInfo",
                        musicGameInfo: MusicGameActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).musicGameInfo)
                    };
                    break;
                case /* com.midnights.game.RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info */ 219:
                    message.detail = {
                        oneofKind: "roguelikeDungoenInfo",
                        roguelikeDungoenInfo: RoguelikeDungeonActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).roguelikeDungoenInfo)
                    };
                    break;
                case /* com.midnights.game.DigActivityDetailInfo dig_info */ 403:
                    message.detail = {
                        oneofKind: "digInfo",
                        digInfo: DigActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).digInfo)
                    };
                    break;
                case /* com.midnights.game.HachiActivityDetailInfo hachi_info */ 491:
                    message.detail = {
                        oneofKind: "hachiInfo",
                        hachiInfo: HachiActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).hachiInfo)
                    };
                    break;
                case /* com.midnights.game.WinterCampActivityDetailInfo winter_camp_info */ 1083:
                    message.detail = {
                        oneofKind: "winterCampInfo",
                        winterCampInfo: WinterCampActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).winterCampInfo)
                    };
                    break;
                case /* com.midnights.game.PotionActivityDetailInfo potion_info */ 1273:
                    message.detail = {
                        oneofKind: "potionInfo",
                        potionInfo: PotionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).potionInfo)
                    };
                    break;
                case /* com.midnights.game.TanukiTravelActivityDetailInfo tanuki_travel_activity_info */ 1796:
                    message.detail = {
                        oneofKind: "tanukiTravelActivityInfo",
                        tanukiTravelActivityInfo: TanukiTravelActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).tanukiTravelActivityInfo)
                    };
                    break;
                case /* com.midnights.game.LanternRiteActivityDetailInfo lantern_rite_activity_info */ 1876:
                    message.detail = {
                        oneofKind: "lanternRiteActivityInfo",
                        lanternRiteActivityInfo: LanternRiteActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).lanternRiteActivityInfo)
                    };
                    break;
                case /* com.midnights.game.MichiaeMatsuriActivityDetailInfo michiae_matsuri_info */ 194:
                    message.detail = {
                        oneofKind: "michiaeMatsuriInfo",
                        michiaeMatsuriInfo: MichiaeMatsuriActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).michiaeMatsuriInfo)
                    };
                    break;
                case /* com.midnights.game.BartenderActivityDetailInfo bartender_info */ 1725:
                    message.detail = {
                        oneofKind: "bartenderInfo",
                        bartenderInfo: BartenderActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).bartenderInfo)
                    };
                    break;
                case /* com.midnights.game.UgcActivityDetailInfo ugc_info */ 703:
                    message.detail = {
                        oneofKind: "ugcInfo",
                        ugcInfo: UgcActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).ugcInfo)
                    };
                    break;
                case /* com.midnights.game.CrystalLinkActivityDetailInfo crystal_link_info */ 1226:
                    message.detail = {
                        oneofKind: "crystalLinkInfo",
                        crystalLinkInfo: CrystalLinkActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).crystalLinkInfo)
                    };
                    break;
                case /* com.midnights.game.IrodoriActivityDetailInfo irodori_info */ 750:
                    message.detail = {
                        oneofKind: "irodoriInfo",
                        irodoriInfo: IrodoriActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).irodoriInfo)
                    };
                    break;
                case /* com.midnights.game.PhotoActivityDetailInfo photo_info */ 328:
                    message.detail = {
                        oneofKind: "photoInfo",
                        photoInfo: PhotoActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).photoInfo)
                    };
                    break;
                case /* com.midnights.game.SpiceActivityDetailInfo spice_info */ 1891:
                    message.detail = {
                        oneofKind: "spiceInfo",
                        spiceInfo: SpiceActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).spiceInfo)
                    };
                    break;
                case /* com.midnights.game.GachaActivityDetailInfo gacha_info */ 825:
                    message.detail = {
                        oneofKind: "gachaInfo",
                        gachaInfo: GachaActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).gachaInfo)
                    };
                    break;
                case /* com.midnights.game.LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info */ 1308:
                    message.detail = {
                        oneofKind: "luminanceStoneChallengeInfo",
                        luminanceStoneChallengeInfo: LuminanceStoneChallengeActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).luminanceStoneChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.RogueDiaryActivityDetailInfo rogue_diary_info */ 812:
                    message.detail = {
                        oneofKind: "rogueDiaryInfo",
                        rogueDiaryInfo: RogueDiaryActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).rogueDiaryInfo)
                    };
                    break;
                case /* com.midnights.game.SummerTimeV2DetailInfo summer_time_v2_info */ 622:
                    message.detail = {
                        oneofKind: "summerTimeV2Info",
                        summerTimeV2Info: SummerTimeV2DetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).summerTimeV2Info)
                    };
                    break;
                case /* com.midnights.game.IslandPartyDetailInfo island_party_info */ 1885:
                    message.detail = {
                        oneofKind: "islandPartyInfo",
                        islandPartyInfo: IslandPartyDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).islandPartyInfo)
                    };
                    break;
                case /* com.midnights.game.GearActivityDetailInfo gear_info */ 722:
                    message.detail = {
                        oneofKind: "gearInfo",
                        gearInfo: GearActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).gearInfo)
                    };
                    break;
                case /* com.midnights.game.GravenInnocenceDetailInfo graven_innocence_info */ 1911:
                    message.detail = {
                        oneofKind: "gravenInnocenceInfo",
                        gravenInnocenceInfo: GravenInnocenceDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).gravenInnocenceInfo)
                    };
                    break;
                case /* com.midnights.game.InstableSprayDetailInfo instable_spray_info */ 1043:
                    message.detail = {
                        oneofKind: "instableSprayInfo",
                        instableSprayInfo: InstableSprayDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).instableSprayInfo)
                    };
                    break;
                case /* com.midnights.game.MuqadasPotionActivityDetailInfo muqadas_potion_info */ 1157:
                    message.detail = {
                        oneofKind: "muqadasPotionInfo",
                        muqadasPotionInfo: MuqadasPotionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).muqadasPotionInfo)
                    };
                    break;
                case /* com.midnights.game.TreasureSeelieActivityDetailInfo treasure_seelie_info */ 966:
                    message.detail = {
                        oneofKind: "treasureSeelieInfo",
                        treasureSeelieInfo: TreasureSeelieActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).treasureSeelieInfo)
                    };
                    break;
                case /* com.midnights.game.RockBoardExploreDetailInfo rock_board_explore_info */ 1078:
                    message.detail = {
                        oneofKind: "rockBoardExploreInfo",
                        rockBoardExploreInfo: RockBoardExploreDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).rockBoardExploreInfo)
                    };
                    break;
                case /* com.midnights.game.VintageActivityDetailInfo vintage_info */ 445:
                    message.detail = {
                        oneofKind: "vintageInfo",
                        vintageInfo: VintageActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).vintageInfo)
                    };
                    break;
                case /* com.midnights.game.WindFieldDetailInfo wind_field_info */ 352:
                    message.detail = {
                        oneofKind: "windFieldInfo",
                        windFieldInfo: WindFieldDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).windFieldInfo)
                    };
                    break;
                case /* com.midnights.game.FungusFighterDetailInfo fungus_fighter_info */ 490:
                    message.detail = {
                        oneofKind: "fungusFighterInfo",
                        fungusFighterInfo: FungusFighterDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).fungusFighterInfo)
                    };
                    break;
                case /* com.midnights.game.CharAmusementDetailInfo char_amusement_info */ 1496:
                    message.detail = {
                        oneofKind: "charAmusementInfo",
                        charAmusementInfo: CharAmusementDetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).charAmusementInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyChallengeV2DetailInfo effigy_challenge_info */ 1025:
                    message.detail = {
                        oneofKind: "effigyChallengeInfo",
                        effigyChallengeInfo: EffigyChallengeV2DetailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).effigyChallengeInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap682(map: ActivityInfo["activityCoinMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityInfo["activityCoinMap"] | undefined, val: ActivityInfo["activityCoinMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityInfo.activity_coin_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap1399(map: ActivityInfo["wishGiftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityInfo["wishGiftNumMap"] | undefined, val: ActivityInfo["wishGiftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityInfo.wish_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 6; */
        if (message.isFinished !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isFinished);
        /* optional uint32 activity_type = 4; */
        if (message.activityType !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityType);
        /* optional uint32 begin_time = 8; */
        if (message.beginTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.beginTime);
        /* repeated uint32 taken_reward_list = 329; */
        for (let i = 0; i < message.takenRewardList.length; i++)
            writer.tag(329, WireType.Varint).uint32(message.takenRewardList[i]);
        /* optional bool is_hidden = 919; */
        if (message.isHidden !== undefined)
            writer.tag(919, WireType.Varint).bool(message.isHidden);
        /* optional bool is_quick_open = 1449; */
        if (message.isQuickOpen !== undefined)
            writer.tag(1449, WireType.Varint).bool(message.isQuickOpen);
        /* repeated uint32 meet_cond_list = 10; */
        for (let i = 0; i < message.meetCondList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.meetCondList[i]);
        /* map<uint32, uint32> activity_coin_map = 682; */
        for (let k of Object.keys(message.activityCoinMap))
            writer.tag(682, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.activityCoinMap[k as any]).join();
        /* optional bool is_banner_cleared = 102; */
        if (message.isBannerCleared !== undefined)
            writer.tag(102, WireType.Varint).bool(message.isBannerCleared);
        /* optional uint32 cur_score = 1906; */
        if (message.curScore !== undefined)
            writer.tag(1906, WireType.Varint).uint32(message.curScore);
        /* optional uint32 first_day_start_time = 592; */
        if (message.firstDayStartTime !== undefined)
            writer.tag(592, WireType.Varint).uint32(message.firstDayStartTime);
        /* optional uint32 activity_id = 12; */
        if (message.activityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.activityId);
        /* optional bool is_play_open_anim = 13; */
        if (message.isPlayOpenAnim !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isPlayOpenAnim);
        /* optional uint32 end_time = 5; */
        if (message.endTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.endTime);
        /* optional uint32 score_limit = 1958; */
        if (message.scoreLimit !== undefined)
            writer.tag(1958, WireType.Varint).uint32(message.scoreLimit);
        /* map<uint32, uint32> wish_gift_num_map = 1399; */
        for (let k of Object.keys(message.wishGiftNumMap))
            writer.tag(1399, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.wishGiftNumMap[k as any]).join();
        /* optional uint32 selected_avatar_reward_id = 1290; */
        if (message.selectedAvatarRewardId !== undefined)
            writer.tag(1290, WireType.Varint).uint32(message.selectedAvatarRewardId);
        /* optional bool is_common_content_closed = 1963; */
        if (message.isCommonContentClosed !== undefined)
            writer.tag(1963, WireType.Varint).bool(message.isCommonContentClosed);
        /* repeated uint32 expire_cond_list = 3; */
        for (let i = 0; i < message.expireCondList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.expireCondList[i]);
        /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 864; */
        for (let i = 0; i < message.activityPushTipsDataList.length; i++)
            ActivityPushTipsData.internalBinaryWrite(message.activityPushTipsDataList[i], writer.tag(864, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ActivityWatcherInfo watcher_info_list = 2; */
        for (let i = 0; i < message.watcherInfoList.length; i++)
            ActivityWatcherInfo.internalBinaryWrite(message.watcherInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scheduleId);
        /* optional bool is_starting = 9; */
        if (message.isStarting !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isStarting);
        /* com.midnights.game.SeaLampActivityDetailInfo sam_lamp_info = 7; */
        if (message.detail.oneofKind === "samLampInfo")
            SeaLampActivityDetailInfo.internalBinaryWrite(message.detail.samLampInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CrucibleActivityDetailInfo crucible_info = 14; */
        if (message.detail.oneofKind === "crucibleInfo")
            CrucibleActivityDetailInfo.internalBinaryWrite(message.detail.crucibleInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SalesmanActivityDetailInfo salesman_info = 11; */
        if (message.detail.oneofKind === "salesmanInfo")
            SalesmanActivityDetailInfo.internalBinaryWrite(message.detail.salesmanInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TrialAvatarActivityDetailInfo trial_avatar_info = 1; */
        if (message.detail.oneofKind === "trialAvatarInfo")
            TrialAvatarActivityDetailInfo.internalBinaryWrite(message.detail.trialAvatarInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DeliveryActivityDetailInfo delivery_info = 1092; */
        if (message.detail.oneofKind === "deliveryInfo")
            DeliveryActivityDetailInfo.internalBinaryWrite(message.detail.deliveryInfo, writer.tag(1092, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.AsterActivityDetailInfo aster_info = 557; */
        if (message.detail.oneofKind === "asterInfo")
            AsterActivityDetailInfo.internalBinaryWrite(message.detail.asterInfo, writer.tag(557, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FlightActivityDetailInfo flight_info = 1365; */
        if (message.detail.oneofKind === "flightInfo")
            FlightActivityDetailInfo.internalBinaryWrite(message.detail.flightInfo, writer.tag(1365, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DragonSpineActivityDetailInfo dragon_spine_info = 1727; */
        if (message.detail.oneofKind === "dragonSpineInfo")
            DragonSpineActivityDetailInfo.internalBinaryWrite(message.detail.dragonSpineInfo, writer.tag(1727, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyActivityDetailInfo effigy_info = 391; */
        if (message.detail.oneofKind === "effigyInfo")
            EffigyActivityDetailInfo.internalBinaryWrite(message.detail.effigyInfo, writer.tag(391, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TreasureMapActivityDetailInfo treasure_map_info = 1114; */
        if (message.detail.oneofKind === "treasureMapInfo")
            TreasureMapActivityDetailInfo.internalBinaryWrite(message.detail.treasureMapInfo, writer.tag(1114, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BlessingActivityDetailInfo blessing_info = 1869; */
        if (message.detail.oneofKind === "blessingInfo")
            BlessingActivityDetailInfo.internalBinaryWrite(message.detail.blessingInfo, writer.tag(1869, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SeaLampActivityInfo sea_lamp_info = 494; */
        if (message.detail.oneofKind === "seaLampInfo")
            SeaLampActivityInfo.internalBinaryWrite(message.detail.seaLampInfo, writer.tag(494, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ExpeditionActivityDetailInfo expedition_info = 202; */
        if (message.detail.oneofKind === "expeditionInfo")
            ExpeditionActivityDetailInfo.internalBinaryWrite(message.detail.expeditionInfo, writer.tag(202, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ArenaChallengeActivityDetailInfo arena_challenge_info = 859; */
        if (message.detail.oneofKind === "arenaChallengeInfo")
            ArenaChallengeActivityDetailInfo.internalBinaryWrite(message.detail.arenaChallengeInfo, writer.tag(859, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairActivityDetailInfo fleur_fair_info = 857; */
        if (message.detail.oneofKind === "fleurFairInfo")
            FleurFairActivityDetailInfo.internalBinaryWrite(message.detail.fleurFairInfo, writer.tag(857, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WaterSpiritActivityDetailInfo water_spirit_info = 1675; */
        if (message.detail.oneofKind === "waterSpiritInfo")
            WaterSpiritActivityDetailInfo.internalBinaryWrite(message.detail.waterSpiritInfo, writer.tag(1675, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ChannelerSlabActivityDetailInfo challneler_slab_info = 1015; */
        if (message.detail.oneofKind === "challnelerSlabInfo")
            ChannelerSlabActivityDetailInfo.internalBinaryWrite(message.detail.challnelerSlabInfo, writer.tag(1015, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MistTrialActivityDetailInfo mist_trial_activity_info = 156; */
        if (message.detail.oneofKind === "mistTrialActivityInfo")
            MistTrialActivityDetailInfo.internalBinaryWrite(message.detail.mistTrialActivityInfo, writer.tag(156, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.HideAndSeekActivityDetailInfo hide_and_seek_info = 427; */
        if (message.detail.oneofKind === "hideAndSeekInfo")
            HideAndSeekActivityDetailInfo.internalBinaryWrite(message.detail.hideAndSeekInfo, writer.tag(427, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FindHilichurlDetailInfo find_hilichurl_info = 1411; */
        if (message.detail.oneofKind === "findHilichurlInfo")
            FindHilichurlDetailInfo.internalBinaryWrite(message.detail.findHilichurlInfo, writer.tag(1411, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SummerTimeDetailInfo summer_time_info = 1372; */
        if (message.detail.oneofKind === "summerTimeInfo")
            SummerTimeDetailInfo.internalBinaryWrite(message.detail.summerTimeInfo, writer.tag(1372, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BuoyantCombatDetailInfo buoyant_combat_info = 1842; */
        if (message.detail.oneofKind === "buoyantCombatInfo")
            BuoyantCombatDetailInfo.internalBinaryWrite(message.detail.buoyantCombatInfo, writer.tag(1842, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EchoShellDetailInfo echo_shell_info = 1113; */
        if (message.detail.oneofKind === "echoShellInfo")
            EchoShellDetailInfo.internalBinaryWrite(message.detail.echoShellInfo, writer.tag(1113, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BounceConjuringActivityDetailInfo bounce_conjuring_info = 767; */
        if (message.detail.oneofKind === "bounceConjuringInfo")
            BounceConjuringActivityDetailInfo.internalBinaryWrite(message.detail.bounceConjuringInfo, writer.tag(767, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BlitzRushActivityDetailInfo blitz_rush_info = 794; */
        if (message.detail.oneofKind === "blitzRushInfo")
            BlitzRushActivityDetailInfo.internalBinaryWrite(message.detail.blitzRushInfo, writer.tag(794, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ChessActivityDetailInfo chess_info = 927; */
        if (message.detail.oneofKind === "chessInfo")
            ChessActivityDetailInfo.internalBinaryWrite(message.detail.chessInfo, writer.tag(927, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SumoActivityDetailInfo sumo_info = 1261; */
        if (message.detail.oneofKind === "sumoInfo")
            SumoActivityDetailInfo.internalBinaryWrite(message.detail.sumoInfo, writer.tag(1261, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MoonfinTrialActivityDetailInfo moonfin_trial_info = 1588; */
        if (message.detail.oneofKind === "moonfinTrialInfo")
            MoonfinTrialActivityDetailInfo.internalBinaryWrite(message.detail.moonfinTrialInfo, writer.tag(1588, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LunaRiteDetailInfo luna_rite_info = 814; */
        if (message.detail.oneofKind === "lunaRiteInfo")
            LunaRiteDetailInfo.internalBinaryWrite(message.detail.lunaRiteInfo, writer.tag(814, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PlantFlowerActivityDetailInfo plant_flower_info = 54; */
        if (message.detail.oneofKind === "plantFlowerInfo")
            PlantFlowerActivityDetailInfo.internalBinaryWrite(message.detail.plantFlowerInfo, writer.tag(54, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MusicGameActivityDetailInfo music_game_info = 460; */
        if (message.detail.oneofKind === "musicGameInfo")
            MusicGameActivityDetailInfo.internalBinaryWrite(message.detail.musicGameInfo, writer.tag(460, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 219; */
        if (message.detail.oneofKind === "roguelikeDungoenInfo")
            RoguelikeDungeonActivityDetailInfo.internalBinaryWrite(message.detail.roguelikeDungoenInfo, writer.tag(219, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DigActivityDetailInfo dig_info = 403; */
        if (message.detail.oneofKind === "digInfo")
            DigActivityDetailInfo.internalBinaryWrite(message.detail.digInfo, writer.tag(403, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.HachiActivityDetailInfo hachi_info = 491; */
        if (message.detail.oneofKind === "hachiInfo")
            HachiActivityDetailInfo.internalBinaryWrite(message.detail.hachiInfo, writer.tag(491, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WinterCampActivityDetailInfo winter_camp_info = 1083; */
        if (message.detail.oneofKind === "winterCampInfo")
            WinterCampActivityDetailInfo.internalBinaryWrite(message.detail.winterCampInfo, writer.tag(1083, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PotionActivityDetailInfo potion_info = 1273; */
        if (message.detail.oneofKind === "potionInfo")
            PotionActivityDetailInfo.internalBinaryWrite(message.detail.potionInfo, writer.tag(1273, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1796; */
        if (message.detail.oneofKind === "tanukiTravelActivityInfo")
            TanukiTravelActivityDetailInfo.internalBinaryWrite(message.detail.tanukiTravelActivityInfo, writer.tag(1796, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LanternRiteActivityDetailInfo lantern_rite_activity_info = 1876; */
        if (message.detail.oneofKind === "lanternRiteActivityInfo")
            LanternRiteActivityDetailInfo.internalBinaryWrite(message.detail.lanternRiteActivityInfo, writer.tag(1876, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 194; */
        if (message.detail.oneofKind === "michiaeMatsuriInfo")
            MichiaeMatsuriActivityDetailInfo.internalBinaryWrite(message.detail.michiaeMatsuriInfo, writer.tag(194, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BartenderActivityDetailInfo bartender_info = 1725; */
        if (message.detail.oneofKind === "bartenderInfo")
            BartenderActivityDetailInfo.internalBinaryWrite(message.detail.bartenderInfo, writer.tag(1725, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.UgcActivityDetailInfo ugc_info = 703; */
        if (message.detail.oneofKind === "ugcInfo")
            UgcActivityDetailInfo.internalBinaryWrite(message.detail.ugcInfo, writer.tag(703, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CrystalLinkActivityDetailInfo crystal_link_info = 1226; */
        if (message.detail.oneofKind === "crystalLinkInfo")
            CrystalLinkActivityDetailInfo.internalBinaryWrite(message.detail.crystalLinkInfo, writer.tag(1226, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.IrodoriActivityDetailInfo irodori_info = 750; */
        if (message.detail.oneofKind === "irodoriInfo")
            IrodoriActivityDetailInfo.internalBinaryWrite(message.detail.irodoriInfo, writer.tag(750, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PhotoActivityDetailInfo photo_info = 328; */
        if (message.detail.oneofKind === "photoInfo")
            PhotoActivityDetailInfo.internalBinaryWrite(message.detail.photoInfo, writer.tag(328, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SpiceActivityDetailInfo spice_info = 1891; */
        if (message.detail.oneofKind === "spiceInfo")
            SpiceActivityDetailInfo.internalBinaryWrite(message.detail.spiceInfo, writer.tag(1891, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GachaActivityDetailInfo gacha_info = 825; */
        if (message.detail.oneofKind === "gachaInfo")
            GachaActivityDetailInfo.internalBinaryWrite(message.detail.gachaInfo, writer.tag(825, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 1308; */
        if (message.detail.oneofKind === "luminanceStoneChallengeInfo")
            LuminanceStoneChallengeActivityDetailInfo.internalBinaryWrite(message.detail.luminanceStoneChallengeInfo, writer.tag(1308, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RogueDiaryActivityDetailInfo rogue_diary_info = 812; */
        if (message.detail.oneofKind === "rogueDiaryInfo")
            RogueDiaryActivityDetailInfo.internalBinaryWrite(message.detail.rogueDiaryInfo, writer.tag(812, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SummerTimeV2DetailInfo summer_time_v2_info = 622; */
        if (message.detail.oneofKind === "summerTimeV2Info")
            SummerTimeV2DetailInfo.internalBinaryWrite(message.detail.summerTimeV2Info, writer.tag(622, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.IslandPartyDetailInfo island_party_info = 1885; */
        if (message.detail.oneofKind === "islandPartyInfo")
            IslandPartyDetailInfo.internalBinaryWrite(message.detail.islandPartyInfo, writer.tag(1885, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GearActivityDetailInfo gear_info = 722; */
        if (message.detail.oneofKind === "gearInfo")
            GearActivityDetailInfo.internalBinaryWrite(message.detail.gearInfo, writer.tag(722, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GravenInnocenceDetailInfo graven_innocence_info = 1911; */
        if (message.detail.oneofKind === "gravenInnocenceInfo")
            GravenInnocenceDetailInfo.internalBinaryWrite(message.detail.gravenInnocenceInfo, writer.tag(1911, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.InstableSprayDetailInfo instable_spray_info = 1043; */
        if (message.detail.oneofKind === "instableSprayInfo")
            InstableSprayDetailInfo.internalBinaryWrite(message.detail.instableSprayInfo, writer.tag(1043, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MuqadasPotionActivityDetailInfo muqadas_potion_info = 1157; */
        if (message.detail.oneofKind === "muqadasPotionInfo")
            MuqadasPotionActivityDetailInfo.internalBinaryWrite(message.detail.muqadasPotionInfo, writer.tag(1157, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TreasureSeelieActivityDetailInfo treasure_seelie_info = 966; */
        if (message.detail.oneofKind === "treasureSeelieInfo")
            TreasureSeelieActivityDetailInfo.internalBinaryWrite(message.detail.treasureSeelieInfo, writer.tag(966, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RockBoardExploreDetailInfo rock_board_explore_info = 1078; */
        if (message.detail.oneofKind === "rockBoardExploreInfo")
            RockBoardExploreDetailInfo.internalBinaryWrite(message.detail.rockBoardExploreInfo, writer.tag(1078, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageActivityDetailInfo vintage_info = 445; */
        if (message.detail.oneofKind === "vintageInfo")
            VintageActivityDetailInfo.internalBinaryWrite(message.detail.vintageInfo, writer.tag(445, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WindFieldDetailInfo wind_field_info = 352; */
        if (message.detail.oneofKind === "windFieldInfo")
            WindFieldDetailInfo.internalBinaryWrite(message.detail.windFieldInfo, writer.tag(352, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FungusFighterDetailInfo fungus_fighter_info = 490; */
        if (message.detail.oneofKind === "fungusFighterInfo")
            FungusFighterDetailInfo.internalBinaryWrite(message.detail.fungusFighterInfo, writer.tag(490, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CharAmusementDetailInfo char_amusement_info = 1496; */
        if (message.detail.oneofKind === "charAmusementInfo")
            CharAmusementDetailInfo.internalBinaryWrite(message.detail.charAmusementInfo, writer.tag(1496, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyChallengeV2DetailInfo effigy_challenge_info = 1025; */
        if (message.detail.oneofKind === "effigyChallengeInfo")
            EffigyChallengeV2DetailInfo.internalBinaryWrite(message.detail.effigyChallengeInfo, writer.tag(1025, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityInfo
 */
export const ActivityInfo = new ActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfoRsp$Type extends MessageType<GetActivityInfoRsp> {
    constructor() {
        super("com.midnights.game.GetActivityInfoRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "activity_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityInfo },
            { no: 11, name: "activated_sale_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "disable_transfer_point_interaction_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Uint32Pair }
        ]);
    }
    create(value?: PartialMessage<GetActivityInfoRsp>): GetActivityInfoRsp {
        const message = { activityInfoList: [], activatedSaleIdList: [], disableTransferPointInteractionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetActivityInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetActivityInfoRsp): GetActivityInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityInfo activity_info_list */ 5:
                    message.activityInfoList.push(ActivityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 activated_sale_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatedSaleIdList.push(reader.uint32());
                    else
                        message.activatedSaleIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list */ 10:
                    message.disableTransferPointInteractionList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetActivityInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityInfo activity_info_list = 5; */
        for (let i = 0; i < message.activityInfoList.length; i++)
            ActivityInfo.internalBinaryWrite(message.activityInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 activated_sale_id_list = 11; */
        for (let i = 0; i < message.activatedSaleIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.activatedSaleIdList[i]);
        /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 10; */
        for (let i = 0; i < message.disableTransferPointInteractionList.length; i++)
            Uint32Pair.internalBinaryWrite(message.disableTransferPointInteractionList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityInfoRsp
 */
export const GetActivityInfoRsp = new GetActivityInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPlayOpenAnimNotify$Type extends MessageType<ActivityPlayOpenAnimNotify> {
    constructor() {
        super("com.midnights.game.ActivityPlayOpenAnimNotify", [
            { no: 8, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityPlayOpenAnimNotify>): ActivityPlayOpenAnimNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityPlayOpenAnimNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityPlayOpenAnimNotify): ActivityPlayOpenAnimNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 8:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityPlayOpenAnimNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 8; */
        if (message.activityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPlayOpenAnimNotify
 */
export const ActivityPlayOpenAnimNotify = new ActivityPlayOpenAnimNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInfoNotify$Type extends MessageType<ActivityInfoNotify> {
    constructor() {
        super("com.midnights.game.ActivityInfoNotify", [
            { no: 9, name: "activity_info", kind: "message", T: () => ActivityInfo }
        ]);
    }
    create(value?: PartialMessage<ActivityInfoNotify>): ActivityInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityInfoNotify): ActivityInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityInfo activity_info */ 9:
                    message.activityInfo = ActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ActivityInfo activity_info = 9; */
        if (message.activityInfo)
            ActivityInfo.internalBinaryWrite(message.activityInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityInfoNotify
 */
export const ActivityInfoNotify = new ActivityInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityScheduleInfoNotify$Type extends MessageType<ActivityScheduleInfoNotify> {
    constructor() {
        super("com.midnights.game.ActivityScheduleInfoNotify", [
            { no: 12, name: "activity_schedule_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityScheduleInfo },
            { no: 6, name: "remain_fly_sea_lamp_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityScheduleInfoNotify>): ActivityScheduleInfoNotify {
        const message = { activityScheduleList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityScheduleInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityScheduleInfoNotify): ActivityScheduleInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list */ 12:
                    message.activityScheduleList.push(ActivityScheduleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 remain_fly_sea_lamp_num */ 6:
                    message.remainFlySeaLampNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityScheduleInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 12; */
        for (let i = 0; i < message.activityScheduleList.length; i++)
            ActivityScheduleInfo.internalBinaryWrite(message.activityScheduleList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 remain_fly_sea_lamp_num = 6; */
        if (message.remainFlySeaLampNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.remainFlySeaLampNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityScheduleInfoNotify
 */
export const ActivityScheduleInfoNotify = new ActivityScheduleInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityWatcherInfo$Type extends MessageType<ActivityWatcherInfo> {
    constructor() {
        super("com.midnights.game.ActivityWatcherInfo", [
            { no: 8, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityWatcherInfo>): ActivityWatcherInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityWatcherInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityWatcherInfo): ActivityWatcherInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_taken_reward */ 8:
                    message.isTakenReward = reader.bool();
                    break;
                case /* optional uint32 cur_progress */ 2:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 total_progress */ 4:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 5:
                    message.watcherId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityWatcherInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_taken_reward = 8; */
        if (message.isTakenReward !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isTakenReward);
        /* optional uint32 cur_progress = 2; */
        if (message.curProgress !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.curProgress);
        /* optional uint32 total_progress = 4; */
        if (message.totalProgress !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.totalProgress);
        /* optional uint32 watcher_id = 5; */
        if (message.watcherId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.watcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityWatcherInfo
 */
export const ActivityWatcherInfo = new ActivityWatcherInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardReq$Type extends MessageType<ActivityTakeWatcherRewardReq> {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardReq", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeWatcherRewardReq>): ActivityTakeWatcherRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeWatcherRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeWatcherRewardReq): ActivityTakeWatcherRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 14:
                    message.watcherId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeWatcherRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        /* optional uint32 watcher_id = 14; */
        if (message.watcherId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.watcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardReq
 */
export const ActivityTakeWatcherRewardReq = new ActivityTakeWatcherRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardRsp$Type extends MessageType<ActivityTakeWatcherRewardRsp> {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardRsp", [
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeWatcherRewardRsp>): ActivityTakeWatcherRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeWatcherRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeWatcherRewardRsp): ActivityTakeWatcherRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 7:
                    message.watcherId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeWatcherRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activityId);
        /* optional uint32 watcher_id = 7; */
        if (message.watcherId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.watcherId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardRsp
 */
export const ActivityTakeWatcherRewardRsp = new ActivityTakeWatcherRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityUpdateWatcherNotify$Type extends MessageType<ActivityUpdateWatcherNotify> {
    constructor() {
        super("com.midnights.game.ActivityUpdateWatcherNotify", [
            { no: 2, name: "watcher_info", kind: "message", T: () => ActivityWatcherInfo },
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityUpdateWatcherNotify>): ActivityUpdateWatcherNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityUpdateWatcherNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityUpdateWatcherNotify): ActivityUpdateWatcherNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityWatcherInfo watcher_info */ 2:
                    message.watcherInfo = ActivityWatcherInfo.internalBinaryRead(reader, reader.uint32(), options, message.watcherInfo);
                    break;
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityUpdateWatcherNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ActivityWatcherInfo watcher_info = 2; */
        if (message.watcherInfo)
            ActivityWatcherInfo.internalBinaryWrite(message.watcherInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityUpdateWatcherNotify
 */
export const ActivityUpdateWatcherNotify = new ActivityUpdateWatcherNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySelectAvatarCardReq$Type extends MessageType<ActivitySelectAvatarCardReq> {
    constructor() {
        super("com.midnights.game.ActivitySelectAvatarCardReq", [
            { no: 15, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivitySelectAvatarCardReq>): ActivitySelectAvatarCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivitySelectAvatarCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivitySelectAvatarCardReq): ActivitySelectAvatarCardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 10:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivitySelectAvatarCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 15; */
        if (message.activityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.activityId);
        /* optional uint32 reward_id = 10; */
        if (message.rewardId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySelectAvatarCardReq
 */
export const ActivitySelectAvatarCardReq = new ActivitySelectAvatarCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySelectAvatarCardRsp$Type extends MessageType<ActivitySelectAvatarCardRsp> {
    constructor() {
        super("com.midnights.game.ActivitySelectAvatarCardRsp", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivitySelectAvatarCardRsp>): ActivitySelectAvatarCardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivitySelectAvatarCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivitySelectAvatarCardRsp): ActivitySelectAvatarCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_id */ 9:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivitySelectAvatarCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_id = 9; */
        if (message.rewardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySelectAvatarCardRsp
 */
export const ActivitySelectAvatarCardRsp = new ActivitySelectAvatarCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCoinInfoNotify$Type extends MessageType<ActivityCoinInfoNotify> {
    constructor() {
        super("com.midnights.game.ActivityCoinInfoNotify", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "activity_coin_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<ActivityCoinInfoNotify>): ActivityCoinInfoNotify {
        const message = { activityCoinMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityCoinInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityCoinInfoNotify): ActivityCoinInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                case /* map<uint32, uint32> activity_coin_map */ 2:
                    this.binaryReadMap2(message.activityCoinMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ActivityCoinInfoNotify["activityCoinMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityCoinInfoNotify["activityCoinMap"] | undefined, val: ActivityCoinInfoNotify["activityCoinMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityCoinInfoNotify.activity_coin_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityCoinInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.activityId);
        /* map<uint32, uint32> activity_coin_map = 2; */
        for (let k of Object.keys(message.activityCoinMap))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.activityCoinMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityCoinInfoNotify
 */
export const ActivityCoinInfoNotify = new ActivityCoinInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampActivityDetailInfo$Type extends MessageType<SeaLampActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.SeaLampActivityDetailInfo", [
            { no: 14, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "taken_phase_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "taken_contribution_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "days", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampActivityDetailInfo>): SeaLampActivityDetailInfo {
        const message = { takenPhaseRewardList: [], takenContributionRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampActivityDetailInfo): SeaLampActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 14:
                    message.phaseId = reader.uint32();
                    break;
                case /* repeated uint32 taken_phase_reward_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenPhaseRewardList.push(reader.uint32());
                    else
                        message.takenPhaseRewardList.push(reader.uint32());
                    break;
                case /* repeated uint32 taken_contribution_reward_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenContributionRewardList.push(reader.uint32());
                    else
                        message.takenContributionRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 progress */ 8:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 contribution */ 15:
                    message.contribution = reader.uint32();
                    break;
                case /* optional uint32 factor */ 13:
                    message.factor = reader.uint32();
                    break;
                case /* optional uint32 days */ 4:
                    message.days = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 phase_id = 14; */
        if (message.phaseId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.phaseId);
        /* repeated uint32 taken_phase_reward_list = 1; */
        for (let i = 0; i < message.takenPhaseRewardList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.takenPhaseRewardList[i]);
        /* repeated uint32 taken_contribution_reward_list = 7; */
        for (let i = 0; i < message.takenContributionRewardList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.takenContributionRewardList[i]);
        /* optional uint32 progress = 8; */
        if (message.progress !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.progress);
        /* optional uint32 contribution = 15; */
        if (message.contribution !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.contribution);
        /* optional uint32 factor = 13; */
        if (message.factor !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.factor);
        /* optional uint32 days = 4; */
        if (message.days !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.days);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampActivityDetailInfo
 */
export const SeaLampActivityDetailInfo = new SeaLampActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampReq$Type extends MessageType<SeaLampFlyLampReq> {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampReq", [
            { no: 9, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "param", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "pos", kind: "message", T: () => Vector },
            { no: 5, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampFlyLampReq>): SeaLampFlyLampReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampFlyLampReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampFlyLampReq): SeaLampFlyLampReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_id */ 9:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 param */ 10:
                    message.param = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 7:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 item_num */ 5:
                    message.itemNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampFlyLampReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_id = 9; */
        if (message.itemId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.itemId);
        /* optional int32 param = 10; */
        if (message.param !== undefined)
            writer.tag(10, WireType.Varint).int32(message.param);
        /* optional com.midnights.game.Vector pos = 7; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 item_num = 5; */
        if (message.itemNum !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.itemNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampReq
 */
export const SeaLampFlyLampReq = new SeaLampFlyLampReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampRsp$Type extends MessageType<SeaLampFlyLampRsp> {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampRsp", [
            { no: 9, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampFlyLampRsp>): SeaLampFlyLampRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampFlyLampRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampFlyLampRsp): SeaLampFlyLampRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_num */ 9:
                    message.itemNum = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 15:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampFlyLampRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_num = 9; */
        if (message.itemNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.itemNum);
        /* optional uint32 item_id = 15; */
        if (message.itemId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.itemId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampRsp
 */
export const SeaLampFlyLampRsp = new SeaLampFlyLampRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakeContributionRewardReq$Type extends MessageType<SeaLampTakeContributionRewardReq> {
    constructor() {
        super("com.midnights.game.SeaLampTakeContributionRewardReq", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampTakeContributionRewardReq>): SeaLampTakeContributionRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampTakeContributionRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampTakeContributionRewardReq): SeaLampTakeContributionRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 10:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampTakeContributionRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        /* optional uint32 config_id = 10; */
        if (message.configId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakeContributionRewardReq
 */
export const SeaLampTakeContributionRewardReq = new SeaLampTakeContributionRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakeContributionRewardRsp$Type extends MessageType<SeaLampTakeContributionRewardRsp> {
    constructor() {
        super("com.midnights.game.SeaLampTakeContributionRewardRsp", [
            { no: 9, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampTakeContributionRewardRsp>): SeaLampTakeContributionRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampTakeContributionRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampTakeContributionRewardRsp): SeaLampTakeContributionRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 config_id */ 9:
                    message.configId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampTakeContributionRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 config_id = 9; */
        if (message.configId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.configId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakeContributionRewardRsp
 */
export const SeaLampTakeContributionRewardRsp = new SeaLampTakeContributionRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakePhaseRewardReq$Type extends MessageType<SeaLampTakePhaseRewardReq> {
    constructor() {
        super("com.midnights.game.SeaLampTakePhaseRewardReq", [
            { no: 12, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampTakePhaseRewardReq>): SeaLampTakePhaseRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampTakePhaseRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampTakePhaseRewardReq): SeaLampTakePhaseRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 12:
                    message.phaseId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampTakePhaseRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 phase_id = 12; */
        if (message.phaseId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.phaseId);
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakePhaseRewardReq
 */
export const SeaLampTakePhaseRewardReq = new SeaLampTakePhaseRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakePhaseRewardRsp$Type extends MessageType<SeaLampTakePhaseRewardRsp> {
    constructor() {
        super("com.midnights.game.SeaLampTakePhaseRewardRsp", [
            { no: 2, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampTakePhaseRewardRsp>): SeaLampTakePhaseRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampTakePhaseRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampTakePhaseRewardRsp): SeaLampTakePhaseRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 2:
                    message.phaseId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampTakePhaseRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 phase_id = 2; */
        if (message.phaseId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.phaseId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakePhaseRewardRsp
 */
export const SeaLampTakePhaseRewardRsp = new SeaLampTakePhaseRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampContributeItemReq$Type extends MessageType<SeaLampContributeItemReq> {
    constructor() {
        super("com.midnights.game.SeaLampContributeItemReq", [
            { no: 8, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<SeaLampContributeItemReq>): SeaLampContributeItemReq {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampContributeItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampContributeItemReq): SeaLampContributeItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 8:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 1:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampContributeItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 8; */
        if (message.activityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.ItemParam item_list = 1; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampContributeItemReq
 */
export const SeaLampContributeItemReq = new SeaLampContributeItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampContributeItemRsp$Type extends MessageType<SeaLampContributeItemRsp> {
    constructor() {
        super("com.midnights.game.SeaLampContributeItemRsp", [
            { no: 7, name: "add_contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "add_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "total_contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampContributeItemRsp>): SeaLampContributeItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampContributeItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampContributeItemRsp): SeaLampContributeItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 add_contribution */ 7:
                    message.addContribution = reader.uint32();
                    break;
                case /* optional uint32 add_progress */ 1:
                    message.addProgress = reader.uint32();
                    break;
                case /* optional uint32 total_contribution */ 14:
                    message.totalContribution = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampContributeItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 add_contribution = 7; */
        if (message.addContribution !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.addContribution);
        /* optional uint32 add_progress = 1; */
        if (message.addProgress !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.addProgress);
        /* optional uint32 total_contribution = 14; */
        if (message.totalContribution !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.totalContribution);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampContributeItemRsp
 */
export const SeaLampContributeItemRsp = new SeaLampContributeItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampSectionInfo$Type extends MessageType<SeaLampSectionInfo> {
    constructor() {
        super("com.midnights.game.SeaLampSectionInfo", [
            { no: 11, name: "section_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampSectionInfo>): SeaLampSectionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampSectionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampSectionInfo): SeaLampSectionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 section_id */ 11:
                    message.sectionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampSectionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 section_id = 11; */
        if (message.sectionId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampSectionInfo
 */
export const SeaLampSectionInfo = new SeaLampSectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampActivityInfo$Type extends MessageType<SeaLampActivityInfo> {
    constructor() {
        super("com.midnights.game.SeaLampActivityInfo", [
            { no: 14, name: "is_mechanicus_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "section_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SeaLampSectionInfo },
            { no: 10, name: "popularity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "sea_lamp_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "first_day_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_mechanicus_feature_close", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampActivityInfo>): SeaLampActivityInfo {
        const message = { sectionInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampActivityInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampActivityInfo): SeaLampActivityInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mechanicus_open */ 14:
                    message.isMechanicusOpen = reader.bool();
                    break;
                case /* optional uint32 day_index */ 1:
                    message.dayIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SeaLampSectionInfo section_info_list */ 6:
                    message.sectionInfoList.push(SeaLampSectionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 popularity */ 10:
                    message.popularity = reader.uint32();
                    break;
                case /* optional uint32 sea_lamp_coin */ 15:
                    message.seaLampCoin = reader.uint32();
                    break;
                case /* optional uint32 first_day_start_time */ 11:
                    message.firstDayStartTime = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_id */ 9:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional bool is_mechanicus_feature_close */ 12:
                    message.isMechanicusFeatureClose = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 5:
                    message.isContentClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampActivityInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_mechanicus_open = 14; */
        if (message.isMechanicusOpen !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isMechanicusOpen);
        /* optional uint32 day_index = 1; */
        if (message.dayIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dayIndex);
        /* repeated com.midnights.game.SeaLampSectionInfo section_info_list = 6; */
        for (let i = 0; i < message.sectionInfoList.length; i++)
            SeaLampSectionInfo.internalBinaryWrite(message.sectionInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 popularity = 10; */
        if (message.popularity !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.popularity);
        /* optional uint32 sea_lamp_coin = 15; */
        if (message.seaLampCoin !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.seaLampCoin);
        /* optional uint32 first_day_start_time = 11; */
        if (message.firstDayStartTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.firstDayStartTime);
        /* optional uint32 mechanicus_id = 9; */
        if (message.mechanicusId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.mechanicusId);
        /* optional bool is_mechanicus_feature_close = 12; */
        if (message.isMechanicusFeatureClose !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isMechanicusFeatureClose);
        /* optional bool is_content_closed = 5; */
        if (message.isContentClosed !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isContentClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampActivityInfo
 */
export const SeaLampActivityInfo = new SeaLampActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampNotify$Type extends MessageType<SeaLampFlyLampNotify> {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampNotify", [
            { no: 11, name: "pos", kind: "message", T: () => Vector },
            { no: 10, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "param", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampFlyLampNotify>): SeaLampFlyLampNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampFlyLampNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampFlyLampNotify): SeaLampFlyLampNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 11:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 item_num */ 10:
                    message.itemNum = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 7:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 param */ 5:
                    message.param = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampFlyLampNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 11; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 item_num = 10; */
        if (message.itemNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.itemNum);
        /* optional uint32 item_id = 7; */
        if (message.itemId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.itemId);
        /* optional int32 param = 5; */
        if (message.param !== undefined)
            writer.tag(5, WireType.Varint).int32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampNotify
 */
export const SeaLampFlyLampNotify = new SeaLampFlyLampNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampCoinNotify$Type extends MessageType<SeaLampCoinNotify> {
    constructor() {
        super("com.midnights.game.SeaLampCoinNotify", [
            { no: 8, name: "sea_lamp_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampCoinNotify>): SeaLampCoinNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampCoinNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampCoinNotify): SeaLampCoinNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sea_lamp_coin */ 8:
                    message.seaLampCoin = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampCoinNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 sea_lamp_coin = 8; */
        if (message.seaLampCoin !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.seaLampCoin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampCoinNotify
 */
export const SeaLampCoinNotify = new SeaLampCoinNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampPopularityNotify$Type extends MessageType<SeaLampPopularityNotify> {
    constructor() {
        super("com.midnights.game.SeaLampPopularityNotify", [
            { no: 4, name: "popularity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SeaLampPopularityNotify>): SeaLampPopularityNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeaLampPopularityNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeaLampPopularityNotify): SeaLampPopularityNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 popularity */ 4:
                    message.popularity = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeaLampPopularityNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 popularity = 4; */
        if (message.popularity !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.popularity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampPopularityNotify
 */
export const SeaLampPopularityNotify = new SeaLampPopularityNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnnounceData$Type extends MessageType<AnnounceData> {
    constructor() {
        super("com.midnights.game.AnnounceData", [
            { no: 9, name: "count_down_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "center_system_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "count_down_frequency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "center_system_frequency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "dungeon_confirm_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "is_center_system_last_5_every_minutes", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AnnounceData>): AnnounceData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AnnounceData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AnnounceData): AnnounceData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string count_down_text */ 9:
                    message.countDownText = reader.string();
                    break;
                case /* optional string center_system_text */ 8:
                    message.centerSystemText = reader.string();
                    break;
                case /* optional uint32 count_down_frequency */ 1:
                    message.countDownFrequency = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 7:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 4:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 center_system_frequency */ 11:
                    message.centerSystemFrequency = reader.uint32();
                    break;
                case /* optional string dungeon_confirm_text */ 2:
                    message.dungeonConfirmText = reader.string();
                    break;
                case /* optional bool is_center_system_last_5_every_minutes */ 14:
                    message.isCenterSystemLast5EveryMinutes = reader.bool();
                    break;
                case /* optional uint32 end_time */ 10:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AnnounceData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string count_down_text = 9; */
        if (message.countDownText !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.countDownText);
        /* optional string center_system_text = 8; */
        if (message.centerSystemText !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.centerSystemText);
        /* optional uint32 count_down_frequency = 1; */
        if (message.countDownFrequency !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.countDownFrequency);
        /* optional uint32 config_id = 7; */
        if (message.configId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.configId);
        /* optional uint32 begin_time = 4; */
        if (message.beginTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.beginTime);
        /* optional uint32 center_system_frequency = 11; */
        if (message.centerSystemFrequency !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.centerSystemFrequency);
        /* optional string dungeon_confirm_text = 2; */
        if (message.dungeonConfirmText !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.dungeonConfirmText);
        /* optional bool is_center_system_last_5_every_minutes = 14; */
        if (message.isCenterSystemLast5EveryMinutes !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isCenterSystemLast5EveryMinutes);
        /* optional uint32 end_time = 10; */
        if (message.endTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnnounceData
 */
export const AnnounceData = new AnnounceData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadActivityTerrainNotify$Type extends MessageType<LoadActivityTerrainNotify> {
    constructor() {
        super("com.midnights.game.LoadActivityTerrainNotify", [
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LoadActivityTerrainNotify>): LoadActivityTerrainNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoadActivityTerrainNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoadActivityTerrainNotify): LoadActivityTerrainNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoadActivityTerrainNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LoadActivityTerrainNotify
 */
export const LoadActivityTerrainNotify = new LoadActivityTerrainNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerAnnounceNotify$Type extends MessageType<ServerAnnounceNotify> {
    constructor() {
        super("com.midnights.game.ServerAnnounceNotify", [
            { no: 11, name: "announce_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AnnounceData }
        ]);
    }
    create(value?: PartialMessage<ServerAnnounceNotify>): ServerAnnounceNotify {
        const message = { announceDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerAnnounceNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerAnnounceNotify): ServerAnnounceNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AnnounceData announce_data_list */ 11:
                    message.announceDataList.push(AnnounceData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerAnnounceNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AnnounceData announce_data_list = 11; */
        for (let i = 0; i < message.announceDataList.length; i++)
            AnnounceData.internalBinaryWrite(message.announceDataList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerAnnounceNotify
 */
export const ServerAnnounceNotify = new ServerAnnounceNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerAnnounceRevokeNotify$Type extends MessageType<ServerAnnounceRevokeNotify> {
    constructor() {
        super("com.midnights.game.ServerAnnounceRevokeNotify", [
            { no: 15, name: "config_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerAnnounceRevokeNotify>): ServerAnnounceRevokeNotify {
        const message = { configIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerAnnounceRevokeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerAnnounceRevokeNotify): ServerAnnounceRevokeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 config_id_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.configIdList.push(reader.uint32());
                    else
                        message.configIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerAnnounceRevokeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 config_id_list = 15; */
        for (let i = 0; i < message.configIdList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.configIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerAnnounceRevokeNotify
 */
export const ServerAnnounceRevokeNotify = new ServerAnnounceRevokeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerNotify$Type extends MessageType<ActivityBannerNotify> {
    constructor() {
        super("com.midnights.game.ActivityBannerNotify", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityBannerNotify>): ActivityBannerNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityBannerNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityBannerNotify): ActivityBannerNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityBannerNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerNotify
 */
export const ActivityBannerNotify = new ActivityBannerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerClearReq$Type extends MessageType<ActivityBannerClearReq> {
    constructor() {
        super("com.midnights.game.ActivityBannerClearReq", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityBannerClearReq>): ActivityBannerClearReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityBannerClearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityBannerClearReq): ActivityBannerClearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 12:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityBannerClearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 12; */
        if (message.activityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerClearReq
 */
export const ActivityBannerClearReq = new ActivityBannerClearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerClearRsp$Type extends MessageType<ActivityBannerClearRsp> {
    constructor() {
        super("com.midnights.game.ActivityBannerClearRsp", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityBannerClearRsp>): ActivityBannerClearRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityBannerClearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityBannerClearRsp): ActivityBannerClearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityBannerClearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerClearRsp
 */
export const ActivityBannerClearRsp = new ActivityBannerClearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanActivityDetailInfo$Type extends MessageType<SalesmanActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.SalesmanActivityDetailInfo", [
            { no: 3, name: "special_reward_preview_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "status", kind: "enum", opt: true, T: () => ["com.midnights.game.SalesmanStatusType", SalesmanStatusType] },
            { no: 2, name: "last_deliver_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "selected_reward_id_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "deliver_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_has_taken_special_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cond_day_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "day_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_today_has_delivered", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanActivityDetailInfo>): SalesmanActivityDetailInfo {
        const message = { selectedRewardIdMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanActivityDetailInfo): SalesmanActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 special_reward_preview_id */ 3:
                    message.specialRewardPreviewId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalesmanStatusType status */ 4:
                    message.status = reader.int32();
                    break;
                case /* optional uint32 last_deliver_time */ 2:
                    message.lastDeliverTime = reader.uint32();
                    break;
                case /* map<uint32, uint32> selected_reward_id_map */ 5:
                    this.binaryReadMap5(message.selectedRewardIdMap, reader, options);
                    break;
                case /* optional uint32 deliver_count */ 11:
                    message.deliverCount = reader.uint32();
                    break;
                case /* optional bool is_has_taken_special_reward */ 7:
                    message.isHasTakenSpecialReward = reader.bool();
                    break;
                case /* optional uint32 day_index */ 12:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional uint32 cond_day_count */ 6:
                    message.condDayCount = reader.uint32();
                    break;
                case /* optional uint32 day_reward_id */ 9:
                    message.dayRewardId = reader.uint32();
                    break;
                case /* optional bool is_today_has_delivered */ 13:
                    message.isTodayHasDelivered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: SalesmanActivityDetailInfo["selectedRewardIdMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SalesmanActivityDetailInfo["selectedRewardIdMap"] | undefined, val: SalesmanActivityDetailInfo["selectedRewardIdMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SalesmanActivityDetailInfo.selected_reward_id_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SalesmanActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 special_reward_preview_id = 3; */
        if (message.specialRewardPreviewId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.specialRewardPreviewId);
        /* optional com.midnights.game.SalesmanStatusType status = 4; */
        if (message.status !== undefined)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* optional uint32 last_deliver_time = 2; */
        if (message.lastDeliverTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.lastDeliverTime);
        /* map<uint32, uint32> selected_reward_id_map = 5; */
        for (let k of Object.keys(message.selectedRewardIdMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.selectedRewardIdMap[k as any]).join();
        /* optional uint32 deliver_count = 11; */
        if (message.deliverCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.deliverCount);
        /* optional bool is_has_taken_special_reward = 7; */
        if (message.isHasTakenSpecialReward !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isHasTakenSpecialReward);
        /* optional uint32 day_index = 12; */
        if (message.dayIndex !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dayIndex);
        /* optional uint32 cond_day_count = 6; */
        if (message.condDayCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.condDayCount);
        /* optional uint32 day_reward_id = 9; */
        if (message.dayRewardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.dayRewardId);
        /* optional bool is_today_has_delivered = 13; */
        if (message.isTodayHasDelivered !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isTodayHasDelivered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanActivityDetailInfo
 */
export const SalesmanActivityDetailInfo = new SalesmanActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanDeliverItemReq$Type extends MessageType<SalesmanDeliverItemReq> {
    constructor() {
        super("com.midnights.game.SalesmanDeliverItemReq", [
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanDeliverItemReq>): SalesmanDeliverItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanDeliverItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanDeliverItemReq): SalesmanDeliverItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanDeliverItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanDeliverItemReq
 */
export const SalesmanDeliverItemReq = new SalesmanDeliverItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanDeliverItemRsp$Type extends MessageType<SalesmanDeliverItemRsp> {
    constructor() {
        super("com.midnights.game.SalesmanDeliverItemRsp", [
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanDeliverItemRsp>): SalesmanDeliverItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanDeliverItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanDeliverItemRsp): SalesmanDeliverItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanDeliverItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanDeliverItemRsp
 */
export const SalesmanDeliverItemRsp = new SalesmanDeliverItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeRewardReq$Type extends MessageType<SalesmanTakeRewardReq> {
    constructor() {
        super("com.midnights.game.SalesmanTakeRewardReq", [
            { no: 8, name: "position", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanTakeRewardReq>): SalesmanTakeRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanTakeRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanTakeRewardReq): SalesmanTakeRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 position */ 8:
                    message.position = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanTakeRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 position = 8; */
        if (message.position !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.position);
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeRewardReq
 */
export const SalesmanTakeRewardReq = new SalesmanTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeRewardRsp$Type extends MessageType<SalesmanTakeRewardRsp> {
    constructor() {
        super("com.midnights.game.SalesmanTakeRewardRsp", [
            { no: 13, name: "position", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanTakeRewardRsp>): SalesmanTakeRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanTakeRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanTakeRewardRsp): SalesmanTakeRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 position */ 13:
                    message.position = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 9:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanTakeRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 position = 13; */
        if (message.position !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.position);
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 reward_id = 9; */
        if (message.rewardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.rewardId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeRewardRsp
 */
export const SalesmanTakeRewardRsp = new SalesmanTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCondStateChangeNotify$Type extends MessageType<ActivityCondStateChangeNotify> {
    constructor() {
        super("com.midnights.game.ActivityCondStateChangeNotify", [
            { no: 9, name: "activated_sale_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "expire_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "disable_transfer_point_interaction_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Uint32Pair },
            { no: 1, name: "meet_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityCondStateChangeNotify>): ActivityCondStateChangeNotify {
        const message = { activatedSaleIdList: [], expireCondList: [], disableTransferPointInteractionList: [], meetCondList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityCondStateChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityCondStateChangeNotify): ActivityCondStateChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activated_sale_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatedSaleIdList.push(reader.uint32());
                    else
                        message.activatedSaleIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated uint32 expire_cond_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.expireCondList.push(reader.uint32());
                    else
                        message.expireCondList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list */ 12:
                    message.disableTransferPointInteractionList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 meet_cond_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.meetCondList.push(reader.uint32());
                    else
                        message.meetCondList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityCondStateChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 activated_sale_id_list = 9; */
        for (let i = 0; i < message.activatedSaleIdList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.activatedSaleIdList[i]);
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        /* repeated uint32 expire_cond_list = 11; */
        for (let i = 0; i < message.expireCondList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.expireCondList[i]);
        /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 12; */
        for (let i = 0; i < message.disableTransferPointInteractionList.length; i++)
            Uint32Pair.internalBinaryWrite(message.disableTransferPointInteractionList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 meet_cond_list = 1; */
        for (let i = 0; i < message.meetCondList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.meetCondList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityCondStateChangeNotify
 */
export const ActivityCondStateChangeNotify = new ActivityCondStateChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeSpecialRewardReq$Type extends MessageType<SalesmanTakeSpecialRewardReq> {
    constructor() {
        super("com.midnights.game.SalesmanTakeSpecialRewardReq", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanTakeSpecialRewardReq>): SalesmanTakeSpecialRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanTakeSpecialRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanTakeSpecialRewardReq): SalesmanTakeSpecialRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanTakeSpecialRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeSpecialRewardReq
 */
export const SalesmanTakeSpecialRewardReq = new SalesmanTakeSpecialRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeSpecialRewardRsp$Type extends MessageType<SalesmanTakeSpecialRewardRsp> {
    constructor() {
        super("com.midnights.game.SalesmanTakeSpecialRewardRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalesmanTakeSpecialRewardRsp>): SalesmanTakeSpecialRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalesmanTakeSpecialRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalesmanTakeSpecialRewardRsp): SalesmanTakeSpecialRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalesmanTakeSpecialRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeSpecialRewardRsp
 */
export const SalesmanTakeSpecialRewardRsp = new SalesmanTakeSpecialRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAuthSalesmanInfoReq$Type extends MessageType<GetAuthSalesmanInfoReq> {
    constructor() {
        super("com.midnights.game.GetAuthSalesmanInfoReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAuthSalesmanInfoReq>): GetAuthSalesmanInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAuthSalesmanInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAuthSalesmanInfoReq): GetAuthSalesmanInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAuthSalesmanInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAuthSalesmanInfoReq
 */
export const GetAuthSalesmanInfoReq = new GetAuthSalesmanInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAuthSalesmanInfoRsp$Type extends MessageType<GetAuthSalesmanInfoRsp> {
    constructor() {
        super("com.midnights.game.GetAuthSalesmanInfoRsp", [
            { no: 5, name: "day_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAuthSalesmanInfoRsp>): GetAuthSalesmanInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAuthSalesmanInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAuthSalesmanInfoRsp): GetAuthSalesmanInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_reward_id */ 5:
                    message.dayRewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAuthSalesmanInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 day_reward_id = 5; */
        if (message.dayRewardId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.dayRewardId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAuthSalesmanInfoRsp
 */
export const GetAuthSalesmanInfoRsp = new GetAuthSalesmanInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarActivityRewardDetailInfo$Type extends MessageType<TrialAvatarActivityRewardDetailInfo> {
    constructor() {
        super("com.midnights.game.TrialAvatarActivityRewardDetailInfo", [
            { no: 2, name: "passed_dungeon", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "received_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TrialAvatarActivityRewardDetailInfo>): TrialAvatarActivityRewardDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrialAvatarActivityRewardDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrialAvatarActivityRewardDetailInfo): TrialAvatarActivityRewardDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool passed_dungeon */ 2:
                    message.passedDungeon = reader.bool();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 4:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional bool received_reward */ 5:
                    message.receivedReward = reader.bool();
                    break;
                case /* optional uint32 reward_id */ 7:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrialAvatarActivityRewardDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool passed_dungeon = 2; */
        if (message.passedDungeon !== undefined)
            writer.tag(2, WireType.Varint).bool(message.passedDungeon);
        /* optional uint32 trial_avatar_index_id = 4; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional bool received_reward = 5; */
        if (message.receivedReward !== undefined)
            writer.tag(5, WireType.Varint).bool(message.receivedReward);
        /* optional uint32 reward_id = 7; */
        if (message.rewardId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarActivityRewardDetailInfo
 */
export const TrialAvatarActivityRewardDetailInfo = new TrialAvatarActivityRewardDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarActivityDetailInfo$Type extends MessageType<TrialAvatarActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.TrialAvatarActivityDetailInfo", [
            { no: 13, name: "reward_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TrialAvatarActivityRewardDetailInfo }
        ]);
    }
    create(value?: PartialMessage<TrialAvatarActivityDetailInfo>): TrialAvatarActivityDetailInfo {
        const message = { rewardInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrialAvatarActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrialAvatarActivityDetailInfo): TrialAvatarActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TrialAvatarActivityRewardDetailInfo reward_info_list */ 13:
                    message.rewardInfoList.push(TrialAvatarActivityRewardDetailInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrialAvatarActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.TrialAvatarActivityRewardDetailInfo reward_info_list = 13; */
        for (let i = 0; i < message.rewardInfoList.length; i++)
            TrialAvatarActivityRewardDetailInfo.internalBinaryWrite(message.rewardInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarActivityDetailInfo
 */
export const TrialAvatarActivityDetailInfo = new TrialAvatarActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterTrialAvatarActivityDungeonReq$Type extends MessageType<EnterTrialAvatarActivityDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterTrialAvatarActivityDungeonReq", [
            { no: 10, name: "enter_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterTrialAvatarActivityDungeonReq>): EnterTrialAvatarActivityDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterTrialAvatarActivityDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterTrialAvatarActivityDungeonReq): EnterTrialAvatarActivityDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_point_id */ 10:
                    message.enterPointId = reader.uint32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 5:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterTrialAvatarActivityDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 enter_point_id = 10; */
        if (message.enterPointId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.enterPointId);
        /* optional uint32 trial_avatar_index_id = 5; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonReq
 */
export const EnterTrialAvatarActivityDungeonReq = new EnterTrialAvatarActivityDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterTrialAvatarActivityDungeonRsp$Type extends MessageType<EnterTrialAvatarActivityDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterTrialAvatarActivityDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterTrialAvatarActivityDungeonRsp>): EnterTrialAvatarActivityDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterTrialAvatarActivityDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterTrialAvatarActivityDungeonRsp): EnterTrialAvatarActivityDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 13:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterTrialAvatarActivityDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 trial_avatar_index_id = 13; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonRsp
 */
export const EnterTrialAvatarActivityDungeonRsp = new EnterTrialAvatarActivityDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceivedTrialAvatarActivityRewardReq$Type extends MessageType<ReceivedTrialAvatarActivityRewardReq> {
    constructor() {
        super("com.midnights.game.ReceivedTrialAvatarActivityRewardReq", [
            { no: 4, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReceivedTrialAvatarActivityRewardReq>): ReceivedTrialAvatarActivityRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReceivedTrialAvatarActivityRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceivedTrialAvatarActivityRewardReq): ReceivedTrialAvatarActivityRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 4:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceivedTrialAvatarActivityRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_avatar_index_id = 4; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardReq
 */
export const ReceivedTrialAvatarActivityRewardReq = new ReceivedTrialAvatarActivityRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceivedTrialAvatarActivityRewardRsp$Type extends MessageType<ReceivedTrialAvatarActivityRewardRsp> {
    constructor() {
        super("com.midnights.game.ReceivedTrialAvatarActivityRewardRsp", [
            { no: 13, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReceivedTrialAvatarActivityRewardRsp>): ReceivedTrialAvatarActivityRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReceivedTrialAvatarActivityRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceivedTrialAvatarActivityRewardRsp): ReceivedTrialAvatarActivityRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 13:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 9:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceivedTrialAvatarActivityRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 13; */
        if (message.activityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 trial_avatar_index_id = 9; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardRsp
 */
export const ReceivedTrialAvatarActivityRewardRsp = new ReceivedTrialAvatarActivityRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarFirstPassDungeonNotify$Type extends MessageType<TrialAvatarFirstPassDungeonNotify> {
    constructor() {
        super("com.midnights.game.TrialAvatarFirstPassDungeonNotify", [
            { no: 10, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TrialAvatarFirstPassDungeonNotify>): TrialAvatarFirstPassDungeonNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrialAvatarFirstPassDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrialAvatarFirstPassDungeonNotify): TrialAvatarFirstPassDungeonNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 10:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrialAvatarFirstPassDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_avatar_index_id = 10; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarFirstPassDungeonNotify
 */
export const TrialAvatarFirstPassDungeonNotify = new TrialAvatarFirstPassDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarInDungeonIndexNotify$Type extends MessageType<TrialAvatarInDungeonIndexNotify> {
    constructor() {
        super("com.midnights.game.TrialAvatarInDungeonIndexNotify", [
            { no: 14, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TrialAvatarInDungeonIndexNotify>): TrialAvatarInDungeonIndexNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrialAvatarInDungeonIndexNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrialAvatarInDungeonIndexNotify): TrialAvatarInDungeonIndexNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 14:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrialAvatarInDungeonIndexNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_avatar_index_id = 14; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarInDungeonIndexNotify
 */
export const TrialAvatarInDungeonIndexNotify = new TrialAvatarInDungeonIndexNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrucibleBattleUidInfo$Type extends MessageType<CrucibleBattleUidInfo> {
    constructor() {
        super("com.midnights.game.CrucibleBattleUidInfo", [
            { no: 15, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 4, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "icon", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrucibleBattleUidInfo>): CrucibleBattleUidInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrucibleBattleUidInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrucibleBattleUidInfo): CrucibleBattleUidInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 15:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 4:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                case /* optional string online_id */ 13:
                    message.onlineId = reader.string();
                    break;
                case /* optional uint32 icon */ 11:
                    message.icon = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrucibleBattleUidInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ProfilePicture profile_picture = 15; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 4; */
        if (message.uid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.uid);
        /* optional string nickname = 5; */
        if (message.nickname !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.nickname);
        /* optional string online_id = 13; */
        if (message.onlineId !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.onlineId);
        /* optional uint32 icon = 11; */
        if (message.icon !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrucibleBattleUidInfo
 */
export const CrucibleBattleUidInfo = new CrucibleBattleUidInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrucibleActivityDetailInfo$Type extends MessageType<CrucibleActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.CrucibleActivityDetailInfo", [
            { no: 5, name: "cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "battle_world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "uid_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrucibleBattleUidInfo },
            { no: 9, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<CrucibleActivityDetailInfo>): CrucibleActivityDetailInfo {
        const message = { uidInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrucibleActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrucibleActivityDetailInfo): CrucibleActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cost_time */ 5:
                    message.costTime = reader.uint32();
                    break;
                case /* optional uint32 battle_world_level */ 12:
                    message.battleWorldLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrucibleBattleUidInfo uid_info_list */ 3:
                    message.uidInfoList.push(CrucibleBattleUidInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.Vector pos */ 9:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrucibleActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cost_time = 5; */
        if (message.costTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.costTime);
        /* optional uint32 battle_world_level = 12; */
        if (message.battleWorldLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.battleWorldLevel);
        /* repeated com.midnights.game.CrucibleBattleUidInfo uid_info_list = 3; */
        for (let i = 0; i < message.uidInfoList.length; i++)
            CrucibleBattleUidInfo.internalBinaryWrite(message.uidInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 9; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrucibleActivityDetailInfo
 */
export const CrucibleActivityDetailInfo = new CrucibleActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeliveryActivityDetailInfo$Type extends MessageType<DeliveryActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.DeliveryActivityDetailInfo", [
            { no: 14, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "finished_delivery_quest_index", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeliveryActivityDetailInfo>): DeliveryActivityDetailInfo {
        const message = { finishedDeliveryQuestIndex: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeliveryActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeliveryActivityDetailInfo): DeliveryActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_index */ 14:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional bool is_taken_reward */ 13:
                    message.isTakenReward = reader.bool();
                    break;
                case /* repeated uint32 finished_delivery_quest_index */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedDeliveryQuestIndex.push(reader.uint32());
                    else
                        message.finishedDeliveryQuestIndex.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeliveryActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 day_index = 14; */
        if (message.dayIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dayIndex);
        /* optional bool is_taken_reward = 13; */
        if (message.isTakenReward !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isTakenReward);
        /* repeated uint32 finished_delivery_quest_index = 4; */
        for (let i = 0; i < message.finishedDeliveryQuestIndex.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.finishedDeliveryQuestIndex[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DeliveryActivityDetailInfo
 */
export const DeliveryActivityDetailInfo = new DeliveryActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDeliveryDailyRewardReq$Type extends MessageType<TakeDeliveryDailyRewardReq> {
    constructor() {
        super("com.midnights.game.TakeDeliveryDailyRewardReq", [
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeDeliveryDailyRewardReq>): TakeDeliveryDailyRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeDeliveryDailyRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeDeliveryDailyRewardReq): TakeDeliveryDailyRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeDeliveryDailyRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeDeliveryDailyRewardReq
 */
export const TakeDeliveryDailyRewardReq = new TakeDeliveryDailyRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDeliveryDailyRewardRsp$Type extends MessageType<TakeDeliveryDailyRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeDeliveryDailyRewardRsp", [
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeDeliveryDailyRewardRsp>): TakeDeliveryDailyRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeDeliveryDailyRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeDeliveryDailyRewardRsp): TakeDeliveryDailyRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeDeliveryDailyRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeDeliveryDailyRewardRsp
 */
export const TakeDeliveryDailyRewardRsp = new TakeDeliveryDailyRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishDeliveryNotify$Type extends MessageType<FinishDeliveryNotify> {
    constructor() {
        super("com.midnights.game.FinishDeliveryNotify", [
            { no: 1, name: "finished_quest_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishDeliveryNotify>): FinishDeliveryNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishDeliveryNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishDeliveryNotify): FinishDeliveryNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finished_quest_index */ 1:
                    message.finishedQuestIndex = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 12:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishDeliveryNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finished_quest_index = 1; */
        if (message.finishedQuestIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.finishedQuestIndex);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 day_index = 12; */
        if (message.dayIndex !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishDeliveryNotify
 */
export const FinishDeliveryNotify = new FinishDeliveryNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLittleDetailInfo$Type extends MessageType<AsterLittleDetailInfo> {
    constructor() {
        super("com.midnights.game.AsterLittleDetailInfo", [
            { no: 4, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "stage_state", kind: "enum", opt: true, T: () => ["com.midnights.game.AsterLittleStageState", AsterLittleStageState] },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stage_begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterLittleDetailInfo>): AsterLittleDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterLittleDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterLittleDetailInfo): AsterLittleDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 4:
                    message.isOpen = reader.bool();
                    break;
                case /* optional com.midnights.game.AsterLittleStageState stage_state */ 7:
                    message.stageState = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 6:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 stage_begin_time */ 5:
                    message.stageBeginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterLittleDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 4; */
        if (message.isOpen !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isOpen);
        /* optional com.midnights.game.AsterLittleStageState stage_state = 7; */
        if (message.stageState !== undefined)
            writer.tag(7, WireType.Varint).int32(message.stageState);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        /* optional uint32 begin_time = 6; */
        if (message.beginTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.beginTime);
        /* optional uint32 stage_begin_time = 5; */
        if (message.stageBeginTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.stageBeginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLittleDetailInfo
 */
export const AsterLittleDetailInfo = new AsterLittleDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidCampInfo$Type extends MessageType<AsterMidCampInfo> {
    constructor() {
        super("com.midnights.game.AsterMidCampInfo", [
            { no: 3, name: "pos", kind: "message", T: () => Vector },
            { no: 8, name: "camp_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterMidCampInfo>): AsterMidCampInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterMidCampInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterMidCampInfo): AsterMidCampInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 3:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 camp_id */ 8:
                    message.campId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterMidCampInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 3; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 camp_id = 8; */
        if (message.campId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.campId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidCampInfo
 */
export const AsterMidCampInfo = new AsterMidCampInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidDetailInfo$Type extends MessageType<AsterMidDetailInfo> {
    constructor() {
        super("com.midnights.game.AsterMidDetailInfo", [
            { no: 10, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "camp_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AsterMidCampInfo },
            { no: 4, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "collect_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterMidDetailInfo>): AsterMidDetailInfo {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterMidDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterMidDetailInfo): AsterMidDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 begin_time */ 10:
                    message.beginTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.AsterMidCampInfo camp_list */ 7:
                    message.campList.push(AsterMidCampInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 4:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 collect_count */ 11:
                    message.collectCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterMidDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 begin_time = 10; */
        if (message.beginTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.beginTime);
        /* repeated com.midnights.game.AsterMidCampInfo camp_list = 7; */
        for (let i = 0; i < message.campList.length; i++)
            AsterMidCampInfo.internalBinaryWrite(message.campList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 4; */
        if (message.isOpen !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isOpen);
        /* optional uint32 collect_count = 11; */
        if (message.collectCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.collectCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidDetailInfo
 */
export const AsterMidDetailInfo = new AsterMidDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLargeDetailInfo$Type extends MessageType<AsterLargeDetailInfo> {
    constructor() {
        super("com.midnights.game.AsterLargeDetailInfo", [
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterLargeDetailInfo>): AsterLargeDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterLargeDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterLargeDetailInfo): AsterLargeDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 begin_time */ 13:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterLargeDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isOpen);
        /* optional uint32 begin_time = 13; */
        if (message.beginTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLargeDetailInfo
 */
export const AsterLargeDetailInfo = new AsterLargeDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterProgressDetailInfo$Type extends MessageType<AsterProgressDetailInfo> {
    constructor() {
        super("com.midnights.game.AsterProgressDetailInfo", [
            { no: 3, name: "last_auto_add_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterProgressDetailInfo>): AsterProgressDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterProgressDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterProgressDetailInfo): AsterProgressDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 last_auto_add_time */ 3:
                    message.lastAutoAddTime = reader.uint32();
                    break;
                case /* optional uint32 count */ 1:
                    message.count = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterProgressDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 last_auto_add_time = 3; */
        if (message.lastAutoAddTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.lastAutoAddTime);
        /* optional uint32 count = 1; */
        if (message.count !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterProgressDetailInfo
 */
export const AsterProgressDetailInfo = new AsterProgressDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterActivityDetailInfo$Type extends MessageType<AsterActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.AsterActivityDetailInfo", [
            { no: 7, name: "aster_little", kind: "message", T: () => AsterLittleDetailInfo },
            { no: 14, name: "aster_credit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "aster_large", kind: "message", T: () => AsterLargeDetailInfo },
            { no: 1, name: "is_special_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "aster_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "aster_mid", kind: "message", T: () => AsterMidDetailInfo },
            { no: 2, name: "aster_progress", kind: "message", T: () => AsterProgressDetailInfo }
        ]);
    }
    create(value?: PartialMessage<AsterActivityDetailInfo>): AsterActivityDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterActivityDetailInfo): AsterActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLittleDetailInfo aster_little */ 7:
                    message.asterLittle = AsterLittleDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterLittle);
                    break;
                case /* optional uint32 aster_credit */ 14:
                    message.asterCredit = reader.uint32();
                    break;
                case /* optional com.midnights.game.AsterLargeDetailInfo aster_large */ 9:
                    message.asterLarge = AsterLargeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterLarge);
                    break;
                case /* optional bool is_special_reward_taken */ 1:
                    message.isSpecialRewardTaken = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 13:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 8:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 aster_token */ 5:
                    message.asterToken = reader.uint32();
                    break;
                case /* optional com.midnights.game.AsterMidDetailInfo aster_mid */ 6:
                    message.asterMid = AsterMidDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterMid);
                    break;
                case /* optional com.midnights.game.AsterProgressDetailInfo aster_progress */ 2:
                    message.asterProgress = AsterProgressDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterProgress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AsterLittleDetailInfo aster_little = 7; */
        if (message.asterLittle)
            AsterLittleDetailInfo.internalBinaryWrite(message.asterLittle, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 aster_credit = 14; */
        if (message.asterCredit !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.asterCredit);
        /* optional com.midnights.game.AsterLargeDetailInfo aster_large = 9; */
        if (message.asterLarge)
            AsterLargeDetailInfo.internalBinaryWrite(message.asterLarge, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_special_reward_taken = 1; */
        if (message.isSpecialRewardTaken !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isSpecialRewardTaken);
        /* optional bool is_content_closed = 13; */
        if (message.isContentClosed !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 content_close_time = 8; */
        if (message.contentCloseTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 aster_token = 5; */
        if (message.asterToken !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.asterToken);
        /* optional com.midnights.game.AsterMidDetailInfo aster_mid = 6; */
        if (message.asterMid)
            AsterMidDetailInfo.internalBinaryWrite(message.asterMid, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AsterProgressDetailInfo aster_progress = 2; */
        if (message.asterProgress)
            AsterProgressDetailInfo.internalBinaryWrite(message.asterProgress, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterActivityDetailInfo
 */
export const AsterActivityDetailInfo = new AsterActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectAsterMidDifficultyReq$Type extends MessageType<SelectAsterMidDifficultyReq> {
    constructor() {
        super("com.midnights.game.SelectAsterMidDifficultyReq", [
            { no: 13, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectAsterMidDifficultyReq>): SelectAsterMidDifficultyReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectAsterMidDifficultyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectAsterMidDifficultyReq): SelectAsterMidDifficultyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 13:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 5:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectAsterMidDifficultyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_entity_id = 13; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 difficulty_id = 5; */
        if (message.difficultyId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectAsterMidDifficultyReq
 */
export const SelectAsterMidDifficultyReq = new SelectAsterMidDifficultyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectAsterMidDifficultyRsp$Type extends MessageType<SelectAsterMidDifficultyRsp> {
    constructor() {
        super("com.midnights.game.SelectAsterMidDifficultyRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectAsterMidDifficultyRsp>): SelectAsterMidDifficultyRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectAsterMidDifficultyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectAsterMidDifficultyRsp): SelectAsterMidDifficultyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectAsterMidDifficultyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectAsterMidDifficultyRsp
 */
export const SelectAsterMidDifficultyRsp = new SelectAsterMidDifficultyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterProgressInfoNotify$Type extends MessageType<AsterProgressInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterProgressInfoNotify", [
            { no: 1, name: "info", kind: "message", T: () => AsterProgressDetailInfo }
        ]);
    }
    create(value?: PartialMessage<AsterProgressInfoNotify>): AsterProgressInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterProgressInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterProgressInfoNotify): AsterProgressInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterProgressDetailInfo info */ 1:
                    message.info = AsterProgressDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterProgressInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AsterProgressDetailInfo info = 1; */
        if (message.info)
            AsterProgressDetailInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterProgressInfoNotify
 */
export const AsterProgressInfoNotify = new AsterProgressInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLittleInfoNotify$Type extends MessageType<AsterLittleInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterLittleInfoNotify", [
            { no: 1, name: "info", kind: "message", T: () => AsterLittleDetailInfo }
        ]);
    }
    create(value?: PartialMessage<AsterLittleInfoNotify>): AsterLittleInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterLittleInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterLittleInfoNotify): AsterLittleInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLittleDetailInfo info */ 1:
                    message.info = AsterLittleDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterLittleInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AsterLittleDetailInfo info = 1; */
        if (message.info)
            AsterLittleDetailInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLittleInfoNotify
 */
export const AsterLittleInfoNotify = new AsterLittleInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidInfoNotify$Type extends MessageType<AsterMidInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterMidInfoNotify", [
            { no: 4, name: "info", kind: "message", T: () => AsterMidDetailInfo }
        ]);
    }
    create(value?: PartialMessage<AsterMidInfoNotify>): AsterMidInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterMidInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterMidInfoNotify): AsterMidInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterMidDetailInfo info */ 4:
                    message.info = AsterMidDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterMidInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AsterMidDetailInfo info = 4; */
        if (message.info)
            AsterMidDetailInfo.internalBinaryWrite(message.info, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidInfoNotify
 */
export const AsterMidInfoNotify = new AsterMidInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMiscInfoNotify$Type extends MessageType<AsterMiscInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterMiscInfoNotify", [
            { no: 2, name: "aster_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "aster_credit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AsterMiscInfoNotify>): AsterMiscInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterMiscInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterMiscInfoNotify): AsterMiscInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 aster_token */ 2:
                    message.asterToken = reader.uint32();
                    break;
                case /* optional uint32 aster_credit */ 15:
                    message.asterCredit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterMiscInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 aster_token = 2; */
        if (message.asterToken !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.asterToken);
        /* optional uint32 aster_credit = 15; */
        if (message.asterCredit !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.asterCredit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMiscInfoNotify
 */
export const AsterMiscInfoNotify = new AsterMiscInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAsterSpecialRewardReq$Type extends MessageType<TakeAsterSpecialRewardReq> {
    constructor() {
        super("com.midnights.game.TakeAsterSpecialRewardReq", [
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeAsterSpecialRewardReq>): TakeAsterSpecialRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAsterSpecialRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAsterSpecialRewardReq): TakeAsterSpecialRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAsterSpecialRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAsterSpecialRewardReq
 */
export const TakeAsterSpecialRewardReq = new TakeAsterSpecialRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAsterSpecialRewardRsp$Type extends MessageType<TakeAsterSpecialRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeAsterSpecialRewardRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeAsterSpecialRewardRsp>): TakeAsterSpecialRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeAsterSpecialRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeAsterSpecialRewardRsp): TakeAsterSpecialRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeAsterSpecialRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAsterSpecialRewardRsp
 */
export const TakeAsterSpecialRewardRsp = new TakeAsterSpecialRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLargeInfoNotify$Type extends MessageType<AsterLargeInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterLargeInfoNotify", [
            { no: 10, name: "info", kind: "message", T: () => AsterLargeDetailInfo }
        ]);
    }
    create(value?: PartialMessage<AsterLargeInfoNotify>): AsterLargeInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterLargeInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterLargeInfoNotify): AsterLargeInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLargeDetailInfo info */ 10:
                    message.info = AsterLargeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterLargeInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AsterLargeDetailInfo info = 10; */
        if (message.info)
            AsterLargeDetailInfo.internalBinaryWrite(message.info, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLargeInfoNotify
 */
export const AsterLargeInfoNotify = new AsterLargeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightDailyRecord$Type extends MessageType<FlightDailyRecord> {
    constructor() {
        super("com.midnights.game.FlightDailyRecord", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FlightDailyRecord>): FlightDailyRecord {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlightDailyRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightDailyRecord): FlightDailyRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_touched */ 1:
                    message.isTouched = reader.bool();
                    break;
                case /* repeated uint32 watcher_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 best_score */ 7:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 3:
                    message.startTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlightDailyRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.groupId);
        /* optional bool is_touched = 1; */
        if (message.isTouched !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isTouched);
        /* repeated uint32 watcher_id_list = 11; */
        for (let i = 0; i < message.watcherIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.watcherIdList[i]);
        /* optional uint32 best_score = 7; */
        if (message.bestScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.bestScore);
        /* optional uint32 start_time = 3; */
        if (message.startTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightDailyRecord
 */
export const FlightDailyRecord = new FlightDailyRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityDetailInfo$Type extends MessageType<FlightActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.FlightActivityDetailInfo", [
            { no: 15, name: "preview_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "daily_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FlightDailyRecord }
        ]);
    }
    create(value?: PartialMessage<FlightActivityDetailInfo>): FlightActivityDetailInfo {
        const message = { dailyRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlightActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightActivityDetailInfo): FlightActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 preview_reward_id */ 15:
                    message.previewRewardId = reader.uint32();
                    break;
                case /* optional uint32 min_open_player_level */ 11:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FlightDailyRecord daily_record_list */ 1:
                    message.dailyRecordList.push(FlightDailyRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlightActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 preview_reward_id = 15; */
        if (message.previewRewardId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.previewRewardId);
        /* optional uint32 min_open_player_level = 11; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* repeated com.midnights.game.FlightDailyRecord daily_record_list = 1; */
        for (let i = 0; i < message.dailyRecordList.length; i++)
            FlightDailyRecord.internalBinaryWrite(message.dailyRecordList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityDetailInfo
 */
export const FlightActivityDetailInfo = new FlightActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivitySettleNotify$Type extends MessageType<FlightActivitySettleNotify> {
    constructor() {
        super("com.midnights.game.FlightActivitySettleNotify", [
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "medal_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "collect_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FlightActivitySettleNotify>): FlightActivitySettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlightActivitySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightActivitySettleNotify): FlightActivitySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 medal_level */ 6:
                    message.medalLevel = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 13:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 collect_num */ 9:
                    message.collectNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 5:
                    message.totalNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 8:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                case /* optional bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlightActivitySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 medal_level = 6; */
        if (message.medalLevel !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.medalLevel);
        /* optional uint32 left_time = 13; */
        if (message.leftTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.leftTime);
        /* optional uint32 collect_num = 9; */
        if (message.collectNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.collectNum);
        /* optional uint32 total_num = 5; */
        if (message.totalNum !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.totalNum);
        /* optional uint32 group_id = 8; */
        if (message.groupId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.groupId);
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.score);
        /* optional bool is_success = 4; */
        if (message.isSuccess !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivitySettleNotify
 */
export const FlightActivitySettleNotify = new FlightActivitySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityRestartReq$Type extends MessageType<FlightActivityRestartReq> {
    constructor() {
        super("com.midnights.game.FlightActivityRestartReq", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FlightActivityRestartReq>): FlightActivityRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlightActivityRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightActivityRestartReq): FlightActivityRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlightActivityRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityRestartReq
 */
export const FlightActivityRestartReq = new FlightActivityRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityRestartRsp$Type extends MessageType<FlightActivityRestartRsp> {
    constructor() {
        super("com.midnights.game.FlightActivityRestartRsp", [
            { no: 11, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FlightActivityRestartRsp>): FlightActivityRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FlightActivityRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FlightActivityRestartRsp): FlightActivityRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 11:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FlightActivityRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 11; */
        if (message.groupId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityRestartRsp
 */
export const FlightActivityRestartRsp = new FlightActivityRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidCampInfoNotify$Type extends MessageType<AsterMidCampInfoNotify> {
    constructor() {
        super("com.midnights.game.AsterMidCampInfoNotify", [
            { no: 5, name: "camp_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AsterMidCampInfo }
        ]);
    }
    create(value?: PartialMessage<AsterMidCampInfoNotify>): AsterMidCampInfoNotify {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AsterMidCampInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsterMidCampInfoNotify): AsterMidCampInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AsterMidCampInfo camp_list */ 5:
                    message.campList.push(AsterMidCampInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AsterMidCampInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AsterMidCampInfo camp_list = 5; */
        for (let i = 0; i < message.campList.length; i++)
            AsterMidCampInfo.internalBinaryWrite(message.campList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidCampInfoNotify
 */
export const AsterMidCampInfoNotify = new AsterMidCampInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineActivityDetailInfo$Type extends MessageType<DragonSpineActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.DragonSpineActivityDetailInfo", [
            { no: 10, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "chapter_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DragonSpineChapterInfo },
            { no: 2, name: "weapon_enhance_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "content_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "shimmering_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "warm_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "wondrous_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineActivityDetailInfo>): DragonSpineActivityDetailInfo {
        const message = { chapterInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineActivityDetailInfo): DragonSpineActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 10:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.DragonSpineChapterInfo chapter_info_list */ 4:
                    message.chapterInfoList.push(DragonSpineChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 weapon_enhance_level */ 2:
                    message.weaponEnhanceLevel = reader.uint32();
                    break;
                case /* optional uint32 content_finish_time */ 15:
                    message.contentFinishTime = reader.uint32();
                    break;
                case /* optional uint32 shimmering_essence */ 13:
                    message.shimmeringEssence = reader.uint32();
                    break;
                case /* optional uint32 warm_essence */ 11:
                    message.warmEssence = reader.uint32();
                    break;
                case /* optional uint32 wondrous_essence */ 7:
                    message.wondrousEssence = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_content_closed = 10; */
        if (message.isContentClosed !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.DragonSpineChapterInfo chapter_info_list = 4; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            DragonSpineChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 weapon_enhance_level = 2; */
        if (message.weaponEnhanceLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.weaponEnhanceLevel);
        /* optional uint32 content_finish_time = 15; */
        if (message.contentFinishTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.contentFinishTime);
        /* optional uint32 shimmering_essence = 13; */
        if (message.shimmeringEssence !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.shimmeringEssence);
        /* optional uint32 warm_essence = 11; */
        if (message.warmEssence !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.warmEssence);
        /* optional uint32 wondrous_essence = 7; */
        if (message.wondrousEssence !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.wondrousEssence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineActivityDetailInfo
 */
export const DragonSpineActivityDetailInfo = new DragonSpineActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterInfo$Type extends MessageType<DragonSpineChapterInfo> {
    constructor() {
        super("com.midnights.game.DragonSpineChapterInfo", [
            { no: 14, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "finished_mission_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineChapterInfo>): DragonSpineChapterInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineChapterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineChapterInfo): DragonSpineChapterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 progress */ 14:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 6:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 chapter_id */ 9:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 finished_mission_num */ 10:
                    message.finishedMissionNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineChapterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 progress = 14; */
        if (message.progress !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.progress);
        /* optional uint32 open_time = 6; */
        if (message.openTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isOpen);
        /* optional uint32 chapter_id = 9; */
        if (message.chapterId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.chapterId);
        /* optional uint32 finished_mission_num = 10; */
        if (message.finishedMissionNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.finishedMissionNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterInfo
 */
export const DragonSpineChapterInfo = new DragonSpineChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterOpenNotify$Type extends MessageType<DragonSpineChapterOpenNotify> {
    constructor() {
        super("com.midnights.game.DragonSpineChapterOpenNotify", [
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineChapterOpenNotify>): DragonSpineChapterOpenNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineChapterOpenNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineChapterOpenNotify): DragonSpineChapterOpenNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 10:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineChapterOpenNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 10; */
        if (message.chapterId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterOpenNotify
 */
export const DragonSpineChapterOpenNotify = new DragonSpineChapterOpenNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterProgressChangeNotify$Type extends MessageType<DragonSpineChapterProgressChangeNotify> {
    constructor() {
        super("com.midnights.game.DragonSpineChapterProgressChangeNotify", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineChapterProgressChangeNotify>): DragonSpineChapterProgressChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineChapterProgressChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineChapterProgressChangeNotify): DragonSpineChapterProgressChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 cur_progress */ 5:
                    message.curProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineChapterProgressChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.chapterId);
        /* optional uint32 cur_progress = 5; */
        if (message.curProgress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.curProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterProgressChangeNotify
 */
export const DragonSpineChapterProgressChangeNotify = new DragonSpineChapterProgressChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterFinishNotify$Type extends MessageType<DragonSpineChapterFinishNotify> {
    constructor() {
        super("com.midnights.game.DragonSpineChapterFinishNotify", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "weapon_enhance_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineChapterFinishNotify>): DragonSpineChapterFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineChapterFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineChapterFinishNotify): DragonSpineChapterFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 weapon_enhance_level */ 14:
                    message.weaponEnhanceLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineChapterFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.chapterId);
        /* optional uint32 weapon_enhance_level = 14; */
        if (message.weaponEnhanceLevel !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.weaponEnhanceLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterFinishNotify
 */
export const DragonSpineChapterFinishNotify = new DragonSpineChapterFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineCoinChangeNotify$Type extends MessageType<DragonSpineCoinChangeNotify> {
    constructor() {
        super("com.midnights.game.DragonSpineCoinChangeNotify", [
            { no: 4, name: "shimmering_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "warm_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "wondrous_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DragonSpineCoinChangeNotify>): DragonSpineCoinChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DragonSpineCoinChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DragonSpineCoinChangeNotify): DragonSpineCoinChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shimmering_essence */ 4:
                    message.shimmeringEssence = reader.uint32();
                    break;
                case /* optional uint32 warm_essence */ 13:
                    message.warmEssence = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 wondrous_essence */ 11:
                    message.wondrousEssence = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DragonSpineCoinChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 shimmering_essence = 4; */
        if (message.shimmeringEssence !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.shimmeringEssence);
        /* optional uint32 warm_essence = 13; */
        if (message.warmEssence !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.warmEssence);
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 wondrous_essence = 11; */
        if (message.wondrousEssence !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.wondrousEssence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineCoinChangeNotify
 */
export const DragonSpineCoinChangeNotify = new DragonSpineCoinChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySaleChangeNotify$Type extends MessageType<ActivitySaleChangeNotify> {
    constructor() {
        super("com.midnights.game.ActivitySaleChangeNotify", [
            { no: 5, name: "sale_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_close", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ActivitySaleChangeNotify>): ActivitySaleChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivitySaleChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivitySaleChangeNotify): ActivitySaleChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sale_id */ 5:
                    message.saleId = reader.uint32();
                    break;
                case /* optional bool is_close */ 1:
                    message.isClose = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivitySaleChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 sale_id = 5; */
        if (message.saleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.saleId);
        /* optional bool is_close = 1; */
        if (message.isClose !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isClose);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySaleChangeNotify
 */
export const ActivitySaleChangeNotify = new ActivitySaleChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyDailyInfo$Type extends MessageType<EffigyDailyInfo> {
    constructor() {
        super("com.midnights.game.EffigyDailyInfo", [
            { no: 6, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_first_pass_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "challenge_total_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyDailyInfo>): EffigyDailyInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyDailyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyDailyInfo): EffigyDailyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_max_score */ 6:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional bool is_first_pass_reward_taken */ 12:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* optional uint32 challenge_total_score */ 15:
                    message.challengeTotalScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 challenge_count */ 3:
                    message.challengeCount = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 14:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 2:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyDailyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_max_score = 6; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeMaxScore);
        /* optional bool is_first_pass_reward_taken = 12; */
        if (message.isFirstPassRewardTaken !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* optional uint32 challenge_total_score = 15; */
        if (message.challengeTotalScore !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.challengeTotalScore);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 challenge_count = 3; */
        if (message.challengeCount !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.challengeCount);
        /* optional uint32 day_index = 14; */
        if (message.dayIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dayIndex);
        /* optional uint32 begin_time = 2; */
        if (message.beginTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyDailyInfo
 */
export const EffigyDailyInfo = new EffigyDailyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyActivityDetailInfo$Type extends MessageType<EffigyActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.EffigyActivityDetailInfo", [
            { no: 5, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "daily_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EffigyDailyInfo },
            { no: 9, name: "last_difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "taken_reward_index_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyActivityDetailInfo>): EffigyActivityDetailInfo {
        const message = { dailyInfoList: [], takenRewardIndexList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyActivityDetailInfo): EffigyActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_score */ 5:
                    message.curScore = reader.uint32();
                    break;
                case /* repeated com.midnights.game.EffigyDailyInfo daily_info_list */ 14:
                    message.dailyInfoList.push(EffigyDailyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 last_difficulty_id */ 9:
                    message.lastDifficultyId = reader.uint32();
                    break;
                case /* repeated uint32 taken_reward_index_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardIndexList.push(reader.uint32());
                    else
                        message.takenRewardIndexList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_score = 5; */
        if (message.curScore !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.curScore);
        /* repeated com.midnights.game.EffigyDailyInfo daily_info_list = 14; */
        for (let i = 0; i < message.dailyInfoList.length; i++)
            EffigyDailyInfo.internalBinaryWrite(message.dailyInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 last_difficulty_id = 9; */
        if (message.lastDifficultyId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.lastDifficultyId);
        /* repeated uint32 taken_reward_index_list = 2; */
        for (let i = 0; i < message.takenRewardIndexList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.takenRewardIndexList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyActivityDetailInfo
 */
export const EffigyActivityDetailInfo = new EffigyActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartEffigyChallengeReq$Type extends MessageType<StartEffigyChallengeReq> {
    constructor() {
        super("com.midnights.game.StartEffigyChallengeReq", [
            { no: 9, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartEffigyChallengeReq>): StartEffigyChallengeReq {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartEffigyChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartEffigyChallengeReq): StartEffigyChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 9:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartEffigyChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty_id = 9; */
        if (message.difficultyId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 6; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartEffigyChallengeReq
 */
export const StartEffigyChallengeReq = new StartEffigyChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartEffigyChallengeRsp$Type extends MessageType<StartEffigyChallengeRsp> {
    constructor() {
        super("com.midnights.game.StartEffigyChallengeRsp", [
            { no: 2, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartEffigyChallengeRsp>): StartEffigyChallengeRsp {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartEffigyChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartEffigyChallengeRsp): StartEffigyChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 condition_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_id */ 15:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartEffigyChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 condition_id_list = 2; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_id = 15; */
        if (message.challengeId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartEffigyChallengeRsp
 */
export const StartEffigyChallengeRsp = new StartEffigyChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeInfoNotify$Type extends MessageType<EffigyChallengeInfoNotify> {
    constructor() {
        super("com.midnights.game.EffigyChallengeInfoNotify", [
            { no: 9, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeInfoNotify>): EffigyChallengeInfoNotify {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeInfoNotify): EffigyChallengeInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 9:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 challenge_score */ 14:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 8:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty_id = 9; */
        if (message.difficultyId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 11; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 challenge_score = 14; */
        if (message.challengeScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 challenge_id = 8; */
        if (message.challengeId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeInfoNotify
 */
export const EffigyChallengeInfoNotify = new EffigyChallengeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeDungeonResultInfo$Type extends MessageType<EffigyChallengeDungeonResultInfo> {
    constructor() {
        super("com.midnights.game.EffigyChallengeDungeonResultInfo", [
            { no: 7, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_in_time_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeDungeonResultInfo>): EffigyChallengeDungeonResultInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeDungeonResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeDungeonResultInfo): EffigyChallengeDungeonResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_score */ 7:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional bool is_in_time_limit */ 8:
                    message.isInTimeLimit = reader.bool();
                    break;
                case /* optional uint32 challenge_id */ 6:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 13:
                    message.challengeMaxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeDungeonResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_score = 7; */
        if (message.challengeScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeScore);
        /* optional bool is_in_time_limit = 8; */
        if (message.isInTimeLimit !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isInTimeLimit);
        /* optional uint32 challenge_id = 6; */
        if (message.challengeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeId);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 13; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.challengeMaxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeDungeonResultInfo
 */
export const EffigyChallengeDungeonResultInfo = new EffigyChallengeDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeResultNotify$Type extends MessageType<EffigyChallengeResultNotify> {
    constructor() {
        super("com.midnights.game.EffigyChallengeResultNotify", [
            { no: 5, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeResultNotify>): EffigyChallengeResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeResultNotify): EffigyChallengeResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 5:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 12:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_score */ 3:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 5; */
        if (message.isSuccess !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 12; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.challengeMaxScore);
        /* optional uint32 challenge_score = 3; */
        if (message.challengeScore !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeResultNotify
 */
export const EffigyChallengeResultNotify = new EffigyChallengeResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyFirstPassRewardReq$Type extends MessageType<TakeEffigyFirstPassRewardReq> {
    constructor() {
        super("com.midnights.game.TakeEffigyFirstPassRewardReq", [
            { no: 6, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeEffigyFirstPassRewardReq>): TakeEffigyFirstPassRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeEffigyFirstPassRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeEffigyFirstPassRewardReq): TakeEffigyFirstPassRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 6:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeEffigyFirstPassRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_id = 6; */
        if (message.challengeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyFirstPassRewardReq
 */
export const TakeEffigyFirstPassRewardReq = new TakeEffigyFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyFirstPassRewardRsp$Type extends MessageType<TakeEffigyFirstPassRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeEffigyFirstPassRewardRsp", [
            { no: 2, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeEffigyFirstPassRewardRsp>): TakeEffigyFirstPassRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeEffigyFirstPassRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeEffigyFirstPassRewardRsp): TakeEffigyFirstPassRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 2:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeEffigyFirstPassRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_id = 2; */
        if (message.challengeId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.challengeId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyFirstPassRewardRsp
 */
export const TakeEffigyFirstPassRewardRsp = new TakeEffigyFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyRewardReq$Type extends MessageType<TakeEffigyRewardReq> {
    constructor() {
        super("com.midnights.game.TakeEffigyRewardReq", [
            { no: 14, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeEffigyRewardReq>): TakeEffigyRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeEffigyRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeEffigyRewardReq): TakeEffigyRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 14:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeEffigyRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_index = 14; */
        if (message.rewardIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyRewardReq
 */
export const TakeEffigyRewardReq = new TakeEffigyRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyRewardRsp$Type extends MessageType<TakeEffigyRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeEffigyRewardRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeEffigyRewardRsp>): TakeEffigyRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeEffigyRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeEffigyRewardRsp): TakeEffigyRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_index */ 7:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeEffigyRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_index = 7; */
        if (message.rewardIndex !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyRewardRsp
 */
export const TakeEffigyRewardRsp = new TakeEffigyRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEffigyChallengeConditionReq$Type extends MessageType<SelectEffigyChallengeConditionReq> {
    constructor() {
        super("com.midnights.game.SelectEffigyChallengeConditionReq", [
            { no: 15, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectEffigyChallengeConditionReq>): SelectEffigyChallengeConditionReq {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEffigyChallengeConditionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEffigyChallengeConditionReq): SelectEffigyChallengeConditionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 15:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectEffigyChallengeConditionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty_id = 15; */
        if (message.difficultyId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeId);
        /* repeated uint32 condition_id_list = 9; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.conditionIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectEffigyChallengeConditionReq
 */
export const SelectEffigyChallengeConditionReq = new SelectEffigyChallengeConditionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEffigyChallengeConditionRsp$Type extends MessageType<SelectEffigyChallengeConditionRsp> {
    constructor() {
        super("com.midnights.game.SelectEffigyChallengeConditionRsp", [
            { no: 12, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectEffigyChallengeConditionRsp>): SelectEffigyChallengeConditionRsp {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectEffigyChallengeConditionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectEffigyChallengeConditionRsp): SelectEffigyChallengeConditionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 condition_id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 2:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectEffigyChallengeConditionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 condition_id_list = 12; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 challenge_id = 2; */
        if (message.challengeId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectEffigyChallengeConditionRsp
 */
export const SelectEffigyChallengeConditionRsp = new SelectEffigyChallengeConditionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartEffigyChallengeReq$Type extends MessageType<RestartEffigyChallengeReq> {
    constructor() {
        super("com.midnights.game.RestartEffigyChallengeReq", []);
    }
    create(value?: PartialMessage<RestartEffigyChallengeReq>): RestartEffigyChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RestartEffigyChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartEffigyChallengeReq): RestartEffigyChallengeReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RestartEffigyChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RestartEffigyChallengeReq
 */
export const RestartEffigyChallengeReq = new RestartEffigyChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartEffigyChallengeRsp$Type extends MessageType<RestartEffigyChallengeRsp> {
    constructor() {
        super("com.midnights.game.RestartEffigyChallengeRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RestartEffigyChallengeRsp>): RestartEffigyChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RestartEffigyChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestartEffigyChallengeRsp): RestartEffigyChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestartEffigyChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RestartEffigyChallengeRsp
 */
export const RestartEffigyChallengeRsp = new RestartEffigyChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionInfo$Type extends MessageType<TreasureMapRegionInfo> {
    constructor() {
        super("com.midnights.game.TreasureMapRegionInfo", [
            { no: 6, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "current_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_done_mp_spot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "goal_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_find_mp_spot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "region_radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "region_center_pos", kind: "message", T: () => Vector },
            { no: 5, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapRegionInfo>): TreasureMapRegionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapRegionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapRegionInfo): TreasureMapRegionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 6:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 current_progress */ 11:
                    message.currentProgress = reader.uint32();
                    break;
                case /* optional bool is_done_mp_spot */ 3:
                    message.isDoneMpSpot = reader.bool();
                    break;
                case /* optional uint32 scene_id */ 2:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 goal_points */ 12:
                    message.goalPoints = reader.uint32();
                    break;
                case /* optional bool is_find_mp_spot */ 4:
                    message.isFindMpSpot = reader.bool();
                    break;
                case /* optional uint32 region_radius */ 1:
                    message.regionRadius = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector region_center_pos */ 9:
                    message.regionCenterPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.regionCenterPos);
                    break;
                case /* optional uint32 region_id */ 5:
                    message.regionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapRegionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_time = 6; */
        if (message.startTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.startTime);
        /* optional uint32 current_progress = 11; */
        if (message.currentProgress !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.currentProgress);
        /* optional bool is_done_mp_spot = 3; */
        if (message.isDoneMpSpot !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isDoneMpSpot);
        /* optional uint32 scene_id = 2; */
        if (message.sceneId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 goal_points = 12; */
        if (message.goalPoints !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.goalPoints);
        /* optional bool is_find_mp_spot = 4; */
        if (message.isFindMpSpot !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isFindMpSpot);
        /* optional uint32 region_radius = 1; */
        if (message.regionRadius !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.regionRadius);
        /* optional com.midnights.game.Vector region_center_pos = 9; */
        if (message.regionCenterPos)
            Vector.internalBinaryWrite(message.regionCenterPos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 region_id = 5; */
        if (message.regionId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.regionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionInfo
 */
export const TreasureMapRegionInfo = new TreasureMapRegionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapBonusChallengeInfo$Type extends MessageType<TreasureMapBonusChallengeInfo> {
    constructor() {
        super("com.midnights.game.TreasureMapBonusChallengeInfo", [
            { no: 5, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "fragment_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 8, name: "solution_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapBonusChallengeInfo>): TreasureMapBonusChallengeInfo {
        const message = { fragmentMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapBonusChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapBonusChallengeInfo): TreasureMapBonusChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 5:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 config_id */ 10:
                    message.configId = reader.uint32();
                    break;
                case /* optional bool is_active */ 1:
                    message.isActive = reader.bool();
                    break;
                case /* map<uint32, bool> fragment_map */ 12:
                    this.binaryReadMap12(message.fragmentMap, reader, options);
                    break;
                case /* optional uint32 solution_id */ 8:
                    message.solutionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: TreasureMapBonusChallengeInfo["fragmentMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TreasureMapBonusChallengeInfo["fragmentMap"] | undefined, val: TreasureMapBonusChallengeInfo["fragmentMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.TreasureMapBonusChallengeInfo.fragment_map");
            }
        }
        map[key ?? 0] = val ?? false;
    }
    internalBinaryWrite(message: TreasureMapBonusChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_done = 5; */
        if (message.isDone !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isDone);
        /* optional uint32 config_id = 10; */
        if (message.configId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.configId);
        /* optional bool is_active = 1; */
        if (message.isActive !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isActive);
        /* map<uint32, bool> fragment_map = 12; */
        for (let k of Object.keys(message.fragmentMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).bool(message.fragmentMap[k as any]).join();
        /* optional uint32 solution_id = 8; */
        if (message.solutionId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.solutionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapBonusChallengeInfo
 */
export const TreasureMapBonusChallengeInfo = new TreasureMapBonusChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapActivityDetailInfo$Type extends MessageType<TreasureMapActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.TreasureMapActivityDetailInfo", [
            { no: 1, name: "active_region_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "region_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TreasureMapRegionInfo },
            { no: 7, name: "is_mp_challenge_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "treasure_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "bonus_challenge_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TreasureMapBonusChallengeInfo },
            { no: 2, name: "currency_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "preview_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "total_mp_spot_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapActivityDetailInfo>): TreasureMapActivityDetailInfo {
        const message = { regionInfoList: [], bonusChallengeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapActivityDetailInfo): TreasureMapActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_region_index */ 1:
                    message.activeRegionIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TreasureMapRegionInfo region_info_list */ 6:
                    message.regionInfoList.push(TreasureMapRegionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_mp_challenge_touched */ 7:
                    message.isMpChallengeTouched = reader.bool();
                    break;
                case /* optional uint32 treasure_close_time */ 10:
                    message.treasureCloseTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TreasureMapBonusChallengeInfo bonus_challenge_list */ 5:
                    message.bonusChallengeList.push(TreasureMapBonusChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 currency_num */ 2:
                    message.currencyNum = reader.uint32();
                    break;
                case /* optional uint32 preview_reward_id */ 14:
                    message.previewRewardId = reader.uint32();
                    break;
                case /* optional uint32 min_open_player_level */ 8:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* optional uint32 total_mp_spot_num */ 13:
                    message.totalMpSpotNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 active_region_index = 1; */
        if (message.activeRegionIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activeRegionIndex);
        /* repeated com.midnights.game.TreasureMapRegionInfo region_info_list = 6; */
        for (let i = 0; i < message.regionInfoList.length; i++)
            TreasureMapRegionInfo.internalBinaryWrite(message.regionInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_mp_challenge_touched = 7; */
        if (message.isMpChallengeTouched !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isMpChallengeTouched);
        /* optional uint32 treasure_close_time = 10; */
        if (message.treasureCloseTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.treasureCloseTime);
        /* repeated com.midnights.game.TreasureMapBonusChallengeInfo bonus_challenge_list = 5; */
        for (let i = 0; i < message.bonusChallengeList.length; i++)
            TreasureMapBonusChallengeInfo.internalBinaryWrite(message.bonusChallengeList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 currency_num = 2; */
        if (message.currencyNum !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.currencyNum);
        /* optional uint32 preview_reward_id = 14; */
        if (message.previewRewardId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.previewRewardId);
        /* optional uint32 min_open_player_level = 8; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* optional uint32 total_mp_spot_num = 13; */
        if (message.totalMpSpotNum !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.totalMpSpotNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapActivityDetailInfo
 */
export const TreasureMapActivityDetailInfo = new TreasureMapActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionInfoNotify$Type extends MessageType<TreasureMapRegionInfoNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapRegionInfoNotify", [
            { no: 14, name: "region_info", kind: "message", T: () => TreasureMapRegionInfo }
        ]);
    }
    create(value?: PartialMessage<TreasureMapRegionInfoNotify>): TreasureMapRegionInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapRegionInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapRegionInfoNotify): TreasureMapRegionInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TreasureMapRegionInfo region_info */ 14:
                    message.regionInfo = TreasureMapRegionInfo.internalBinaryRead(reader, reader.uint32(), options, message.regionInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapRegionInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TreasureMapRegionInfo region_info = 14; */
        if (message.regionInfo)
            TreasureMapRegionInfo.internalBinaryWrite(message.regionInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionInfoNotify
 */
export const TreasureMapRegionInfoNotify = new TreasureMapRegionInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapCurrencyNotify$Type extends MessageType<TreasureMapCurrencyNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapCurrencyNotify", [
            { no: 8, name: "currency_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapCurrencyNotify>): TreasureMapCurrencyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapCurrencyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapCurrencyNotify): TreasureMapCurrencyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 currency_num */ 8:
                    message.currencyNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapCurrencyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 currency_num = 8; */
        if (message.currencyNum !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.currencyNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapCurrencyNotify
 */
export const TreasureMapCurrencyNotify = new TreasureMapCurrencyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionActiveNotify$Type extends MessageType<TreasureMapRegionActiveNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapRegionActiveNotify", [
            { no: 14, name: "active_region_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapRegionActiveNotify>): TreasureMapRegionActiveNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapRegionActiveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapRegionActiveNotify): TreasureMapRegionActiveNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_region_index */ 14:
                    message.activeRegionIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapRegionActiveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 active_region_index = 14; */
        if (message.activeRegionIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activeRegionIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionActiveNotify
 */
export const TreasureMapRegionActiveNotify = new TreasureMapRegionActiveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapMpChallengeNotify$Type extends MessageType<TreasureMapMpChallengeNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapMpChallengeNotify", []);
    }
    create(value?: PartialMessage<TreasureMapMpChallengeNotify>): TreasureMapMpChallengeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapMpChallengeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapMpChallengeNotify): TreasureMapMpChallengeNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TreasureMapMpChallengeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapMpChallengeNotify
 */
export const TreasureMapMpChallengeNotify = new TreasureMapMpChallengeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapBonusChallengeNotify$Type extends MessageType<TreasureMapBonusChallengeNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapBonusChallengeNotify", [
            { no: 5, name: "info", kind: "message", T: () => TreasureMapBonusChallengeInfo }
        ]);
    }
    create(value?: PartialMessage<TreasureMapBonusChallengeNotify>): TreasureMapBonusChallengeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapBonusChallengeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapBonusChallengeNotify): TreasureMapBonusChallengeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TreasureMapBonusChallengeInfo info */ 5:
                    message.info = TreasureMapBonusChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapBonusChallengeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.TreasureMapBonusChallengeInfo info = 5; */
        if (message.info)
            TreasureMapBonusChallengeInfo.internalBinaryWrite(message.info, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapBonusChallengeNotify
 */
export const TreasureMapBonusChallengeNotify = new TreasureMapBonusChallengeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapGuideTaskDoneNotify$Type extends MessageType<TreasureMapGuideTaskDoneNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapGuideTaskDoneNotify", []);
    }
    create(value?: PartialMessage<TreasureMapGuideTaskDoneNotify>): TreasureMapGuideTaskDoneNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapGuideTaskDoneNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapGuideTaskDoneNotify): TreasureMapGuideTaskDoneNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TreasureMapGuideTaskDoneNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapGuideTaskDoneNotify
 */
export const TreasureMapGuideTaskDoneNotify = new TreasureMapGuideTaskDoneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapPreTaskDoneNotify$Type extends MessageType<TreasureMapPreTaskDoneNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapPreTaskDoneNotify", []);
    }
    create(value?: PartialMessage<TreasureMapPreTaskDoneNotify>): TreasureMapPreTaskDoneNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapPreTaskDoneNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapPreTaskDoneNotify): TreasureMapPreTaskDoneNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TreasureMapPreTaskDoneNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapPreTaskDoneNotify
 */
export const TreasureMapPreTaskDoneNotify = new TreasureMapPreTaskDoneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingActivityDetailInfo$Type extends MessageType<BlessingActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.BlessingActivityDetailInfo", [
            { no: 9, name: "cur_day_scan_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_day_scan_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "redeem_reward_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_activated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingActivityDetailInfo>): BlessingActivityDetailInfo {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingActivityDetailInfo): BlessingActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_day_scan_type */ 9:
                    message.curDayScanType = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, uint32> pic_num_map */ 15:
                    this.binaryReadMap15(message.picNumMap, reader, options);
                    break;
                case /* optional uint32 content_close_time */ 2:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 cur_day_scan_num */ 4:
                    message.curDayScanNum = reader.uint32();
                    break;
                case /* optional uint32 redeem_reward_num */ 1:
                    message.redeemRewardNum = reader.uint32();
                    break;
                case /* optional bool is_activated */ 13:
                    message.isActivated = reader.bool();
                    break;
                case /* optional uint32 next_refresh_time */ 6:
                    message.nextRefreshTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: BlessingActivityDetailInfo["picNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlessingActivityDetailInfo["picNumMap"] | undefined, val: BlessingActivityDetailInfo["picNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingActivityDetailInfo.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BlessingActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_day_scan_type = 9; */
        if (message.curDayScanType !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curDayScanType);
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, uint32> pic_num_map = 15; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.picNumMap[k as any]).join();
        /* optional uint32 content_close_time = 2; */
        if (message.contentCloseTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 cur_day_scan_num = 4; */
        if (message.curDayScanNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.curDayScanNum);
        /* optional uint32 redeem_reward_num = 1; */
        if (message.redeemRewardNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.redeemRewardNum);
        /* optional bool is_activated = 13; */
        if (message.isActivated !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isActivated);
        /* optional uint32 next_refresh_time = 6; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.nextRefreshTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingActivityDetailInfo
 */
export const BlessingActivityDetailInfo = new BlessingActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingScanReq$Type extends MessageType<BlessingScanReq> {
    constructor() {
        super("com.midnights.game.BlessingScanReq", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingScanReq>): BlessingScanReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingScanReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingScanReq): BlessingScanReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingScanReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingScanReq
 */
export const BlessingScanReq = new BlessingScanReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingScanRsp$Type extends MessageType<BlessingScanRsp> {
    constructor() {
        super("com.midnights.game.BlessingScanRsp", [
            { no: 4, name: "scan_pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "cur_day_scan_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingScanRsp>): BlessingScanRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingScanRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingScanRsp): BlessingScanRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scan_pic_id */ 4:
                    message.scanPicId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cur_day_scan_num */ 1:
                    message.curDayScanNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingScanRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scan_pic_id = 4; */
        if (message.scanPicId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.scanPicId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 cur_day_scan_num = 1; */
        if (message.curDayScanNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.curDayScanNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingScanRsp
 */
export const BlessingScanRsp = new BlessingScanRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRedeemRewardReq$Type extends MessageType<BlessingRedeemRewardReq> {
    constructor() {
        super("com.midnights.game.BlessingRedeemRewardReq", []);
    }
    create(value?: PartialMessage<BlessingRedeemRewardReq>): BlessingRedeemRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingRedeemRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingRedeemRewardReq): BlessingRedeemRewardReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlessingRedeemRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRedeemRewardReq
 */
export const BlessingRedeemRewardReq = new BlessingRedeemRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRedeemRewardRsp$Type extends MessageType<BlessingRedeemRewardRsp> {
    constructor() {
        super("com.midnights.game.BlessingRedeemRewardRsp", [
            { no: 12, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingRedeemRewardRsp>): BlessingRedeemRewardRsp {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingRedeemRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingRedeemRewardRsp): BlessingRedeemRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> pic_num_map */ 12:
                    this.binaryReadMap12(message.picNumMap, reader, options);
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: BlessingRedeemRewardRsp["picNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlessingRedeemRewardRsp["picNumMap"] | undefined, val: BlessingRedeemRewardRsp["picNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingRedeemRewardRsp.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BlessingRedeemRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> pic_num_map = 12; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.picNumMap[k as any]).join();
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRedeemRewardRsp
 */
export const BlessingRedeemRewardRsp = new BlessingRedeemRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingFriendPicData$Type extends MessageType<BlessingFriendPicData> {
    constructor() {
        super("com.midnights.game.BlessingFriendPicData", [
            { no: 4, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 9, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingFriendPicData>): BlessingFriendPicData {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingFriendPicData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingFriendPicData): BlessingFriendPicData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> pic_num_map */ 4:
                    this.binaryReadMap4(message.picNumMap, reader, options);
                    break;
                case /* optional uint32 avatar_id */ 5:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional string remark_name */ 11:
                    message.remarkName = reader.string();
                    break;
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* optional string signature */ 1:
                    message.signature = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 6:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 9:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: BlessingFriendPicData["picNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlessingFriendPicData["picNumMap"] | undefined, val: BlessingFriendPicData["picNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingFriendPicData.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BlessingFriendPicData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> pic_num_map = 4; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.picNumMap[k as any]).join();
        /* optional uint32 avatar_id = 5; */
        if (message.avatarId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.avatarId);
        /* optional string remark_name = 11; */
        if (message.remarkName !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.remarkName);
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.nickname);
        /* optional string signature = 1; */
        if (message.signature !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.signature);
        /* optional com.midnights.game.ProfilePicture profile_picture = 6; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 9; */
        if (message.uid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingFriendPicData
 */
export const BlessingFriendPicData = new BlessingFriendPicData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRecvPicRecord$Type extends MessageType<BlessingRecvPicRecord> {
    constructor() {
        super("com.midnights.game.BlessingRecvPicRecord", [
            { no: 1, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_recv", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "profile_picture", kind: "message", T: () => ProfilePicture }
        ]);
    }
    create(value?: PartialMessage<BlessingRecvPicRecord>): BlessingRecvPicRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingRecvPicRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingRecvPicRecord): BlessingRecvPicRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 1:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 2:
                    message.remarkName = reader.string();
                    break;
                case /* optional uint32 pic_id */ 3:
                    message.picId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 6:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional string signature */ 10:
                    message.signature = reader.string();
                    break;
                case /* optional uint32 index */ 14:
                    message.index = reader.uint32();
                    break;
                case /* optional bool is_recv */ 7:
                    message.isRecv = reader.bool();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 9:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingRecvPicRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string nickname = 1; */
        if (message.nickname !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 2; */
        if (message.remarkName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.remarkName);
        /* optional uint32 pic_id = 3; */
        if (message.picId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.picId);
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.uid);
        /* optional uint32 avatar_id = 6; */
        if (message.avatarId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.avatarId);
        /* optional string signature = 10; */
        if (message.signature !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.signature);
        /* optional uint32 index = 14; */
        if (message.index !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.index);
        /* optional bool is_recv = 7; */
        if (message.isRecv !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isRecv);
        /* optional com.midnights.game.ProfilePicture profile_picture = 9; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRecvPicRecord
 */
export const BlessingRecvPicRecord = new BlessingRecvPicRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetFriendPicListReq$Type extends MessageType<BlessingGetFriendPicListReq> {
    constructor() {
        super("com.midnights.game.BlessingGetFriendPicListReq", []);
    }
    create(value?: PartialMessage<BlessingGetFriendPicListReq>): BlessingGetFriendPicListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGetFriendPicListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGetFriendPicListReq): BlessingGetFriendPicListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlessingGetFriendPicListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetFriendPicListReq
 */
export const BlessingGetFriendPicListReq = new BlessingGetFriendPicListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetFriendPicListRsp$Type extends MessageType<BlessingGetFriendPicListRsp> {
    constructor() {
        super("com.midnights.game.BlessingGetFriendPicListRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "friend_pic_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlessingFriendPicData }
        ]);
    }
    create(value?: PartialMessage<BlessingGetFriendPicListRsp>): BlessingGetFriendPicListRsp {
        const message = { friendPicDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGetFriendPicListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGetFriendPicListRsp): BlessingGetFriendPicListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.BlessingFriendPicData friend_pic_data_list */ 6:
                    message.friendPicDataList.push(BlessingFriendPicData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingGetFriendPicListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.BlessingFriendPicData friend_pic_data_list = 6; */
        for (let i = 0; i < message.friendPicDataList.length; i++)
            BlessingFriendPicData.internalBinaryWrite(message.friendPicDataList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetFriendPicListRsp
 */
export const BlessingGetFriendPicListRsp = new BlessingGetFriendPicListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGiveFriendPicReq$Type extends MessageType<BlessingGiveFriendPicReq> {
    constructor() {
        super("com.midnights.game.BlessingGiveFriendPicReq", [
            { no: 11, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingGiveFriendPicReq>): BlessingGiveFriendPicReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGiveFriendPicReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGiveFriendPicReq): BlessingGiveFriendPicReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 11:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 pic_id */ 3:
                    message.picId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingGiveFriendPicReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 11; */
        if (message.uid !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.uid);
        /* optional uint32 pic_id = 3; */
        if (message.picId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.picId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGiveFriendPicReq
 */
export const BlessingGiveFriendPicReq = new BlessingGiveFriendPicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGiveFriendPicRsp$Type extends MessageType<BlessingGiveFriendPicRsp> {
    constructor() {
        super("com.midnights.game.BlessingGiveFriendPicRsp", [
            { no: 10, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingGiveFriendPicRsp>): BlessingGiveFriendPicRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGiveFriendPicRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGiveFriendPicRsp): BlessingGiveFriendPicRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pic_id */ 10:
                    message.picId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 uid */ 13:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingGiveFriendPicRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pic_id = 10; */
        if (message.picId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.picId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 uid = 13; */
        if (message.uid !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGiveFriendPicRsp
 */
export const BlessingGiveFriendPicRsp = new BlessingGiveFriendPicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptGivePicReq$Type extends MessageType<BlessingAcceptGivePicReq> {
    constructor() {
        super("com.midnights.game.BlessingAcceptGivePicReq", [
            { no: 9, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingAcceptGivePicReq>): BlessingAcceptGivePicReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingAcceptGivePicReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingAcceptGivePicReq): BlessingAcceptGivePicReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 index */ 9:
                    message.index = reader.uint32();
                    break;
                case /* optional uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingAcceptGivePicReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 index = 9; */
        if (message.index !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.index);
        /* optional uint32 uid = 1; */
        if (message.uid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptGivePicReq
 */
export const BlessingAcceptGivePicReq = new BlessingAcceptGivePicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptGivePicRsp$Type extends MessageType<BlessingAcceptGivePicRsp> {
    constructor() {
        super("com.midnights.game.BlessingAcceptGivePicRsp", [
            { no: 1, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingAcceptGivePicRsp>): BlessingAcceptGivePicRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingAcceptGivePicRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingAcceptGivePicRsp): BlessingAcceptGivePicRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pic_id */ 1:
                    message.picId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 index */ 5:
                    message.index = reader.uint32();
                    break;
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingAcceptGivePicRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pic_id = 1; */
        if (message.picId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.picId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 index = 5; */
        if (message.index !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.index);
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptGivePicRsp
 */
export const BlessingAcceptGivePicRsp = new BlessingAcceptGivePicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetAllRecvPicRecordListReq$Type extends MessageType<BlessingGetAllRecvPicRecordListReq> {
    constructor() {
        super("com.midnights.game.BlessingGetAllRecvPicRecordListReq", []);
    }
    create(value?: PartialMessage<BlessingGetAllRecvPicRecordListReq>): BlessingGetAllRecvPicRecordListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGetAllRecvPicRecordListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGetAllRecvPicRecordListReq): BlessingGetAllRecvPicRecordListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlessingGetAllRecvPicRecordListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListReq
 */
export const BlessingGetAllRecvPicRecordListReq = new BlessingGetAllRecvPicRecordListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetAllRecvPicRecordListRsp$Type extends MessageType<BlessingGetAllRecvPicRecordListRsp> {
    constructor() {
        super("com.midnights.game.BlessingGetAllRecvPicRecordListRsp", [
            { no: 15, name: "recv_pic_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlessingRecvPicRecord },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingGetAllRecvPicRecordListRsp>): BlessingGetAllRecvPicRecordListRsp {
        const message = { recvPicRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingGetAllRecvPicRecordListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingGetAllRecvPicRecordListRsp): BlessingGetAllRecvPicRecordListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BlessingRecvPicRecord recv_pic_record_list */ 15:
                    message.recvPicRecordList.push(BlessingRecvPicRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingGetAllRecvPicRecordListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BlessingRecvPicRecord recv_pic_record_list = 15; */
        for (let i = 0; i < message.recvPicRecordList.length; i++)
            BlessingRecvPicRecord.internalBinaryWrite(message.recvPicRecordList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListRsp
 */
export const BlessingGetAllRecvPicRecordListRsp = new BlessingGetAllRecvPicRecordListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRecvFriendPicNotify$Type extends MessageType<BlessingRecvFriendPicNotify> {
    constructor() {
        super("com.midnights.game.BlessingRecvFriendPicNotify", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingRecvFriendPicNotify>): BlessingRecvFriendPicNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingRecvFriendPicNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingRecvFriendPicNotify): BlessingRecvFriendPicNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 pic_id */ 5:
                    message.picId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingRecvFriendPicNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* optional uint32 pic_id = 5; */
        if (message.picId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.picId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRecvFriendPicNotify
 */
export const BlessingRecvFriendPicNotify = new BlessingRecvFriendPicNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptAllGivePicReq$Type extends MessageType<BlessingAcceptAllGivePicReq> {
    constructor() {
        super("com.midnights.game.BlessingAcceptAllGivePicReq", []);
    }
    create(value?: PartialMessage<BlessingAcceptAllGivePicReq>): BlessingAcceptAllGivePicReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingAcceptAllGivePicReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingAcceptAllGivePicReq): BlessingAcceptAllGivePicReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BlessingAcceptAllGivePicReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptAllGivePicReq
 */
export const BlessingAcceptAllGivePicReq = new BlessingAcceptAllGivePicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptAllGivePicRsp$Type extends MessageType<BlessingAcceptAllGivePicRsp> {
    constructor() {
        super("com.midnights.game.BlessingAcceptAllGivePicRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "accept_pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "accept_index_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingAcceptAllGivePicRsp>): BlessingAcceptAllGivePicRsp {
        const message = { acceptPicNumMap: {}, acceptIndexList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingAcceptAllGivePicRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingAcceptAllGivePicRsp): BlessingAcceptAllGivePicRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* map<uint32, uint32> accept_pic_num_map */ 14:
                    this.binaryReadMap14(message.acceptPicNumMap, reader, options);
                    break;
                case /* repeated uint32 accept_index_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.acceptIndexList.push(reader.uint32());
                    else
                        message.acceptIndexList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: BlessingAcceptAllGivePicRsp["acceptPicNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlessingAcceptAllGivePicRsp["acceptPicNumMap"] | undefined, val: BlessingAcceptAllGivePicRsp["acceptPicNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingAcceptAllGivePicRsp.accept_pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BlessingAcceptAllGivePicRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* map<uint32, uint32> accept_pic_num_map = 14; */
        for (let k of Object.keys(message.acceptPicNumMap))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.acceptPicNumMap[k as any]).join();
        /* repeated uint32 accept_index_list = 5; */
        for (let i = 0; i < message.acceptIndexList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.acceptIndexList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptAllGivePicRsp
 */
export const BlessingAcceptAllGivePicRsp = new BlessingAcceptAllGivePicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionPathInfo$Type extends MessageType<ExpeditionPathInfo> {
    constructor() {
        super("com.midnights.game.ExpeditionPathInfo", [
            { no: 12, name: "mark_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "bonus_probability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.ExpeditionState", ExpeditionState] },
            { no: 2, name: "avatar_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "assist_costume_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionPathInfo>): ExpeditionPathInfo {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionPathInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionPathInfo): ExpeditionPathInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mark_id */ 12:
                    message.markId = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 9:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 assist_avatar_id */ 7:
                    message.assistAvatarId = reader.uint32();
                    break;
                case /* optional float bonus_probability */ 4:
                    message.bonusProbability = reader.float();
                    break;
                case /* optional com.midnights.game.ExpeditionState state */ 15:
                    message.state = reader.int32();
                    break;
                case /* repeated uint32 avatar_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 assist_costume_id */ 5:
                    message.assistCostumeId = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 8:
                    message.pathId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 assist_uid */ 10:
                    message.assistUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionPathInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mark_id = 12; */
        if (message.markId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.markId);
        /* optional uint32 start_time = 9; */
        if (message.startTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.startTime);
        /* optional uint32 assist_avatar_id = 7; */
        if (message.assistAvatarId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.assistAvatarId);
        /* optional float bonus_probability = 4; */
        if (message.bonusProbability !== undefined)
            writer.tag(4, WireType.Bit32).float(message.bonusProbability);
        /* optional com.midnights.game.ExpeditionState state = 15; */
        if (message.state !== undefined)
            writer.tag(15, WireType.Varint).int32(message.state);
        /* repeated uint32 avatar_id_list = 2; */
        for (let i = 0; i < message.avatarIdList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.avatarIdList[i]);
        /* optional uint32 assist_costume_id = 5; */
        if (message.assistCostumeId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.assistCostumeId);
        /* optional uint32 path_id = 8; */
        if (message.pathId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.pathId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 assist_uid = 10; */
        if (message.assistUid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.assistUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionPathInfo
 */
export const ExpeditionPathInfo = new ExpeditionPathInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeInfo$Type extends MessageType<ExpeditionChallengeInfo> {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeInfo", [
            { no: 5, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionChallengeInfo>): ExpeditionChallengeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionChallengeInfo): ExpeditionChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 5:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 id */ 11:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 9:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 5; */
        if (message.isFinished !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isFinished);
        /* optional uint32 id = 11; */
        if (message.id !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.id);
        /* optional uint32 open_time = 9; */
        if (message.openTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeInfo
 */
export const ExpeditionChallengeInfo = new ExpeditionChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionActivityDetailInfo$Type extends MessageType<ExpeditionActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.ExpeditionActivityDetailInfo", [
            { no: 5, name: "cur_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExpeditionChallengeInfo },
            { no: 2, name: "expedition_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "path_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExpeditionPathInfo }
        ]);
    }
    create(value?: PartialMessage<ExpeditionActivityDetailInfo>): ExpeditionActivityDetailInfo {
        const message = { challengeInfoList: [], pathInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionActivityDetailInfo): ExpeditionActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_challenge_id */ 5:
                    message.curChallengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ExpeditionChallengeInfo challenge_info_list */ 10:
                    message.challengeInfoList.push(ExpeditionChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 expedition_count */ 2:
                    message.expeditionCount = reader.uint32();
                    break;
                case /* optional uint32 content_close_time */ 4:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.ExpeditionPathInfo path_info_list */ 15:
                    message.pathInfoList.push(ExpeditionPathInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_challenge_id = 5; */
        if (message.curChallengeId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.curChallengeId);
        /* repeated com.midnights.game.ExpeditionChallengeInfo challenge_info_list = 10; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            ExpeditionChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 expedition_count = 2; */
        if (message.expeditionCount !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.expeditionCount);
        /* optional uint32 content_close_time = 4; */
        if (message.contentCloseTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.ExpeditionPathInfo path_info_list = 15; */
        for (let i = 0; i < message.pathInfoList.length; i++)
            ExpeditionPathInfo.internalBinaryWrite(message.pathInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionActivityDetailInfo
 */
export const ExpeditionActivityDetailInfo = new ExpeditionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionStartReq$Type extends MessageType<ExpeditionStartReq> {
    constructor() {
        super("com.midnights.game.ExpeditionStartReq", [
            { no: 1, name: "avatar_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionStartReq>): ExpeditionStartReq {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionStartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionStartReq): ExpeditionStartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 avatar_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 assist_uid */ 5:
                    message.assistUid = reader.uint32();
                    break;
                case /* optional uint32 assist_avatar_id */ 8:
                    message.assistAvatarId = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 7:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionStartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 avatar_id_list = 1; */
        for (let i = 0; i < message.avatarIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.avatarIdList[i]);
        /* optional uint32 assist_uid = 5; */
        if (message.assistUid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.assistUid);
        /* optional uint32 assist_avatar_id = 8; */
        if (message.assistAvatarId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.assistAvatarId);
        /* optional uint32 path_id = 7; */
        if (message.pathId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionStartReq
 */
export const ExpeditionStartReq = new ExpeditionStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionStartRsp$Type extends MessageType<ExpeditionStartRsp> {
    constructor() {
        super("com.midnights.game.ExpeditionStartRsp", [
            { no: 1, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "avatar_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionStartRsp>): ExpeditionStartRsp {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionStartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionStartRsp): ExpeditionStartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 assist_uid */ 1:
                    message.assistUid = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 7:
                    message.pathId = reader.uint32();
                    break;
                case /* repeated uint32 avatar_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 assist_avatar_id */ 2:
                    message.assistAvatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionStartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 assist_uid = 1; */
        if (message.assistUid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.assistUid);
        /* optional uint32 path_id = 7; */
        if (message.pathId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.pathId);
        /* repeated uint32 avatar_id_list = 4; */
        for (let i = 0; i < message.avatarIdList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.avatarIdList[i]);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 assist_avatar_id = 2; */
        if (message.assistAvatarId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.assistAvatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionStartRsp
 */
export const ExpeditionStartRsp = new ExpeditionStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionRecallReq$Type extends MessageType<ExpeditionRecallReq> {
    constructor() {
        super("com.midnights.game.ExpeditionRecallReq", [
            { no: 13, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionRecallReq>): ExpeditionRecallReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionRecallReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionRecallReq): ExpeditionRecallReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 13:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionRecallReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 path_id = 13; */
        if (message.pathId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionRecallReq
 */
export const ExpeditionRecallReq = new ExpeditionRecallReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionRecallRsp$Type extends MessageType<ExpeditionRecallRsp> {
    constructor() {
        super("com.midnights.game.ExpeditionRecallRsp", [
            { no: 1, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionRecallRsp>): ExpeditionRecallRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionRecallRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionRecallRsp): ExpeditionRecallRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 1:
                    message.pathId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionRecallRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 path_id = 1; */
        if (message.pathId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.pathId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionRecallRsp
 */
export const ExpeditionRecallRsp = new ExpeditionRecallRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionTakeRewardReq$Type extends MessageType<ExpeditionTakeRewardReq> {
    constructor() {
        super("com.midnights.game.ExpeditionTakeRewardReq", [
            { no: 3, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionTakeRewardReq>): ExpeditionTakeRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionTakeRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionTakeRewardReq): ExpeditionTakeRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 3:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionTakeRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 path_id = 3; */
        if (message.pathId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionTakeRewardReq
 */
export const ExpeditionTakeRewardReq = new ExpeditionTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionTakeRewardRsp$Type extends MessageType<ExpeditionTakeRewardRsp> {
    constructor() {
        super("com.midnights.game.ExpeditionTakeRewardRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "is_bonus", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "reward_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionTakeRewardRsp>): ExpeditionTakeRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionTakeRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionTakeRewardRsp): ExpeditionTakeRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_bonus */ 11:
                    message.isBonus = reader.bool();
                    break;
                case /* optional uint32 reward_level */ 1:
                    message.rewardLevel = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 9:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionTakeRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional bool is_bonus = 11; */
        if (message.isBonus !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isBonus);
        /* optional uint32 reward_level = 1; */
        if (message.rewardLevel !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.rewardLevel);
        /* optional uint32 path_id = 9; */
        if (message.pathId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionTakeRewardRsp
 */
export const ExpeditionTakeRewardRsp = new ExpeditionTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionAssistInfo$Type extends MessageType<ExpeditionAssistInfo> {
    constructor() {
        super("com.midnights.game.ExpeditionAssistInfo", [
            { no: 14, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "assist_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "costume_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "target_nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionAssistInfo>): ExpeditionAssistInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionAssistInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionAssistInfo): ExpeditionAssistInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string online_id */ 14:
                    message.onlineId = reader.string();
                    break;
                case /* optional uint32 assist_time */ 1:
                    message.assistTime = reader.uint32();
                    break;
                case /* optional uint32 costume_id */ 6:
                    message.costumeId = reader.uint32();
                    break;
                case /* optional string target_nick_name */ 4:
                    message.targetNickName = reader.string();
                    break;
                case /* optional uint32 avatar_id */ 12:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionAssistInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string online_id = 14; */
        if (message.onlineId !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.onlineId);
        /* optional uint32 assist_time = 1; */
        if (message.assistTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.assistTime);
        /* optional uint32 costume_id = 6; */
        if (message.costumeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.costumeId);
        /* optional string target_nick_name = 4; */
        if (message.targetNickName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.targetNickName);
        /* optional uint32 avatar_id = 12; */
        if (message.avatarId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionAssistInfo
 */
export const ExpeditionAssistInfo = new ExpeditionAssistInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExpeditionAssistInfoListReq$Type extends MessageType<GetExpeditionAssistInfoListReq> {
    constructor() {
        super("com.midnights.game.GetExpeditionAssistInfoListReq", []);
    }
    create(value?: PartialMessage<GetExpeditionAssistInfoListReq>): GetExpeditionAssistInfoListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetExpeditionAssistInfoListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExpeditionAssistInfoListReq): GetExpeditionAssistInfoListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetExpeditionAssistInfoListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetExpeditionAssistInfoListReq
 */
export const GetExpeditionAssistInfoListReq = new GetExpeditionAssistInfoListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExpeditionAssistInfoListRsp$Type extends MessageType<GetExpeditionAssistInfoListRsp> {
    constructor() {
        super("com.midnights.game.GetExpeditionAssistInfoListRsp", [
            { no: 6, name: "assist_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExpeditionAssistInfo },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetExpeditionAssistInfoListRsp>): GetExpeditionAssistInfoListRsp {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetExpeditionAssistInfoListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExpeditionAssistInfoListRsp): GetExpeditionAssistInfoListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ExpeditionAssistInfo assist_info_list */ 6:
                    message.assistInfoList.push(ExpeditionAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExpeditionAssistInfoListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ExpeditionAssistInfo assist_info_list = 6; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            ExpeditionAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetExpeditionAssistInfoListRsp
 */
export const GetExpeditionAssistInfoListRsp = new GetExpeditionAssistInfoListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurExpeditionChallengeIdReq$Type extends MessageType<SetCurExpeditionChallengeIdReq> {
    constructor() {
        super("com.midnights.game.SetCurExpeditionChallengeIdReq", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetCurExpeditionChallengeIdReq>): SetCurExpeditionChallengeIdReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetCurExpeditionChallengeIdReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurExpeditionChallengeIdReq): SetCurExpeditionChallengeIdReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurExpeditionChallengeIdReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetCurExpeditionChallengeIdReq
 */
export const SetCurExpeditionChallengeIdReq = new SetCurExpeditionChallengeIdReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurExpeditionChallengeIdRsp$Type extends MessageType<SetCurExpeditionChallengeIdRsp> {
    constructor() {
        super("com.midnights.game.SetCurExpeditionChallengeIdRsp", [
            { no: 14, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetCurExpeditionChallengeIdRsp>): SetCurExpeditionChallengeIdRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetCurExpeditionChallengeIdRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetCurExpeditionChallengeIdRsp): SetCurExpeditionChallengeIdRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 14:
                    message.id = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetCurExpeditionChallengeIdRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 14; */
        if (message.id !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.id);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetCurExpeditionChallengeIdRsp
 */
export const SetCurExpeditionChallengeIdRsp = new SetCurExpeditionChallengeIdRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeEnterRegionNotify$Type extends MessageType<ExpeditionChallengeEnterRegionNotify> {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeEnterRegionNotify", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_puzzle_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionChallengeEnterRegionNotify>): ExpeditionChallengeEnterRegionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionChallengeEnterRegionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionChallengeEnterRegionNotify): ExpeditionChallengeEnterRegionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_puzzle_finished */ 10:
                    message.isPuzzleFinished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionChallengeEnterRegionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        /* optional bool is_puzzle_finished = 10; */
        if (message.isPuzzleFinished !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isPuzzleFinished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeEnterRegionNotify
 */
export const ExpeditionChallengeEnterRegionNotify = new ExpeditionChallengeEnterRegionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeFinishedNotify$Type extends MessageType<ExpeditionChallengeFinishedNotify> {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeFinishedNotify", [
            { no: 13, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExpeditionChallengeFinishedNotify>): ExpeditionChallengeFinishedNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExpeditionChallengeFinishedNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExpeditionChallengeFinishedNotify): ExpeditionChallengeFinishedNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 13:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExpeditionChallengeFinishedNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 13; */
        if (message.id !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeFinishedNotify
 */
export const ExpeditionChallengeFinishedNotify = new ExpeditionChallengeFinishedNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaterSpiritActivityDetailInfo$Type extends MessageType<WaterSpiritActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.WaterSpiritActivityDetailInfo", [
            { no: 9, name: "search_time_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "region_search_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WaterSpiritActivityDetailInfo>): WaterSpiritActivityDetailInfo {
        const message = { searchTimeMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WaterSpiritActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WaterSpiritActivityDetailInfo): WaterSpiritActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> search_time_map */ 9:
                    this.binaryReadMap9(message.searchTimeMap, reader, options);
                    break;
                case /* optional uint32 region_search_id */ 2:
                    message.regionSearchId = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 15:
                    message.mpPlayId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: WaterSpiritActivityDetailInfo["searchTimeMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WaterSpiritActivityDetailInfo["searchTimeMap"] | undefined, val: WaterSpiritActivityDetailInfo["searchTimeMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WaterSpiritActivityDetailInfo.search_time_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: WaterSpiritActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> search_time_map = 9; */
        for (let k of Object.keys(message.searchTimeMap))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.searchTimeMap[k as any]).join();
        /* optional uint32 region_search_id = 2; */
        if (message.regionSearchId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.regionSearchId);
        /* optional uint32 mp_play_id = 15; */
        if (message.mpPlayId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.mpPlayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WaterSpiritActivityDetailInfo
 */
export const WaterSpiritActivityDetailInfo = new WaterSpiritActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairChapterInfo$Type extends MessageType<FleurFairChapterInfo> {
    constructor() {
        super("com.midnights.game.FleurFairChapterInfo", [
            { no: 15, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairChapterInfo>): FleurFairChapterInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairChapterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairChapterInfo): FleurFairChapterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 15:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairChapterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 15; */
        if (message.openTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.openTime);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairChapterInfo
 */
export const FleurFairChapterInfo = new FleurFairChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonInfo$Type extends MessageType<FleurFairBalloonInfo> {
    constructor() {
        super("com.midnights.game.FleurFairBalloonInfo", [
            { no: 4, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairBalloonInfo>): FleurFairBalloonInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairBalloonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairBalloonInfo): FleurFairBalloonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 4:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairBalloonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_score = 4; */
        if (message.bestScore !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonInfo
 */
export const FleurFairBalloonInfo = new FleurFairBalloonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallInfo$Type extends MessageType<FleurFairFallInfo> {
    constructor() {
        super("com.midnights.game.FleurFairFallInfo", [
            { no: 10, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairFallInfo>): FleurFairFallInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairFallInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairFallInfo): FleurFairFallInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 10:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairFallInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_score = 10; */
        if (message.bestScore !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallInfo
 */
export const FleurFairFallInfo = new FleurFairFallInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicRecord$Type extends MessageType<FleurFairMusicRecord> {
    constructor() {
        super("com.midnights.game.FleurFairMusicRecord", [
            { no: 1, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicRecord>): FleurFairMusicRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicRecord): FleurFairMusicRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_combo */ 1:
                    message.maxCombo = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 11:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 12:
                    message.isUnlock = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMusicRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 max_combo = 1; */
        if (message.maxCombo !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.maxCombo);
        /* optional uint32 max_score = 11; */
        if (message.maxScore !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.maxScore);
        /* optional bool is_unlock = 12; */
        if (message.isUnlock !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isUnlock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicRecord
 */
export const FleurFairMusicRecord = new FleurFairMusicRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameInfo$Type extends MessageType<FleurFairMusicGameInfo> {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameInfo", [
            { no: 10, name: "music_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FleurFairMusicRecord } }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicGameInfo>): FleurFairMusicGameInfo {
        const message = { musicRecordMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicGameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicGameInfo): FleurFairMusicGameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.FleurFairMusicRecord> music_record_map */ 10:
                    this.binaryReadMap10(message.musicRecordMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: FleurFairMusicGameInfo["musicRecordMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FleurFairMusicGameInfo["musicRecordMap"] | undefined, val: FleurFairMusicGameInfo["musicRecordMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FleurFairMusicRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairMusicGameInfo.music_record_map");
            }
        }
        map[key ?? 0] = val ?? FleurFairMusicRecord.create();
    }
    internalBinaryWrite(message: FleurFairMusicGameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.FleurFairMusicRecord> music_record_map = 10; */
        for (let k of Object.keys(message.musicRecordMap)) {
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FleurFairMusicRecord.internalBinaryWrite(message.musicRecordMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameInfo
 */
export const FleurFairMusicGameInfo = new FleurFairMusicGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMinigameInfo$Type extends MessageType<FleurFairMinigameInfo> {
    constructor() {
        super("com.midnights.game.FleurFairMinigameInfo", [
            { no: 13, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "balloon_info", kind: "message", oneof: "detail", T: () => FleurFairBalloonInfo },
            { no: 11, name: "fall_info", kind: "message", oneof: "detail", T: () => FleurFairFallInfo },
            { no: 9, name: "music_info", kind: "message", oneof: "detail", T: () => FleurFairMusicGameInfo }
        ]);
    }
    create(value?: PartialMessage<FleurFairMinigameInfo>): FleurFairMinigameInfo {
        const message = { detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMinigameInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMinigameInfo): FleurFairMinigameInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 13:
                    message.minigameId = reader.uint32();
                    break;
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 15:
                    message.openTime = reader.uint32();
                    break;
                case /* com.midnights.game.FleurFairBalloonInfo balloon_info */ 12:
                    message.detail = {
                        oneofKind: "balloonInfo",
                        balloonInfo: FleurFairBalloonInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).balloonInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairFallInfo fall_info */ 11:
                    message.detail = {
                        oneofKind: "fallInfo",
                        fallInfo: FleurFairFallInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).fallInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairMusicGameInfo music_info */ 9:
                    message.detail = {
                        oneofKind: "musicInfo",
                        musicInfo: FleurFairMusicGameInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).musicInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMinigameInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 minigame_id = 13; */
        if (message.minigameId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.minigameId);
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 15; */
        if (message.openTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.openTime);
        /* com.midnights.game.FleurFairBalloonInfo balloon_info = 12; */
        if (message.detail.oneofKind === "balloonInfo")
            FleurFairBalloonInfo.internalBinaryWrite(message.detail.balloonInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairFallInfo fall_info = 11; */
        if (message.detail.oneofKind === "fallInfo")
            FleurFairFallInfo.internalBinaryWrite(message.detail.fallInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairMusicGameInfo music_info = 9; */
        if (message.detail.oneofKind === "musicInfo")
            FleurFairMusicGameInfo.internalBinaryWrite(message.detail.musicInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMinigameInfo
 */
export const FleurFairMinigameInfo = new FleurFairMinigameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairDungeonSectionInfo$Type extends MessageType<FleurFairDungeonSectionInfo> {
    constructor() {
        super("com.midnights.game.FleurFairDungeonSectionInfo", [
            { no: 10, name: "section_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairDungeonSectionInfo>): FleurFairDungeonSectionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairDungeonSectionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairDungeonSectionInfo): FleurFairDungeonSectionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 section_id */ 10:
                    message.sectionId = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 13:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairDungeonSectionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 section_id = 10; */
        if (message.sectionId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sectionId);
        /* optional uint32 open_time = 13; */
        if (message.openTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairDungeonSectionInfo
 */
export const FleurFairDungeonSectionInfo = new FleurFairDungeonSectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairActivityDetailInfo$Type extends MessageType<FleurFairActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.FleurFairActivityDetailInfo", [
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "dungeon_punish_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "obtained_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "chapter_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FleurFairChapterInfo },
            { no: 9, name: "minigame_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FleurFairMinigameInfo } },
            { no: 3, name: "dungeon_section_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FleurFairDungeonSectionInfo } },
            { no: 11, name: "is_dungeon_unlocked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairActivityDetailInfo>): FleurFairActivityDetailInfo {
        const message = { chapterInfoList: [], minigameInfoMap: {}, dungeonSectionInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairActivityDetailInfo): FleurFairActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 dungeon_punish_over_time */ 6:
                    message.dungeonPunishOverTime = reader.uint32();
                    break;
                case /* optional uint32 content_close_time */ 15:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 obtained_token */ 13:
                    message.obtainedToken = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FleurFairChapterInfo chapter_info_list */ 14:
                    message.chapterInfoList.push(FleurFairChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, com.midnights.game.FleurFairMinigameInfo> minigame_info_map */ 9:
                    this.binaryReadMap9(message.minigameInfoMap, reader, options);
                    break;
                case /* map<uint32, com.midnights.game.FleurFairDungeonSectionInfo> dungeon_section_info_map */ 3:
                    this.binaryReadMap3(message.dungeonSectionInfoMap, reader, options);
                    break;
                case /* optional bool is_dungeon_unlocked */ 11:
                    message.isDungeonUnlocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: FleurFairActivityDetailInfo["minigameInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FleurFairActivityDetailInfo["minigameInfoMap"] | undefined, val: FleurFairActivityDetailInfo["minigameInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FleurFairMinigameInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairActivityDetailInfo.minigame_info_map");
            }
        }
        map[key ?? 0] = val ?? FleurFairMinigameInfo.create();
    }
    private binaryReadMap3(map: FleurFairActivityDetailInfo["dungeonSectionInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FleurFairActivityDetailInfo["dungeonSectionInfoMap"] | undefined, val: FleurFairActivityDetailInfo["dungeonSectionInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FleurFairDungeonSectionInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairActivityDetailInfo.dungeon_section_info_map");
            }
        }
        map[key ?? 0] = val ?? FleurFairDungeonSectionInfo.create();
    }
    internalBinaryWrite(message: FleurFairActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 dungeon_punish_over_time = 6; */
        if (message.dungeonPunishOverTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonPunishOverTime);
        /* optional uint32 content_close_time = 15; */
        if (message.contentCloseTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 obtained_token = 13; */
        if (message.obtainedToken !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.obtainedToken);
        /* repeated com.midnights.game.FleurFairChapterInfo chapter_info_list = 14; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            FleurFairChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.FleurFairMinigameInfo> minigame_info_map = 9; */
        for (let k of Object.keys(message.minigameInfoMap)) {
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FleurFairMinigameInfo.internalBinaryWrite(message.minigameInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* map<uint32, com.midnights.game.FleurFairDungeonSectionInfo> dungeon_section_info_map = 3; */
        for (let k of Object.keys(message.dungeonSectionInfoMap)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FleurFairDungeonSectionInfo.internalBinaryWrite(message.dungeonSectionInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional bool is_dungeon_unlocked = 11; */
        if (message.isDungeonUnlocked !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isDungeonUnlocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairActivityDetailInfo
 */
export const FleurFairActivityDetailInfo = new FleurFairActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonSettleInfo$Type extends MessageType<FleurFairBalloonSettleInfo> {
    constructor() {
        super("com.midnights.game.FleurFairBalloonSettleInfo", [
            { no: 10, name: "settle_info", kind: "message", T: () => BalloonSettleInfo },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairBalloonSettleInfo>): FleurFairBalloonSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairBalloonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairBalloonSettleInfo): FleurFairBalloonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.BalloonSettleInfo settle_info */ 10:
                    message.settleInfo = BalloonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairBalloonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.BalloonSettleInfo settle_info = 10; */
        if (message.settleInfo)
            BalloonSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonSettleInfo
 */
export const FleurFairBalloonSettleInfo = new FleurFairBalloonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallSettleInfo$Type extends MessageType<FleurFairFallSettleInfo> {
    constructor() {
        super("com.midnights.game.FleurFairFallSettleInfo", [
            { no: 4, name: "settle_info", kind: "message", T: () => FallSettleInfo },
            { no: 10, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairFallSettleInfo>): FleurFairFallSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairFallSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairFallSettleInfo): FleurFairFallSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FallSettleInfo settle_info */ 4:
                    message.settleInfo = FallSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 10:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairFallSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FallSettleInfo settle_info = 4; */
        if (message.settleInfo)
            FallSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 10; */
        if (message.isNewRecord !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallSettleInfo
 */
export const FleurFairFallSettleInfo = new FleurFairFallSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonSettleNotify$Type extends MessageType<FleurFairBalloonSettleNotify> {
    constructor() {
        super("com.midnights.game.FleurFairBalloonSettleNotify", [
            { no: 9, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FleurFairBalloonSettleInfo } }
        ]);
    }
    create(value?: PartialMessage<FleurFairBalloonSettleNotify>): FleurFairBalloonSettleNotify {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairBalloonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairBalloonSettleNotify): FleurFairBalloonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 9:
                    message.minigameId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.FleurFairBalloonSettleInfo> settle_info_map */ 15:
                    this.binaryReadMap15(message.settleInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: FleurFairBalloonSettleNotify["settleInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FleurFairBalloonSettleNotify["settleInfoMap"] | undefined, val: FleurFairBalloonSettleNotify["settleInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FleurFairBalloonSettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairBalloonSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? FleurFairBalloonSettleInfo.create();
    }
    internalBinaryWrite(message: FleurFairBalloonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 minigame_id = 9; */
        if (message.minigameId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.minigameId);
        /* map<uint32, com.midnights.game.FleurFairBalloonSettleInfo> settle_info_map = 15; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FleurFairBalloonSettleInfo.internalBinaryWrite(message.settleInfoMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonSettleNotify
 */
export const FleurFairBalloonSettleNotify = new FleurFairBalloonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallSettleNotify$Type extends MessageType<FleurFairFallSettleNotify> {
    constructor() {
        super("com.midnights.game.FleurFairFallSettleNotify", [
            { no: 15, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FleurFairFallSettleInfo } }
        ]);
    }
    create(value?: PartialMessage<FleurFairFallSettleNotify>): FleurFairFallSettleNotify {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairFallSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairFallSettleNotify): FleurFairFallSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 15:
                    message.minigameId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.FleurFairFallSettleInfo> settle_info_map */ 11:
                    this.binaryReadMap11(message.settleInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap11(map: FleurFairFallSettleNotify["settleInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FleurFairFallSettleNotify["settleInfoMap"] | undefined, val: FleurFairFallSettleNotify["settleInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FleurFairFallSettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairFallSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? FleurFairFallSettleInfo.create();
    }
    internalBinaryWrite(message: FleurFairFallSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 minigame_id = 15; */
        if (message.minigameId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.minigameId);
        /* map<uint32, com.midnights.game.FleurFairFallSettleInfo> settle_info_map = 11; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FleurFairFallSettleInfo.internalBinaryWrite(message.settleInfoMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallSettleNotify
 */
export const FleurFairFallSettleNotify = new FleurFairFallSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameSettleReq$Type extends MessageType<FleurFairMusicGameSettleReq> {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameSettleReq", [
            { no: 3, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "correct_hit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicGameSettleReq>): FleurFairMusicGameSettleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicGameSettleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicGameSettleReq): FleurFairMusicGameSettleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 3:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 combo */ 6:
                    message.combo = reader.uint32();
                    break;
                case /* optional uint32 correct_hit */ 10:
                    message.correctHit = reader.uint32();
                    break;
                case /* optional uint32 music_basic_id */ 11:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMusicGameSettleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 3; */
        if (message.score !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.score);
        /* optional uint32 combo = 6; */
        if (message.combo !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.combo);
        /* optional uint32 correct_hit = 10; */
        if (message.correctHit !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.correctHit);
        /* optional uint32 music_basic_id = 11; */
        if (message.musicBasicId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameSettleReq
 */
export const FleurFairMusicGameSettleReq = new FleurFairMusicGameSettleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameSettleRsp$Type extends MessageType<FleurFairMusicGameSettleRsp> {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameSettleRsp", [
            { no: 4, name: "is_unlock_next_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicGameSettleRsp>): FleurFairMusicGameSettleRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicGameSettleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicGameSettleRsp): FleurFairMusicGameSettleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_unlock_next_level */ 4:
                    message.isUnlockNextLevel = reader.bool();
                    break;
                case /* optional bool is_new_record */ 12:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 9:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMusicGameSettleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_unlock_next_level = 4; */
        if (message.isUnlockNextLevel !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isUnlockNextLevel);
        /* optional bool is_new_record = 12; */
        if (message.isNewRecord !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isNewRecord);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 9; */
        if (message.musicBasicId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameSettleRsp
 */
export const FleurFairMusicGameSettleRsp = new FleurFairMusicGameSettleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameStartReq$Type extends MessageType<FleurFairMusicGameStartReq> {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameStartReq", [
            { no: 2, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicGameStartReq>): FleurFairMusicGameStartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicGameStartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicGameStartReq): FleurFairMusicGameStartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 2:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMusicGameStartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 music_basic_id = 2; */
        if (message.musicBasicId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameStartReq
 */
export const FleurFairMusicGameStartReq = new FleurFairMusicGameStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameStartRsp$Type extends MessageType<FleurFairMusicGameStartRsp> {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameStartRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairMusicGameStartRsp>): FleurFairMusicGameStartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairMusicGameStartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairMusicGameStartRsp): FleurFairMusicGameStartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 7:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairMusicGameStartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 7; */
        if (message.musicBasicId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameStartRsp
 */
export const FleurFairMusicGameStartRsp = new FleurFairMusicGameStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairReplayMiniGameReq$Type extends MessageType<FleurFairReplayMiniGameReq> {
    constructor() {
        super("com.midnights.game.FleurFairReplayMiniGameReq", [
            { no: 5, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairReplayMiniGameReq>): FleurFairReplayMiniGameReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairReplayMiniGameReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairReplayMiniGameReq): FleurFairReplayMiniGameReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 5:
                    message.minigameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairReplayMiniGameReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 minigame_id = 5; */
        if (message.minigameId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.minigameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairReplayMiniGameReq
 */
export const FleurFairReplayMiniGameReq = new FleurFairReplayMiniGameReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairReplayMiniGameRsp$Type extends MessageType<FleurFairReplayMiniGameRsp> {
    constructor() {
        super("com.midnights.game.FleurFairReplayMiniGameRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FleurFairReplayMiniGameRsp>): FleurFairReplayMiniGameRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FleurFairReplayMiniGameRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FleurFairReplayMiniGameRsp): FleurFairReplayMiniGameRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 minigame_id */ 8:
                    message.minigameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FleurFairReplayMiniGameRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 minigame_id = 8; */
        if (message.minigameId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.minigameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairReplayMiniGameRsp
 */
export const FleurFairReplayMiniGameRsp = new FleurFairReplayMiniGameRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeMonsterLevel$Type extends MessageType<ArenaChallengeMonsterLevel> {
    constructor() {
        super("com.midnights.game.ArenaChallengeMonsterLevel", [
            { no: 7, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ArenaChallengeMonsterLevel>): ArenaChallengeMonsterLevel {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArenaChallengeMonsterLevel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArenaChallengeMonsterLevel): ArenaChallengeMonsterLevel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 7:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 15:
                    message.arenaChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArenaChallengeMonsterLevel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 arena_challenge_level = 7; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional uint32 arena_challenge_id = 15; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.arenaChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeMonsterLevel
 */
export const ArenaChallengeMonsterLevel = new ArenaChallengeMonsterLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeActivityDetailInfo$Type extends MessageType<ArenaChallengeActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.ArenaChallengeActivityDetailInfo", [
            { no: 14, name: "is_finish_any_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "level_open_time_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "level_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ArenaChallengeMonsterLevel }
        ]);
    }
    create(value?: PartialMessage<ArenaChallengeActivityDetailInfo>): ArenaChallengeActivityDetailInfo {
        const message = { levelOpenTimeMap: {}, levelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArenaChallengeActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArenaChallengeActivityDetailInfo): ArenaChallengeActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish_any_level */ 14:
                    message.isFinishAnyLevel = reader.bool();
                    break;
                case /* map<uint32, uint32> level_open_time_map */ 3:
                    this.binaryReadMap3(message.levelOpenTimeMap, reader, options);
                    break;
                case /* optional uint32 world_level */ 15:
                    message.worldLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ArenaChallengeMonsterLevel level_list */ 9:
                    message.levelList.push(ArenaChallengeMonsterLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: ArenaChallengeActivityDetailInfo["levelOpenTimeMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ArenaChallengeActivityDetailInfo["levelOpenTimeMap"] | undefined, val: ArenaChallengeActivityDetailInfo["levelOpenTimeMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ArenaChallengeActivityDetailInfo.level_open_time_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ArenaChallengeActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finish_any_level = 14; */
        if (message.isFinishAnyLevel !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isFinishAnyLevel);
        /* map<uint32, uint32> level_open_time_map = 3; */
        for (let k of Object.keys(message.levelOpenTimeMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.levelOpenTimeMap[k as any]).join();
        /* optional uint32 world_level = 15; */
        if (message.worldLevel !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.worldLevel);
        /* repeated com.midnights.game.ArenaChallengeMonsterLevel level_list = 9; */
        for (let i = 0; i < message.levelList.length; i++)
            ArenaChallengeMonsterLevel.internalBinaryWrite(message.levelList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeActivityDetailInfo
 */
export const ArenaChallengeActivityDetailInfo = new ArenaChallengeActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartArenaChallengeLevelReq$Type extends MessageType<StartArenaChallengeLevelReq> {
    constructor() {
        super("com.midnights.game.StartArenaChallengeLevelReq", [
            { no: 4, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartArenaChallengeLevelReq>): StartArenaChallengeLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartArenaChallengeLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartArenaChallengeLevelReq): StartArenaChallengeLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_id */ 4:
                    message.arenaChallengeId = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_level */ 2:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartArenaChallengeLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 arena_challenge_id = 4; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.arenaChallengeId);
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 arena_challenge_level = 2; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.arenaChallengeLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartArenaChallengeLevelReq
 */
export const StartArenaChallengeLevelReq = new StartArenaChallengeLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartArenaChallengeLevelRsp$Type extends MessageType<StartArenaChallengeLevelRsp> {
    constructor() {
        super("com.midnights.game.StartArenaChallengeLevelRsp", [
            { no: 1, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartArenaChallengeLevelRsp>): StartArenaChallengeLevelRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartArenaChallengeLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartArenaChallengeLevelRsp): StartArenaChallengeLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 1:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gadget_entity_id */ 3:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 6:
                    message.arenaChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartArenaChallengeLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 arena_challenge_level = 1; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 gadget_entity_id = 3; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 arena_challenge_id = 6; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.arenaChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartArenaChallengeLevelRsp
 */
export const StartArenaChallengeLevelRsp = new StartArenaChallengeLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeChildChallengeInfo$Type extends MessageType<ArenaChallengeChildChallengeInfo> {
    constructor() {
        super("com.midnights.game.ArenaChallengeChildChallengeInfo", [
            { no: 12, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "is_settled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ArenaChallengeChildChallengeInfo>): ArenaChallengeChildChallengeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArenaChallengeChildChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArenaChallengeChildChallengeInfo): ArenaChallengeChildChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 12:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 challenge_type */ 5:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 4:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional bool is_settled */ 11:
                    message.isSettled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArenaChallengeChildChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_id = 12; */
        if (message.challengeId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 challenge_type = 5; */
        if (message.challengeType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.challengeType);
        /* optional uint32 challenge_index = 4; */
        if (message.challengeIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.challengeIndex);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSuccess);
        /* optional bool is_settled = 11; */
        if (message.isSettled !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isSettled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeChildChallengeInfo
 */
export const ArenaChallengeChildChallengeInfo = new ArenaChallengeChildChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeFinishNotify$Type extends MessageType<ArenaChallengeFinishNotify> {
    constructor() {
        super("com.midnights.game.ArenaChallengeFinishNotify", [
            { no: 13, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "child_challenge_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ArenaChallengeChildChallengeInfo },
            { no: 12, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ArenaChallengeFinishNotify>): ArenaChallengeFinishNotify {
        const message = { childChallengeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArenaChallengeFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArenaChallengeFinishNotify): ArenaChallengeFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 13:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 3:
                    message.arenaChallengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ArenaChallengeChildChallengeInfo child_challenge_list */ 2:
                    message.childChallengeList.push(ArenaChallengeChildChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_success */ 12:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArenaChallengeFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 arena_challenge_level = 13; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional uint32 arena_challenge_id = 3; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.arenaChallengeId);
        /* repeated com.midnights.game.ArenaChallengeChildChallengeInfo child_challenge_list = 2; */
        for (let i = 0; i < message.childChallengeList.length; i++)
            ArenaChallengeChildChallengeInfo.internalBinaryWrite(message.childChallengeList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_success = 12; */
        if (message.isSuccess !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeFinishNotify
 */
export const ArenaChallengeFinishNotify = new ArenaChallengeFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaterSpritePhaseFinishNotify$Type extends MessageType<WaterSpritePhaseFinishNotify> {
    constructor() {
        super("com.midnights.game.WaterSpritePhaseFinishNotify", []);
    }
    create(value?: PartialMessage<WaterSpritePhaseFinishNotify>): WaterSpritePhaseFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WaterSpritePhaseFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WaterSpritePhaseFinishNotify): WaterSpritePhaseFinishNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WaterSpritePhaseFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WaterSpritePhaseFinishNotify
 */
export const WaterSpritePhaseFinishNotify = new WaterSpritePhaseFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardBatchReq$Type extends MessageType<ActivityTakeWatcherRewardBatchReq> {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardBatchReq", [
            { no: 11, name: "watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeWatcherRewardBatchReq>): ActivityTakeWatcherRewardBatchReq {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeWatcherRewardBatchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeWatcherRewardBatchReq): ActivityTakeWatcherRewardBatchReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 watcher_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeWatcherRewardBatchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 watcher_id_list = 11; */
        for (let i = 0; i < message.watcherIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.watcherIdList[i]);
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchReq
 */
export const ActivityTakeWatcherRewardBatchReq = new ActivityTakeWatcherRewardBatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardBatchRsp$Type extends MessageType<ActivityTakeWatcherRewardBatchRsp> {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardBatchRsp", [
            { no: 6, name: "watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeWatcherRewardBatchRsp>): ActivityTakeWatcherRewardBatchRsp {
        const message = { watcherIdList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeWatcherRewardBatchRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeWatcherRewardBatchRsp): ActivityTakeWatcherRewardBatchRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 watcher_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 1:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeWatcherRewardBatchRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 watcher_id_list = 6; */
        for (let i = 0; i < message.watcherIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.watcherIdList[i]);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.ItemParam item_list = 1; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchRsp
 */
export const ActivityTakeWatcherRewardBatchRsp = new ActivityTakeWatcherRewardBatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabCamp$Type extends MessageType<ChannelerSlabCamp> {
    constructor() {
        super("com.midnights.game.ChannelerSlabCamp", [
            { no: 11, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pos", kind: "message", T: () => Vector },
            { no: 7, name: "buff_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabCamp>): ChannelerSlabCamp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabCamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabCamp): ChannelerSlabCamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 11:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 8:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 buff_num */ 7:
                    message.buffNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 3:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabCamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 11; */
        if (message.rewardId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.rewardId);
        /* optional com.midnights.game.Vector pos = 8; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 buff_num = 7; */
        if (message.buffNum !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.buffNum);
        /* optional uint32 group_id = 3; */
        if (message.groupId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabCamp
 */
export const ChannelerSlabCamp = new ChannelerSlabCamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabChallenge$Type extends MessageType<ChannelerSlabChallenge> {
    constructor() {
        super("com.midnights.game.ChannelerSlabChallenge", [
            { no: 5, name: "active_camp_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "camp_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannelerSlabCamp }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabChallenge>): ChannelerSlabChallenge {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabChallenge): ChannelerSlabChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_camp_index */ 5:
                    message.activeCampIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChannelerSlabCamp camp_list */ 14:
                    message.campList.push(ChannelerSlabCamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 active_camp_index = 5; */
        if (message.activeCampIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.activeCampIndex);
        /* repeated com.midnights.game.ChannelerSlabCamp camp_list = 14; */
        for (let i = 0; i < message.campList.length; i++)
            ChannelerSlabCamp.internalBinaryWrite(message.campList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabChallenge
 */
export const ChannelerSlabChallenge = new ChannelerSlabChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabOneoffDungeon$Type extends MessageType<ChannelerSlabOneoffDungeon> {
    constructor() {
        super("com.midnights.game.ChannelerSlabOneoffDungeon", [
            { no: 8, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabOneoffDungeon>): ChannelerSlabOneoffDungeon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabOneoffDungeon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabOneoffDungeon): ChannelerSlabOneoffDungeon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 8:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 13:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabOneoffDungeon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_done = 8; */
        if (message.isDone !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isDone);
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 reward_id = 13; */
        if (message.rewardId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabOneoffDungeon
 */
export const ChannelerSlabOneoffDungeon = new ChannelerSlabOneoffDungeon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabChallengeStage$Type extends MessageType<ChannelerSlabChallengeStage> {
    constructor() {
        super("com.midnights.game.ChannelerSlabChallengeStage", [
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "challenge_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannelerSlabChallenge },
            { no: 7, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "dungeon_info", kind: "message", T: () => ChannelerSlabOneoffDungeon }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabChallengeStage>): ChannelerSlabChallengeStage {
        const message = { challengeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabChallengeStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabChallengeStage): ChannelerSlabChallengeStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChannelerSlabChallenge challenge_list */ 14:
                    message.challengeList.push(ChannelerSlabChallenge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 7:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ChannelerSlabOneoffDungeon dungeon_info */ 13:
                    message.dungeonInfo = ChannelerSlabOneoffDungeon.internalBinaryRead(reader, reader.uint32(), options, message.dungeonInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabChallengeStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.openTime);
        /* repeated com.midnights.game.ChannelerSlabChallenge challenge_list = 14; */
        for (let i = 0; i < message.challengeList.length; i++)
            ChannelerSlabChallenge.internalBinaryWrite(message.challengeList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 7; */
        if (message.isOpen !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional com.midnights.game.ChannelerSlabOneoffDungeon dungeon_info = 13; */
        if (message.dungeonInfo)
            ChannelerSlabOneoffDungeon.internalBinaryWrite(message.dungeonInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabChallengeStage
 */
export const ChannelerSlabChallengeStage = new ChannelerSlabChallengeStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabBuffSchemeInfo$Type extends MessageType<ChannellerSlabBuffSchemeInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabBuffSchemeInfo", [
            { no: 9, name: "slot_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "total_energy", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "self_energy", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabBuffSchemeInfo>): ChannellerSlabBuffSchemeInfo {
        const message = { slotMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabBuffSchemeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabBuffSchemeInfo): ChannellerSlabBuffSchemeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> slot_map */ 9:
                    this.binaryReadMap9(message.slotMap, reader, options);
                    break;
                case /* optional uint32 total_energy */ 13:
                    message.totalEnergy = reader.uint32();
                    break;
                case /* optional uint32 self_energy */ 15:
                    message.selfEnergy = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: ChannellerSlabBuffSchemeInfo["slotMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChannellerSlabBuffSchemeInfo["slotMap"] | undefined, val: ChannellerSlabBuffSchemeInfo["slotMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ChannellerSlabBuffSchemeInfo.slot_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ChannellerSlabBuffSchemeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> slot_map = 9; */
        for (let k of Object.keys(message.slotMap))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.slotMap[k as any]).join();
        /* optional uint32 total_energy = 13; */
        if (message.totalEnergy !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.totalEnergy);
        /* optional uint32 self_energy = 15; */
        if (message.selfEnergy !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.selfEnergy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabBuffSchemeInfo
 */
export const ChannellerSlabBuffSchemeInfo = new ChannellerSlabBuffSchemeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabAssistInfo$Type extends MessageType<ChannellerSlabAssistInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabAssistInfo", [
            { no: 10, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "avatar_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabAssistInfo>): ChannellerSlabAssistInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabAssistInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabAssistInfo): ChannellerSlabAssistInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 10:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 avatar_level */ 12:
                    message.avatarLevel = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 6:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabAssistInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 10; */
        if (message.uid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.uid);
        /* optional uint32 avatar_level = 12; */
        if (message.avatarLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.avatarLevel);
        /* optional uint32 avatar_id = 6; */
        if (message.avatarId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabAssistInfo
 */
export const ChannellerSlabAssistInfo = new ChannellerSlabAssistInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabBuffInfo$Type extends MessageType<ChannellerSlabBuffInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabBuffInfo", [
            { no: 6, name: "mp_buff_scheme_info", kind: "message", T: () => ChannellerSlabBuffSchemeInfo },
            { no: 8, name: "buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "single_buff_scheme_info", kind: "message", T: () => ChannellerSlabBuffSchemeInfo },
            { no: 15, name: "assist_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannellerSlabAssistInfo }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabBuffInfo>): ChannellerSlabBuffInfo {
        const message = { buffIdList: [], assistInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabBuffInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabBuffInfo): ChannellerSlabBuffInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo mp_buff_scheme_info */ 6:
                    message.mpBuffSchemeInfo = ChannellerSlabBuffSchemeInfo.internalBinaryRead(reader, reader.uint32(), options, message.mpBuffSchemeInfo);
                    break;
                case /* repeated uint32 buff_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo single_buff_scheme_info */ 7:
                    message.singleBuffSchemeInfo = ChannellerSlabBuffSchemeInfo.internalBinaryRead(reader, reader.uint32(), options, message.singleBuffSchemeInfo);
                    break;
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 15:
                    message.assistInfoList.push(ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabBuffInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 6; */
        if (message.mpBuffSchemeInfo)
            ChannellerSlabBuffSchemeInfo.internalBinaryWrite(message.mpBuffSchemeInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 buff_id_list = 8; */
        for (let i = 0; i < message.buffIdList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.buffIdList[i]);
        /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 7; */
        if (message.singleBuffSchemeInfo)
            ChannellerSlabBuffSchemeInfo.internalBinaryWrite(message.singleBuffSchemeInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 15; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabBuffInfo
 */
export const ChannellerSlabBuffInfo = new ChannellerSlabBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonInfo$Type extends MessageType<ChannellerSlabLoopDungeonInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonInfo", [
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_first_pass_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "last_condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonInfo>): ChannellerSlabLoopDungeonInfo {
        const message = { lastConditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonInfo): ChannellerSlabLoopDungeonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 4:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 12:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_first_pass_reward_taken */ 9:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* repeated uint32 last_condition_id_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lastConditionIdList.push(reader.uint32());
                    else
                        message.lastConditionIdList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* optional uint32 dungeon_index = 4; */
        if (message.dungeonIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 open_time = 12; */
        if (message.openTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.openTime);
        /* optional bool is_first_pass_reward_taken = 9; */
        if (message.isFirstPassRewardTaken !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* repeated uint32 last_condition_id_list = 14; */
        for (let i = 0; i < message.lastConditionIdList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.lastConditionIdList[i]);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonInfo
 */
export const ChannellerSlabLoopDungeonInfo = new ChannellerSlabLoopDungeonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonStageInfo$Type extends MessageType<ChannellerSlabLoopDungeonStageInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonStageInfo", [
            { no: 15, name: "dungeon_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannellerSlabLoopDungeonInfo },
            { no: 5, name: "taken_reward_index_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "last_difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonStageInfo>): ChannellerSlabLoopDungeonStageInfo {
        const message = { dungeonInfoList: [], takenRewardIndexList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonStageInfo): ChannellerSlabLoopDungeonStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabLoopDungeonInfo dungeon_info_list */ 15:
                    message.dungeonInfoList.push(ChannellerSlabLoopDungeonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 taken_reward_index_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardIndexList.push(reader.uint32());
                    else
                        message.takenRewardIndexList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 last_difficulty_id */ 6:
                    message.lastDifficultyId = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ChannellerSlabLoopDungeonInfo dungeon_info_list = 15; */
        for (let i = 0; i < message.dungeonInfoList.length; i++)
            ChannellerSlabLoopDungeonInfo.internalBinaryWrite(message.dungeonInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 taken_reward_index_list = 5; */
        for (let i = 0; i < message.takenRewardIndexList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.takenRewardIndexList[i]);
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isOpen);
        /* optional uint32 last_difficulty_id = 6; */
        if (message.lastDifficultyId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.lastDifficultyId);
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonStageInfo
 */
export const ChannellerSlabLoopDungeonStageInfo = new ChannellerSlabLoopDungeonStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabActivityDetailInfo$Type extends MessageType<ChannelerSlabActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.ChannelerSlabActivityDetailInfo", [
            { no: 1, name: "buff_info", kind: "message", T: () => ChannellerSlabBuffInfo },
            { no: 7, name: "loop_dungeon_stage_info", kind: "message", T: () => ChannellerSlabLoopDungeonStageInfo },
            { no: 15, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannelerSlabChallengeStage },
            { no: 3, name: "play_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabActivityDetailInfo>): ChannelerSlabActivityDetailInfo {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabActivityDetailInfo): ChannelerSlabActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ChannellerSlabBuffInfo buff_info */ 1:
                    message.buffInfo = ChannellerSlabBuffInfo.internalBinaryRead(reader, reader.uint32(), options, message.buffInfo);
                    break;
                case /* optional com.midnights.game.ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info */ 7:
                    message.loopDungeonStageInfo = ChannellerSlabLoopDungeonStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.loopDungeonStageInfo);
                    break;
                case /* repeated com.midnights.game.ChannelerSlabChallengeStage stage_list */ 15:
                    message.stageList.push(ChannelerSlabChallengeStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 play_end_time */ 3:
                    message.playEndTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ChannellerSlabBuffInfo buff_info = 1; */
        if (message.buffInfo)
            ChannellerSlabBuffInfo.internalBinaryWrite(message.buffInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 7; */
        if (message.loopDungeonStageInfo)
            ChannellerSlabLoopDungeonStageInfo.internalBinaryWrite(message.loopDungeonStageInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ChannelerSlabChallengeStage stage_list = 15; */
        for (let i = 0; i < message.stageList.length; i++)
            ChannelerSlabChallengeStage.internalBinaryWrite(message.stageList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 play_end_time = 3; */
        if (message.playEndTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.playEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabActivityDetailInfo
 */
export const ChannelerSlabActivityDetailInfo = new ChannelerSlabActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabStageActiveChallengeIndexNotify$Type extends MessageType<ChannelerSlabStageActiveChallengeIndexNotify> {
    constructor() {
        super("com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "active_camp_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabStageActiveChallengeIndexNotify>): ChannelerSlabStageActiveChallengeIndexNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabStageActiveChallengeIndexNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabStageActiveChallengeIndexNotify): ChannelerSlabStageActiveChallengeIndexNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 12:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 active_camp_index */ 6:
                    message.activeCampIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabStageActiveChallengeIndexNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_index = 12; */
        if (message.challengeIndex !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 active_camp_index = 6; */
        if (message.activeCampIndex !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.activeCampIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify
 */
export const ChannelerSlabStageActiveChallengeIndexNotify = new ChannelerSlabStageActiveChallengeIndexNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabStageOneoffDungeonNotify$Type extends MessageType<ChannelerSlabStageOneoffDungeonNotify> {
    constructor() {
        super("com.midnights.game.ChannelerSlabStageOneoffDungeonNotify", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChannelerSlabStageOneoffDungeonNotify>): ChannelerSlabStageOneoffDungeonNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannelerSlabStageOneoffDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannelerSlabStageOneoffDungeonNotify): ChannelerSlabStageOneoffDungeonNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_done */ 8:
                    message.isDone = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannelerSlabStageOneoffDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        /* optional bool is_done = 8; */
        if (message.isDone !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isDone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabStageOneoffDungeonNotify
 */
export const ChannelerSlabStageOneoffDungeonNotify = new ChannelerSlabStageOneoffDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabWearBuffReq$Type extends MessageType<ChannellerSlabWearBuffReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabWearBuffReq", [
            { no: 3, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabWearBuffReq>): ChannellerSlabWearBuffReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabWearBuffReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabWearBuffReq): ChannellerSlabWearBuffReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_id */ 3:
                    message.buffId = reader.uint32();
                    break;
                case /* optional bool is_mp */ 5:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 13:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabWearBuffReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 buff_id = 3; */
        if (message.buffId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.buffId);
        /* optional bool is_mp = 5; */
        if (message.isMp !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 13; */
        if (message.slotId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabWearBuffReq
 */
export const ChannellerSlabWearBuffReq = new ChannellerSlabWearBuffReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabWearBuffRsp$Type extends MessageType<ChannellerSlabWearBuffRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabWearBuffRsp", [
            { no: 15, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabWearBuffRsp>): ChannellerSlabWearBuffRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabWearBuffRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabWearBuffRsp): ChannellerSlabWearBuffRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_id */ 15:
                    message.buffId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_mp */ 9:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 8:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabWearBuffRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 buff_id = 15; */
        if (message.buffId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.buffId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional bool is_mp = 9; */
        if (message.isMp !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 8; */
        if (message.slotId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabWearBuffRsp
 */
export const ChannellerSlabWearBuffRsp = new ChannellerSlabWearBuffRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabTakeoffBuffReq$Type extends MessageType<ChannellerSlabTakeoffBuffReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabTakeoffBuffReq", [
            { no: 10, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabTakeoffBuffReq>): ChannellerSlabTakeoffBuffReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabTakeoffBuffReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabTakeoffBuffReq): ChannellerSlabTakeoffBuffReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mp */ 10:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 12:
                    message.slotId = reader.uint32();
                    break;
                case /* optional uint32 buff_id */ 9:
                    message.buffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabTakeoffBuffReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_mp = 10; */
        if (message.isMp !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 12; */
        if (message.slotId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.slotId);
        /* optional uint32 buff_id = 9; */
        if (message.buffId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.buffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabTakeoffBuffReq
 */
export const ChannellerSlabTakeoffBuffReq = new ChannellerSlabTakeoffBuffReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabTakeoffBuffRsp$Type extends MessageType<ChannellerSlabTakeoffBuffRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabTakeoffBuffRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabTakeoffBuffRsp>): ChannellerSlabTakeoffBuffRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabTakeoffBuffRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabTakeoffBuffRsp): ChannellerSlabTakeoffBuffRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_mp */ 13:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 buff_id */ 14:
                    message.buffId = reader.uint32();
                    break;
                case /* optional uint32 slot_id */ 8:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabTakeoffBuffRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional bool is_mp = 13; */
        if (message.isMp !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isMp);
        /* optional uint32 buff_id = 14; */
        if (message.buffId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.buffId);
        /* optional uint32 slot_id = 8; */
        if (message.slotId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabTakeoffBuffRsp
 */
export const ChannellerSlabTakeoffBuffRsp = new ChannellerSlabTakeoffBuffRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabEnterLoopDungeonReq$Type extends MessageType<ChannellerSlabEnterLoopDungeonReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabEnterLoopDungeonReq", [
            { no: 9, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabEnterLoopDungeonReq>): ChannellerSlabEnterLoopDungeonReq {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabEnterLoopDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabEnterLoopDungeonReq): ChannellerSlabEnterLoopDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 9:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 10:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 12:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabEnterLoopDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 9; */
        if (message.pointId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.pointId);
        /* optional uint32 dungeon_index = 10; */
        if (message.dungeonIndex !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 5; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 difficulty_id = 12; */
        if (message.difficultyId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonReq
 */
export const ChannellerSlabEnterLoopDungeonReq = new ChannellerSlabEnterLoopDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabEnterLoopDungeonRsp$Type extends MessageType<ChannellerSlabEnterLoopDungeonRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabEnterLoopDungeonRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabEnterLoopDungeonRsp>): ChannellerSlabEnterLoopDungeonRsp {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabEnterLoopDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabEnterLoopDungeonRsp): ChannellerSlabEnterLoopDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 dungeon_index */ 15:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 3:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabEnterLoopDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        /* repeated uint32 condition_id_list = 6; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 dungeon_index = 15; */
        if (message.dungeonIndex !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 difficulty_id = 3; */
        if (message.difficultyId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonRsp
 */
export const ChannellerSlabEnterLoopDungeonRsp = new ChannellerSlabEnterLoopDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeFirstPassRewardReq$Type extends MessageType<ChannellerSlabLoopDungeonTakeFirstPassRewardReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq", [
            { no: 10, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonTakeFirstPassRewardReq>): ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonTakeFirstPassRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonTakeFirstPassRewardReq): ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 10:
                    message.dungeonIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonTakeFirstPassRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_index = 10; */
        if (message.dungeonIndex !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq
 */
export const ChannellerSlabLoopDungeonTakeFirstPassRewardReq = new ChannellerSlabLoopDungeonTakeFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeFirstPassRewardRsp$Type extends MessageType<ChannellerSlabLoopDungeonTakeFirstPassRewardRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonTakeFirstPassRewardRsp>): ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonTakeFirstPassRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonTakeFirstPassRewardRsp): ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_index */ 8:
                    message.dungeonIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonTakeFirstPassRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_index = 8; */
        if (message.dungeonIndex !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.dungeonIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp
 */
export const ChannellerSlabLoopDungeonTakeFirstPassRewardRsp = new ChannellerSlabLoopDungeonTakeFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeScoreRewardReq$Type extends MessageType<ChannellerSlabLoopDungeonTakeScoreRewardReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq", [
            { no: 8, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonTakeScoreRewardReq>): ChannellerSlabLoopDungeonTakeScoreRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonTakeScoreRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonTakeScoreRewardReq): ChannellerSlabLoopDungeonTakeScoreRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 8:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonTakeScoreRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_index = 8; */
        if (message.rewardIndex !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq
 */
export const ChannellerSlabLoopDungeonTakeScoreRewardReq = new ChannellerSlabLoopDungeonTakeScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeScoreRewardRsp$Type extends MessageType<ChannellerSlabLoopDungeonTakeScoreRewardRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp", [
            { no: 12, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonTakeScoreRewardRsp>): ChannellerSlabLoopDungeonTakeScoreRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonTakeScoreRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonTakeScoreRewardRsp): ChannellerSlabLoopDungeonTakeScoreRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 12:
                    message.rewardIndex = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonTakeScoreRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_index = 12; */
        if (message.rewardIndex !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.rewardIndex);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp
 */
export const ChannellerSlabLoopDungeonTakeScoreRewardRsp = new ChannellerSlabLoopDungeonTakeScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonChallengeInfoNotify$Type extends MessageType<ChannellerSlabLoopDungeonChallengeInfoNotify> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify", [
            { no: 12, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "scheme_buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonChallengeInfoNotify>): ChannellerSlabLoopDungeonChallengeInfoNotify {
        const message = { conditionIdList: [], schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonChallengeInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonChallengeInfoNotify): ChannellerSlabLoopDungeonChallengeInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 12:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 challenge_score */ 4:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 2:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 scheme_buff_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonChallengeInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_index = 12; */
        if (message.dungeonIndex !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 challenge_score = 4; */
        if (message.challengeScore !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 difficulty_id = 2; */
        if (message.difficultyId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 3; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.conditionIdList[i]);
        /* repeated uint32 scheme_buff_id_list = 6; */
        for (let i = 0; i < message.schemeBuffIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.schemeBuffIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify
 */
export const ChannellerSlabLoopDungeonChallengeInfoNotify = new ChannellerSlabLoopDungeonChallengeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonSelectConditionReq$Type extends MessageType<ChannellerSlabLoopDungeonSelectConditionReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq", [
            { no: 4, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonSelectConditionReq>): ChannellerSlabLoopDungeonSelectConditionReq {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonSelectConditionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonSelectConditionReq): ChannellerSlabLoopDungeonSelectConditionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 4:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 8:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonSelectConditionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_index = 4; */
        if (message.dungeonIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 3; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 difficulty_id = 8; */
        if (message.difficultyId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq
 */
export const ChannellerSlabLoopDungeonSelectConditionReq = new ChannellerSlabLoopDungeonSelectConditionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonSelectConditionRsp$Type extends MessageType<ChannellerSlabLoopDungeonSelectConditionRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "condition_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonSelectConditionRsp>): ChannellerSlabLoopDungeonSelectConditionRsp {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonSelectConditionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonSelectConditionRsp): ChannellerSlabLoopDungeonSelectConditionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_index */ 5:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonSelectConditionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_index = 5; */
        if (message.dungeonIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 13; */
        for (let i = 0; i < message.conditionIdList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.conditionIdList[i]);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp
 */
export const ChannellerSlabLoopDungeonSelectConditionRsp = new ChannellerSlabLoopDungeonSelectConditionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonResultInfo$Type extends MessageType<ChannellerSlabLoopDungeonResultInfo> {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonResultInfo", [
            { no: 11, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_in_time_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabLoopDungeonResultInfo>): ChannellerSlabLoopDungeonResultInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabLoopDungeonResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabLoopDungeonResultInfo): ChannellerSlabLoopDungeonResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 11:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 8:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 7:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional bool is_in_time_limit */ 10:
                    message.isInTimeLimit = reader.bool();
                    break;
                case /* optional uint32 challenge_score */ 12:
                    message.challengeScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabLoopDungeonResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 11; */
        if (message.isSuccess !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 8; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.challengeMaxScore);
        /* optional uint32 dungeon_index = 7; */
        if (message.dungeonIndex !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.dungeonIndex);
        /* optional bool is_in_time_limit = 10; */
        if (message.isInTimeLimit !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isInTimeLimit);
        /* optional uint32 challenge_score = 12; */
        if (message.challengeScore !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.challengeScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonResultInfo
 */
export const ChannellerSlabLoopDungeonResultInfo = new ChannellerSlabLoopDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoReq$Type extends MessageType<ChannellerSlabOneOffDungeonInfoReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoReq", []);
    }
    create(value?: PartialMessage<ChannellerSlabOneOffDungeonInfoReq>): ChannellerSlabOneOffDungeonInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabOneOffDungeonInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabOneOffDungeonInfoReq): ChannellerSlabOneOffDungeonInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChannellerSlabOneOffDungeonInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoReq
 */
export const ChannellerSlabOneOffDungeonInfoReq = new ChannellerSlabOneOffDungeonInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoRsp$Type extends MessageType<ChannellerSlabOneOffDungeonInfoRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp", [
            { no: 3, name: "scheme_buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabOneOffDungeonInfoRsp>): ChannellerSlabOneOffDungeonInfoRsp {
        const message = { schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabOneOffDungeonInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabOneOffDungeonInfoRsp): ChannellerSlabOneOffDungeonInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scheme_buff_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabOneOffDungeonInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 scheme_buff_id_list = 3; */
        for (let i = 0; i < message.schemeBuffIdList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.schemeBuffIdList[i]);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp
 */
export const ChannellerSlabOneOffDungeonInfoRsp = new ChannellerSlabOneOffDungeonInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoNotify$Type extends MessageType<ChannellerSlabOneOffDungeonInfoNotify> {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify", [
            { no: 6, name: "scheme_buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabOneOffDungeonInfoNotify>): ChannellerSlabOneOffDungeonInfoNotify {
        const message = { schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabOneOffDungeonInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabOneOffDungeonInfoNotify): ChannellerSlabOneOffDungeonInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scheme_buff_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabOneOffDungeonInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 scheme_buff_id_list = 6; */
        for (let i = 0; i < message.schemeBuffIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.schemeBuffIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify
 */
export const ChannellerSlabOneOffDungeonInfoNotify = new ChannellerSlabOneOffDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabSaveAssistInfoReq$Type extends MessageType<ChannellerSlabSaveAssistInfoReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabSaveAssistInfoReq", [
            { no: 8, name: "assist_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannellerSlabAssistInfo }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabSaveAssistInfoReq>): ChannellerSlabSaveAssistInfoReq {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabSaveAssistInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabSaveAssistInfoReq): ChannellerSlabSaveAssistInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 8:
                    message.assistInfoList.push(ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabSaveAssistInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoReq
 */
export const ChannellerSlabSaveAssistInfoReq = new ChannellerSlabSaveAssistInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabSaveAssistInfoRsp$Type extends MessageType<ChannellerSlabSaveAssistInfoRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabSaveAssistInfoRsp", [
            { no: 8, name: "assist_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChannellerSlabAssistInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabSaveAssistInfoRsp>): ChannellerSlabSaveAssistInfoRsp {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabSaveAssistInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabSaveAssistInfoRsp): ChannellerSlabSaveAssistInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 8:
                    message.assistInfoList.push(ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabSaveAssistInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoRsp
 */
export const ChannellerSlabSaveAssistInfoRsp = new ChannellerSlabSaveAssistInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialLevelData$Type extends MessageType<MistTrialLevelData> {
    constructor() {
        super("com.midnights.game.MistTrialLevelData", [
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialLevelData>): MistTrialLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialLevelData): MistTrialLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialLevelData
 */
export const MistTrialLevelData = new MistTrialLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialActivityDetailInfo$Type extends MessageType<MistTrialActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.MistTrialActivityDetailInfo", [
            { no: 5, name: "trial_level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MistTrialLevelData }
        ]);
    }
    create(value?: PartialMessage<MistTrialActivityDetailInfo>): MistTrialActivityDetailInfo {
        const message = { trialLevelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialActivityDetailInfo): MistTrialActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MistTrialLevelData trial_level_data_list */ 5:
                    message.trialLevelDataList.push(MistTrialLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MistTrialLevelData trial_level_data_list = 5; */
        for (let i = 0; i < message.trialLevelDataList.length; i++)
            MistTrialLevelData.internalBinaryWrite(message.trialLevelDataList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialActivityDetailInfo
 */
export const MistTrialActivityDetailInfo = new MistTrialActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSelectAvatarAndEnterDungeonReq$Type extends MessageType<MistTrialSelectAvatarAndEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq", [
            { no: 4, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "select_trial_avatar_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "enter_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialSelectAvatarAndEnterDungeonReq>): MistTrialSelectAvatarAndEnterDungeonReq {
        const message = { selectTrialAvatarIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialSelectAvatarAndEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialSelectAvatarAndEnterDungeonReq): MistTrialSelectAvatarAndEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 4:
                    message.trialId = reader.uint32();
                    break;
                case /* repeated uint32 select_trial_avatar_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectTrialAvatarIdList.push(reader.uint32());
                    else
                        message.selectTrialAvatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 enter_point_id */ 7:
                    message.enterPointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialSelectAvatarAndEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 4; */
        if (message.trialId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.trialId);
        /* repeated uint32 select_trial_avatar_id_list = 10; */
        for (let i = 0; i < message.selectTrialAvatarIdList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.selectTrialAvatarIdList[i]);
        /* optional uint32 enter_point_id = 7; */
        if (message.enterPointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.enterPointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq
 */
export const MistTrialSelectAvatarAndEnterDungeonReq = new MistTrialSelectAvatarAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSelectAvatarAndEnterDungeonRsp$Type extends MessageType<MistTrialSelectAvatarAndEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp", [
            { no: 1, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialSelectAvatarAndEnterDungeonRsp>): MistTrialSelectAvatarAndEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialSelectAvatarAndEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialSelectAvatarAndEnterDungeonRsp): MistTrialSelectAvatarAndEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 1:
                    message.trialId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialSelectAvatarAndEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 1; */
        if (message.trialId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.trialId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp
 */
export const MistTrialSelectAvatarAndEnterDungeonRsp = new MistTrialSelectAvatarAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialMissionInfo$Type extends MessageType<MistTrialMissionInfo> {
    constructor() {
        super("com.midnights.game.MistTrialMissionInfo", [
            { no: 9, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "watcher_list_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialMissionInfo>): MistTrialMissionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialMissionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialMissionInfo): MistTrialMissionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 9:
                    message.param = reader.uint32();
                    break;
                case /* optional uint32 watcher_list_id */ 13:
                    message.watcherListId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialMissionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param = 9; */
        if (message.param !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.param);
        /* optional uint32 watcher_list_id = 13; */
        if (message.watcherListId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.watcherListId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialMissionInfo
 */
export const MistTrialMissionInfo = new MistTrialMissionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetChallengeMissionReq$Type extends MessageType<MistTrialGetChallengeMissionReq> {
    constructor() {
        super("com.midnights.game.MistTrialGetChallengeMissionReq", [
            { no: 9, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialGetChallengeMissionReq>): MistTrialGetChallengeMissionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialGetChallengeMissionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialGetChallengeMissionReq): MistTrialGetChallengeMissionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 9:
                    message.trialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialGetChallengeMissionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 9; */
        if (message.trialId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.trialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetChallengeMissionReq
 */
export const MistTrialGetChallengeMissionReq = new MistTrialGetChallengeMissionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetChallengeMissionRsp$Type extends MessageType<MistTrialGetChallengeMissionRsp> {
    constructor() {
        super("com.midnights.game.MistTrialGetChallengeMissionRsp", [
            { no: 1, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mission_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MistTrialMissionInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialGetChallengeMissionRsp>): MistTrialGetChallengeMissionRsp {
        const message = { missionInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialGetChallengeMissionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialGetChallengeMissionRsp): MistTrialGetChallengeMissionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 1:
                    message.trialId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.MistTrialMissionInfo mission_info_list */ 15:
                    message.missionInfoList.push(MistTrialMissionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialGetChallengeMissionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 1; */
        if (message.trialId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.trialId);
        /* repeated com.midnights.game.MistTrialMissionInfo mission_info_list = 15; */
        for (let i = 0; i < message.missionInfoList.length; i++)
            MistTrialMissionInfo.internalBinaryWrite(message.missionInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetChallengeMissionRsp
 */
export const MistTrialGetChallengeMissionRsp = new MistTrialGetChallengeMissionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialDunegonFailNotify$Type extends MessageType<MistTrialDunegonFailNotify> {
    constructor() {
        super("com.midnights.game.MistTrialDunegonFailNotify", [
            { no: 9, name: "dungeon_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialDunegonFailNotify>): MistTrialDunegonFailNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialDunegonFailNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialDunegonFailNotify): MistTrialDunegonFailNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dungeon_id */ 9:
                    message.dungeonId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialDunegonFailNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dungeon_id = 9; */
        if (message.dungeonId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialDunegonFailNotify
 */
export const MistTrialDunegonFailNotify = new MistTrialDunegonFailNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabCheckEnterLoopDungeonReq$Type extends MessageType<ChannellerSlabCheckEnterLoopDungeonReq> {
    constructor() {
        super("com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq", []);
    }
    create(value?: PartialMessage<ChannellerSlabCheckEnterLoopDungeonReq>): ChannellerSlabCheckEnterLoopDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabCheckEnterLoopDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabCheckEnterLoopDungeonReq): ChannellerSlabCheckEnterLoopDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ChannellerSlabCheckEnterLoopDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq
 */
export const ChannellerSlabCheckEnterLoopDungeonReq = new ChannellerSlabCheckEnterLoopDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabCheckEnterLoopDungeonRsp$Type extends MessageType<ChannellerSlabCheckEnterLoopDungeonRsp> {
    constructor() {
        super("com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChannellerSlabCheckEnterLoopDungeonRsp>): ChannellerSlabCheckEnterLoopDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChannellerSlabCheckEnterLoopDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChannellerSlabCheckEnterLoopDungeonRsp): ChannellerSlabCheckEnterLoopDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChannellerSlabCheckEnterLoopDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp
 */
export const ChannellerSlabCheckEnterLoopDungeonRsp = new ChannellerSlabCheckEnterLoopDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekMapInfo$Type extends MessageType<HideAndSeekMapInfo> {
    constructor() {
        super("com.midnights.game.HideAndSeekMapInfo", [
            { no: 11, name: "match_lock_reason_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HideAndSeekMapInfo>): HideAndSeekMapInfo {
        const message = { matchLockReasonList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HideAndSeekMapInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HideAndSeekMapInfo): HideAndSeekMapInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 match_lock_reason_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchLockReasonList.push(reader.uint32());
                    else
                        message.matchLockReasonList.push(reader.uint32());
                    break;
                case /* optional uint32 id */ 7:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HideAndSeekMapInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 match_lock_reason_list = 11; */
        for (let i = 0; i < message.matchLockReasonList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.matchLockReasonList[i]);
        /* optional uint32 id = 7; */
        if (message.id !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekMapInfo
 */
export const HideAndSeekMapInfo = new HideAndSeekMapInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekActivityDetailInfo$Type extends MessageType<HideAndSeekActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.HideAndSeekActivityDetailInfo", [
            { no: 1, name: "open_map_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => HideAndSeekMapInfo },
            { no: 4, name: "chosen_hunter_skill_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "unlock_map_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "chosen_hider_skill_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HideAndSeekActivityDetailInfo>): HideAndSeekActivityDetailInfo {
        const message = { openMapInfoList: [], chosenHunterSkillList: [], unlockMapList: [], chosenHiderSkillList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HideAndSeekActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HideAndSeekActivityDetailInfo): HideAndSeekActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.HideAndSeekMapInfo open_map_info_list */ 1:
                    message.openMapInfoList.push(HideAndSeekMapInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 chosen_hunter_skill_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenHunterSkillList.push(reader.uint32());
                    else
                        message.chosenHunterSkillList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_map_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockMapList.push(reader.uint32());
                    else
                        message.unlockMapList.push(reader.uint32());
                    break;
                case /* repeated uint32 chosen_hider_skill_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenHiderSkillList.push(reader.uint32());
                    else
                        message.chosenHiderSkillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HideAndSeekActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.HideAndSeekMapInfo open_map_info_list = 1; */
        for (let i = 0; i < message.openMapInfoList.length; i++)
            HideAndSeekMapInfo.internalBinaryWrite(message.openMapInfoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 chosen_hunter_skill_list = 4; */
        for (let i = 0; i < message.chosenHunterSkillList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.chosenHunterSkillList[i]);
        /* repeated uint32 unlock_map_list = 13; */
        for (let i = 0; i < message.unlockMapList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.unlockMapList[i]);
        /* repeated uint32 chosen_hider_skill_list = 6; */
        for (let i = 0; i < message.chosenHiderSkillList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.chosenHiderSkillList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekActivityDetailInfo
 */
export const HideAndSeekActivityDetailInfo = new HideAndSeekActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekSelectSkillReq$Type extends MessageType<HideAndSeekSelectSkillReq> {
    constructor() {
        super("com.midnights.game.HideAndSeekSelectSkillReq", [
            { no: 13, name: "skill_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HideAndSeekSelectSkillReq>): HideAndSeekSelectSkillReq {
        const message = { skillList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HideAndSeekSelectSkillReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HideAndSeekSelectSkillReq): HideAndSeekSelectSkillReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 skill_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillList.push(reader.uint32());
                    else
                        message.skillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HideAndSeekSelectSkillReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 skill_list = 13; */
        for (let i = 0; i < message.skillList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.skillList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekSelectSkillReq
 */
export const HideAndSeekSelectSkillReq = new HideAndSeekSelectSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekSelectSkillRsp$Type extends MessageType<HideAndSeekSelectSkillRsp> {
    constructor() {
        super("com.midnights.game.HideAndSeekSelectSkillRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "skill_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HideAndSeekSelectSkillRsp>): HideAndSeekSelectSkillRsp {
        const message = { skillList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HideAndSeekSelectSkillRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HideAndSeekSelectSkillRsp): HideAndSeekSelectSkillRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 skill_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillList.push(reader.uint32());
                    else
                        message.skillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HideAndSeekSelectSkillRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* repeated uint32 skill_list = 12; */
        for (let i = 0; i < message.skillList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.skillList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekSelectSkillRsp
 */
export const HideAndSeekSelectSkillRsp = new HideAndSeekSelectSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeScoreRewardReq$Type extends MessageType<ActivityTakeScoreRewardReq> {
    constructor() {
        super("com.midnights.game.ActivityTakeScoreRewardReq", [
            { no: 12, name: "reward_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeScoreRewardReq>): ActivityTakeScoreRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeScoreRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeScoreRewardReq): ActivityTakeScoreRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_config_id */ 12:
                    message.rewardConfigId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeScoreRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_config_id = 12; */
        if (message.rewardConfigId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.rewardConfigId);
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeScoreRewardReq
 */
export const ActivityTakeScoreRewardReq = new ActivityTakeScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeScoreRewardRsp$Type extends MessageType<ActivityTakeScoreRewardRsp> {
    constructor() {
        super("com.midnights.game.ActivityTakeScoreRewardRsp", [
            { no: 13, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "reward_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeScoreRewardRsp>): ActivityTakeScoreRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeScoreRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeScoreRewardRsp): ActivityTakeScoreRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 13:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_config_id */ 15:
                    message.rewardConfigId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeScoreRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 13; */
        if (message.activityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_config_id = 15; */
        if (message.rewardConfigId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.rewardConfigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeScoreRewardRsp
 */
export const ActivityTakeScoreRewardRsp = new ActivityTakeScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeAllScoreRewardReq$Type extends MessageType<ActivityTakeAllScoreRewardReq> {
    constructor() {
        super("com.midnights.game.ActivityTakeAllScoreRewardReq", [
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeAllScoreRewardReq>): ActivityTakeAllScoreRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeAllScoreRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeAllScoreRewardReq): ActivityTakeAllScoreRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeAllScoreRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeAllScoreRewardReq
 */
export const ActivityTakeAllScoreRewardReq = new ActivityTakeAllScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeAllScoreRewardRsp$Type extends MessageType<ActivityTakeAllScoreRewardRsp> {
    constructor() {
        super("com.midnights.game.ActivityTakeAllScoreRewardRsp", [
            { no: 14, name: "reward_config_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityTakeAllScoreRewardRsp>): ActivityTakeAllScoreRewardRsp {
        const message = { rewardConfigList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityTakeAllScoreRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityTakeAllScoreRewardRsp): ActivityTakeAllScoreRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 reward_config_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rewardConfigList.push(reader.uint32());
                    else
                        message.rewardConfigList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityTakeAllScoreRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 reward_config_list = 14; */
        for (let i = 0; i < message.rewardConfigList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.rewardConfigList[i]);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeAllScoreRewardRsp
 */
export const ActivityTakeAllScoreRewardRsp = new ActivityTakeAllScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlDayContentInfo$Type extends MessageType<FindHilichurlDayContentInfo> {
    constructor() {
        super("com.midnights.game.FindHilichurlDayContentInfo", [
            { no: 1, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FindHilichurlDayContentInfo>): FindHilichurlDayContentInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindHilichurlDayContentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindHilichurlDayContentInfo): FindHilichurlDayContentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 1:
                    message.startTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindHilichurlDayContentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_time = 1; */
        if (message.startTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlDayContentInfo
 */
export const FindHilichurlDayContentInfo = new FindHilichurlDayContentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlDetailInfo$Type extends MessageType<FindHilichurlDetailInfo> {
    constructor() {
        super("com.midnights.game.FindHilichurlDetailInfo", [
            { no: 1, name: "day_content_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FindHilichurlDayContentInfo },
            { no: 12, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_end_quest_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "player_day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FindHilichurlDetailInfo>): FindHilichurlDetailInfo {
        const message = { dayContentInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindHilichurlDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindHilichurlDetailInfo): FindHilichurlDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FindHilichurlDayContentInfo day_content_info_list */ 1:
                    message.dayContentInfoList.push(FindHilichurlDayContentInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 min_open_player_level */ 12:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* optional bool is_end_quest_accept */ 7:
                    message.isEndQuestAccept = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 6:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 9:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 player_day_index */ 4:
                    message.playerDayIndex = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 15:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindHilichurlDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.FindHilichurlDayContentInfo day_content_info_list = 1; */
        for (let i = 0; i < message.dayContentInfoList.length; i++)
            FindHilichurlDayContentInfo.internalBinaryWrite(message.dayContentInfoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 min_open_player_level = 12; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* optional bool is_end_quest_accept = 7; */
        if (message.isEndQuestAccept !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isEndQuestAccept);
        /* optional uint32 content_close_time = 6; */
        if (message.contentCloseTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 9; */
        if (message.isContentClosed !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 player_day_index = 4; */
        if (message.playerDayIndex !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.playerDayIndex);
        /* optional uint32 day_index = 15; */
        if (message.dayIndex !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlDetailInfo
 */
export const FindHilichurlDetailInfo = new FindHilichurlDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonPlayerTipsNotify$Type extends MessageType<CommonPlayerTipsNotify> {
    constructor() {
        super("com.midnights.game.CommonPlayerTipsNotify", [
            { no: 3, name: "notify_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "text_map_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommonPlayerTipsNotify>): CommonPlayerTipsNotify {
        const message = { textMapIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommonPlayerTipsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonPlayerTipsNotify): CommonPlayerTipsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 notify_type */ 3:
                    message.notifyType = reader.uint32();
                    break;
                case /* repeated string text_map_id_list */ 9:
                    message.textMapIdList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonPlayerTipsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 notify_type = 3; */
        if (message.notifyType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.notifyType);
        /* repeated string text_map_id_list = 9; */
        for (let i = 0; i < message.textMapIdList.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.textMapIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CommonPlayerTipsNotify
 */
export const CommonPlayerTipsNotify = new CommonPlayerTipsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlFinishSecondQuestNotify$Type extends MessageType<FindHilichurlFinishSecondQuestNotify> {
    constructor() {
        super("com.midnights.game.FindHilichurlFinishSecondQuestNotify", [
            { no: 11, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FindHilichurlFinishSecondQuestNotify>): FindHilichurlFinishSecondQuestNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindHilichurlFinishSecondQuestNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindHilichurlFinishSecondQuestNotify): FindHilichurlFinishSecondQuestNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_index */ 11:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FindHilichurlFinishSecondQuestNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 day_index = 11; */
        if (message.dayIndex !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlFinishSecondQuestNotify
 */
export const FindHilichurlFinishSecondQuestNotify = new FindHilichurlFinishSecondQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlAcceptQuestNotify$Type extends MessageType<FindHilichurlAcceptQuestNotify> {
    constructor() {
        super("com.midnights.game.FindHilichurlAcceptQuestNotify", []);
    }
    create(value?: PartialMessage<FindHilichurlAcceptQuestNotify>): FindHilichurlAcceptQuestNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FindHilichurlAcceptQuestNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FindHilichurlAcceptQuestNotify): FindHilichurlAcceptQuestNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FindHilichurlAcceptQuestNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlAcceptQuestNotify
 */
export const FindHilichurlAcceptQuestNotify = new FindHilichurlAcceptQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRecord$Type extends MessageType<SummerTimeSprintBoatRecord> {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRecord", [
            { no: 3, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeSprintBoatRecord>): SummerTimeSprintBoatRecord {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeSprintBoatRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeSprintBoatRecord): SummerTimeSprintBoatRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 3:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 13:
                    message.startTime = reader.uint32();
                    break;
                case /* optional bool is_touched */ 7:
                    message.isTouched = reader.bool();
                    break;
                case /* repeated uint32 watcher_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeSprintBoatRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_score = 3; */
        if (message.bestScore !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bestScore);
        /* optional uint32 start_time = 13; */
        if (message.startTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.startTime);
        /* optional bool is_touched = 7; */
        if (message.isTouched !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isTouched);
        /* repeated uint32 watcher_id_list = 10; */
        for (let i = 0; i < message.watcherIdList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.watcherIdList[i]);
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRecord
 */
export const SummerTimeSprintBoatRecord = new SummerTimeSprintBoatRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatInfo$Type extends MessageType<SummerTimeSprintBoatInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatInfo", [
            { no: 7, name: "record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SummerTimeSprintBoatRecord }
        ]);
    }
    create(value?: PartialMessage<SummerTimeSprintBoatInfo>): SummerTimeSprintBoatInfo {
        const message = { recordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeSprintBoatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeSprintBoatInfo): SummerTimeSprintBoatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeSprintBoatRecord record_list */ 7:
                    message.recordList.push(SummerTimeSprintBoatRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeSprintBoatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SummerTimeSprintBoatRecord record_list = 7; */
        for (let i = 0; i < message.recordList.length; i++)
            SummerTimeSprintBoatRecord.internalBinaryWrite(message.recordList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatInfo
 */
export const SummerTimeSprintBoatInfo = new SummerTimeSprintBoatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeDetailInfo$Type extends MessageType<SummerTimeDetailInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeDetailInfo", [
            { no: 3, name: "stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => SummerTimeStageInfo } },
            { no: 11, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "sprint_boat_info", kind: "message", T: () => SummerTimeSprintBoatInfo }
        ]);
    }
    create(value?: PartialMessage<SummerTimeDetailInfo>): SummerTimeDetailInfo {
        const message = { stageMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeDetailInfo): SummerTimeDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.SummerTimeStageInfo> stage_map */ 3:
                    this.binaryReadMap3(message.stageMap, reader, options);
                    break;
                case /* optional uint32 content_close_time */ 11:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 13:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.SummerTimeSprintBoatInfo sprint_boat_info */ 4:
                    message.sprintBoatInfo = SummerTimeSprintBoatInfo.internalBinaryRead(reader, reader.uint32(), options, message.sprintBoatInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SummerTimeDetailInfo["stageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SummerTimeDetailInfo["stageMap"] | undefined, val: SummerTimeDetailInfo["stageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = SummerTimeStageInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SummerTimeDetailInfo.stage_map");
            }
        }
        map[key ?? 0] = val ?? SummerTimeStageInfo.create();
    }
    internalBinaryWrite(message: SummerTimeDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.SummerTimeStageInfo> stage_map = 3; */
        for (let k of Object.keys(message.stageMap)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            SummerTimeStageInfo.internalBinaryWrite(message.stageMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 content_close_time = 11; */
        if (message.contentCloseTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 13; */
        if (message.isContentClosed !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.SummerTimeSprintBoatInfo sprint_boat_info = 4; */
        if (message.sprintBoatInfo)
            SummerTimeSprintBoatInfo.internalBinaryWrite(message.sprintBoatInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeDetailInfo
 */
export const SummerTimeDetailInfo = new SummerTimeDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeStageInfo$Type extends MessageType<SummerTimeStageInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeStageInfo", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeStageInfo>): SummerTimeStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeStageInfo): SummerTimeStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 10:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 10; */
        if (message.openTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeStageInfo
 */
export const SummerTimeStageInfo = new SummerTimeStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeFloatSignalPositionNotify$Type extends MessageType<SummerTimeFloatSignalPositionNotify> {
    constructor() {
        super("com.midnights.game.SummerTimeFloatSignalPositionNotify", [
            { no: 1, name: "position", kind: "message", T: () => Vector },
            { no: 5, name: "is_transfer_anchor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "float_signal_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeFloatSignalPositionNotify>): SummerTimeFloatSignalPositionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeFloatSignalPositionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeFloatSignalPositionNotify): SummerTimeFloatSignalPositionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector position */ 1:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* optional bool is_transfer_anchor */ 5:
                    message.isTransferAnchor = reader.bool();
                    break;
                case /* optional uint32 float_signal_id */ 7:
                    message.floatSignalId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeFloatSignalPositionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector position = 1; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfer_anchor = 5; */
        if (message.isTransferAnchor !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isTransferAnchor);
        /* optional uint32 float_signal_id = 7; */
        if (message.floatSignalId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.floatSignalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeFloatSignalPositionNotify
 */
export const SummerTimeFloatSignalPositionNotify = new SummerTimeFloatSignalPositionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeFloatSignalUpdateNotify$Type extends MessageType<SummerTimeFloatSignalUpdateNotify> {
    constructor() {
        super("com.midnights.game.SummerTimeFloatSignalUpdateNotify", [
            { no: 4, name: "is_transfer_anchor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "float_signal_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "position", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<SummerTimeFloatSignalUpdateNotify>): SummerTimeFloatSignalUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeFloatSignalUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeFloatSignalUpdateNotify): SummerTimeFloatSignalUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_transfer_anchor */ 4:
                    message.isTransferAnchor = reader.bool();
                    break;
                case /* optional uint32 float_signal_id */ 8:
                    message.floatSignalId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector position */ 10:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeFloatSignalUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_transfer_anchor = 4; */
        if (message.isTransferAnchor !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isTransferAnchor);
        /* optional uint32 float_signal_id = 8; */
        if (message.floatSignalId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.floatSignalId);
        /* optional com.midnights.game.Vector position = 10; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeFloatSignalUpdateNotify
 */
export const SummerTimeFloatSignalUpdateNotify = new SummerTimeFloatSignalUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatSettleNotify$Type extends MessageType<SummerTimeSprintBoatSettleNotify> {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatSettleNotify", [
            { no: 13, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "collect_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "medal_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeSprintBoatSettleNotify>): SummerTimeSprintBoatSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeSprintBoatSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeSprintBoatSettleNotify): SummerTimeSprintBoatSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_num */ 13:
                    message.totalNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 12:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 collect_num */ 6:
                    message.collectNum = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 8:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 medal_level */ 2:
                    message.medalLevel = reader.uint32();
                    break;
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeSprintBoatSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_num = 13; */
        if (message.totalNum !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.totalNum);
        /* optional uint32 group_id = 12; */
        if (message.groupId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.groupId);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 collect_num = 6; */
        if (message.collectNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.collectNum);
        /* optional uint32 left_time = 8; */
        if (message.leftTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.leftTime);
        /* optional uint32 medal_level = 2; */
        if (message.medalLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.medalLevel);
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.score);
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatSettleNotify
 */
export const SummerTimeSprintBoatSettleNotify = new SummerTimeSprintBoatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRestartReq$Type extends MessageType<SummerTimeSprintBoatRestartReq> {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRestartReq", [
            { no: 10, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeSprintBoatRestartReq>): SummerTimeSprintBoatRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeSprintBoatRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeSprintBoatRestartReq): SummerTimeSprintBoatRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 10:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeSprintBoatRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 10; */
        if (message.groupId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRestartReq
 */
export const SummerTimeSprintBoatRestartReq = new SummerTimeSprintBoatRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRestartRsp$Type extends MessageType<SummerTimeSprintBoatRestartRsp> {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeSprintBoatRestartRsp>): SummerTimeSprintBoatRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeSprintBoatRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeSprintBoatRestartRsp): SummerTimeSprintBoatRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeSprintBoatRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRestartRsp
 */
export const SummerTimeSprintBoatRestartRsp = new SummerTimeSprintBoatRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatDailyInfo$Type extends MessageType<BuoyantCombatDailyInfo> {
    constructor() {
        super("com.midnights.game.BuoyantCombatDailyInfo", [
            { no: 2, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BuoyantCombatDailyInfo>): BuoyantCombatDailyInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyantCombatDailyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyantCombatDailyInfo): BuoyantCombatDailyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 2:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 13:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyantCombatDailyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_time = 2; */
        if (message.startTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.startTime);
        /* optional uint32 best_score = 13; */
        if (message.bestScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatDailyInfo
 */
export const BuoyantCombatDailyInfo = new BuoyantCombatDailyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatDetailInfo$Type extends MessageType<BuoyantCombatDetailInfo> {
    constructor() {
        super("com.midnights.game.BuoyantCombatDetailInfo", [
            { no: 8, name: "daily_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BuoyantCombatDailyInfo }
        ]);
    }
    create(value?: PartialMessage<BuoyantCombatDetailInfo>): BuoyantCombatDetailInfo {
        const message = { dailyInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyantCombatDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyantCombatDetailInfo): BuoyantCombatDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BuoyantCombatDailyInfo daily_info_list */ 8:
                    message.dailyInfoList.push(BuoyantCombatDailyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyantCombatDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BuoyantCombatDailyInfo daily_info_list = 8; */
        for (let i = 0; i < message.dailyInfoList.length; i++)
            BuoyantCombatDailyInfo.internalBinaryWrite(message.dailyInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatDetailInfo
 */
export const BuoyantCombatDetailInfo = new BuoyantCombatDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBuoyantCombatGalleryReq$Type extends MessageType<StartBuoyantCombatGalleryReq> {
    constructor() {
        super("com.midnights.game.StartBuoyantCombatGalleryReq", [
            { no: 15, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gallery_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartBuoyantCombatGalleryReq>): StartBuoyantCombatGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartBuoyantCombatGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartBuoyantCombatGalleryReq): StartBuoyantCombatGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 15:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 gallery_level */ 13:
                    message.galleryLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartBuoyantCombatGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 15; */
        if (message.galleryId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 gallery_level = 13; */
        if (message.galleryLevel !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartBuoyantCombatGalleryReq
 */
export const StartBuoyantCombatGalleryReq = new StartBuoyantCombatGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBuoyantCombatGalleryRsp$Type extends MessageType<StartBuoyantCombatGalleryRsp> {
    constructor() {
        super("com.midnights.game.StartBuoyantCombatGalleryRsp", [
            { no: 12, name: "gallery_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartBuoyantCombatGalleryRsp>): StartBuoyantCombatGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartBuoyantCombatGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartBuoyantCombatGalleryRsp): StartBuoyantCombatGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_level */ 12:
                    message.galleryLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 8:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartBuoyantCombatGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_level = 12; */
        if (message.galleryLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.galleryLevel);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 8; */
        if (message.galleryId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartBuoyantCombatGalleryRsp
 */
export const StartBuoyantCombatGalleryRsp = new StartBuoyantCombatGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatSettleInfo$Type extends MessageType<BuoyantCombatSettleInfo> {
    constructor() {
        super("com.midnights.game.BuoyantCombatSettleInfo", [
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "settle_info", kind: "message", T: () => BuoyantCombatGallerySettleInfo }
        ]);
    }
    create(value?: PartialMessage<BuoyantCombatSettleInfo>): BuoyantCombatSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyantCombatSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyantCombatSettleInfo): BuoyantCombatSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.BuoyantCombatGallerySettleInfo settle_info */ 3:
                    message.settleInfo = BuoyantCombatGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyantCombatSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.BuoyantCombatGallerySettleInfo settle_info = 3; */
        if (message.settleInfo)
            BuoyantCombatGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatSettleInfo
 */
export const BuoyantCombatSettleInfo = new BuoyantCombatSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatSettleNotify$Type extends MessageType<BuoyantCombatSettleNotify> {
    constructor() {
        super("com.midnights.game.BuoyantCombatSettleNotify", [
            { no: 8, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "settle_info", kind: "message", T: () => BuoyantCombatSettleInfo }
        ]);
    }
    create(value?: PartialMessage<BuoyantCombatSettleNotify>): BuoyantCombatSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyantCombatSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyantCombatSettleNotify): BuoyantCombatSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 8:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.BuoyantCombatSettleInfo settle_info */ 11:
                    message.settleInfo = BuoyantCombatSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyantCombatSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 8; */
        if (message.galleryId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.BuoyantCombatSettleInfo settle_info = 11; */
        if (message.settleInfo)
            BuoyantCombatSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatSettleNotify
 */
export const BuoyantCombatSettleNotify = new BuoyantCombatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetLimitOptimizationNotify$Type extends MessageType<SetLimitOptimizationNotify> {
    constructor() {
        super("com.midnights.game.SetLimitOptimizationNotify", [
            { no: 3, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetLimitOptimizationNotify>): SetLimitOptimizationNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetLimitOptimizationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetLimitOptimizationNotify): SetLimitOptimizationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_active */ 3:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetLimitOptimizationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_active = 3; */
        if (message.isActive !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetLimitOptimizationNotify
 */
export const SetLimitOptimizationNotify = new SetLimitOptimizationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeDungeonInfo$Type extends MessageType<SummerTimeDungeonInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeDungeonInfo", [
            { no: 15, name: "taken_chest_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_chest_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "taken_shell_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "total_shell_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeDungeonInfo>): SummerTimeDungeonInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeDungeonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeDungeonInfo): SummerTimeDungeonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 taken_chest_count */ 15:
                    message.takenChestCount = reader.uint32();
                    break;
                case /* optional uint32 total_chest_count */ 12:
                    message.totalChestCount = reader.uint32();
                    break;
                case /* optional uint32 taken_shell_count */ 14:
                    message.takenShellCount = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 total_shell_count */ 13:
                    message.totalShellCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeDungeonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 taken_chest_count = 15; */
        if (message.takenChestCount !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.takenChestCount);
        /* optional uint32 total_chest_count = 12; */
        if (message.totalChestCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.totalChestCount);
        /* optional uint32 taken_shell_count = 14; */
        if (message.takenShellCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.takenShellCount);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 total_shell_count = 13; */
        if (message.totalShellCount !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.totalShellCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeDungeonInfo
 */
export const SummerTimeDungeonInfo = new SummerTimeDungeonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellDetailInfo$Type extends MessageType<EchoShellDetailInfo> {
    constructor() {
        super("com.midnights.game.EchoShellDetailInfo", [
            { no: 8, name: "summer_time_dungeon_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SummerTimeDungeonInfo },
            { no: 13, name: "shell_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "pass_dungeon_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "taken_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EchoShellDetailInfo>): EchoShellDetailInfo {
        const message = { summerTimeDungeonList: [], shellList: [], passDungeonList: [], takenRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoShellDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoShellDetailInfo): EchoShellDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeDungeonInfo summer_time_dungeon_list */ 8:
                    message.summerTimeDungeonList.push(SummerTimeDungeonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 shell_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.shellList.push(reader.uint32());
                    else
                        message.shellList.push(reader.uint32());
                    break;
                case /* repeated uint32 pass_dungeon_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.passDungeonList.push(reader.uint32());
                    else
                        message.passDungeonList.push(reader.uint32());
                    break;
                case /* repeated uint32 taken_reward_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardList.push(reader.uint32());
                    else
                        message.takenRewardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoShellDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SummerTimeDungeonInfo summer_time_dungeon_list = 8; */
        for (let i = 0; i < message.summerTimeDungeonList.length; i++)
            SummerTimeDungeonInfo.internalBinaryWrite(message.summerTimeDungeonList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 shell_list = 13; */
        for (let i = 0; i < message.shellList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.shellList[i]);
        /* repeated uint32 pass_dungeon_list = 4; */
        for (let i = 0; i < message.passDungeonList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.passDungeonList[i]);
        /* repeated uint32 taken_reward_list = 2; */
        for (let i = 0; i < message.takenRewardList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.takenRewardList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellDetailInfo
 */
export const EchoShellDetailInfo = new EchoShellDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellUpdateNotify$Type extends MessageType<EchoShellUpdateNotify> {
    constructor() {
        super("com.midnights.game.EchoShellUpdateNotify", [
            { no: 1, name: "shell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EchoShellUpdateNotify>): EchoShellUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoShellUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoShellUpdateNotify): EchoShellUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shell_id */ 1:
                    message.shellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoShellUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 shell_id = 1; */
        if (message.shellId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.shellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellUpdateNotify
 */
export const EchoShellUpdateNotify = new EchoShellUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellTakeRewardReq$Type extends MessageType<EchoShellTakeRewardReq> {
    constructor() {
        super("com.midnights.game.EchoShellTakeRewardReq", [
            { no: 10, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EchoShellTakeRewardReq>): EchoShellTakeRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoShellTakeRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoShellTakeRewardReq): EchoShellTakeRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 10:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoShellTakeRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 10; */
        if (message.rewardId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellTakeRewardReq
 */
export const EchoShellTakeRewardReq = new EchoShellTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellTakeRewardRsp$Type extends MessageType<EchoShellTakeRewardRsp> {
    constructor() {
        super("com.midnights.game.EchoShellTakeRewardRsp", [
            { no: 6, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EchoShellTakeRewardRsp>): EchoShellTakeRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoShellTakeRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoShellTakeRewardRsp): EchoShellTakeRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 6:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoShellTakeRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 6; */
        if (message.rewardId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.rewardId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellTakeRewardRsp
 */
export const EchoShellTakeRewardRsp = new EchoShellTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringChapterInfo$Type extends MessageType<BounceConjuringChapterInfo> {
    constructor() {
        super("com.midnights.game.BounceConjuringChapterInfo", [
            { no: 12, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BounceConjuringChapterInfo>): BounceConjuringChapterInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BounceConjuringChapterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BounceConjuringChapterInfo): BounceConjuringChapterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 12:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 9:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 13:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BounceConjuringChapterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_score = 12; */
        if (message.bestScore !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.bestScore);
        /* optional uint32 open_time = 9; */
        if (message.openTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.openTime);
        /* optional uint32 chapter_id = 13; */
        if (message.chapterId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringChapterInfo
 */
export const BounceConjuringChapterInfo = new BounceConjuringChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringActivityDetailInfo$Type extends MessageType<BounceConjuringActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.BounceConjuringActivityDetailInfo", [
            { no: 8, name: "chapter_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BounceConjuringChapterInfo },
            { no: 12, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BounceConjuringActivityDetailInfo>): BounceConjuringActivityDetailInfo {
        const message = { chapterInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BounceConjuringActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BounceConjuringActivityDetailInfo): BounceConjuringActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BounceConjuringChapterInfo chapter_info_list */ 8:
                    message.chapterInfoList.push(BounceConjuringChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_content_closed */ 12:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 7:
                    message.contentCloseTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BounceConjuringActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BounceConjuringChapterInfo chapter_info_list = 8; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            BounceConjuringChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_content_closed = 12; */
        if (message.isContentClosed !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 content_close_time = 7; */
        if (message.contentCloseTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.contentCloseTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringActivityDetailInfo
 */
export const BounceConjuringActivityDetailInfo = new BounceConjuringActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringSettleNotify$Type extends MessageType<BounceConjuringSettleNotify> {
    constructor() {
        super("com.midnights.game.BounceConjuringSettleNotify", [
            { no: 14, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => BounceConjuringGallerySettleInfo } },
            { no: 2, name: "total_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BounceConjuringSettleNotify>): BounceConjuringSettleNotify {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BounceConjuringSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BounceConjuringSettleNotify): BounceConjuringSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 14:
                    message.isNewRecord = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.BounceConjuringGallerySettleInfo> settle_info_map */ 4:
                    this.binaryReadMap4(message.settleInfoMap, reader, options);
                    break;
                case /* optional uint32 total_score */ 2:
                    message.totalScore = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 13:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: BounceConjuringSettleNotify["settleInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BounceConjuringSettleNotify["settleInfoMap"] | undefined, val: BounceConjuringSettleNotify["settleInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = BounceConjuringGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BounceConjuringSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? BounceConjuringGallerySettleInfo.create();
    }
    internalBinaryWrite(message: BounceConjuringSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 14; */
        if (message.isNewRecord !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isNewRecord);
        /* map<uint32, com.midnights.game.BounceConjuringGallerySettleInfo> settle_info_map = 4; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            BounceConjuringGallerySettleInfo.internalBinaryWrite(message.settleInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 total_score = 2; */
        if (message.totalScore !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.totalScore);
        /* optional uint32 chapter_id = 13; */
        if (message.chapterId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringSettleNotify
 */
export const BounceConjuringSettleNotify = new BounceConjuringSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushStage$Type extends MessageType<BlitzRushStage> {
    constructor() {
        super("com.midnights.game.BlitzRushStage", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlitzRushStage>): BlitzRushStage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlitzRushStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlitzRushStage): BlitzRushStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 11:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlitzRushStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 11; */
        if (message.openTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushStage
 */
export const BlitzRushStage = new BlitzRushStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParkourLevelInfo$Type extends MessageType<ParkourLevelInfo> {
    constructor() {
        super("com.midnights.game.ParkourLevelInfo", [
            { no: 12, name: "best_record", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<ParkourLevelInfo>): ParkourLevelInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ParkourLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParkourLevelInfo): ParkourLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_record */ 12:
                    message.bestRecord = reader.uint32();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 2:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParkourLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_record = 12; */
        if (message.bestRecord !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.bestRecord);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.openTime);
        /* optional com.midnights.game.Vector pos = 2; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ParkourLevelInfo
 */
export const ParkourLevelInfo = new ParkourLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushActivityDetailInfo$Type extends MessageType<BlitzRushActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.BlitzRushActivityDetailInfo", [
            { no: 10, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BlitzRushStage },
            { no: 14, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "parkour_level_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ParkourLevelInfo }
        ]);
    }
    create(value?: PartialMessage<BlitzRushActivityDetailInfo>): BlitzRushActivityDetailInfo {
        const message = { stageList: [], parkourLevelInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlitzRushActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlitzRushActivityDetailInfo): BlitzRushActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BlitzRushStage stage_list */ 10:
                    message.stageList.push(BlitzRushStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 content_close_time */ 14:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 2:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.ParkourLevelInfo parkour_level_info_list */ 6:
                    message.parkourLevelInfoList.push(ParkourLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlitzRushActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.BlitzRushStage stage_list = 10; */
        for (let i = 0; i < message.stageList.length; i++)
            BlitzRushStage.internalBinaryWrite(message.stageList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 content_close_time = 14; */
        if (message.contentCloseTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 2; */
        if (message.isContentClosed !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.ParkourLevelInfo parkour_level_info_list = 6; */
        for (let i = 0; i < message.parkourLevelInfoList.length; i++)
            ParkourLevelInfo.internalBinaryWrite(message.parkourLevelInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushActivityDetailInfo
 */
export const BlitzRushActivityDetailInfo = new BlitzRushActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushParkourRestartReq$Type extends MessageType<BlitzRushParkourRestartReq> {
    constructor() {
        super("com.midnights.game.BlitzRushParkourRestartReq", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlitzRushParkourRestartReq>): BlitzRushParkourRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlitzRushParkourRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlitzRushParkourRestartReq): BlitzRushParkourRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlitzRushParkourRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushParkourRestartReq
 */
export const BlitzRushParkourRestartReq = new BlitzRushParkourRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushParkourRestartRsp$Type extends MessageType<BlitzRushParkourRestartRsp> {
    constructor() {
        super("com.midnights.game.BlitzRushParkourRestartRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlitzRushParkourRestartRsp>): BlitzRushParkourRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlitzRushParkourRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlitzRushParkourRestartRsp): BlitzRushParkourRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 group_id */ 15:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlitzRushParkourRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 group_id = 15; */
        if (message.groupId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushParkourRestartRsp
 */
export const BlitzRushParkourRestartRsp = new BlitzRushParkourRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChessActivityDetailInfo$Type extends MessageType<ChessActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.ChessActivityDetailInfo", [
            { no: 4, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_teach_dungeon_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "obtained_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "available_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "finished_map_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "punish_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChessActivityDetailInfo>): ChessActivityDetailInfo {
        const message = { finishedMapIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChessActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChessActivityDetailInfo): ChessActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 4:
                    message.level = reader.uint32();
                    break;
                case /* optional bool is_teach_dungeon_finished */ 9:
                    message.isTeachDungeonFinished = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 14:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 obtained_exp */ 8:
                    message.obtainedExp = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 5:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 available_exp */ 2:
                    message.availableExp = reader.uint32();
                    break;
                case /* optional uint32 exp */ 13:
                    message.exp = reader.uint32();
                    break;
                case /* repeated uint32 finished_map_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedMapIdList.push(reader.uint32());
                    else
                        message.finishedMapIdList.push(reader.uint32());
                    break;
                case /* optional uint32 punish_over_time */ 3:
                    message.punishOverTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChessActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.level);
        /* optional bool is_teach_dungeon_finished = 9; */
        if (message.isTeachDungeonFinished !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isTeachDungeonFinished);
        /* optional uint32 content_close_time = 14; */
        if (message.contentCloseTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 obtained_exp = 8; */
        if (message.obtainedExp !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.obtainedExp);
        /* optional bool is_content_closed = 5; */
        if (message.isContentClosed !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 available_exp = 2; */
        if (message.availableExp !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.availableExp);
        /* optional uint32 exp = 13; */
        if (message.exp !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.exp);
        /* repeated uint32 finished_map_id_list = 1; */
        for (let i = 0; i < message.finishedMapIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.finishedMapIdList[i]);
        /* optional uint32 punish_over_time = 3; */
        if (message.punishOverTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.punishOverTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChessActivityDetailInfo
 */
export const ChessActivityDetailInfo = new ChessActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterChessDungeonReq$Type extends MessageType<EnterChessDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterChessDungeonReq", [
            { no: 12, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterChessDungeonReq>): EnterChessDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterChessDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterChessDungeonReq): EnterChessDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 map_id */ 12:
                    message.mapId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterChessDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 map_id = 12; */
        if (message.mapId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mapId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterChessDungeonReq
 */
export const EnterChessDungeonReq = new EnterChessDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterChessDungeonRsp$Type extends MessageType<EnterChessDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterChessDungeonRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterChessDungeonRsp>): EnterChessDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterChessDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterChessDungeonRsp): EnterChessDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 map_id */ 13:
                    message.mapId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterChessDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 map_id = 13; */
        if (message.mapId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.mapId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterChessDungeonRsp
 */
export const EnterChessDungeonRsp = new EnterChessDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapHostInfoNotify$Type extends MessageType<TreasureMapHostInfoNotify> {
    constructor() {
        super("com.midnights.game.TreasureMapHostInfoNotify", [
            { no: 8, name: "mp_challenge_region_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureMapHostInfoNotify>): TreasureMapHostInfoNotify {
        const message = { mpChallengeRegionList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureMapHostInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureMapHostInfoNotify): TreasureMapHostInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 mp_challenge_region_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.mpChallengeRegionList.push(reader.uint32());
                    else
                        message.mpChallengeRegionList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureMapHostInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 mp_challenge_region_list = 8; */
        for (let i = 0; i < message.mpChallengeRegionList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.mpChallengeRegionList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapHostInfoNotify
 */
export const TreasureMapHostInfoNotify = new TreasureMapHostInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoActivityDetailInfo$Type extends MessageType<SumoActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.SumoActivityDetailInfo", [
            { no: 11, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "sumo_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => SumoStageData } },
            { no: 14, name: "last_stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoActivityDetailInfo>): SumoActivityDetailInfo {
        const message = { sumoStageMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoActivityDetailInfo): SumoActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 11:
                    message.difficultyId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.SumoStageData> sumo_stage_map */ 13:
                    this.binaryReadMap13(message.sumoStageMap, reader, options);
                    break;
                case /* optional uint32 last_stage_id */ 14:
                    message.lastStageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap13(map: SumoActivityDetailInfo["sumoStageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SumoActivityDetailInfo["sumoStageMap"] | undefined, val: SumoActivityDetailInfo["sumoStageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = SumoStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SumoActivityDetailInfo.sumo_stage_map");
            }
        }
        map[key ?? 0] = val ?? SumoStageData.create();
    }
    internalBinaryWrite(message: SumoActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty_id = 11; */
        if (message.difficultyId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.difficultyId);
        /* map<uint32, com.midnights.game.SumoStageData> sumo_stage_map = 13; */
        for (let k of Object.keys(message.sumoStageMap)) {
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            SumoStageData.internalBinaryWrite(message.sumoStageMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 last_stage_id = 14; */
        if (message.lastStageId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.lastStageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoActivityDetailInfo
 */
export const SumoActivityDetailInfo = new SumoActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoAvatarInfo$Type extends MessageType<SumoAvatarInfo> {
    constructor() {
        super("com.midnights.game.SumoAvatarInfo", [
            { no: 2, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SumoAvatarInfo>): SumoAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoAvatarInfo): SumoAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 2:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 1:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_trial = 2; */
        if (message.isTrial !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 1; */
        if (message.avatarId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoAvatarInfo
 */
export const SumoAvatarInfo = new SumoAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoTeamData$Type extends MessageType<SumoTeamData> {
    constructor() {
        super("com.midnights.game.SumoTeamData", [
            { no: 14, name: "skill_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<SumoTeamData>): SumoTeamData {
        const message = { skillIdList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoTeamData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoTeamData): SumoTeamData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 skill_id_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillIdList.push(reader.uint32());
                    else
                        message.skillIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.SumoAvatarInfo avatar_info_list */ 3:
                    message.avatarInfoList.push(SumoAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoTeamData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 skill_id_list = 14; */
        for (let i = 0; i < message.skillIdList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.skillIdList[i]);
        /* repeated com.midnights.game.SumoAvatarInfo avatar_info_list = 3; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            SumoAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoTeamData
 */
export const SumoTeamData = new SumoTeamData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoStageData$Type extends MessageType<SumoStageData> {
    constructor() {
        super("com.midnights.game.SumoStageData", [
            { no: 1, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoTeamData },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SumoStageData>): SumoStageData {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoStageData): SumoStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_score */ 1:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 3:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 7:
                    message.teamList.push(SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 max_score = 1; */
        if (message.maxScore !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 3; */
        if (message.stageId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoTeamData team_list = 7; */
        for (let i = 0; i < message.teamList.length; i++)
            SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoStageData
 */
export const SumoStageData = new SumoStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSaveTeamReq$Type extends MessageType<SumoSaveTeamReq> {
    constructor() {
        super("com.midnights.game.SumoSaveTeamReq", [
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoTeamData }
        ]);
    }
    create(value?: PartialMessage<SumoSaveTeamReq>): SumoSaveTeamReq {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSaveTeamReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSaveTeamReq): SumoSaveTeamReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 12:
                    message.teamList.push(SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSaveTeamReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.activityId);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.SumoTeamData team_list = 12; */
        for (let i = 0; i < message.teamList.length; i++)
            SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSaveTeamReq
 */
export const SumoSaveTeamReq = new SumoSaveTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSaveTeamRsp$Type extends MessageType<SumoSaveTeamRsp> {
    constructor() {
        super("com.midnights.game.SumoSaveTeamRsp", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoTeamData },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoSaveTeamRsp>): SumoSaveTeamRsp {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSaveTeamRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSaveTeamRsp): SumoSaveTeamRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 13:
                    message.teamList.push(SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSaveTeamRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.SumoTeamData team_list = 13; */
        for (let i = 0; i < message.teamList.length; i++)
            SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSaveTeamRsp
 */
export const SumoSaveTeamRsp = new SumoSaveTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSelectTeamAndEnterDungeonReq$Type extends MessageType<SumoSelectTeamAndEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.SumoSelectTeamAndEnterDungeonReq", [
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoTeamData }
        ]);
    }
    create(value?: PartialMessage<SumoSelectTeamAndEnterDungeonReq>): SumoSelectTeamAndEnterDungeonReq {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSelectTeamAndEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSelectTeamAndEnterDungeonReq): SumoSelectTeamAndEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 4:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 10:
                    message.teamList.push(SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSelectTeamAndEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activityId);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_id = 4; */
        if (message.difficultyId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.SumoTeamData team_list = 10; */
        for (let i = 0; i < message.teamList.length; i++)
            SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonReq
 */
export const SumoSelectTeamAndEnterDungeonReq = new SumoSelectTeamAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSelectTeamAndEnterDungeonRsp$Type extends MessageType<SumoSelectTeamAndEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.SumoSelectTeamAndEnterDungeonRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoTeamData }
        ]);
    }
    create(value?: PartialMessage<SumoSelectTeamAndEnterDungeonRsp>): SumoSelectTeamAndEnterDungeonRsp {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSelectTeamAndEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSelectTeamAndEnterDungeonRsp): SumoSelectTeamAndEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 12:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 2:
                    message.teamList.push(SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSelectTeamAndEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activityId);
        /* optional uint32 difficulty_id = 12; */
        if (message.difficultyId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoTeamData team_list = 2; */
        for (let i = 0; i < message.teamList.length; i++)
            SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonRsp
 */
export const SumoSelectTeamAndEnterDungeonRsp = new SumoSelectTeamAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonSettleNotify$Type extends MessageType<SumoDungeonSettleNotify> {
    constructor() {
        super("com.midnights.game.SumoDungeonSettleNotify", [
            { no: 7, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "kill_elite_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "kill_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SumoDungeonSettleNotify>): SumoDungeonSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoDungeonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoDungeonSettleNotify): SumoDungeonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 7:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 kill_elite_monster_num */ 15:
                    message.killEliteMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 kill_monster_num */ 4:
                    message.killMonsterNum = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 5:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoDungeonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 final_score = 7; */
        if (message.finalScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 kill_elite_monster_num = 15; */
        if (message.killEliteMonsterNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.killEliteMonsterNum);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* optional uint32 kill_monster_num = 4; */
        if (message.killMonsterNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.killMonsterNum);
        /* optional bool is_new_record = 5; */
        if (message.isNewRecord !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonSettleNotify
 */
export const SumoDungeonSettleNotify = new SumoDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonAvatar$Type extends MessageType<SumoDungeonAvatar> {
    constructor() {
        super("com.midnights.game.SumoDungeonAvatar", [
            { no: 11, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_avlive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SumoDungeonAvatar>): SumoDungeonAvatar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoDungeonAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoDungeonAvatar): SumoDungeonAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 11:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_avlive */ 13:
                    message.isAvlive = reader.bool();
                    break;
                case /* optional bool is_trial */ 4:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoDungeonAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_guid = 11; */
        if (message.avatarGuid !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.avatarGuid);
        /* optional bool is_avlive = 13; */
        if (message.isAvlive !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isAvlive);
        /* optional bool is_trial = 4; */
        if (message.isTrial !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonAvatar
 */
export const SumoDungeonAvatar = new SumoDungeonAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonTeam$Type extends MessageType<SumoDungeonTeam> {
    constructor() {
        super("com.midnights.game.SumoDungeonTeam", [
            { no: 15, name: "dungeon_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoDungeonAvatar }
        ]);
    }
    create(value?: PartialMessage<SumoDungeonTeam>): SumoDungeonTeam {
        const message = { dungeonAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoDungeonTeam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoDungeonTeam): SumoDungeonTeam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SumoDungeonAvatar dungeon_avatar_list */ 15:
                    message.dungeonAvatarList.push(SumoDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoDungeonTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SumoDungeonAvatar dungeon_avatar_list = 15; */
        for (let i = 0; i < message.dungeonAvatarList.length; i++)
            SumoDungeonAvatar.internalBinaryWrite(message.dungeonAvatarList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonTeam
 */
export const SumoDungeonTeam = new SumoDungeonTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoEnterDungeonNotify$Type extends MessageType<SumoEnterDungeonNotify> {
    constructor() {
        super("com.midnights.game.SumoEnterDungeonNotify", [
            { no: 15, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dungeon_team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoDungeonTeam },
            { no: 10, name: "no_switch_punish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoEnterDungeonNotify>): SumoEnterDungeonNotify {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoEnterDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoEnterDungeonNotify): SumoEnterDungeonNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 11:
                    message.dungeonTeamList.push(SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 no_switch_punish_time */ 10:
                    message.noSwitchPunishTime = reader.uint32();
                    break;
                case /* optional uint32 next_valid_switch_time */ 13:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 cur_team_index */ 5:
                    message.curTeamIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoEnterDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 15; */
        if (message.activityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 no_switch_punish_time = 10; */
        if (message.noSwitchPunishTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.noSwitchPunishTime);
        /* optional uint32 next_valid_switch_time = 13; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.nextValidSwitchTime);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* optional uint32 cur_team_index = 5; */
        if (message.curTeamIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.curTeamIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoEnterDungeonNotify
 */
export const SumoEnterDungeonNotify = new SumoEnterDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSwitchTeamReq$Type extends MessageType<SumoSwitchTeamReq> {
    constructor() {
        super("com.midnights.game.SumoSwitchTeamReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoSwitchTeamReq>): SumoSwitchTeamReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSwitchTeamReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSwitchTeamReq): SumoSwitchTeamReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 5:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSwitchTeamReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional uint32 activity_id = 5; */
        if (message.activityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSwitchTeamReq
 */
export const SumoSwitchTeamReq = new SumoSwitchTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSwitchTeamRsp$Type extends MessageType<SumoSwitchTeamRsp> {
    constructor() {
        super("com.midnights.game.SumoSwitchTeamRsp", [
            { no: 7, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoDungeonTeam },
            { no: 6, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoSwitchTeamRsp>): SumoSwitchTeamRsp {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSwitchTeamRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSwitchTeamRsp): SumoSwitchTeamRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 next_valid_switch_time */ 7:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 10:
                    message.dungeonTeamList.push(SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 activity_id */ 6:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cur_team_index */ 11:
                    message.curTeamIndex = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSwitchTeamRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 next_valid_switch_time = 7; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.nextValidSwitchTime);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 10; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 6; */
        if (message.activityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 cur_team_index = 11; */
        if (message.curTeamIndex !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.curTeamIndex);
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSwitchTeamRsp
 */
export const SumoSwitchTeamRsp = new SumoSwitchTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoLeaveDungeonNotify$Type extends MessageType<SumoLeaveDungeonNotify> {
    constructor() {
        super("com.midnights.game.SumoLeaveDungeonNotify", []);
    }
    create(value?: PartialMessage<SumoLeaveDungeonNotify>): SumoLeaveDungeonNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoLeaveDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoLeaveDungeonNotify): SumoLeaveDungeonNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SumoLeaveDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoLeaveDungeonNotify
 */
export const SumoLeaveDungeonNotify = new SumoLeaveDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoRestartDungeonReq$Type extends MessageType<SumoRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.SumoRestartDungeonReq", []);
    }
    create(value?: PartialMessage<SumoRestartDungeonReq>): SumoRestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoRestartDungeonReq): SumoRestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SumoRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoRestartDungeonReq
 */
export const SumoRestartDungeonReq = new SumoRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoRestartDungeonRsp$Type extends MessageType<SumoRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.SumoRestartDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoRestartDungeonRsp>): SumoRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoRestartDungeonRsp): SumoRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoRestartDungeonRsp
 */
export const SumoRestartDungeonRsp = new SumoRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityDisableTransferPointInteractionNotify$Type extends MessageType<ActivityDisableTransferPointInteractionNotify> {
    constructor() {
        super("com.midnights.game.ActivityDisableTransferPointInteractionNotify", [
            { no: 10, name: "is_disable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scene_point_pair", kind: "message", T: () => Uint32Pair }
        ]);
    }
    create(value?: PartialMessage<ActivityDisableTransferPointInteractionNotify>): ActivityDisableTransferPointInteractionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityDisableTransferPointInteractionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityDisableTransferPointInteractionNotify): ActivityDisableTransferPointInteractionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_disable */ 10:
                    message.isDisable = reader.bool();
                    break;
                case /* optional com.midnights.game.Uint32Pair scene_point_pair */ 5:
                    message.scenePointPair = Uint32Pair.internalBinaryRead(reader, reader.uint32(), options, message.scenePointPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityDisableTransferPointInteractionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_disable = 10; */
        if (message.isDisable !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isDisable);
        /* optional com.midnights.game.Uint32Pair scene_point_pair = 5; */
        if (message.scenePointPair)
            Uint32Pair.internalBinaryWrite(message.scenePointPair, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityDisableTransferPointInteractionNotify
 */
export const ActivityDisableTransferPointInteractionNotify = new ActivityDisableTransferPointInteractionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSetNoSwitchPunishTimeNotify$Type extends MessageType<SumoSetNoSwitchPunishTimeNotify> {
    constructor() {
        super("com.midnights.game.SumoSetNoSwitchPunishTimeNotify", [
            { no: 15, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dungeon_team_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SumoDungeonTeam },
            { no: 2, name: "no_switch_punish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SumoSetNoSwitchPunishTimeNotify>): SumoSetNoSwitchPunishTimeNotify {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SumoSetNoSwitchPunishTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SumoSetNoSwitchPunishTimeNotify): SumoSetNoSwitchPunishTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_team_index */ 15:
                    message.curTeamIndex = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 11:
                    message.dungeonTeamList.push(SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 no_switch_punish_time */ 2:
                    message.noSwitchPunishTime = reader.uint32();
                    break;
                case /* optional uint32 next_valid_switch_time */ 14:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SumoSetNoSwitchPunishTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_team_index = 15; */
        if (message.curTeamIndex !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.curTeamIndex);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 no_switch_punish_time = 2; */
        if (message.noSwitchPunishTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.noSwitchPunishTime);
        /* optional uint32 next_valid_switch_time = 14; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.nextValidSwitchTime);
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSetNoSwitchPunishTimeNotify
 */
export const SumoSetNoSwitchPunishTimeNotify = new SumoSetNoSwitchPunishTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoonfinTrialLevelInfo$Type extends MessageType<MoonfinTrialLevelInfo> {
    constructor() {
        super("com.midnights.game.MoonfinTrialLevelInfo", [
            { no: 3, name: "best_record", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MoonfinTrialLevelInfo>): MoonfinTrialLevelInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoonfinTrialLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoonfinTrialLevelInfo): MoonfinTrialLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_record */ 3:
                    message.bestRecord = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MoonfinTrialLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_record = 3; */
        if (message.bestRecord !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.bestRecord);
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MoonfinTrialLevelInfo
 */
export const MoonfinTrialLevelInfo = new MoonfinTrialLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoonfinTrialActivityDetailInfo$Type extends MessageType<MoonfinTrialActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.MoonfinTrialActivityDetailInfo", [
            { no: 5, name: "level_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => MoonfinTrialLevelInfo } },
            { no: 11, name: "special_fish_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MoonfinTrialActivityDetailInfo>): MoonfinTrialActivityDetailInfo {
        const message = { levelInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MoonfinTrialActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MoonfinTrialActivityDetailInfo): MoonfinTrialActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.MoonfinTrialLevelInfo> level_info_map */ 5:
                    this.binaryReadMap5(message.levelInfoMap, reader, options);
                    break;
                case /* optional uint32 special_fish_count */ 11:
                    message.specialFishCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: MoonfinTrialActivityDetailInfo["levelInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MoonfinTrialActivityDetailInfo["levelInfoMap"] | undefined, val: MoonfinTrialActivityDetailInfo["levelInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = MoonfinTrialLevelInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MoonfinTrialActivityDetailInfo.level_info_map");
            }
        }
        map[key ?? 0] = val ?? MoonfinTrialLevelInfo.create();
    }
    internalBinaryWrite(message: MoonfinTrialActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.MoonfinTrialLevelInfo> level_info_map = 5; */
        for (let k of Object.keys(message.levelInfoMap)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            MoonfinTrialLevelInfo.internalBinaryWrite(message.levelInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 special_fish_count = 11; */
        if (message.specialFishCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.specialFishCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MoonfinTrialActivityDetailInfo
 */
export const MoonfinTrialActivityDetailInfo = new MoonfinTrialActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FishingGallerySettleNotify$Type extends MessageType<FishingGallerySettleNotify> {
    constructor() {
        super("com.midnights.game.FishingGallerySettleNotify", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "settle_info", kind: "message", T: () => FishingGallerySettleInfo }
        ]);
    }
    create(value?: PartialMessage<FishingGallerySettleNotify>): FishingGallerySettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FishingGallerySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FishingGallerySettleNotify): FishingGallerySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional com.midnights.game.FishingGallerySettleInfo settle_info */ 13:
                    message.settleInfo = FishingGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FishingGallerySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional com.midnights.game.FishingGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            FishingGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishingGallerySettleNotify
 */
export const FishingGallerySettleNotify = new FishingGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPoint$Type extends MessageType<LunaRiteHintPoint> {
    constructor() {
        super("com.midnights.game.LunaRiteHintPoint", [
            { no: 11, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintPointType", LunaRiteHintPointType] },
            { no: 10, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<LunaRiteHintPoint>): LunaRiteHintPoint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteHintPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteHintPoint): LunaRiteHintPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 11:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 7:
                    message.index = reader.uint32();
                    break;
                case /* optional com.midnights.game.LunaRiteHintPointType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteHintPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 11; */
        if (message.areaId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 7; */
        if (message.index !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.index);
        /* optional com.midnights.game.LunaRiteHintPointType type = 2; */
        if (message.type !== undefined)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPoint
 */
export const LunaRiteHintPoint = new LunaRiteHintPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteAreaInfo$Type extends MessageType<LunaRiteAreaInfo> {
    constructor() {
        super("com.midnights.game.LunaRiteAreaInfo", [
            { no: 11, name: "sacrifice_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "hint_status", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintStatusType", LunaRiteHintStatusType] },
            { no: 4, name: "sacrifice_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteAreaInfo>): LunaRiteAreaInfo {
        const message = { sacrificeList: [], sacrificeRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteAreaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteAreaInfo): LunaRiteAreaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 sacrifice_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeList.push(reader.uint32());
                    else
                        message.sacrificeList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.LunaRiteHintStatusType hint_status */ 7:
                    message.hintStatus = reader.int32();
                    break;
                case /* repeated uint32 sacrifice_reward_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeRewardList.push(reader.uint32());
                    else
                        message.sacrificeRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 area_id */ 8:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 6:
                    message.challengeIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteAreaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 sacrifice_list = 11; */
        for (let i = 0; i < message.sacrificeList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.sacrificeList[i]);
        /* optional com.midnights.game.LunaRiteHintStatusType hint_status = 7; */
        if (message.hintStatus !== undefined)
            writer.tag(7, WireType.Varint).int32(message.hintStatus);
        /* repeated uint32 sacrifice_reward_list = 4; */
        for (let i = 0; i < message.sacrificeRewardList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.sacrificeRewardList[i]);
        /* optional uint32 area_id = 8; */
        if (message.areaId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.areaId);
        /* optional uint32 challenge_index = 6; */
        if (message.challengeIndex !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteAreaInfo
 */
export const LunaRiteAreaInfo = new LunaRiteAreaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteDetailInfo$Type extends MessageType<LunaRiteDetailInfo> {
    constructor() {
        super("com.midnights.game.LunaRiteDetailInfo", [
            { no: 3, name: "hint_point", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LunaRiteHintPoint },
            { no: 13, name: "area_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LunaRiteAreaInfo }
        ]);
    }
    create(value?: PartialMessage<LunaRiteDetailInfo>): LunaRiteDetailInfo {
        const message = { hintPoint: [], areaInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteDetailInfo): LunaRiteDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LunaRiteHintPoint hint_point */ 3:
                    message.hintPoint.push(LunaRiteHintPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.LunaRiteAreaInfo area_info_list */ 13:
                    message.areaInfoList.push(LunaRiteAreaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.LunaRiteHintPoint hint_point = 3; */
        for (let i = 0; i < message.hintPoint.length; i++)
            LunaRiteHintPoint.internalBinaryWrite(message.hintPoint[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.LunaRiteAreaInfo area_info_list = 13; */
        for (let i = 0; i < message.areaInfoList.length; i++)
            LunaRiteAreaInfo.internalBinaryWrite(message.areaInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteDetailInfo
 */
export const LunaRiteDetailInfo = new LunaRiteDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteSacrificeReq$Type extends MessageType<LunaRiteSacrificeReq> {
    constructor() {
        super("com.midnights.game.LunaRiteSacrificeReq", [
            { no: 15, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteSacrificeReq>): LunaRiteSacrificeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteSacrificeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteSacrificeReq): LunaRiteSacrificeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 15:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 14:
                    message.index = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteSacrificeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 15; */
        if (message.areaId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 14; */
        if (message.index !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteSacrificeReq
 */
export const LunaRiteSacrificeReq = new LunaRiteSacrificeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteSacrificeRsp$Type extends MessageType<LunaRiteSacrificeRsp> {
    constructor() {
        super("com.midnights.game.LunaRiteSacrificeRsp", [
            { no: 13, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "sacrifice_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteSacrificeRsp>): LunaRiteSacrificeRsp {
        const message = { sacrificeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteSacrificeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteSacrificeRsp): LunaRiteSacrificeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 13:
                    message.areaId = reader.uint32();
                    break;
                case /* repeated uint32 sacrifice_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeList.push(reader.uint32());
                    else
                        message.sacrificeList.push(reader.uint32());
                    break;
                case /* optional uint32 index */ 8:
                    message.index = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteSacrificeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 13; */
        if (message.areaId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.areaId);
        /* repeated uint32 sacrifice_list = 14; */
        for (let i = 0; i < message.sacrificeList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.sacrificeList[i]);
        /* optional uint32 index = 8; */
        if (message.index !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.index);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteSacrificeRsp
 */
export const LunaRiteSacrificeRsp = new LunaRiteSacrificeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteTakeSacrificeRewardReq$Type extends MessageType<LunaRiteTakeSacrificeRewardReq> {
    constructor() {
        super("com.midnights.game.LunaRiteTakeSacrificeRewardReq", [
            { no: 11, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteTakeSacrificeRewardReq>): LunaRiteTakeSacrificeRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteTakeSacrificeRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteTakeSacrificeRewardReq): LunaRiteTakeSacrificeRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 11:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 3:
                    message.index = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteTakeSacrificeRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 11; */
        if (message.areaId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 3; */
        if (message.index !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardReq
 */
export const LunaRiteTakeSacrificeRewardReq = new LunaRiteTakeSacrificeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteTakeSacrificeRewardRsp$Type extends MessageType<LunaRiteTakeSacrificeRewardRsp> {
    constructor() {
        super("com.midnights.game.LunaRiteTakeSacrificeRewardRsp", [
            { no: 11, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sacrifice_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "sacrifice_reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteTakeSacrificeRewardRsp>): LunaRiteTakeSacrificeRewardRsp {
        const message = { sacrificeRewardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteTakeSacrificeRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteTakeSacrificeRewardRsp): LunaRiteTakeSacrificeRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 index */ 11:
                    message.index = reader.uint32();
                    break;
                case /* repeated uint32 sacrifice_reward_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeRewardList.push(reader.uint32());
                    else
                        message.sacrificeRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 sacrifice_reward_index */ 14:
                    message.sacrificeRewardIndex = reader.uint32();
                    break;
                case /* optional uint32 area_id */ 6:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteTakeSacrificeRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 index = 11; */
        if (message.index !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.index);
        /* repeated uint32 sacrifice_reward_list = 2; */
        for (let i = 0; i < message.sacrificeRewardList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.sacrificeRewardList[i]);
        /* optional uint32 sacrifice_reward_index = 14; */
        if (message.sacrificeRewardIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.sacrificeRewardIndex);
        /* optional uint32 area_id = 6; */
        if (message.areaId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardRsp
 */
export const LunaRiteTakeSacrificeRewardRsp = new LunaRiteTakeSacrificeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointReq$Type extends MessageType<LunaRiteHintPointReq> {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointReq", [
            { no: 13, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteHintPointReq>): LunaRiteHintPointReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteHintPointReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteHintPointReq): LunaRiteHintPointReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 13:
                    message.areaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteHintPointReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 13; */
        if (message.areaId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointReq
 */
export const LunaRiteHintPointReq = new LunaRiteHintPointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointRsp$Type extends MessageType<LunaRiteHintPointRsp> {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointRsp", [
            { no: 4, name: "hint_status", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintStatusType", LunaRiteHintStatusType] },
            { no: 5, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "hint_point", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LunaRiteHintPoint }
        ]);
    }
    create(value?: PartialMessage<LunaRiteHintPointRsp>): LunaRiteHintPointRsp {
        const message = { hintPoint: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteHintPointRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteHintPointRsp): LunaRiteHintPointRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LunaRiteHintStatusType hint_status */ 4:
                    message.hintStatus = reader.int32();
                    break;
                case /* optional uint32 area_id */ 5:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.LunaRiteHintPoint hint_point */ 9:
                    message.hintPoint.push(LunaRiteHintPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteHintPointRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LunaRiteHintStatusType hint_status = 4; */
        if (message.hintStatus !== undefined)
            writer.tag(4, WireType.Varint).int32(message.hintStatus);
        /* optional uint32 area_id = 5; */
        if (message.areaId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.LunaRiteHintPoint hint_point = 9; */
        for (let i = 0; i < message.hintPoint.length; i++)
            LunaRiteHintPoint.internalBinaryWrite(message.hintPoint[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointRsp
 */
export const LunaRiteHintPointRsp = new LunaRiteHintPointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointRemoveNotify$Type extends MessageType<LunaRiteHintPointRemoveNotify> {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointRemoveNotify", [
            { no: 14, name: "hint_point_index", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteHintPointRemoveNotify>): LunaRiteHintPointRemoveNotify {
        const message = { hintPointIndex: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteHintPointRemoveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteHintPointRemoveNotify): LunaRiteHintPointRemoveNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 hint_point_index */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hintPointIndex.push(reader.uint32());
                    else
                        message.hintPointIndex.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteHintPointRemoveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 hint_point_index = 14; */
        for (let i = 0; i < message.hintPointIndex.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.hintPointIndex[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointRemoveNotify
 */
export const LunaRiteHintPointRemoveNotify = new LunaRiteHintPointRemoveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteGroupBundleRegisterNotify$Type extends MessageType<LunaRiteGroupBundleRegisterNotify> {
    constructor() {
        super("com.midnights.game.LunaRiteGroupBundleRegisterNotify", [
            { no: 11, name: "group_link_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteGroupBundleRegisterNotify>): LunaRiteGroupBundleRegisterNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteGroupBundleRegisterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteGroupBundleRegisterNotify): LunaRiteGroupBundleRegisterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_link_bundle_id */ 11:
                    message.groupLinkBundleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteGroupBundleRegisterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_link_bundle_id = 11; */
        if (message.groupLinkBundleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.groupLinkBundleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteGroupBundleRegisterNotify
 */
export const LunaRiteGroupBundleRegisterNotify = new LunaRiteGroupBundleRegisterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteAreaFinishNotify$Type extends MessageType<LunaRiteAreaFinishNotify> {
    constructor() {
        super("com.midnights.game.LunaRiteAreaFinishNotify", [
            { no: 2, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LunaRiteAreaFinishNotify>): LunaRiteAreaFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LunaRiteAreaFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LunaRiteAreaFinishNotify): LunaRiteAreaFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 2:
                    message.areaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LunaRiteAreaFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 area_id = 2; */
        if (message.areaId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteAreaFinishNotify
 */
export const LunaRiteAreaFinishNotify = new LunaRiteAreaFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerActivityDetailInfo$Type extends MessageType<PlantFlowerActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.PlantFlowerActivityDetailInfo", [
            { no: 3, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "wish_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "today_seed_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_today_has_awarded", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "used_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerActivityDetailInfo>): PlantFlowerActivityDetailInfo {
        const message = { wishFlowerNumMap: {}, usedFlowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerActivityDetailInfo): PlantFlowerActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 3:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, uint32> wish_flower_num_map */ 10:
                    this.binaryReadMap10(message.wishFlowerNumMap, reader, options);
                    break;
                case /* optional uint32 today_seed_reward_id */ 11:
                    message.todaySeedRewardId = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 1:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional bool is_today_has_awarded */ 13:
                    message.isTodayHasAwarded = reader.bool();
                    break;
                case /* map<uint32, uint32> used_flower_num_map */ 7:
                    this.binaryReadMap7(message.usedFlowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: PlantFlowerActivityDetailInfo["wishFlowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerActivityDetailInfo["wishFlowerNumMap"] | undefined, val: PlantFlowerActivityDetailInfo["wishFlowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerActivityDetailInfo.wish_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap7(map: PlantFlowerActivityDetailInfo["usedFlowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerActivityDetailInfo["usedFlowerNumMap"] | undefined, val: PlantFlowerActivityDetailInfo["usedFlowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerActivityDetailInfo.used_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_content_closed = 3; */
        if (message.isContentClosed !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, uint32> wish_flower_num_map = 10; */
        for (let k of Object.keys(message.wishFlowerNumMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.wishFlowerNumMap[k as any]).join();
        /* optional uint32 today_seed_reward_id = 11; */
        if (message.todaySeedRewardId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.todaySeedRewardId);
        /* optional uint32 day_index = 1; */
        if (message.dayIndex !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dayIndex);
        /* optional bool is_today_has_awarded = 13; */
        if (message.isTodayHasAwarded !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isTodayHasAwarded);
        /* map<uint32, uint32> used_flower_num_map = 7; */
        for (let k of Object.keys(message.usedFlowerNumMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.usedFlowerNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerActivityDetailInfo
 */
export const PlantFlowerActivityDetailInfo = new PlantFlowerActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetSeedInfoReq$Type extends MessageType<PlantFlowerGetSeedInfoReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetSeedInfoReq", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetSeedInfoReq>): PlantFlowerGetSeedInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetSeedInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetSeedInfoReq): PlantFlowerGetSeedInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetSeedInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetSeedInfoReq
 */
export const PlantFlowerGetSeedInfoReq = new PlantFlowerGetSeedInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetSeedInfoRsp$Type extends MessageType<PlantFlowerGetSeedInfoRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetSeedInfoRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "seed_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetSeedInfoRsp>): PlantFlowerGetSeedInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetSeedInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetSeedInfoRsp): PlantFlowerGetSeedInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 seed_reward_id */ 5:
                    message.seedRewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetSeedInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 seed_reward_id = 5; */
        if (message.seedRewardId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.seedRewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetSeedInfoRsp
 */
export const PlantFlowerGetSeedInfoRsp = new PlantFlowerGetSeedInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerTakeSeedRewardReq$Type extends MessageType<PlantFlowerTakeSeedRewardReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerTakeSeedRewardReq", [
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerTakeSeedRewardReq>): PlantFlowerTakeSeedRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerTakeSeedRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerTakeSeedRewardReq): PlantFlowerTakeSeedRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerTakeSeedRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerTakeSeedRewardReq
 */
export const PlantFlowerTakeSeedRewardReq = new PlantFlowerTakeSeedRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerTakeSeedRewardRsp$Type extends MessageType<PlantFlowerTakeSeedRewardRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerTakeSeedRewardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerTakeSeedRewardRsp>): PlantFlowerTakeSeedRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerTakeSeedRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerTakeSeedRewardRsp): PlantFlowerTakeSeedRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerTakeSeedRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerTakeSeedRewardRsp
 */
export const PlantFlowerTakeSeedRewardRsp = new PlantFlowerTakeSeedRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerSetFlowerWishReq$Type extends MessageType<PlantFlowerSetFlowerWishReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerSetFlowerWishReq", [
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerSetFlowerWishReq>): PlantFlowerSetFlowerWishReq {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerSetFlowerWishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerSetFlowerWishReq): PlantFlowerSetFlowerWishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: PlantFlowerSetFlowerWishReq["flowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerSetFlowerWishReq["flowerNumMap"] | undefined, val: PlantFlowerSetFlowerWishReq["flowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerSetFlowerWishReq.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerSetFlowerWishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerNumMap[k as any]).join();
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerSetFlowerWishReq
 */
export const PlantFlowerSetFlowerWishReq = new PlantFlowerSetFlowerWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerSetFlowerWishRsp$Type extends MessageType<PlantFlowerSetFlowerWishRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerSetFlowerWishRsp", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerSetFlowerWishRsp>): PlantFlowerSetFlowerWishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerSetFlowerWishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerSetFlowerWishRsp): PlantFlowerSetFlowerWishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerSetFlowerWishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerSetFlowerWishRsp
 */
export const PlantFlowerSetFlowerWishRsp = new PlantFlowerSetFlowerWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetFriendFlowerWishListReq$Type extends MessageType<PlantFlowerGetFriendFlowerWishListReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetFriendFlowerWishListReq", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetFriendFlowerWishListReq>): PlantFlowerGetFriendFlowerWishListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetFriendFlowerWishListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetFriendFlowerWishListReq): PlantFlowerGetFriendFlowerWishListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetFriendFlowerWishListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListReq
 */
export const PlantFlowerGetFriendFlowerWishListReq = new PlantFlowerGetFriendFlowerWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerFriendFlowerWishData$Type extends MessageType<PlantFlowerFriendFlowerWishData> {
    constructor() {
        super("com.midnights.game.PlantFlowerFriendFlowerWishData", [
            { no: 3, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerFriendFlowerWishData>): PlantFlowerFriendFlowerWishData {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerFriendFlowerWishData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerFriendFlowerWishData): PlantFlowerFriendFlowerWishData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 3:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: PlantFlowerFriendFlowerWishData["flowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerFriendFlowerWishData["flowerNumMap"] | undefined, val: PlantFlowerFriendFlowerWishData["flowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerFriendFlowerWishData.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerFriendFlowerWishData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ProfilePicture profile_picture = 3; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.uid);
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.nickname);
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerFriendFlowerWishData
 */
export const PlantFlowerFriendFlowerWishData = new PlantFlowerFriendFlowerWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetFriendFlowerWishListRsp$Type extends MessageType<PlantFlowerGetFriendFlowerWishListRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "friend_flower_wish_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlantFlowerFriendFlowerWishData }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetFriendFlowerWishListRsp>): PlantFlowerGetFriendFlowerWishListRsp {
        const message = { friendFlowerWishList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetFriendFlowerWishListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetFriendFlowerWishListRsp): PlantFlowerGetFriendFlowerWishListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerFriendFlowerWishData friend_flower_wish_list */ 9:
                    message.friendFlowerWishList.push(PlantFlowerFriendFlowerWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetFriendFlowerWishListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.scheduleId);
        /* repeated com.midnights.game.PlantFlowerFriendFlowerWishData friend_flower_wish_list = 9; */
        for (let i = 0; i < message.friendFlowerWishList.length; i++)
            PlantFlowerFriendFlowerWishData.internalBinaryWrite(message.friendFlowerWishList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp
 */
export const PlantFlowerGetFriendFlowerWishListRsp = new PlantFlowerGetFriendFlowerWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGiveFriendFlowerReq$Type extends MessageType<PlantFlowerGiveFriendFlowerReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerGiveFriendFlowerReq", [
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGiveFriendFlowerReq>): PlantFlowerGiveFriendFlowerReq {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGiveFriendFlowerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGiveFriendFlowerReq): PlantFlowerGiveFriendFlowerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 13:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: PlantFlowerGiveFriendFlowerReq["flowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerGiveFriendFlowerReq["flowerNumMap"] | undefined, val: PlantFlowerGiveFriendFlowerReq["flowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerGiveFriendFlowerReq.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerGiveFriendFlowerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 13; */
        if (message.uid !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerReq
 */
export const PlantFlowerGiveFriendFlowerReq = new PlantFlowerGiveFriendFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGiveFriendFlowerRsp$Type extends MessageType<PlantFlowerGiveFriendFlowerRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerGiveFriendFlowerRsp", [
            { no: 5, name: "limit_flower_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGiveFriendFlowerRsp>): PlantFlowerGiveFriendFlowerRsp {
        const message = { limitFlowerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGiveFriendFlowerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGiveFriendFlowerRsp): PlantFlowerGiveFriendFlowerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_flower_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitFlowerList.push(reader.uint32());
                    else
                        message.limitFlowerList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGiveFriendFlowerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 limit_flower_list = 5; */
        for (let i = 0; i < message.limitFlowerList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.limitFlowerList[i]);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerRsp
 */
export const PlantFlowerGiveFriendFlowerRsp = new PlantFlowerGiveFriendFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetRecvFlowerListReq$Type extends MessageType<PlantFlowerGetRecvFlowerListReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetRecvFlowerListReq", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetRecvFlowerListReq>): PlantFlowerGetRecvFlowerListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetRecvFlowerListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetRecvFlowerListReq): PlantFlowerGetRecvFlowerListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetRecvFlowerListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListReq
 */
export const PlantFlowerGetRecvFlowerListReq = new PlantFlowerGetRecvFlowerListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerRecvFlowerData$Type extends MessageType<PlantFlowerRecvFlowerData> {
    constructor() {
        super("com.midnights.game.PlantFlowerRecvFlowerData", [
            { no: 13, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 5, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerRecvFlowerData>): PlantFlowerRecvFlowerData {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerRecvFlowerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerRecvFlowerData): PlantFlowerRecvFlowerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 13:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                case /* optional uint32 uid */ 9:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 14:
                    this.binaryReadMap14(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: PlantFlowerRecvFlowerData["flowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerRecvFlowerData["flowerNumMap"] | undefined, val: PlantFlowerRecvFlowerData["flowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerRecvFlowerData.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerRecvFlowerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ProfilePicture profile_picture = 13; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional string nickname = 5; */
        if (message.nickname !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.nickname);
        /* optional uint32 uid = 9; */
        if (message.uid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> flower_num_map = 14; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerRecvFlowerData
 */
export const PlantFlowerRecvFlowerData = new PlantFlowerRecvFlowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetRecvFlowerListRsp$Type extends MessageType<PlantFlowerGetRecvFlowerListRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetRecvFlowerListRsp", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "recv_flower_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlantFlowerRecvFlowerData }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetRecvFlowerListRsp>): PlantFlowerGetRecvFlowerListRsp {
        const message = { recvFlowerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetRecvFlowerListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetRecvFlowerListRsp): PlantFlowerGetRecvFlowerListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerRecvFlowerData recv_flower_list */ 4:
                    message.recvFlowerList.push(PlantFlowerRecvFlowerData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetRecvFlowerListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.PlantFlowerRecvFlowerData recv_flower_list = 4; */
        for (let i = 0; i < message.recvFlowerList.length; i++)
            PlantFlowerRecvFlowerData.internalBinaryWrite(message.recvFlowerList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListRsp
 */
export const PlantFlowerGetRecvFlowerListRsp = new PlantFlowerGetRecvFlowerListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerHaveRecvFlowerNotify$Type extends MessageType<PlantFlowerHaveRecvFlowerNotify> {
    constructor() {
        super("com.midnights.game.PlantFlowerHaveRecvFlowerNotify", [
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerHaveRecvFlowerNotify>): PlantFlowerHaveRecvFlowerNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerHaveRecvFlowerNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerHaveRecvFlowerNotify): PlantFlowerHaveRecvFlowerNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerHaveRecvFlowerNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerHaveRecvFlowerNotify
 */
export const PlantFlowerHaveRecvFlowerNotify = new PlantFlowerHaveRecvFlowerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptGiveFlowerReq$Type extends MessageType<PlantFlowerAcceptGiveFlowerReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptGiveFlowerReq", [
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerAcceptGiveFlowerReq>): PlantFlowerAcceptGiveFlowerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerAcceptGiveFlowerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerAcceptGiveFlowerReq): PlantFlowerAcceptGiveFlowerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerAcceptGiveFlowerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerReq
 */
export const PlantFlowerAcceptGiveFlowerReq = new PlantFlowerAcceptGiveFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptFlowerResultInfo$Type extends MessageType<PlantFlowerAcceptFlowerResultInfo> {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptFlowerResultInfo", [
            { no: 4, name: "unaccept_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "accept_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerAcceptFlowerResultInfo>): PlantFlowerAcceptFlowerResultInfo {
        const message = { unacceptFlowerNumMap: {}, acceptFlowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerAcceptFlowerResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerAcceptFlowerResultInfo): PlantFlowerAcceptFlowerResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> unaccept_flower_num_map */ 4:
                    this.binaryReadMap4(message.unacceptFlowerNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 7:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> accept_flower_num_map */ 10:
                    this.binaryReadMap10(message.acceptFlowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: PlantFlowerAcceptFlowerResultInfo["unacceptFlowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerAcceptFlowerResultInfo["unacceptFlowerNumMap"] | undefined, val: PlantFlowerAcceptFlowerResultInfo["unacceptFlowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerAcceptFlowerResultInfo.unaccept_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap10(map: PlantFlowerAcceptFlowerResultInfo["acceptFlowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerAcceptFlowerResultInfo["acceptFlowerNumMap"] | undefined, val: PlantFlowerAcceptFlowerResultInfo["acceptFlowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerAcceptFlowerResultInfo.accept_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerAcceptFlowerResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> unaccept_flower_num_map = 4; */
        for (let k of Object.keys(message.unacceptFlowerNumMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unacceptFlowerNumMap[k as any]).join();
        /* optional uint32 uid = 7; */
        if (message.uid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> accept_flower_num_map = 10; */
        for (let k of Object.keys(message.acceptFlowerNumMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.acceptFlowerNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptFlowerResultInfo
 */
export const PlantFlowerAcceptFlowerResultInfo = new PlantFlowerAcceptFlowerResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptGiveFlowerRsp$Type extends MessageType<PlantFlowerAcceptGiveFlowerRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptGiveFlowerRsp", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "accept_flower_result_info", kind: "message", T: () => PlantFlowerAcceptFlowerResultInfo },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerAcceptGiveFlowerRsp>): PlantFlowerAcceptGiveFlowerRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerAcceptGiveFlowerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerAcceptGiveFlowerRsp): PlantFlowerAcceptGiveFlowerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info */ 15:
                    message.acceptFlowerResultInfo = PlantFlowerAcceptFlowerResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptFlowerResultInfo);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerAcceptGiveFlowerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        /* optional com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 15; */
        if (message.acceptFlowerResultInfo)
            PlantFlowerAcceptFlowerResultInfo.internalBinaryWrite(message.acceptFlowerResultInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerRsp
 */
export const PlantFlowerAcceptGiveFlowerRsp = new PlantFlowerAcceptGiveFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptAllGiveFlowerReq$Type extends MessageType<PlantFlowerAcceptAllGiveFlowerReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq", [
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerAcceptAllGiveFlowerReq>): PlantFlowerAcceptAllGiveFlowerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerAcceptAllGiveFlowerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerAcceptAllGiveFlowerReq): PlantFlowerAcceptAllGiveFlowerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerAcceptAllGiveFlowerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq
 */
export const PlantFlowerAcceptAllGiveFlowerReq = new PlantFlowerAcceptAllGiveFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptAllGiveFlowerRsp$Type extends MessageType<PlantFlowerAcceptAllGiveFlowerRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp", [
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "accept_flower_result_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlantFlowerAcceptFlowerResultInfo }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerAcceptAllGiveFlowerRsp>): PlantFlowerAcceptAllGiveFlowerRsp {
        const message = { acceptFlowerResultInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerAcceptAllGiveFlowerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerAcceptAllGiveFlowerRsp): PlantFlowerAcceptAllGiveFlowerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list */ 13:
                    message.acceptFlowerResultInfoList.push(PlantFlowerAcceptFlowerResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerAcceptAllGiveFlowerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13; */
        for (let i = 0; i < message.acceptFlowerResultInfoList.length; i++)
            PlantFlowerAcceptFlowerResultInfo.internalBinaryWrite(message.acceptFlowerResultInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp
 */
export const PlantFlowerAcceptAllGiveFlowerRsp = new PlantFlowerAcceptAllGiveFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetCanGiveFriendFlowerReq$Type extends MessageType<PlantFlowerGetCanGiveFriendFlowerReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetCanGiveFriendFlowerReq>): PlantFlowerGetCanGiveFriendFlowerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetCanGiveFriendFlowerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetCanGiveFriendFlowerReq): PlantFlowerGetCanGiveFriendFlowerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerGetCanGiveFriendFlowerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq
 */
export const PlantFlowerGetCanGiveFriendFlowerReq = new PlantFlowerGetCanGiveFriendFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetCanGiveFriendFlowerRsp$Type extends MessageType<PlantFlowerGetCanGiveFriendFlowerRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp", [
            { no: 6, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerGetCanGiveFriendFlowerRsp>): PlantFlowerGetCanGiveFriendFlowerRsp {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerGetCanGiveFriendFlowerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerGetCanGiveFriendFlowerRsp): PlantFlowerGetCanGiveFriendFlowerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> flower_num_map */ 6:
                    this.binaryReadMap6(message.flowerNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: PlantFlowerGetCanGiveFriendFlowerRsp["flowerNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerGetCanGiveFriendFlowerRsp["flowerNumMap"] | undefined, val: PlantFlowerGetCanGiveFriendFlowerRsp["flowerNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerGetCanGiveFriendFlowerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> flower_num_map = 6; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerNumMap[k as any]).join();
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp
 */
export const PlantFlowerGetCanGiveFriendFlowerRsp = new PlantFlowerGetCanGiveFriendFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerEditFlowerCombinationReq$Type extends MessageType<PlantFlowerEditFlowerCombinationReq> {
    constructor() {
        super("com.midnights.game.PlantFlowerEditFlowerCombinationReq", [
            { no: 10, name: "flower_combination_info", kind: "message", T: () => CustomGadgetTreeInfo },
            { no: 14, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerEditFlowerCombinationReq>): PlantFlowerEditFlowerCombinationReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerEditFlowerCombinationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerEditFlowerCombinationReq): PlantFlowerEditFlowerCombinationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CustomGadgetTreeInfo flower_combination_info */ 10:
                    message.flowerCombinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.flowerCombinationInfo);
                    break;
                case /* optional uint32 entity_id */ 14:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerEditFlowerCombinationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.CustomGadgetTreeInfo flower_combination_info = 10; */
        if (message.flowerCombinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.flowerCombinationInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 14; */
        if (message.entityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.entityId);
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationReq
 */
export const PlantFlowerEditFlowerCombinationReq = new PlantFlowerEditFlowerCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerEditFlowerCombinationRsp$Type extends MessageType<PlantFlowerEditFlowerCombinationRsp> {
    constructor() {
        super("com.midnights.game.PlantFlowerEditFlowerCombinationRsp", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerEditFlowerCombinationRsp>): PlantFlowerEditFlowerCombinationRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerEditFlowerCombinationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerEditFlowerCombinationRsp): PlantFlowerEditFlowerCombinationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlantFlowerEditFlowerCombinationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationRsp
 */
export const PlantFlowerEditFlowerCombinationRsp = new PlantFlowerEditFlowerCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameRecord$Type extends MessageType<MusicGameRecord> {
    constructor() {
        super("com.midnights.game.MusicGameRecord", [
            { no: 9, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MusicGameRecord>): MusicGameRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameRecord): MusicGameRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_unlock */ 9:
                    message.isUnlock = reader.bool();
                    break;
                case /* optional uint32 max_score */ 11:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 max_combo */ 6:
                    message.maxCombo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicGameRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_unlock = 9; */
        if (message.isUnlock !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isUnlock);
        /* optional uint32 max_score = 11; */
        if (message.maxScore !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 max_combo = 6; */
        if (message.maxCombo !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.maxCombo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameRecord
 */
export const MusicGameRecord = new MusicGameRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameActivityDetailInfo$Type extends MessageType<MusicGameActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.MusicGameActivityDetailInfo", [
            { no: 4, name: "ugc_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UgcMusicBriefInfo },
            { no: 7, name: "ugc_search_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UgcMusicBriefInfo },
            { no: 8, name: "music_game_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => MusicGameRecord } }
        ]);
    }
    create(value?: PartialMessage<MusicGameActivityDetailInfo>): MusicGameActivityDetailInfo {
        const message = { ugcRecordList: [], ugcSearchList: [], musicGameRecordMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameActivityDetailInfo): MusicGameActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.UgcMusicBriefInfo ugc_record_list */ 4:
                    message.ugcRecordList.push(UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.UgcMusicBriefInfo ugc_search_list */ 7:
                    message.ugcSearchList.push(UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, com.midnights.game.MusicGameRecord> music_game_record_map */ 8:
                    this.binaryReadMap8(message.musicGameRecordMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: MusicGameActivityDetailInfo["musicGameRecordMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MusicGameActivityDetailInfo["musicGameRecordMap"] | undefined, val: MusicGameActivityDetailInfo["musicGameRecordMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = MusicGameRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MusicGameActivityDetailInfo.music_game_record_map");
            }
        }
        map[key ?? 0] = val ?? MusicGameRecord.create();
    }
    internalBinaryWrite(message: MusicGameActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.UgcMusicBriefInfo ugc_record_list = 4; */
        for (let i = 0; i < message.ugcRecordList.length; i++)
            UgcMusicBriefInfo.internalBinaryWrite(message.ugcRecordList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.UgcMusicBriefInfo ugc_search_list = 7; */
        for (let i = 0; i < message.ugcSearchList.length; i++)
            UgcMusicBriefInfo.internalBinaryWrite(message.ugcSearchList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.MusicGameRecord> music_game_record_map = 8; */
        for (let k of Object.keys(message.musicGameRecordMap)) {
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            MusicGameRecord.internalBinaryWrite(message.musicGameRecordMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameActivityDetailInfo
 */
export const MusicGameActivityDetailInfo = new MusicGameActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameSettleReq$Type extends MessageType<MusicGameSettleReq> {
    constructor() {
        super("com.midnights.game.MusicGameSettleReq", [
            { no: 384, name: "button_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 795, name: "delay", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "note_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "score_rating", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "restart_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 422, name: "is_custom_delay", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1058, name: "is_full_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 409, name: "speed", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "is_save_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "star_rating", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1953, name: "volume", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "correct_hit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1285, name: "is_custom_speed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MusicGameSettleReq>): MusicGameSettleReq {
        const message = { buttonList: [], noteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameSettleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameSettleReq): MusicGameSettleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 button_list */ 384:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buttonList.push(reader.uint32());
                    else
                        message.buttonList.push(reader.uint32());
                    break;
                case /* optional uint32 delay */ 795:
                    message.delay = reader.uint32();
                    break;
                case /* repeated uint32 note_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.noteList.push(reader.uint32());
                    else
                        message.noteList.push(reader.uint32());
                    break;
                case /* optional uint32 score_rating */ 15:
                    message.scoreRating = reader.uint32();
                    break;
                case /* optional uint32 score */ 9:
                    message.score = reader.uint32();
                    break;
                case /* optional uint64 ugc_guid */ 6:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 restart_times */ 13:
                    message.restartTimes = reader.uint32();
                    break;
                case /* optional bool is_custom_delay */ 422:
                    message.isCustomDelay = reader.bool();
                    break;
                case /* optional uint32 max_combo */ 5:
                    message.maxCombo = reader.uint32();
                    break;
                case /* optional uint32 is_full_combo */ 1058:
                    message.isFullCombo = reader.uint32();
                    break;
                case /* optional float speed */ 409:
                    message.speed = reader.float();
                    break;
                case /* optional bool is_save_score */ 3:
                    message.isSaveScore = reader.bool();
                    break;
                case /* optional uint32 combo */ 1:
                    message.combo = reader.uint32();
                    break;
                case /* optional uint32 music_basic_id */ 7:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional uint32 star_rating */ 2:
                    message.starRating = reader.uint32();
                    break;
                case /* optional uint32 volume */ 1953:
                    message.volume = reader.uint32();
                    break;
                case /* optional uint32 correct_hit */ 14:
                    message.correctHit = reader.uint32();
                    break;
                case /* optional bool is_custom_speed */ 1285:
                    message.isCustomSpeed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicGameSettleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 button_list = 384; */
        for (let i = 0; i < message.buttonList.length; i++)
            writer.tag(384, WireType.Varint).uint32(message.buttonList[i]);
        /* optional uint32 delay = 795; */
        if (message.delay !== undefined)
            writer.tag(795, WireType.Varint).uint32(message.delay);
        /* repeated uint32 note_list = 4; */
        for (let i = 0; i < message.noteList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.noteList[i]);
        /* optional uint32 score_rating = 15; */
        if (message.scoreRating !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scoreRating);
        /* optional uint32 score = 9; */
        if (message.score !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.score);
        /* optional uint64 ugc_guid = 6; */
        if (message.ugcGuid !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.ugcGuid);
        /* optional uint32 restart_times = 13; */
        if (message.restartTimes !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.restartTimes);
        /* optional bool is_custom_delay = 422; */
        if (message.isCustomDelay !== undefined)
            writer.tag(422, WireType.Varint).bool(message.isCustomDelay);
        /* optional uint32 max_combo = 5; */
        if (message.maxCombo !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.maxCombo);
        /* optional uint32 is_full_combo = 1058; */
        if (message.isFullCombo !== undefined)
            writer.tag(1058, WireType.Varint).uint32(message.isFullCombo);
        /* optional float speed = 409; */
        if (message.speed !== undefined)
            writer.tag(409, WireType.Bit32).float(message.speed);
        /* optional bool is_save_score = 3; */
        if (message.isSaveScore !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSaveScore);
        /* optional uint32 combo = 1; */
        if (message.combo !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.combo);
        /* optional uint32 music_basic_id = 7; */
        if (message.musicBasicId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.musicBasicId);
        /* optional uint32 star_rating = 2; */
        if (message.starRating !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.starRating);
        /* optional uint32 volume = 1953; */
        if (message.volume !== undefined)
            writer.tag(1953, WireType.Varint).uint32(message.volume);
        /* optional uint32 correct_hit = 14; */
        if (message.correctHit !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.correctHit);
        /* optional bool is_custom_speed = 1285; */
        if (message.isCustomSpeed !== undefined)
            writer.tag(1285, WireType.Varint).bool(message.isCustomSpeed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameSettleReq
 */
export const MusicGameSettleReq = new MusicGameSettleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameSettleRsp$Type extends MessageType<MusicGameSettleRsp> {
    constructor() {
        super("com.midnights.game.MusicGameSettleRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_unlock_next_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MusicGameSettleRsp>): MusicGameSettleRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameSettleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameSettleRsp): MusicGameSettleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 5:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 6:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_unlock_next_level */ 2:
                    message.isUnlockNextLevel = reader.bool();
                    break;
                case /* optional uint64 ugc_guid */ 10:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicGameSettleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 5; */
        if (message.musicBasicId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.musicBasicId);
        /* optional bool is_new_record = 6; */
        if (message.isNewRecord !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_unlock_next_level = 2; */
        if (message.isUnlockNextLevel !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isUnlockNextLevel);
        /* optional uint64 ugc_guid = 10; */
        if (message.ugcGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameSettleRsp
 */
export const MusicGameSettleRsp = new MusicGameSettleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameStartReq$Type extends MessageType<MusicGameStartReq> {
    constructor() {
        super("com.midnights.game.MusicGameStartReq", [
            { no: 2, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_save_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MusicGameStartReq>): MusicGameStartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameStartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameStartReq): MusicGameStartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 2:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional bool is_save_score */ 11:
                    message.isSaveScore = reader.bool();
                    break;
                case /* optional uint64 ugc_guid */ 3:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicGameStartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 music_basic_id = 2; */
        if (message.musicBasicId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.musicBasicId);
        /* optional bool is_save_score = 11; */
        if (message.isSaveScore !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isSaveScore);
        /* optional uint64 ugc_guid = 3; */
        if (message.ugcGuid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameStartReq
 */
export const MusicGameStartReq = new MusicGameStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameStartRsp$Type extends MessageType<MusicGameStartRsp> {
    constructor() {
        super("com.midnights.game.MusicGameStartRsp", [
            { no: 4, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MusicGameStartRsp>): MusicGameStartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MusicGameStartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MusicGameStartRsp): MusicGameStartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 4:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 ugc_guid */ 15:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MusicGameStartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 music_basic_id = 4; */
        if (message.musicBasicId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.musicBasicId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint64 ugc_guid = 15; */
        if (message.ugcGuid !== undefined)
            writer.tag(15, WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameStartRsp
 */
export const MusicGameStartRsp = new MusicGameStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueAvatarInfo$Type extends MessageType<RogueAvatarInfo> {
    constructor() {
        super("com.midnights.game.RogueAvatarInfo", [
            { no: 5, name: "is_onstage", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_alive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueAvatarInfo>): RogueAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueAvatarInfo): RogueAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_onstage */ 5:
                    message.isOnstage = reader.bool();
                    break;
                case /* optional bool is_alive */ 3:
                    message.isAlive = reader.bool();
                    break;
                case /* optional uint32 avatar_id */ 14:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_onstage = 5; */
        if (message.isOnstage !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOnstage);
        /* optional bool is_alive = 3; */
        if (message.isAlive !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isAlive);
        /* optional uint32 avatar_id = 14; */
        if (message.avatarId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueAvatarInfo
 */
export const RogueAvatarInfo = new RogueAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueShowAvatarTeamInfo$Type extends MessageType<RogueShowAvatarTeamInfo> {
    constructor() {
        super("com.midnights.game.RogueShowAvatarTeamInfo", [
            { no: 12, name: "avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<RogueShowAvatarTeamInfo>): RogueShowAvatarTeamInfo {
        const message = { avatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueShowAvatarTeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueShowAvatarTeamInfo): RogueShowAvatarTeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueAvatarInfo avatar_list */ 12:
                    message.avatarList.push(RogueAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueShowAvatarTeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueAvatarInfo avatar_list = 12; */
        for (let i = 0; i < message.avatarList.length; i++)
            RogueAvatarInfo.internalBinaryWrite(message.avatarList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueShowAvatarTeamInfo
 */
export const RogueShowAvatarTeamInfo = new RogueShowAvatarTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeShikigamiRecord$Type extends MessageType<RoguelikeShikigamiRecord> {
    constructor() {
        super("com.midnights.game.RoguelikeShikigamiRecord", [
            { no: 6, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeShikigamiRecord>): RoguelikeShikigamiRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeShikigamiRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeShikigamiRecord): RoguelikeShikigamiRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 6:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 level */ 3:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeShikigamiRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 6; */
        if (message.id !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.id);
        /* optional uint32 level = 3; */
        if (message.level !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeShikigamiRecord
 */
export const RoguelikeShikigamiRecord = new RoguelikeShikigamiRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueEffectRecord$Type extends MessageType<RogueEffectRecord> {
    constructor() {
        super("com.midnights.game.RogueEffectRecord", [
            { no: 6, name: "source_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "extra_param_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RogueEffectRecord>): RogueEffectRecord {
        const message = { extraParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueEffectRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueEffectRecord): RogueEffectRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 source_id */ 6:
                    message.sourceId = reader.uint32();
                    break;
                case /* repeated uint32 extra_param_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.extraParamList.push(reader.uint32());
                    else
                        message.extraParamList.push(reader.uint32());
                    break;
                case /* optional uint32 count */ 10:
                    message.count = reader.uint32();
                    break;
                case /* optional bool is_new */ 5:
                    message.isNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueEffectRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 source_id = 6; */
        if (message.sourceId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.sourceId);
        /* repeated uint32 extra_param_list = 9; */
        for (let i = 0; i < message.extraParamList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.extraParamList[i]);
        /* optional uint32 count = 10; */
        if (message.count !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.count);
        /* optional bool is_new = 5; */
        if (message.isNew !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueEffectRecord
 */
export const RogueEffectRecord = new RogueEffectRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRuneRecord$Type extends MessageType<RoguelikeRuneRecord> {
    constructor() {
        super("com.midnights.game.RoguelikeRuneRecord", [
            { no: 14, name: "left_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "max_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeRuneRecord>): RoguelikeRuneRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeRuneRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeRuneRecord): RoguelikeRuneRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_count */ 14:
                    message.leftCount = reader.uint32();
                    break;
                case /* optional uint32 rune_id */ 6:
                    message.runeId = reader.uint32();
                    break;
                case /* optional uint32 max_count */ 4:
                    message.maxCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeRuneRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 left_count = 14; */
        if (message.leftCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.leftCount);
        /* optional uint32 rune_id = 6; */
        if (message.runeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.runeId);
        /* optional uint32 max_count = 4; */
        if (message.maxCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.maxCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRuneRecord
 */
export const RoguelikeRuneRecord = new RoguelikeRuneRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueStageInfo$Type extends MessageType<RogueStageInfo> {
    constructor() {
        super("com.midnights.game.RogueStageInfo", [
            { no: 2, name: "avatar_team", kind: "message", T: () => RogueShowAvatarTeamInfo },
            { no: 5, name: "is_passed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 205, name: "revise_monster_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoguelikeRuneRecord },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1409, name: "cached_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_in_combat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "cached_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "explore_cell_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_explored", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "max_passed_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueStageInfo>): RogueStageInfo {
        const message = { runeRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueStageInfo): RogueStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueShowAvatarTeamInfo avatar_team */ 2:
                    message.avatarTeam = RogueShowAvatarTeamInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarTeam);
                    break;
                case /* optional bool is_passed */ 5:
                    message.isPassed = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 revise_monster_level */ 205:
                    message.reviseMonsterLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 6:
                    message.runeRecordList.push(RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 cur_level */ 4:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional uint32 cached_coin_c_num */ 1409:
                    message.cachedCoinCNum = reader.uint32();
                    break;
                case /* optional bool is_taken_reward */ 11:
                    message.isTakenReward = reader.bool();
                    break;
                case /* optional bool is_in_combat */ 12:
                    message.isInCombat = reader.bool();
                    break;
                case /* optional uint32 cached_coin_b_num */ 14:
                    message.cachedCoinBNum = reader.uint32();
                    break;
                case /* optional uint32 explore_cell_num */ 15:
                    message.exploreCellNum = reader.uint32();
                    break;
                case /* optional uint32 coin_c_num */ 8:
                    message.coinCNum = reader.uint32();
                    break;
                case /* optional bool is_explored */ 9:
                    message.isExplored = reader.bool();
                    break;
                case /* optional uint32 max_passed_level */ 3:
                    message.maxPassedLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.RogueShowAvatarTeamInfo avatar_team = 2; */
        if (message.avatarTeam)
            RogueShowAvatarTeamInfo.internalBinaryWrite(message.avatarTeam, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_passed = 5; */
        if (message.isPassed !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isPassed);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* optional uint32 revise_monster_level = 205; */
        if (message.reviseMonsterLevel !== undefined)
            writer.tag(205, WireType.Varint).uint32(message.reviseMonsterLevel);
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        /* optional uint32 cur_level = 4; */
        if (message.curLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.curLevel);
        /* optional uint32 cached_coin_c_num = 1409; */
        if (message.cachedCoinCNum !== undefined)
            writer.tag(1409, WireType.Varint).uint32(message.cachedCoinCNum);
        /* optional bool is_taken_reward = 11; */
        if (message.isTakenReward !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isTakenReward);
        /* optional bool is_in_combat = 12; */
        if (message.isInCombat !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isInCombat);
        /* optional uint32 cached_coin_b_num = 14; */
        if (message.cachedCoinBNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cachedCoinBNum);
        /* optional uint32 explore_cell_num = 15; */
        if (message.exploreCellNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.exploreCellNum);
        /* optional uint32 coin_c_num = 8; */
        if (message.coinCNum !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.coinCNum);
        /* optional bool is_explored = 9; */
        if (message.isExplored !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isExplored);
        /* optional uint32 max_passed_level = 3; */
        if (message.maxPassedLevel !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.maxPassedLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueStageInfo
 */
export const RogueStageInfo = new RogueStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeDungeonActivityDetailInfo$Type extends MessageType<RoguelikeDungeonActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.RoguelikeDungeonActivityDetailInfo", [
            { no: 8, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueStageInfo },
            { no: 5, name: "shikigami_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoguelikeShikigamiRecord },
            { no: 14, name: "equipped_rune_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "rune_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeDungeonActivityDetailInfo>): RoguelikeDungeonActivityDetailInfo {
        const message = { stageList: [], shikigamiList: [], equippedRuneList: [], runeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeDungeonActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeDungeonActivityDetailInfo): RoguelikeDungeonActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueStageInfo stage_list */ 8:
                    message.stageList.push(RogueStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RoguelikeShikigamiRecord shikigami_list */ 5:
                    message.shikigamiList.push(RoguelikeShikigamiRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 equipped_rune_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equippedRuneList.push(reader.uint32());
                    else
                        message.equippedRuneList.push(reader.uint32());
                    break;
                case /* optional uint32 content_close_time */ 6:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 10:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated uint32 rune_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeDungeonActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueStageInfo stage_list = 8; */
        for (let i = 0; i < message.stageList.length; i++)
            RogueStageInfo.internalBinaryWrite(message.stageList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RoguelikeShikigamiRecord shikigami_list = 5; */
        for (let i = 0; i < message.shikigamiList.length; i++)
            RoguelikeShikigamiRecord.internalBinaryWrite(message.shikigamiList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 equipped_rune_list = 14; */
        for (let i = 0; i < message.equippedRuneList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.equippedRuneList[i]);
        /* optional uint32 content_close_time = 6; */
        if (message.contentCloseTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 10; */
        if (message.isContentClosed !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isContentClosed);
        /* repeated uint32 rune_list = 2; */
        for (let i = 0; i < message.runeList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.runeList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeDungeonActivityDetailInfo
 */
export const RoguelikeDungeonActivityDetailInfo = new RoguelikeDungeonActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoRoguelikeDungeonCardGachaReq$Type extends MessageType<DoRoguelikeDungeonCardGachaReq> {
    constructor() {
        super("com.midnights.game.DoRoguelikeDungeonCardGachaReq", [
            { no: 13, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DoRoguelikeDungeonCardGachaReq>): DoRoguelikeDungeonCardGachaReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoRoguelikeDungeonCardGachaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoRoguelikeDungeonCardGachaReq): DoRoguelikeDungeonCardGachaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 13:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 6:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoRoguelikeDungeonCardGachaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 13; */
        if (message.dungeonId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 6; */
        if (message.cellId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaReq
 */
export const DoRoguelikeDungeonCardGachaReq = new DoRoguelikeDungeonCardGachaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoRoguelikeDungeonCardGachaRsp$Type extends MessageType<DoRoguelikeDungeonCardGachaRsp> {
    constructor() {
        super("com.midnights.game.DoRoguelikeDungeonCardGachaRsp", [
            { no: 8, name: "is_can_refresh", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DoRoguelikeDungeonCardGachaRsp>): DoRoguelikeDungeonCardGachaRsp {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoRoguelikeDungeonCardGachaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoRoguelikeDungeonCardGachaRsp): DoRoguelikeDungeonCardGachaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_can_refresh */ 8:
                    message.isCanRefresh = reader.bool();
                    break;
                case /* repeated uint32 card_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cardList.push(reader.uint32());
                    else
                        message.cardList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DoRoguelikeDungeonCardGachaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_can_refresh = 8; */
        if (message.isCanRefresh !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isCanRefresh);
        /* repeated uint32 card_list = 15; */
        for (let i = 0; i < message.cardList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.cardList[i]);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaRsp
 */
export const DoRoguelikeDungeonCardGachaRsp = new DoRoguelikeDungeonCardGachaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRoguelikeDungeonCardReq$Type extends MessageType<RefreshRoguelikeDungeonCardReq> {
    constructor() {
        super("com.midnights.game.RefreshRoguelikeDungeonCardReq", []);
    }
    create(value?: PartialMessage<RefreshRoguelikeDungeonCardReq>): RefreshRoguelikeDungeonCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshRoguelikeDungeonCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRoguelikeDungeonCardReq): RefreshRoguelikeDungeonCardReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RefreshRoguelikeDungeonCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRoguelikeDungeonCardReq
 */
export const RefreshRoguelikeDungeonCardReq = new RefreshRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRoguelikeDungeonCardRsp$Type extends MessageType<RefreshRoguelikeDungeonCardRsp> {
    constructor() {
        super("com.midnights.game.RefreshRoguelikeDungeonCardRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "res_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshRoguelikeDungeonCardRsp>): RefreshRoguelikeDungeonCardRsp {
        const message = { resCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshRoguelikeDungeonCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRoguelikeDungeonCardRsp): RefreshRoguelikeDungeonCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 res_card_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.resCardList.push(reader.uint32());
                    else
                        message.resCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshRoguelikeDungeonCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* repeated uint32 res_card_list = 9; */
        for (let i = 0; i < message.resCardList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.resCardList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRoguelikeDungeonCardRsp
 */
export const RefreshRoguelikeDungeonCardRsp = new RefreshRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRoguelikeDungeonCardReq$Type extends MessageType<SelectRoguelikeDungeonCardReq> {
    constructor() {
        super("com.midnights.game.SelectRoguelikeDungeonCardReq", [
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectRoguelikeDungeonCardReq>): SelectRoguelikeDungeonCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectRoguelikeDungeonCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectRoguelikeDungeonCardReq): SelectRoguelikeDungeonCardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectRoguelikeDungeonCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectRoguelikeDungeonCardReq
 */
export const SelectRoguelikeDungeonCardReq = new SelectRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRoguelikeDungeonCardRsp$Type extends MessageType<SelectRoguelikeDungeonCardRsp> {
    constructor() {
        super("com.midnights.game.SelectRoguelikeDungeonCardRsp", [
            { no: 9, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SelectRoguelikeDungeonCardRsp>): SelectRoguelikeDungeonCardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectRoguelikeDungeonCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectRoguelikeDungeonCardRsp): SelectRoguelikeDungeonCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 9:
                    message.cardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectRoguelikeDungeonCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 card_id = 9; */
        if (message.cardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cardId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectRoguelikeDungeonCardRsp
 */
export const SelectRoguelikeDungeonCardRsp = new SelectRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipRoguelikeRuneReq$Type extends MessageType<EquipRoguelikeRuneReq> {
    constructor() {
        super("com.midnights.game.EquipRoguelikeRuneReq", [
            { no: 3, name: "rune_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EquipRoguelikeRuneReq>): EquipRoguelikeRuneReq {
        const message = { runeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EquipRoguelikeRuneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipRoguelikeRuneReq): EquipRoguelikeRuneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 rune_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipRoguelikeRuneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 rune_list = 3; */
        for (let i = 0; i < message.runeList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.runeList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EquipRoguelikeRuneReq
 */
export const EquipRoguelikeRuneReq = new EquipRoguelikeRuneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipRoguelikeRuneRsp$Type extends MessageType<EquipRoguelikeRuneRsp> {
    constructor() {
        super("com.midnights.game.EquipRoguelikeRuneRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "rune_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EquipRoguelikeRuneRsp>): EquipRoguelikeRuneRsp {
        const message = { runeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EquipRoguelikeRuneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipRoguelikeRuneRsp): EquipRoguelikeRuneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 rune_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EquipRoguelikeRuneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* repeated uint32 rune_list = 1; */
        for (let i = 0; i < message.runeList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.runeList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EquipRoguelikeRuneRsp
 */
export const EquipRoguelikeRuneRsp = new EquipRoguelikeRuneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeRuneReq$Type extends MessageType<TriggerRoguelikeRuneReq> {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeRuneReq", [
            { no: 8, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerRoguelikeRuneReq>): TriggerRoguelikeRuneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TriggerRoguelikeRuneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerRoguelikeRuneReq): TriggerRoguelikeRuneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rune_id */ 8:
                    message.runeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerRoguelikeRuneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rune_id = 8; */
        if (message.runeId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.runeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeRuneReq
 */
export const TriggerRoguelikeRuneReq = new TriggerRoguelikeRuneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeRuneRsp$Type extends MessageType<TriggerRoguelikeRuneRsp> {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeRuneRsp", [
            { no: 4, name: "available_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerRoguelikeRuneRsp>): TriggerRoguelikeRuneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TriggerRoguelikeRuneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerRoguelikeRuneRsp): TriggerRoguelikeRuneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 available_count */ 4:
                    message.availableCount = reader.uint32();
                    break;
                case /* optional uint32 rune_id */ 14:
                    message.runeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerRoguelikeRuneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 available_count = 4; */
        if (message.availableCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.availableCount);
        /* optional uint32 rune_id = 14; */
        if (message.runeId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.runeId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeRuneRsp
 */
export const TriggerRoguelikeRuneRsp = new TriggerRoguelikeRuneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeCurseNotify$Type extends MessageType<TriggerRoguelikeCurseNotify> {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeCurseNotify", [
            { no: 14, name: "effect_param_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "curse_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_trigger_curse", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "curse_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerRoguelikeCurseNotify>): TriggerRoguelikeCurseNotify {
        const message = { effectParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TriggerRoguelikeCurseNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerRoguelikeCurseNotify): TriggerRoguelikeCurseNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 effect_param_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.effectParamList.push(reader.uint32());
                    else
                        message.effectParamList.push(reader.uint32());
                    break;
                case /* optional uint32 curse_group_id */ 9:
                    message.curseGroupId = reader.uint32();
                    break;
                case /* optional bool is_trigger_curse */ 13:
                    message.isTriggerCurse = reader.bool();
                    break;
                case /* optional uint32 curse_level */ 3:
                    message.curseLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerRoguelikeCurseNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 effect_param_list = 14; */
        for (let i = 0; i < message.effectParamList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.effectParamList[i]);
        /* optional uint32 curse_group_id = 9; */
        if (message.curseGroupId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curseGroupId);
        /* optional bool is_trigger_curse = 13; */
        if (message.isTriggerCurse !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isTriggerCurse);
        /* optional uint32 curse_level = 3; */
        if (message.curseLevel !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.curseLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeCurseNotify
 */
export const TriggerRoguelikeCurseNotify = new TriggerRoguelikeCurseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeRoguelikeShikigamiReq$Type extends MessageType<UpgradeRoguelikeShikigamiReq> {
    constructor() {
        super("com.midnights.game.UpgradeRoguelikeShikigamiReq", [
            { no: 6, name: "upgrade_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "shikigami_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpgradeRoguelikeShikigamiReq>): UpgradeRoguelikeShikigamiReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpgradeRoguelikeShikigamiReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpgradeRoguelikeShikigamiReq): UpgradeRoguelikeShikigamiReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 upgrade_level */ 6:
                    message.upgradeLevel = reader.uint32();
                    break;
                case /* optional uint32 shikigami_group_id */ 15:
                    message.shikigamiGroupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpgradeRoguelikeShikigamiReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 upgrade_level = 6; */
        if (message.upgradeLevel !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.upgradeLevel);
        /* optional uint32 shikigami_group_id = 15; */
        if (message.shikigamiGroupId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.shikigamiGroupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpgradeRoguelikeShikigamiReq
 */
export const UpgradeRoguelikeShikigamiReq = new UpgradeRoguelikeShikigamiReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeRoguelikeShikigamiRsp$Type extends MessageType<UpgradeRoguelikeShikigamiRsp> {
    constructor() {
        super("com.midnights.game.UpgradeRoguelikeShikigamiRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "shikigami_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpgradeRoguelikeShikigamiRsp>): UpgradeRoguelikeShikigamiRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpgradeRoguelikeShikigamiRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpgradeRoguelikeShikigamiRsp): UpgradeRoguelikeShikigamiRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 shikigami_group_id */ 14:
                    message.shikigamiGroupId = reader.uint32();
                    break;
                case /* optional uint32 cur_level */ 4:
                    message.curLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpgradeRoguelikeShikigamiRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 shikigami_group_id = 14; */
        if (message.shikigamiGroupId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.shikigamiGroupId);
        /* optional uint32 cur_level = 4; */
        if (message.curLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.curLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpgradeRoguelikeShikigamiRsp
 */
export const UpgradeRoguelikeShikigamiRsp = new UpgradeRoguelikeShikigamiRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSelectAvatarAndEnterDungeonReq$Type extends MessageType<RoguelikeSelectAvatarAndEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq", [
            { no: 14, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeSelectAvatarAndEnterDungeonReq>): RoguelikeSelectAvatarAndEnterDungeonReq {
        const message = { onstageAvatarGuidList: [], backstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeSelectAvatarAndEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeSelectAvatarAndEnterDungeonReq): RoguelikeSelectAvatarAndEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 onstage_avatar_guid_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeSelectAvatarAndEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 onstage_avatar_guid_list = 14; */
        for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
            writer.tag(14, WireType.Varint).uint64(message.onstageAvatarGuidList[i]);
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.stageId);
        /* repeated uint64 backstage_avatar_guid_list = 11; */
        for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
            writer.tag(11, WireType.Varint).uint64(message.backstageAvatarGuidList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq
 */
export const RoguelikeSelectAvatarAndEnterDungeonReq = new RoguelikeSelectAvatarAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSelectAvatarAndEnterDungeonRsp$Type extends MessageType<RoguelikeSelectAvatarAndEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeSelectAvatarAndEnterDungeonRsp>): RoguelikeSelectAvatarAndEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeSelectAvatarAndEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeSelectAvatarAndEnterDungeonRsp): RoguelikeSelectAvatarAndEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeSelectAvatarAndEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp
 */
export const RoguelikeSelectAvatarAndEnterDungeonRsp = new RoguelikeSelectAvatarAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeGiveUpReq$Type extends MessageType<RoguelikeGiveUpReq> {
    constructor() {
        super("com.midnights.game.RoguelikeGiveUpReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeGiveUpReq>): RoguelikeGiveUpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeGiveUpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeGiveUpReq): RoguelikeGiveUpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeGiveUpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeGiveUpReq
 */
export const RoguelikeGiveUpReq = new RoguelikeGiveUpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeGiveUpRsp$Type extends MessageType<RoguelikeGiveUpRsp> {
    constructor() {
        super("com.midnights.game.RoguelikeGiveUpRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "settle_info", kind: "message", oneof: "info", T: () => RoguelikeDungeonSettleInfo }
        ]);
    }
    create(value?: PartialMessage<RoguelikeGiveUpRsp>): RoguelikeGiveUpRsp {
        const message = { info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeGiveUpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeGiveUpRsp): RoguelikeGiveUpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* com.midnights.game.RoguelikeDungeonSettleInfo settle_info */ 8:
                    message.info = {
                        oneofKind: "settleInfo",
                        settleInfo: RoguelikeDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).settleInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeGiveUpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* com.midnights.game.RoguelikeDungeonSettleInfo settle_info = 8; */
        if (message.info.oneofKind === "settleInfo")
            RoguelikeDungeonSettleInfo.internalBinaryWrite(message.info.settleInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeGiveUpRsp
 */
export const RoguelikeGiveUpRsp = new RoguelikeGiveUpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeTakeStageFirstPassRewardReq$Type extends MessageType<RoguelikeTakeStageFirstPassRewardReq> {
    constructor() {
        super("com.midnights.game.RoguelikeTakeStageFirstPassRewardReq", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeTakeStageFirstPassRewardReq>): RoguelikeTakeStageFirstPassRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeTakeStageFirstPassRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeTakeStageFirstPassRewardReq): RoguelikeTakeStageFirstPassRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeTakeStageFirstPassRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardReq
 */
export const RoguelikeTakeStageFirstPassRewardReq = new RoguelikeTakeStageFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeTakeStageFirstPassRewardRsp$Type extends MessageType<RoguelikeTakeStageFirstPassRewardRsp> {
    constructor() {
        super("com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeTakeStageFirstPassRewardRsp>): RoguelikeTakeStageFirstPassRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeTakeStageFirstPassRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeTakeStageFirstPassRewardRsp): RoguelikeTakeStageFirstPassRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeTakeStageFirstPassRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp
 */
export const RoguelikeTakeStageFirstPassRewardRsp = new RoguelikeTakeStageFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiveUpRoguelikeDungeonCardReq$Type extends MessageType<GiveUpRoguelikeDungeonCardReq> {
    constructor() {
        super("com.midnights.game.GiveUpRoguelikeDungeonCardReq", []);
    }
    create(value?: PartialMessage<GiveUpRoguelikeDungeonCardReq>): GiveUpRoguelikeDungeonCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiveUpRoguelikeDungeonCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiveUpRoguelikeDungeonCardReq): GiveUpRoguelikeDungeonCardReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GiveUpRoguelikeDungeonCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardReq
 */
export const GiveUpRoguelikeDungeonCardReq = new GiveUpRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiveUpRoguelikeDungeonCardRsp$Type extends MessageType<GiveUpRoguelikeDungeonCardRsp> {
    constructor() {
        super("com.midnights.game.GiveUpRoguelikeDungeonCardRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GiveUpRoguelikeDungeonCardRsp>): GiveUpRoguelikeDungeonCardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GiveUpRoguelikeDungeonCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GiveUpRoguelikeDungeonCardRsp): GiveUpRoguelikeDungeonCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GiveUpRoguelikeDungeonCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardRsp
 */
export const GiveUpRoguelikeDungeonCardRsp = new GiveUpRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueCellInfo$Type extends MessageType<RogueCellInfo> {
    constructor() {
        super("com.midnights.game.RogueCellInfo", [
            { no: 14, name: "cell_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "cell_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.RogueCellState", RogueCellState] }
        ]);
    }
    create(value?: PartialMessage<RogueCellInfo>): RogueCellInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueCellInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueCellInfo): RogueCellInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cell_config_id */ 14:
                    message.cellConfigId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 9:
                    message.cellId = reader.uint32();
                    break;
                case /* optional uint32 cell_type */ 13:
                    message.cellType = reader.uint32();
                    break;
                case /* optional com.midnights.game.RogueCellState state */ 10:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueCellInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cell_config_id = 14; */
        if (message.cellConfigId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cellConfigId);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 9; */
        if (message.cellId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cellId);
        /* optional uint32 cell_type = 13; */
        if (message.cellType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cellType);
        /* optional com.midnights.game.RogueCellState state = 10; */
        if (message.state !== undefined)
            writer.tag(10, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueCellInfo
 */
export const RogueCellInfo = new RogueCellInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRoguelikeDungeonNotify$Type extends MessageType<EnterRoguelikeDungeonNotify> {
    constructor() {
        super("com.midnights.game.EnterRoguelikeDungeonNotify", [
            { no: 14, name: "is_mist_clear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "dungeon_weight_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoguelikeRuneRecord },
            { no: 9, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 205, name: "is_first_enter", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "explored_cell_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cell_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => RogueCellInfo } },
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1999, name: "refresh_cost_item_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "bonus_resource_prop", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 1541, name: "revise_monster_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "cur_cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "refresh_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterRoguelikeDungeonNotify>): EnterRoguelikeDungeonNotify {
        const message = { runeRecordList: [], onstageAvatarGuidList: [], exploredCellList: [], cellInfoMap: {}, backstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterRoguelikeDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterRoguelikeDungeonNotify): EnterRoguelikeDungeonNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mist_clear */ 14:
                    message.isMistClear = reader.bool();
                    break;
                case /* optional uint32 dungeon_weight_config_id */ 2:
                    message.dungeonWeightConfigId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 6:
                    message.runeRecordList.push(RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional bool is_first_enter */ 205:
                    message.isFirstEnter = reader.bool();
                    break;
                case /* repeated uint32 explored_cell_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploredCellList.push(reader.uint32());
                    else
                        message.exploredCellList.push(reader.uint32());
                    break;
                case /* map<uint32, com.midnights.game.RogueCellInfo> cell_info_map */ 11:
                    this.binaryReadMap11(message.cellInfoMap, reader, options);
                    break;
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 refresh_cost_item_count */ 1999:
                    message.refreshCostItemCount = reader.uint32();
                    break;
                case /* optional float bonus_resource_prop */ 13:
                    message.bonusResourceProp = reader.float();
                    break;
                case /* optional uint32 revise_monster_level */ 1541:
                    message.reviseMonsterLevel = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 cur_cell_id */ 12:
                    message.curCellId = reader.uint32();
                    break;
                case /* optional uint32 refresh_cost_item_id */ 7:
                    message.refreshCostItemId = reader.uint32();
                    break;
                case /* optional uint32 cur_level */ 8:
                    message.curLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap11(map: EnterRoguelikeDungeonNotify["cellInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof EnterRoguelikeDungeonNotify["cellInfoMap"] | undefined, val: EnterRoguelikeDungeonNotify["cellInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = RogueCellInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.EnterRoguelikeDungeonNotify.cell_info_map");
            }
        }
        map[key ?? 0] = val ?? RogueCellInfo.create();
    }
    internalBinaryWrite(message: EnterRoguelikeDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_mist_clear = 14; */
        if (message.isMistClear !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isMistClear);
        /* optional uint32 dungeon_weight_config_id = 2; */
        if (message.dungeonWeightConfigId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dungeonWeightConfigId);
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 onstage_avatar_guid_list = 9; */
        for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
            writer.tag(9, WireType.Varint).uint64(message.onstageAvatarGuidList[i]);
        /* optional bool is_first_enter = 205; */
        if (message.isFirstEnter !== undefined)
            writer.tag(205, WireType.Varint).bool(message.isFirstEnter);
        /* repeated uint32 explored_cell_list = 3; */
        for (let i = 0; i < message.exploredCellList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.exploredCellList[i]);
        /* map<uint32, com.midnights.game.RogueCellInfo> cell_info_map = 11; */
        for (let k of Object.keys(message.cellInfoMap)) {
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            RogueCellInfo.internalBinaryWrite(message.cellInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 refresh_cost_item_count = 1999; */
        if (message.refreshCostItemCount !== undefined)
            writer.tag(1999, WireType.Varint).uint32(message.refreshCostItemCount);
        /* optional float bonus_resource_prop = 13; */
        if (message.bonusResourceProp !== undefined)
            writer.tag(13, WireType.Bit32).float(message.bonusResourceProp);
        /* optional uint32 revise_monster_level = 1541; */
        if (message.reviseMonsterLevel !== undefined)
            writer.tag(1541, WireType.Varint).uint32(message.reviseMonsterLevel);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* repeated uint64 backstage_avatar_guid_list = 10; */
        for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
            writer.tag(10, WireType.Varint).uint64(message.backstageAvatarGuidList[i]);
        /* optional uint32 cur_cell_id = 12; */
        if (message.curCellId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curCellId);
        /* optional uint32 refresh_cost_item_id = 7; */
        if (message.refreshCostItemId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.refreshCostItemId);
        /* optional uint32 cur_level = 8; */
        if (message.curLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.curLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRoguelikeDungeonNotify
 */
export const EnterRoguelikeDungeonNotify = new EnterRoguelikeDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueEliteCellChallengeReq$Type extends MessageType<StartRogueEliteCellChallengeReq> {
    constructor() {
        super("com.midnights.game.StartRogueEliteCellChallengeReq", [
            { no: 1, name: "difficulty", kind: "enum", opt: true, T: () => ["com.midnights.game.RogueEliteCellDifficultyType", RogueEliteCellDifficultyType] },
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueEliteCellChallengeReq>): StartRogueEliteCellChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueEliteCellChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueEliteCellChallengeReq): StartRogueEliteCellChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueEliteCellDifficultyType difficulty */ 1:
                    message.difficulty = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 4:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueEliteCellChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.RogueEliteCellDifficultyType difficulty = 1; */
        if (message.difficulty !== undefined)
            writer.tag(1, WireType.Varint).int32(message.difficulty);
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 4; */
        if (message.cellId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueEliteCellChallengeReq
 */
export const StartRogueEliteCellChallengeReq = new StartRogueEliteCellChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueEliteCellChallengeRsp$Type extends MessageType<StartRogueEliteCellChallengeRsp> {
    constructor() {
        super("com.midnights.game.StartRogueEliteCellChallengeRsp", [
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueEliteCellChallengeRsp>): StartRogueEliteCellChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueEliteCellChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueEliteCellChallengeRsp): StartRogueEliteCellChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 9:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueEliteCellChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 9; */
        if (message.cellId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueEliteCellChallengeRsp
 */
export const StartRogueEliteCellChallengeRsp = new StartRogueEliteCellChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueNormalCellChallengeReq$Type extends MessageType<StartRogueNormalCellChallengeReq> {
    constructor() {
        super("com.midnights.game.StartRogueNormalCellChallengeReq", [
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueNormalCellChallengeReq>): StartRogueNormalCellChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueNormalCellChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueNormalCellChallengeReq): StartRogueNormalCellChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 8:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueNormalCellChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 8; */
        if (message.cellId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueNormalCellChallengeReq
 */
export const StartRogueNormalCellChallengeReq = new StartRogueNormalCellChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueNormalCellChallengeRsp$Type extends MessageType<StartRogueNormalCellChallengeRsp> {
    constructor() {
        super("com.midnights.game.StartRogueNormalCellChallengeRsp", [
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueNormalCellChallengeRsp>): StartRogueNormalCellChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueNormalCellChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueNormalCellChallengeRsp): StartRogueNormalCellChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 2:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueNormalCellChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 2; */
        if (message.cellId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueNormalCellChallengeRsp
 */
export const StartRogueNormalCellChallengeRsp = new StartRogueNormalCellChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueCellUpdateNotify$Type extends MessageType<RogueCellUpdateNotify> {
    constructor() {
        super("com.midnights.game.RogueCellUpdateNotify", [
            { no: 7, name: "cell_info", kind: "message", T: () => RogueCellInfo }
        ]);
    }
    create(value?: PartialMessage<RogueCellUpdateNotify>): RogueCellUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueCellUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueCellUpdateNotify): RogueCellUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueCellInfo cell_info */ 7:
                    message.cellInfo = RogueCellInfo.internalBinaryRead(reader, reader.uint32(), options, message.cellInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueCellUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.RogueCellInfo cell_info = 7; */
        if (message.cellInfo)
            RogueCellInfo.internalBinaryWrite(message.cellInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueCellUpdateNotify
 */
export const RogueCellUpdateNotify = new RogueCellUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDungeonPlayerCellChangeNotify$Type extends MessageType<RogueDungeonPlayerCellChangeNotify> {
    constructor() {
        super("com.midnights.game.RogueDungeonPlayerCellChangeNotify", [
            { no: 10, name: "old_cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDungeonPlayerCellChangeNotify>): RogueDungeonPlayerCellChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDungeonPlayerCellChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDungeonPlayerCellChangeNotify): RogueDungeonPlayerCellChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 old_cell_id */ 10:
                    message.oldCellId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 7:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDungeonPlayerCellChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 old_cell_id = 10; */
        if (message.oldCellId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.oldCellId);
        /* optional uint32 cell_id = 7; */
        if (message.cellId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDungeonPlayerCellChangeNotify
 */
export const RogueDungeonPlayerCellChangeNotify = new RogueDungeonPlayerCellChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueHealAvatarsReq$Type extends MessageType<RogueHealAvatarsReq> {
    constructor() {
        super("com.midnights.game.RogueHealAvatarsReq", [
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueHealAvatarsReq>): RogueHealAvatarsReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueHealAvatarsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueHealAvatarsReq): RogueHealAvatarsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 3:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueHealAvatarsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 3; */
        if (message.cellId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueHealAvatarsReq
 */
export const RogueHealAvatarsReq = new RogueHealAvatarsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueHealAvatarsRsp$Type extends MessageType<RogueHealAvatarsRsp> {
    constructor() {
        super("com.midnights.game.RogueHealAvatarsRsp", [
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueHealAvatarsRsp>): RogueHealAvatarsRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueHealAvatarsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueHealAvatarsRsp): RogueHealAvatarsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cell_id */ 14:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueHealAvatarsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 cell_id = 14; */
        if (message.cellId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueHealAvatarsRsp
 */
export const RogueHealAvatarsRsp = new RogueHealAvatarsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueResumeDungeonReq$Type extends MessageType<RogueResumeDungeonReq> {
    constructor() {
        super("com.midnights.game.RogueResumeDungeonReq", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueResumeDungeonReq>): RogueResumeDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueResumeDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueResumeDungeonReq): RogueResumeDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueResumeDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueResumeDungeonReq
 */
export const RogueResumeDungeonReq = new RogueResumeDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueResumeDungeonRsp$Type extends MessageType<RogueResumeDungeonRsp> {
    constructor() {
        super("com.midnights.game.RogueResumeDungeonRsp", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueResumeDungeonRsp>): RogueResumeDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueResumeDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueResumeDungeonRsp): RogueResumeDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueResumeDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueResumeDungeonRsp
 */
export const RogueResumeDungeonRsp = new RogueResumeDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearRoguelikeCurseNotify$Type extends MessageType<ClearRoguelikeCurseNotify> {
    constructor() {
        super("com.midnights.game.ClearRoguelikeCurseNotify", [
            { no: 10, name: "clear_curse_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "is_clear_all", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_curse_all_clear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ClearRoguelikeCurseNotify>): ClearRoguelikeCurseNotify {
        const message = { clearCurseMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClearRoguelikeCurseNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClearRoguelikeCurseNotify): ClearRoguelikeCurseNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> clear_curse_map */ 10:
                    this.binaryReadMap10(message.clearCurseMap, reader, options);
                    break;
                case /* optional bool is_clear_all */ 11:
                    message.isClearAll = reader.bool();
                    break;
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional bool is_curse_all_clear */ 1:
                    message.isCurseAllClear = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: ClearRoguelikeCurseNotify["clearCurseMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ClearRoguelikeCurseNotify["clearCurseMap"] | undefined, val: ClearRoguelikeCurseNotify["clearCurseMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ClearRoguelikeCurseNotify.clear_curse_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ClearRoguelikeCurseNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> clear_curse_map = 10; */
        for (let k of Object.keys(message.clearCurseMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.clearCurseMap[k as any]).join();
        /* optional bool is_clear_all = 11; */
        if (message.isClearAll !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isClearAll);
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cardId);
        /* optional bool is_curse_all_clear = 1; */
        if (message.isCurseAllClear !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isCurseAllClear);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClearRoguelikeCurseNotify
 */
export const ClearRoguelikeCurseNotify = new ClearRoguelikeCurseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeCardGachaNotify$Type extends MessageType<RoguelikeCardGachaNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeCardGachaNotify", [
            { no: 10, name: "card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_can_refresh", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeCardGachaNotify>): RoguelikeCardGachaNotify {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeCardGachaNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeCardGachaNotify): RoguelikeCardGachaNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 card_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cardList.push(reader.uint32());
                    else
                        message.cardList.push(reader.uint32());
                    break;
                case /* optional bool is_can_refresh */ 11:
                    message.isCanRefresh = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeCardGachaNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 card_list = 10; */
        for (let i = 0; i < message.cardList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.cardList[i]);
        /* optional bool is_can_refresh = 11; */
        if (message.isCanRefresh !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isCanRefresh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeCardGachaNotify
 */
export const RoguelikeCardGachaNotify = new RoguelikeCardGachaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueSwitchAvatarReq$Type extends MessageType<RogueSwitchAvatarReq> {
    constructor() {
        super("com.midnights.game.RogueSwitchAvatarReq", [
            { no: 15, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "cur_avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueSwitchAvatarReq>): RogueSwitchAvatarReq {
        const message = { onstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueSwitchAvatarReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueSwitchAvatarReq): RogueSwitchAvatarReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cell_id */ 15:
                    message.cellId = reader.uint32();
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint64 cur_avatar_guid */ 11:
                    message.curAvatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueSwitchAvatarReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cell_id = 15; */
        if (message.cellId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cellId);
        /* repeated uint64 onstage_avatar_guid_list = 3; */
        for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
            writer.tag(3, WireType.Varint).uint64(message.onstageAvatarGuidList[i]);
        /* optional uint64 cur_avatar_guid = 11; */
        if (message.curAvatarGuid !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.curAvatarGuid);
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueSwitchAvatarReq
 */
export const RogueSwitchAvatarReq = new RogueSwitchAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueSwitchAvatarRsp$Type extends MessageType<RogueSwitchAvatarRsp> {
    constructor() {
        super("com.midnights.game.RogueSwitchAvatarRsp", [
            { no: 4, name: "cur_avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<RogueSwitchAvatarRsp>): RogueSwitchAvatarRsp {
        const message = { backstageAvatarGuidList: [], onstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueSwitchAvatarRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueSwitchAvatarRsp): RogueSwitchAvatarRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 cur_avatar_guid */ 4:
                    message.curAvatarGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 3:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueSwitchAvatarRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 cur_avatar_guid = 4; */
        if (message.curAvatarGuid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.curAvatarGuid);
        /* repeated uint64 backstage_avatar_guid_list = 8; */
        for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
            writer.tag(8, WireType.Varint).uint64(message.backstageAvatarGuidList[i]);
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 3; */
        if (message.cellId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* repeated uint64 onstage_avatar_guid_list = 9; */
        for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
            writer.tag(9, WireType.Varint).uint64(message.onstageAvatarGuidList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueSwitchAvatarRsp
 */
export const RogueSwitchAvatarRsp = new RogueSwitchAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableRoguelikeTrapNotify$Type extends MessageType<DisableRoguelikeTrapNotify> {
    constructor() {
        super("com.midnights.game.DisableRoguelikeTrapNotify", [
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DisableRoguelikeTrapNotify>): DisableRoguelikeTrapNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DisableRoguelikeTrapNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisableRoguelikeTrapNotify): DisableRoguelikeTrapNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DisableRoguelikeTrapNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DisableRoguelikeTrapNotify
 */
export const DisableRoguelikeTrapNotify = new DisableRoguelikeTrapNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRuneRecordUpdateNotify$Type extends MessageType<RoguelikeRuneRecordUpdateNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeRuneRecordUpdateNotify", [
            { no: 11, name: "rune_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoguelikeRuneRecord }
        ]);
    }
    create(value?: PartialMessage<RoguelikeRuneRecordUpdateNotify>): RoguelikeRuneRecordUpdateNotify {
        const message = { runeRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeRuneRecordUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeRuneRecordUpdateNotify): RoguelikeRuneRecordUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 11:
                    message.runeRecordList.push(RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeRuneRecordUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 11; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRuneRecordUpdateNotify
 */
export const RoguelikeRuneRecordUpdateNotify = new RoguelikeRuneRecordUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeMistClearNotify$Type extends MessageType<RoguelikeMistClearNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeMistClearNotify", []);
    }
    create(value?: PartialMessage<RoguelikeMistClearNotify>): RoguelikeMistClearNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeMistClearNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeMistClearNotify): RoguelikeMistClearNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RoguelikeMistClearNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeMistClearNotify
 */
export const RoguelikeMistClearNotify = new RoguelikeMistClearNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectDataNotify$Type extends MessageType<RoguelikeEffectDataNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeEffectDataNotify", [
            { no: 7, name: "curse_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueEffectRecord },
            { no: 4, name: "card_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueEffectRecord }
        ]);
    }
    create(value?: PartialMessage<RoguelikeEffectDataNotify>): RoguelikeEffectDataNotify {
        const message = { curseList: [], cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeEffectDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeEffectDataNotify): RoguelikeEffectDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueEffectRecord curse_list */ 7:
                    message.curseList.push(RogueEffectRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RogueEffectRecord card_list */ 4:
                    message.cardList.push(RogueEffectRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeEffectDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueEffectRecord curse_list = 7; */
        for (let i = 0; i < message.curseList.length; i++)
            RogueEffectRecord.internalBinaryWrite(message.curseList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RogueEffectRecord card_list = 4; */
        for (let i = 0; i < message.cardList.length; i++)
            RogueEffectRecord.internalBinaryWrite(message.cardList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectDataNotify
 */
export const RoguelikeEffectDataNotify = new RoguelikeEffectDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectViewReq$Type extends MessageType<RoguelikeEffectViewReq> {
    constructor() {
        super("com.midnights.game.RoguelikeEffectViewReq", [
            { no: 10, name: "view_curse_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "view_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeEffectViewReq>): RoguelikeEffectViewReq {
        const message = { viewCurseList: [], viewCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeEffectViewReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeEffectViewReq): RoguelikeEffectViewReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 view_curse_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewCurseList.push(reader.uint32());
                    else
                        message.viewCurseList.push(reader.uint32());
                    break;
                case /* repeated uint32 view_card_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewCardList.push(reader.uint32());
                    else
                        message.viewCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeEffectViewReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 view_curse_list = 10; */
        for (let i = 0; i < message.viewCurseList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.viewCurseList[i]);
        /* repeated uint32 view_card_list = 2; */
        for (let i = 0; i < message.viewCardList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.viewCardList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectViewReq
 */
export const RoguelikeEffectViewReq = new RoguelikeEffectViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectViewRsp$Type extends MessageType<RoguelikeEffectViewRsp> {
    constructor() {
        super("com.midnights.game.RoguelikeEffectViewRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeEffectViewRsp>): RoguelikeEffectViewRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeEffectViewRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeEffectViewRsp): RoguelikeEffectViewRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeEffectViewRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectViewRsp
 */
export const RoguelikeEffectViewRsp = new RoguelikeEffectViewRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeResourceBonusPropUpdateNotify$Type extends MessageType<RoguelikeResourceBonusPropUpdateNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeResourceBonusPropUpdateNotify", [
            { no: 12, name: "bonus_resource_prop", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeResourceBonusPropUpdateNotify>): RoguelikeResourceBonusPropUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeResourceBonusPropUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeResourceBonusPropUpdateNotify): RoguelikeResourceBonusPropUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float bonus_resource_prop */ 12:
                    message.bonusResourceProp = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeResourceBonusPropUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float bonus_resource_prop = 12; */
        if (message.bonusResourceProp !== undefined)
            writer.tag(12, WireType.Bit32).float(message.bonusResourceProp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeResourceBonusPropUpdateNotify
 */
export const RoguelikeResourceBonusPropUpdateNotify = new RoguelikeResourceBonusPropUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSettleCoinInfo$Type extends MessageType<RoguelikeSettleCoinInfo> {
    constructor() {
        super("com.midnights.game.RoguelikeSettleCoinInfo", [
            { no: 8, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "cell_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeSettleCoinInfo>): RoguelikeSettleCoinInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeSettleCoinInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeSettleCoinInfo): RoguelikeSettleCoinInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin_c */ 8:
                    message.coinC = reader.uint32();
                    break;
                case /* optional uint32 coin_b */ 10:
                    message.coinB = reader.uint32();
                    break;
                case /* optional uint32 cell_num */ 1:
                    message.cellNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeSettleCoinInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 coin_c = 8; */
        if (message.coinC !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.coinC);
        /* optional uint32 coin_b = 10; */
        if (message.coinB !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.coinB);
        /* optional uint32 cell_num = 1; */
        if (message.cellNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cellNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSettleCoinInfo
 */
export const RoguelikeSettleCoinInfo = new RoguelikeSettleCoinInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeDungeonSettleInfo$Type extends MessageType<RoguelikeDungeonSettleInfo> {
    constructor() {
        super("com.midnights.game.RoguelikeDungeonSettleInfo", [
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_final_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "finished_challenge_cell_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => RoguelikeSettleCoinInfo } },
            { no: 13, name: "is_coin_c_reach_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "total_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeDungeonSettleInfo>): RoguelikeDungeonSettleInfo {
        const message = { finishedChallengeCellNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeDungeonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeDungeonSettleInfo): RoguelikeDungeonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_final_level */ 15:
                    message.isFinalLevel = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.RoguelikeSettleCoinInfo> finished_challenge_cell_num_map */ 3:
                    this.binaryReadMap3(message.finishedChallengeCellNumMap, reader, options);
                    break;
                case /* optional bool is_coin_c_reach_limit */ 13:
                    message.isCoinCReachLimit = reader.bool();
                    break;
                case /* optional uint32 cur_level */ 9:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional uint32 total_coin_b_num */ 6:
                    message.totalCoinBNum = reader.uint32();
                    break;
                case /* optional uint32 total_coin_c_num */ 10:
                    message.totalCoinCNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: RoguelikeDungeonSettleInfo["finishedChallengeCellNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RoguelikeDungeonSettleInfo["finishedChallengeCellNumMap"] | undefined, val: RoguelikeDungeonSettleInfo["finishedChallengeCellNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = RoguelikeSettleCoinInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.RoguelikeDungeonSettleInfo.finished_challenge_cell_num_map");
            }
        }
        map[key ?? 0] = val ?? RoguelikeSettleCoinInfo.create();
    }
    internalBinaryWrite(message: RoguelikeDungeonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.stageId);
        /* optional bool is_final_level = 15; */
        if (message.isFinalLevel !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isFinalLevel);
        /* map<uint32, com.midnights.game.RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3; */
        for (let k of Object.keys(message.finishedChallengeCellNumMap)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            RoguelikeSettleCoinInfo.internalBinaryWrite(message.finishedChallengeCellNumMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional bool is_coin_c_reach_limit = 13; */
        if (message.isCoinCReachLimit !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isCoinCReachLimit);
        /* optional uint32 cur_level = 9; */
        if (message.curLevel !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curLevel);
        /* optional uint32 total_coin_b_num = 6; */
        if (message.totalCoinBNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.totalCoinBNum);
        /* optional uint32 total_coin_c_num = 10; */
        if (message.totalCoinCNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.totalCoinCNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeDungeonSettleInfo
 */
export const RoguelikeDungeonSettleInfo = new RoguelikeDungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRefreshCardCostUpdateNotify$Type extends MessageType<RoguelikeRefreshCardCostUpdateNotify> {
    constructor() {
        super("com.midnights.game.RoguelikeRefreshCardCostUpdateNotify", [
            { no: 5, name: "item_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeRefreshCardCostUpdateNotify>): RoguelikeRefreshCardCostUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeRefreshCardCostUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeRefreshCardCostUpdateNotify): RoguelikeRefreshCardCostUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_count */ 5:
                    message.itemCount = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 1:
                    message.itemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeRefreshCardCostUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_count = 5; */
        if (message.itemCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.itemCount);
        /* optional uint32 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRefreshCardCostUpdateNotify
 */
export const RoguelikeRefreshCardCostUpdateNotify = new RoguelikeRefreshCardCostUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigMarkPoint$Type extends MessageType<DigMarkPoint> {
    constructor() {
        super("com.midnights.game.DigMarkPoint", [
            { no: 1, name: "pos", kind: "message", T: () => Vector },
            { no: 13, name: "bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<DigMarkPoint>): DigMarkPoint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigMarkPoint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigMarkPoint): DigMarkPoint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 1:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 bundle_id */ 13:
                    message.bundleId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 3:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigMarkPoint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 1; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 bundle_id = 13; */
        if (message.bundleId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.bundleId);
        /* optional com.midnights.game.Vector rot = 3; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigMarkPoint
 */
export const DigMarkPoint = new DigMarkPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityDetailInfo$Type extends MessageType<DigActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.DigActivityDetailInfo", [
            { no: 15, name: "stage_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dig_mark_point_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DigMarkPoint },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DigActivityDetailInfo>): DigActivityDetailInfo {
        const message = { stageIdList: [], digMarkPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigActivityDetailInfo): DigActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 stage_id_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageIdList.push(reader.uint32());
                    else
                        message.stageIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list */ 11:
                    message.digMarkPointList.push(DigMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 stage_id_list = 15; */
        for (let i = 0; i < message.stageIdList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.stageIdList[i]);
        /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11; */
        for (let i = 0; i < message.digMarkPointList.length; i++)
            DigMarkPoint.internalBinaryWrite(message.digMarkPointList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityDetailInfo
 */
export const DigActivityDetailInfo = new DigActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityMarkPointChangeNotify$Type extends MessageType<DigActivityMarkPointChangeNotify> {
    constructor() {
        super("com.midnights.game.DigActivityMarkPointChangeNotify", [
            { no: 11, name: "dig_mark_point_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DigMarkPoint }
        ]);
    }
    create(value?: PartialMessage<DigActivityMarkPointChangeNotify>): DigActivityMarkPointChangeNotify {
        const message = { digMarkPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigActivityMarkPointChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigActivityMarkPointChangeNotify): DigActivityMarkPointChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list */ 11:
                    message.digMarkPointList.push(DigMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigActivityMarkPointChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11; */
        for (let i = 0; i < message.digMarkPointList.length; i++)
            DigMarkPoint.internalBinaryWrite(message.digMarkPointList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityMarkPointChangeNotify
 */
export const DigActivityMarkPointChangeNotify = new DigActivityMarkPointChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityChangeGadgetStateReq$Type extends MessageType<DigActivityChangeGadgetStateReq> {
    constructor() {
        super("com.midnights.game.DigActivityChangeGadgetStateReq", [
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DigActivityChangeGadgetStateReq>): DigActivityChangeGadgetStateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigActivityChangeGadgetStateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigActivityChangeGadgetStateReq): DigActivityChangeGadgetStateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigActivityChangeGadgetStateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityChangeGadgetStateReq
 */
export const DigActivityChangeGadgetStateReq = new DigActivityChangeGadgetStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityChangeGadgetStateRsp$Type extends MessageType<DigActivityChangeGadgetStateRsp> {
    constructor() {
        super("com.midnights.game.DigActivityChangeGadgetStateRsp", [
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DigActivityChangeGadgetStateRsp>): DigActivityChangeGadgetStateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DigActivityChangeGadgetStateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DigActivityChangeGadgetStateRsp): DigActivityChangeGadgetStateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DigActivityChangeGadgetStateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entityId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityChangeGadgetStateRsp
 */
export const DigActivityChangeGadgetStateRsp = new DigActivityChangeGadgetStateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HachiActivityDetailInfo$Type extends MessageType<HachiActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.HachiActivityDetailInfo", [
            { no: 6, name: "stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => HachiStageInfo } }
        ]);
    }
    create(value?: PartialMessage<HachiActivityDetailInfo>): HachiActivityDetailInfo {
        const message = { stageMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HachiActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HachiActivityDetailInfo): HachiActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.HachiStageInfo> stage_map */ 6:
                    this.binaryReadMap6(message.stageMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: HachiActivityDetailInfo["stageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof HachiActivityDetailInfo["stageMap"] | undefined, val: HachiActivityDetailInfo["stageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = HachiStageInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.HachiActivityDetailInfo.stage_map");
            }
        }
        map[key ?? 0] = val ?? HachiStageInfo.create();
    }
    internalBinaryWrite(message: HachiActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.HachiStageInfo> stage_map = 6; */
        for (let k of Object.keys(message.stageMap)) {
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            HachiStageInfo.internalBinaryWrite(message.stageMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HachiActivityDetailInfo
 */
export const HachiActivityDetailInfo = new HachiActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HachiStageInfo$Type extends MessageType<HachiStageInfo> {
    constructor() {
        super("com.midnights.game.HachiStageInfo", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HachiStageInfo>): HachiStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HachiStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HachiStageInfo): HachiStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* optional bool is_finished */ 12:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HachiStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOpen);
        /* optional bool is_finished = 12; */
        if (message.isFinished !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isFinished);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HachiStageInfo
 */
export const HachiStageInfo = new HachiStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampStageInfo$Type extends MessageType<WinterCampStageInfo> {
    constructor() {
        super("com.midnights.game.WinterCampStageInfo", [
            { no: 12, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<WinterCampStageInfo>): WinterCampStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampStageInfo): WinterCampStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_progress */ 12:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 id */ 6:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finished */ 10:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 total_progress */ 9:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 5:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_progress = 12; */
        if (message.curProgress !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curProgress);
        /* optional uint32 id = 6; */
        if (message.id !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.id);
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.openTime);
        /* optional bool is_finished = 10; */
        if (message.isFinished !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinished);
        /* optional uint32 total_progress = 9; */
        if (message.totalProgress !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.totalProgress);
        /* optional com.midnights.game.Vector pos = 5; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampStageInfo
 */
export const WinterCampStageInfo = new WinterCampStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRaceStageInfo$Type extends MessageType<WinterCampRaceStageInfo> {
    constructor() {
        super("com.midnights.game.WinterCampRaceStageInfo", [
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "pos", kind: "message", T: () => Vector },
            { no: 2, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampRaceStageInfo>): WinterCampRaceStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampRaceStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampRaceStageInfo): WinterCampRaceStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 14:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 max_score */ 2:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampRaceStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.openTime);
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional com.midnights.game.Vector pos = 14; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 max_score = 2; */
        if (message.maxScore !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRaceStageInfo
 */
export const WinterCampRaceStageInfo = new WinterCampRaceStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampActivityDetailInfo$Type extends MessageType<WinterCampActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.WinterCampActivityDetailInfo", [
            { no: 9, name: "race_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WinterCampRaceStageInfo },
            { no: 10, name: "battle_info", kind: "message", T: () => WinterCampStageInfo },
            { no: 8, name: "wish_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "battle_taken_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "explore_taken_reward_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "explore_info", kind: "message", T: () => WinterCampStageInfo },
            { no: 2, name: "used_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<WinterCampActivityDetailInfo>): WinterCampActivityDetailInfo {
        const message = { raceInfoList: [], wishIdList: [], battleTakenRewardList: [], exploreTakenRewardList: [], usedItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampActivityDetailInfo): WinterCampActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WinterCampRaceStageInfo race_info_list */ 9:
                    message.raceInfoList.push(WinterCampRaceStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo battle_info */ 10:
                    message.battleInfo = WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                case /* repeated uint32 wish_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.wishIdList.push(reader.uint32());
                    else
                        message.wishIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 battle_taken_reward_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.battleTakenRewardList.push(reader.uint32());
                    else
                        message.battleTakenRewardList.push(reader.uint32());
                    break;
                case /* repeated uint32 explore_taken_reward_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploreTakenRewardList.push(reader.uint32());
                    else
                        message.exploreTakenRewardList.push(reader.uint32());
                    break;
                case /* optional bool is_content_closed */ 15:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo explore_info */ 11:
                    message.exploreInfo = WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                case /* repeated com.midnights.game.ItemParam used_item_list */ 2:
                    message.usedItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WinterCampRaceStageInfo race_info_list = 9; */
        for (let i = 0; i < message.raceInfoList.length; i++)
            WinterCampRaceStageInfo.internalBinaryWrite(message.raceInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.WinterCampStageInfo battle_info = 10; */
        if (message.battleInfo)
            WinterCampStageInfo.internalBinaryWrite(message.battleInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 wish_id_list = 8; */
        for (let i = 0; i < message.wishIdList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.wishIdList[i]);
        /* repeated uint32 battle_taken_reward_list = 14; */
        for (let i = 0; i < message.battleTakenRewardList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.battleTakenRewardList[i]);
        /* repeated uint32 explore_taken_reward_list = 6; */
        for (let i = 0; i < message.exploreTakenRewardList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.exploreTakenRewardList[i]);
        /* optional bool is_content_closed = 15; */
        if (message.isContentClosed !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.WinterCampStageInfo explore_info = 11; */
        if (message.exploreInfo)
            WinterCampStageInfo.internalBinaryWrite(message.exploreInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam used_item_list = 2; */
        for (let i = 0; i < message.usedItemList.length; i++)
            ItemParam.internalBinaryWrite(message.usedItemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampActivityDetailInfo
 */
export const WinterCampActivityDetailInfo = new WinterCampActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampStageInfoChangeNotify$Type extends MessageType<WinterCampStageInfoChangeNotify> {
    constructor() {
        super("com.midnights.game.WinterCampStageInfoChangeNotify", [
            { no: 12, name: "explore_info", kind: "message", T: () => WinterCampStageInfo },
            { no: 4, name: "battle_info", kind: "message", T: () => WinterCampStageInfo }
        ]);
    }
    create(value?: PartialMessage<WinterCampStageInfoChangeNotify>): WinterCampStageInfoChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampStageInfoChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampStageInfoChangeNotify): WinterCampStageInfoChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WinterCampStageInfo explore_info */ 12:
                    message.exploreInfo = WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo battle_info */ 4:
                    message.battleInfo = WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampStageInfoChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.WinterCampStageInfo explore_info = 12; */
        if (message.exploreInfo)
            WinterCampStageInfo.internalBinaryWrite(message.exploreInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.WinterCampStageInfo battle_info = 4; */
        if (message.battleInfo)
            WinterCampStageInfo.internalBinaryWrite(message.battleInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampStageInfoChangeNotify
 */
export const WinterCampStageInfoChangeNotify = new WinterCampStageInfoChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRaceScoreNotify$Type extends MessageType<WinterCampRaceScoreNotify> {
    constructor() {
        super("com.midnights.game.WinterCampRaceScoreNotify", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampRaceScoreNotify>): WinterCampRaceScoreNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampRaceScoreNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampRaceScoreNotify): WinterCampRaceScoreNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 14:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampRaceScoreNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        /* optional uint32 max_score = 14; */
        if (message.maxScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRaceScoreNotify
 */
export const WinterCampRaceScoreNotify = new WinterCampRaceScoreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGiveFriendItemReq$Type extends MessageType<WinterCampGiveFriendItemReq> {
    constructor() {
        super("com.midnights.game.WinterCampGiveFriendItemReq", [
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<WinterCampGiveFriendItemReq>): WinterCampGiveFriendItemReq {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGiveFriendItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGiveFriendItemReq): WinterCampGiveFriendItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 11:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampGiveFriendItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.uid);
        /* repeated com.midnights.game.ItemParam item_list = 11; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGiveFriendItemReq
 */
export const WinterCampGiveFriendItemReq = new WinterCampGiveFriendItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGiveFriendItemRsp$Type extends MessageType<WinterCampGiveFriendItemRsp> {
    constructor() {
        super("com.midnights.game.WinterCampGiveFriendItemRsp", [
            { no: 11, name: "limit_item_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampGiveFriendItemRsp>): WinterCampGiveFriendItemRsp {
        const message = { limitItemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGiveFriendItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGiveFriendItemRsp): WinterCampGiveFriendItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_item_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitItemIdList.push(reader.uint32());
                    else
                        message.limitItemIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampGiveFriendItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 limit_item_id_list = 11; */
        for (let i = 0; i < message.limitItemIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.limitItemIdList[i]);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGiveFriendItemRsp
 */
export const WinterCampGiveFriendItemRsp = new WinterCampGiveFriendItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampSetWishListReq$Type extends MessageType<WinterCampSetWishListReq> {
    constructor() {
        super("com.midnights.game.WinterCampSetWishListReq", [
            { no: 4, name: "item_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampSetWishListReq>): WinterCampSetWishListReq {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampSetWishListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampSetWishListReq): WinterCampSetWishListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 item_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampSetWishListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 item_id_list = 4; */
        for (let i = 0; i < message.itemIdList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.itemIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampSetWishListReq
 */
export const WinterCampSetWishListReq = new WinterCampSetWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampSetWishListRsp$Type extends MessageType<WinterCampSetWishListRsp> {
    constructor() {
        super("com.midnights.game.WinterCampSetWishListRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "item_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampSetWishListRsp>): WinterCampSetWishListRsp {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampSetWishListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampSetWishListRsp): WinterCampSetWishListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 item_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampSetWishListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* repeated uint32 item_id_list = 7; */
        for (let i = 0; i < message.itemIdList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.itemIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampSetWishListRsp
 */
export const WinterCampSetWishListRsp = new WinterCampSetWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampFriendWishData$Type extends MessageType<WinterCampFriendWishData> {
    constructor() {
        super("com.midnights.game.WinterCampFriendWishData", [
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 9, name: "item_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampFriendWishData>): WinterCampFriendWishData {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampFriendWishData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampFriendWishData): WinterCampFriendWishData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 5:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* repeated uint32 item_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampFriendWishData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.nickname);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.uid);
        /* optional com.midnights.game.ProfilePicture profile_picture = 5; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 item_id_list = 9; */
        for (let i = 0; i < message.itemIdList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.itemIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampFriendWishData
 */
export const WinterCampFriendWishData = new WinterCampFriendWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetFriendWishListReq$Type extends MessageType<WinterCampGetFriendWishListReq> {
    constructor() {
        super("com.midnights.game.WinterCampGetFriendWishListReq", []);
    }
    create(value?: PartialMessage<WinterCampGetFriendWishListReq>): WinterCampGetFriendWishListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetFriendWishListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetFriendWishListReq): WinterCampGetFriendWishListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WinterCampGetFriendWishListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetFriendWishListReq
 */
export const WinterCampGetFriendWishListReq = new WinterCampGetFriendWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetFriendWishListRsp$Type extends MessageType<WinterCampGetFriendWishListRsp> {
    constructor() {
        super("com.midnights.game.WinterCampGetFriendWishListRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "wish_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WinterCampFriendWishData }
        ]);
    }
    create(value?: PartialMessage<WinterCampGetFriendWishListRsp>): WinterCampGetFriendWishListRsp {
        const message = { wishDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetFriendWishListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetFriendWishListRsp): WinterCampGetFriendWishListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.WinterCampFriendWishData wish_data_list */ 5:
                    message.wishDataList.push(WinterCampFriendWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampGetFriendWishListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.WinterCampFriendWishData wish_data_list = 5; */
        for (let i = 0; i < message.wishDataList.length; i++)
            WinterCampFriendWishData.internalBinaryWrite(message.wishDataList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetFriendWishListRsp
 */
export const WinterCampGetFriendWishListRsp = new WinterCampGetFriendWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRecvItemNotify$Type extends MessageType<WinterCampRecvItemNotify> {
    constructor() {
        super("com.midnights.game.WinterCampRecvItemNotify", [
            { no: 14, name: "recv_item_data", kind: "message", T: () => WinterCampRecvItemData }
        ]);
    }
    create(value?: PartialMessage<WinterCampRecvItemNotify>): WinterCampRecvItemNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampRecvItemNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampRecvItemNotify): WinterCampRecvItemNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WinterCampRecvItemData recv_item_data */ 14:
                    message.recvItemData = WinterCampRecvItemData.internalBinaryRead(reader, reader.uint32(), options, message.recvItemData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampRecvItemNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.WinterCampRecvItemData recv_item_data = 14; */
        if (message.recvItemData)
            WinterCampRecvItemData.internalBinaryWrite(message.recvItemData, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRecvItemNotify
 */
export const WinterCampRecvItemNotify = new WinterCampRecvItemNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptItemResultInfo$Type extends MessageType<WinterCampAcceptItemResultInfo> {
    constructor() {
        super("com.midnights.game.WinterCampAcceptItemResultInfo", [
            { no: 2, name: "accept_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 6, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "unaccept_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<WinterCampAcceptItemResultInfo>): WinterCampAcceptItemResultInfo {
        const message = { acceptItemList: [], unacceptItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampAcceptItemResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampAcceptItemResultInfo): WinterCampAcceptItemResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam accept_item_list */ 2:
                    message.acceptItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 6:
                    message.uid = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam unaccept_item_list */ 9:
                    message.unacceptItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampAcceptItemResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam accept_item_list = 2; */
        for (let i = 0; i < message.acceptItemList.length; i++)
            ItemParam.internalBinaryWrite(message.acceptItemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 6; */
        if (message.uid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.uid);
        /* repeated com.midnights.game.ItemParam unaccept_item_list = 9; */
        for (let i = 0; i < message.unacceptItemList.length; i++)
            ItemParam.internalBinaryWrite(message.unacceptItemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptItemResultInfo
 */
export const WinterCampAcceptItemResultInfo = new WinterCampAcceptItemResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptGiveItemReq$Type extends MessageType<WinterCampAcceptGiveItemReq> {
    constructor() {
        super("com.midnights.game.WinterCampAcceptGiveItemReq", [
            { no: 11, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampAcceptGiveItemReq>): WinterCampAcceptGiveItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampAcceptGiveItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampAcceptGiveItemReq): WinterCampAcceptGiveItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 11:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampAcceptGiveItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 11; */
        if (message.uid !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptGiveItemReq
 */
export const WinterCampAcceptGiveItemReq = new WinterCampAcceptGiveItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptGiveItemRsp$Type extends MessageType<WinterCampAcceptGiveItemRsp> {
    constructor() {
        super("com.midnights.game.WinterCampAcceptGiveItemRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "accept_item_result_info", kind: "message", T: () => WinterCampAcceptItemResultInfo }
        ]);
    }
    create(value?: PartialMessage<WinterCampAcceptGiveItemRsp>): WinterCampAcceptGiveItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampAcceptGiveItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampAcceptGiveItemRsp): WinterCampAcceptGiveItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info */ 3:
                    message.acceptItemResultInfo = WinterCampAcceptItemResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptItemResultInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampAcceptGiveItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 3; */
        if (message.acceptItemResultInfo)
            WinterCampAcceptItemResultInfo.internalBinaryWrite(message.acceptItemResultInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptGiveItemRsp
 */
export const WinterCampAcceptGiveItemRsp = new WinterCampAcceptGiveItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptAllGiveItemReq$Type extends MessageType<WinterCampAcceptAllGiveItemReq> {
    constructor() {
        super("com.midnights.game.WinterCampAcceptAllGiveItemReq", []);
    }
    create(value?: PartialMessage<WinterCampAcceptAllGiveItemReq>): WinterCampAcceptAllGiveItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampAcceptAllGiveItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampAcceptAllGiveItemReq): WinterCampAcceptAllGiveItemReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WinterCampAcceptAllGiveItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptAllGiveItemReq
 */
export const WinterCampAcceptAllGiveItemReq = new WinterCampAcceptAllGiveItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptAllGiveItemRsp$Type extends MessageType<WinterCampAcceptAllGiveItemRsp> {
    constructor() {
        super("com.midnights.game.WinterCampAcceptAllGiveItemRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "accept_item_result_info", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WinterCampAcceptItemResultInfo }
        ]);
    }
    create(value?: PartialMessage<WinterCampAcceptAllGiveItemRsp>): WinterCampAcceptAllGiveItemRsp {
        const message = { acceptItemResultInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampAcceptAllGiveItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampAcceptAllGiveItemRsp): WinterCampAcceptAllGiveItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info */ 14:
                    message.acceptItemResultInfo.push(WinterCampAcceptItemResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampAcceptAllGiveItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 14; */
        for (let i = 0; i < message.acceptItemResultInfo.length; i++)
            WinterCampAcceptItemResultInfo.internalBinaryWrite(message.acceptItemResultInfo[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptAllGiveItemRsp
 */
export const WinterCampAcceptAllGiveItemRsp = new WinterCampAcceptAllGiveItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetCanGiveFriendItemReq$Type extends MessageType<WinterCampGetCanGiveFriendItemReq> {
    constructor() {
        super("com.midnights.game.WinterCampGetCanGiveFriendItemReq", []);
    }
    create(value?: PartialMessage<WinterCampGetCanGiveFriendItemReq>): WinterCampGetCanGiveFriendItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetCanGiveFriendItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetCanGiveFriendItemReq): WinterCampGetCanGiveFriendItemReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WinterCampGetCanGiveFriendItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemReq
 */
export const WinterCampGetCanGiveFriendItemReq = new WinterCampGetCanGiveFriendItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetCanGiveFriendItemRsp$Type extends MessageType<WinterCampGetCanGiveFriendItemRsp> {
    constructor() {
        super("com.midnights.game.WinterCampGetCanGiveFriendItemRsp", [
            { no: 8, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampGetCanGiveFriendItemRsp>): WinterCampGetCanGiveFriendItemRsp {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetCanGiveFriendItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetCanGiveFriendItemRsp): WinterCampGetCanGiveFriendItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 8:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampGetCanGiveFriendItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 8; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemRsp
 */
export const WinterCampGetCanGiveFriendItemRsp = new WinterCampGetCanGiveFriendItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRecvItemData$Type extends MessageType<WinterCampRecvItemData> {
    constructor() {
        super("com.midnights.game.WinterCampRecvItemData", [
            { no: 2, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 12, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampRecvItemData>): WinterCampRecvItemData {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampRecvItemData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampRecvItemData): WinterCampRecvItemData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 2:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 1:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional string nickname */ 12:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampRecvItemData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 2; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.uid);
        /* optional com.midnights.game.ProfilePicture profile_picture = 1; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string nickname = 12; */
        if (message.nickname !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRecvItemData
 */
export const WinterCampRecvItemData = new WinterCampRecvItemData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetRecvItemListReq$Type extends MessageType<WinterCampGetRecvItemListReq> {
    constructor() {
        super("com.midnights.game.WinterCampGetRecvItemListReq", []);
    }
    create(value?: PartialMessage<WinterCampGetRecvItemListReq>): WinterCampGetRecvItemListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetRecvItemListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetRecvItemListReq): WinterCampGetRecvItemListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WinterCampGetRecvItemListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetRecvItemListReq
 */
export const WinterCampGetRecvItemListReq = new WinterCampGetRecvItemListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetRecvItemListRsp$Type extends MessageType<WinterCampGetRecvItemListRsp> {
    constructor() {
        super("com.midnights.game.WinterCampGetRecvItemListRsp", [
            { no: 8, name: "recv_item_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WinterCampRecvItemData },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampGetRecvItemListRsp>): WinterCampGetRecvItemListRsp {
        const message = { recvItemDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampGetRecvItemListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampGetRecvItemListRsp): WinterCampGetRecvItemListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WinterCampRecvItemData recv_item_data_list */ 8:
                    message.recvItemDataList.push(WinterCampRecvItemData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampGetRecvItemListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WinterCampRecvItemData recv_item_data_list = 8; */
        for (let i = 0; i < message.recvItemDataList.length; i++)
            WinterCampRecvItemData.internalBinaryWrite(message.recvItemDataList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetRecvItemListRsp
 */
export const WinterCampGetRecvItemListRsp = new WinterCampGetRecvItemListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampEditSnowmanCombinationReq$Type extends MessageType<WinterCampEditSnowmanCombinationReq> {
    constructor() {
        super("com.midnights.game.WinterCampEditSnowmanCombinationReq", [
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "combination_info", kind: "message", T: () => CustomGadgetTreeInfo }
        ]);
    }
    create(value?: PartialMessage<WinterCampEditSnowmanCombinationReq>): WinterCampEditSnowmanCombinationReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampEditSnowmanCombinationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampEditSnowmanCombinationReq): WinterCampEditSnowmanCombinationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 6:
                    message.combinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampEditSnowmanCombinationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 6; */
        if (message.combinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampEditSnowmanCombinationReq
 */
export const WinterCampEditSnowmanCombinationReq = new WinterCampEditSnowmanCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampEditSnowmanCombinationRsp$Type extends MessageType<WinterCampEditSnowmanCombinationRsp> {
    constructor() {
        super("com.midnights.game.WinterCampEditSnowmanCombinationRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampEditSnowmanCombinationRsp>): WinterCampEditSnowmanCombinationRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampEditSnowmanCombinationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampEditSnowmanCombinationRsp): WinterCampEditSnowmanCombinationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampEditSnowmanCombinationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampEditSnowmanCombinationRsp
 */
export const WinterCampEditSnowmanCombinationRsp = new WinterCampEditSnowmanCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonSettleNotify$Type extends MessageType<WinterCampTriathlonSettleNotify> {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonSettleNotify", [
            { no: 9, name: "limited_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "normal_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "remain_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "race_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTriathlonSettleNotify>): WinterCampTriathlonSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTriathlonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTriathlonSettleNotify): WinterCampTriathlonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 limited_coin */ 9:
                    message.limitedCoin = reader.uint32();
                    break;
                case /* optional uint32 normal_coin */ 2:
                    message.normalCoin = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 remain_time */ 4:
                    message.remainTime = reader.uint32();
                    break;
                case /* optional uint32 score */ 11:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 race_id */ 15:
                    message.raceId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTriathlonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 limited_coin = 9; */
        if (message.limitedCoin !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.limitedCoin);
        /* optional uint32 normal_coin = 2; */
        if (message.normalCoin !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.normalCoin);
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_success = 3; */
        if (message.isSuccess !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 remain_time = 4; */
        if (message.remainTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.remainTime);
        /* optional uint32 score = 11; */
        if (message.score !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.score);
        /* optional uint32 race_id = 15; */
        if (message.raceId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.raceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonSettleNotify
 */
export const WinterCampTriathlonSettleNotify = new WinterCampTriathlonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeExploreRewardReq$Type extends MessageType<WinterCampTakeExploreRewardReq> {
    constructor() {
        super("com.midnights.game.WinterCampTakeExploreRewardReq", [
            { no: 8, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTakeExploreRewardReq>): WinterCampTakeExploreRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTakeExploreRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTakeExploreRewardReq): WinterCampTakeExploreRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 8:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTakeExploreRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 8; */
        if (message.id !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeExploreRewardReq
 */
export const WinterCampTakeExploreRewardReq = new WinterCampTakeExploreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeExploreRewardRsp$Type extends MessageType<WinterCampTakeExploreRewardRsp> {
    constructor() {
        super("com.midnights.game.WinterCampTakeExploreRewardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTakeExploreRewardRsp>): WinterCampTakeExploreRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTakeExploreRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTakeExploreRewardRsp): WinterCampTakeExploreRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTakeExploreRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeExploreRewardRsp
 */
export const WinterCampTakeExploreRewardRsp = new WinterCampTakeExploreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeBattleRewardReq$Type extends MessageType<WinterCampTakeBattleRewardReq> {
    constructor() {
        super("com.midnights.game.WinterCampTakeBattleRewardReq", [
            { no: 2, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTakeBattleRewardReq>): WinterCampTakeBattleRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTakeBattleRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTakeBattleRewardReq): WinterCampTakeBattleRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTakeBattleRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeBattleRewardReq
 */
export const WinterCampTakeBattleRewardReq = new WinterCampTakeBattleRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeBattleRewardRsp$Type extends MessageType<WinterCampTakeBattleRewardRsp> {
    constructor() {
        super("com.midnights.game.WinterCampTakeBattleRewardRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTakeBattleRewardRsp>): WinterCampTakeBattleRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTakeBattleRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTakeBattleRewardRsp): WinterCampTakeBattleRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTakeBattleRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeBattleRewardRsp
 */
export const WinterCampTakeBattleRewardRsp = new WinterCampTakeBattleRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonRestartReq$Type extends MessageType<WinterCampTriathlonRestartReq> {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonRestartReq", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTriathlonRestartReq>): WinterCampTriathlonRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTriathlonRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTriathlonRestartReq): WinterCampTriathlonRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTriathlonRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonRestartReq
 */
export const WinterCampTriathlonRestartReq = new WinterCampTriathlonRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonRestartRsp$Type extends MessageType<WinterCampTriathlonRestartRsp> {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WinterCampTriathlonRestartRsp>): WinterCampTriathlonRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WinterCampTriathlonRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WinterCampTriathlonRestartRsp): WinterCampTriathlonRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WinterCampTriathlonRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonRestartRsp
 */
export const WinterCampTriathlonRestartRsp = new WinterCampTriathlonRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSettleNotify$Type extends MessageType<MistTrialSettleNotify> {
    constructor() {
        super("com.midnights.game.MistTrialSettleNotify", [
            { no: 15, name: "exhibition_list_data_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 14, name: "exhibition_list_data_result_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "dungeon_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialSettleNotify>): MistTrialSettleNotify {
        const message = { exhibitionListDataRecordMap: {}, exhibitionListDataResultMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialSettleNotify): MistTrialSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> exhibition_list_data_record_map */ 15:
                    this.binaryReadMap15(message.exhibitionListDataRecordMap, reader, options);
                    break;
                case /* map<uint32, uint32> exhibition_list_data_result_map */ 14:
                    this.binaryReadMap14(message.exhibitionListDataResultMap, reader, options);
                    break;
                case /* optional uint32 dungeon_scene_id */ 5:
                    message.dungeonSceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: MistTrialSettleNotify["exhibitionListDataRecordMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MistTrialSettleNotify["exhibitionListDataRecordMap"] | undefined, val: MistTrialSettleNotify["exhibitionListDataRecordMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MistTrialSettleNotify.exhibition_list_data_record_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap14(map: MistTrialSettleNotify["exhibitionListDataResultMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MistTrialSettleNotify["exhibitionListDataResultMap"] | undefined, val: MistTrialSettleNotify["exhibitionListDataResultMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MistTrialSettleNotify.exhibition_list_data_result_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: MistTrialSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> exhibition_list_data_record_map = 15; */
        for (let k of Object.keys(message.exhibitionListDataRecordMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.exhibitionListDataRecordMap[k as any]).join();
        /* map<uint32, uint32> exhibition_list_data_result_map = 14; */
        for (let k of Object.keys(message.exhibitionListDataResultMap))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.exhibitionListDataResultMap[k as any]).join();
        /* optional uint32 dungeon_scene_id = 5; */
        if (message.dungeonSceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.dungeonSceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSettleNotify
 */
export const MistTrialSettleNotify = new MistTrialSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetDungeonExhibitionDataReq$Type extends MessageType<MistTrialGetDungeonExhibitionDataReq> {
    constructor() {
        super("com.midnights.game.MistTrialGetDungeonExhibitionDataReq", [
            { no: 13, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialGetDungeonExhibitionDataReq>): MistTrialGetDungeonExhibitionDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialGetDungeonExhibitionDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialGetDungeonExhibitionDataReq): MistTrialGetDungeonExhibitionDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 13:
                    message.trialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialGetDungeonExhibitionDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 13; */
        if (message.trialId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.trialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataReq
 */
export const MistTrialGetDungeonExhibitionDataReq = new MistTrialGetDungeonExhibitionDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetDungeonExhibitionDataRsp$Type extends MessageType<MistTrialGetDungeonExhibitionDataRsp> {
    constructor() {
        super("com.midnights.game.MistTrialGetDungeonExhibitionDataRsp", [
            { no: 12, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialGetDungeonExhibitionDataRsp>): MistTrialGetDungeonExhibitionDataRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialGetDungeonExhibitionDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialGetDungeonExhibitionDataRsp): MistTrialGetDungeonExhibitionDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 12:
                    message.trialId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialGetDungeonExhibitionDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trial_id = 12; */
        if (message.trialId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.trialId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataRsp
 */
export const MistTrialGetDungeonExhibitionDataRsp = new MistTrialGetDungeonExhibitionDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionLevelData$Type extends MessageType<PotionLevelData> {
    constructor() {
        super("com.midnights.game.PotionLevelData", [
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionLevelData>): PotionLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionLevelData): PotionLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 5:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 2:
                    message.difficultyLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* optional uint32 mode_id = 5; */
        if (message.modeId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.modeId);
        /* optional uint32 difficulty_level = 2; */
        if (message.difficultyLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.difficultyLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionLevelData
 */
export const PotionLevelData = new PotionLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionStageData$Type extends MessageType<PotionStageData> {
    constructor() {
        super("com.midnights.game.PotionStageData", [
            { no: 11, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cool_down_buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "level_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PotionLevelData },
            { no: 13, name: "cool_down_avatar_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionStageData>): PotionStageData {
        const message = { coolDownBuffIdList: [], levelList: [], coolDownAvatarIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionStageData): PotionStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 11:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 cool_down_buff_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.coolDownBuffIdList.push(reader.uint32());
                    else
                        message.coolDownBuffIdList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 15:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.PotionLevelData level_list */ 14:
                    message.levelList.push(PotionLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 cool_down_avatar_id_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.coolDownAvatarIdList.push(reader.uint32());
                    else
                        message.coolDownAvatarIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 11; */
        if (message.stageId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.stageId);
        /* repeated uint32 cool_down_buff_id_list = 2; */
        for (let i = 0; i < message.coolDownBuffIdList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.coolDownBuffIdList[i]);
        /* optional bool is_open = 15; */
        if (message.isOpen !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.PotionLevelData level_list = 14; */
        for (let i = 0; i < message.levelList.length; i++)
            PotionLevelData.internalBinaryWrite(message.levelList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 cool_down_avatar_id_list = 13; */
        for (let i = 0; i < message.coolDownAvatarIdList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.coolDownAvatarIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionStageData
 */
export const PotionStageData = new PotionStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionActivityDetailInfo$Type extends MessageType<PotionActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.PotionActivityDetailInfo", [
            { no: 10, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PotionStageData }
        ]);
    }
    create(value?: PartialMessage<PotionActivityDetailInfo>): PotionActivityDetailInfo {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionActivityDetailInfo): PotionActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PotionStageData stage_list */ 10:
                    message.stageList.push(PotionStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PotionStageData stage_list = 10; */
        for (let i = 0; i < message.stageList.length; i++)
            PotionStageData.internalBinaryWrite(message.stageList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionActivityDetailInfo
 */
export const PotionActivityDetailInfo = new PotionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionResetChallengeReq$Type extends MessageType<PotionResetChallengeReq> {
    constructor() {
        super("com.midnights.game.PotionResetChallengeReq", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionResetChallengeReq>): PotionResetChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionResetChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionResetChallengeReq): PotionResetChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionResetChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionResetChallengeReq
 */
export const PotionResetChallengeReq = new PotionResetChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionResetChallengeRsp$Type extends MessageType<PotionResetChallengeRsp> {
    constructor() {
        super("com.midnights.game.PotionResetChallengeRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "stage_data", kind: "message", T: () => PotionStageData }
        ]);
    }
    create(value?: PartialMessage<PotionResetChallengeRsp>): PotionResetChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionResetChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionResetChallengeRsp): PotionResetChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.PotionStageData stage_data */ 14:
                    message.stageData = PotionStageData.internalBinaryRead(reader, reader.uint32(), options, message.stageData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionResetChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.PotionStageData stage_data = 14; */
        if (message.stageData)
            PotionStageData.internalBinaryWrite(message.stageData, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionResetChallengeRsp
 */
export const PotionResetChallengeRsp = new PotionResetChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionAvatarInfo$Type extends MessageType<PotionAvatarInfo> {
    constructor() {
        super("com.midnights.game.PotionAvatarInfo", [
            { no: 6, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PotionAvatarInfo>): PotionAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionAvatarInfo): PotionAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 6:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 8:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_trial = 6; */
        if (message.isTrial !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 8; */
        if (message.avatarId !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionAvatarInfo
 */
export const PotionAvatarInfo = new PotionAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonReq$Type extends MessageType<PotionEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonReq", [
            { no: 15, name: "buff_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PotionAvatarInfo },
            { no: 2, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionEnterDungeonReq>): PotionEnterDungeonReq {
        const message = { buffIdList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionEnterDungeonReq): PotionEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 buff_id_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PotionAvatarInfo avatar_info_list */ 14:
                    message.avatarInfoList.push(PotionAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 mode_id */ 2:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 buff_id_list = 15; */
        for (let i = 0; i < message.buffIdList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.buffIdList[i]);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        /* repeated com.midnights.game.PotionAvatarInfo avatar_info_list = 14; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            PotionAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 mode_id = 2; */
        if (message.modeId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.modeId);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonReq
 */
export const PotionEnterDungeonReq = new PotionEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonRsp$Type extends MessageType<PotionEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionEnterDungeonRsp>): PotionEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionEnterDungeonRsp): PotionEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonRsp
 */
export const PotionEnterDungeonRsp = new PotionEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionDungeonAvatar$Type extends MessageType<PotionDungeonAvatar> {
    constructor() {
        super("com.midnights.game.PotionDungeonAvatar", [
            { no: 8, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PotionDungeonAvatar>): PotionDungeonAvatar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionDungeonAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionDungeonAvatar): PotionDungeonAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 8:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_trial */ 2:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionDungeonAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_guid = 8; */
        if (message.avatarGuid !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.avatarGuid);
        /* optional bool is_trial = 2; */
        if (message.isTrial !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionDungeonAvatar
 */
export const PotionDungeonAvatar = new PotionDungeonAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonNotify$Type extends MessageType<PotionEnterDungeonNotify> {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonNotify", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "dungeon_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PotionDungeonAvatar },
            { no: 8, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionEnterDungeonNotify>): PotionEnterDungeonNotify {
        const message = { dungeonAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionEnterDungeonNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionEnterDungeonNotify): PotionEnterDungeonNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 7:
                    message.difficultyLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PotionDungeonAvatar dungeon_avatar_list */ 6:
                    message.dungeonAvatarList.push(PotionDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 8:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 5:
                    message.modeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionEnterDungeonNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_level = 7; */
        if (message.difficultyLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficultyLevel);
        /* repeated com.midnights.game.PotionDungeonAvatar dungeon_avatar_list = 6; */
        for (let i = 0; i < message.dungeonAvatarList.length; i++)
            PotionDungeonAvatar.internalBinaryWrite(message.dungeonAvatarList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 8; */
        if (message.levelId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.levelId);
        /* optional uint32 mode_id = 5; */
        if (message.modeId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.modeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonNotify
 */
export const PotionEnterDungeonNotify = new PotionEnterDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionSaveDungeonResultReq$Type extends MessageType<PotionSaveDungeonResultReq> {
    constructor() {
        super("com.midnights.game.PotionSaveDungeonResultReq", [
            { no: 8, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionSaveDungeonResultReq>): PotionSaveDungeonResultReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionSaveDungeonResultReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionSaveDungeonResultReq): PotionSaveDungeonResultReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 8:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionSaveDungeonResultReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 8; */
        if (message.levelId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionSaveDungeonResultReq
 */
export const PotionSaveDungeonResultReq = new PotionSaveDungeonResultReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionSaveDungeonResultRsp$Type extends MessageType<PotionSaveDungeonResultRsp> {
    constructor() {
        super("com.midnights.game.PotionSaveDungeonResultRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionSaveDungeonResultRsp>): PotionSaveDungeonResultRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionSaveDungeonResultRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionSaveDungeonResultRsp): PotionSaveDungeonResultRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionSaveDungeonResultRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionSaveDungeonResultRsp
 */
export const PotionSaveDungeonResultRsp = new PotionSaveDungeonResultRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionRestartDungeonReq$Type extends MessageType<PotionRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.PotionRestartDungeonReq", []);
    }
    create(value?: PartialMessage<PotionRestartDungeonReq>): PotionRestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionRestartDungeonReq): PotionRestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PotionRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionRestartDungeonReq
 */
export const PotionRestartDungeonReq = new PotionRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionRestartDungeonRsp$Type extends MessageType<PotionRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.PotionRestartDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionRestartDungeonRsp>): PotionRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionRestartDungeonRsp): PotionRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionRestartDungeonRsp
 */
export const PotionRestartDungeonRsp = new PotionRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionDungeonResultInfo$Type extends MessageType<PotionDungeonResultInfo> {
    constructor() {
        super("com.midnights.game.PotionDungeonResultInfo", [
            { no: 8, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PotionDungeonResultInfo>): PotionDungeonResultInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PotionDungeonResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PotionDungeonResultInfo): PotionDungeonResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 8:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 9:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 14:
                    message.difficultyLevel = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 11:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 4:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PotionDungeonResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 final_score = 8; */
        if (message.finalScore !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 left_time = 9; */
        if (message.leftTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.leftTime);
        /* optional uint32 difficulty_level = 14; */
        if (message.difficultyLevel !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.difficultyLevel);
        /* optional uint32 mode_id = 11; */
        if (message.modeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.modeId);
        /* optional uint32 level_id = 4; */
        if (message.levelId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionDungeonResultInfo
 */
export const PotionDungeonResultInfo = new PotionDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelLevelData$Type extends MessageType<TanukiTravelLevelData> {
    constructor() {
        super("com.midnights.game.TanukiTravelLevelData", [
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "route_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TanukiTravelLevelData>): TanukiTravelLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TanukiTravelLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TanukiTravelLevelData): TanukiTravelLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 route_id */ 9:
                    message.routeId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 15:
                    message.isFinish = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TanukiTravelLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOpen);
        /* optional uint32 route_id = 9; */
        if (message.routeId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.routeId);
        /* optional bool is_finish = 15; */
        if (message.isFinish !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelLevelData
 */
export const TanukiTravelLevelData = new TanukiTravelLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelActivityDetailInfo$Type extends MessageType<TanukiTravelActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.TanukiTravelActivityDetailInfo", [
            { no: 4, name: "tanuki_travel_level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TanukiTravelLevelData },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "finished_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TanukiTravelActivityDetailInfo>): TanukiTravelActivityDetailInfo {
        const message = { tanukiTravelLevelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TanukiTravelActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TanukiTravelActivityDetailInfo): TanukiTravelActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TanukiTravelLevelData tanuki_travel_level_data_list */ 4:
                    message.tanukiTravelLevelDataList.push(TanukiTravelLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 finished_level_index */ 10:
                    message.finishedLevelIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TanukiTravelActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.TanukiTravelLevelData tanuki_travel_level_data_list = 4; */
        for (let i = 0; i < message.tanukiTravelLevelDataList.length; i++)
            TanukiTravelLevelData.internalBinaryWrite(message.tanukiTravelLevelDataList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 finished_level_index = 10; */
        if (message.finishedLevelIndex !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.finishedLevelIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelActivityDetailInfo
 */
export const TanukiTravelActivityDetailInfo = new TanukiTravelActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelFinishGuideQuestNotify$Type extends MessageType<TanukiTravelFinishGuideQuestNotify> {
    constructor() {
        super("com.midnights.game.TanukiTravelFinishGuideQuestNotify", [
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TanukiTravelFinishGuideQuestNotify>): TanukiTravelFinishGuideQuestNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TanukiTravelFinishGuideQuestNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TanukiTravelFinishGuideQuestNotify): TanukiTravelFinishGuideQuestNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TanukiTravelFinishGuideQuestNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelFinishGuideQuestNotify
 */
export const TanukiTravelFinishGuideQuestNotify = new TanukiTravelFinishGuideQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternProjectionLevelInfo$Type extends MessageType<LanternProjectionLevelInfo> {
    constructor() {
        super("com.midnights.game.LanternProjectionLevelInfo", [
            { no: 1, name: "min_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_can_start", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_show_tips", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LanternProjectionLevelInfo>): LanternProjectionLevelInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternProjectionLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternProjectionLevelInfo): LanternProjectionLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 min_finish_time */ 1:
                    message.minFinishTime = reader.uint32();
                    break;
                case /* optional uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_finished */ 7:
                    message.isFinished = reader.bool();
                    break;
                case /* optional bool is_can_start */ 9:
                    message.isCanStart = reader.bool();
                    break;
                case /* optional bool is_show_tips */ 10:
                    message.isShowTips = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternProjectionLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 min_finish_time = 1; */
        if (message.minFinishTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.minFinishTime);
        /* optional uint32 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.id);
        /* optional bool is_finished = 7; */
        if (message.isFinished !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isFinished);
        /* optional bool is_can_start = 9; */
        if (message.isCanStart !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isCanStart);
        /* optional bool is_show_tips = 10; */
        if (message.isShowTips !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isShowTips);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternProjectionLevelInfo
 */
export const LanternProjectionLevelInfo = new LanternProjectionLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternProjectionInfo$Type extends MessageType<LanternProjectionInfo> {
    constructor() {
        super("com.midnights.game.LanternProjectionInfo", [
            { no: 12, name: "view_switch_tips_list", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["com.midnights.game.ClientInputType", ClientInputType] },
            { no: 6, name: "level_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternProjectionLevelInfo },
            { no: 10, name: "open_stage_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "view_input_tips_list", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["com.midnights.game.ClientInputType", ClientInputType] }
        ]);
    }
    create(value?: PartialMessage<LanternProjectionInfo>): LanternProjectionInfo {
        const message = { viewSwitchTipsList: [], levelList: [], openStageList: [], viewInputTipsList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternProjectionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternProjectionInfo): LanternProjectionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ClientInputType view_switch_tips_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewSwitchTipsList.push(reader.int32());
                    else
                        message.viewSwitchTipsList.push(reader.int32());
                    break;
                case /* repeated com.midnights.game.LanternProjectionLevelInfo level_list */ 6:
                    message.levelList.push(LanternProjectionLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 open_stage_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.openStageList.push(reader.uint32());
                    else
                        message.openStageList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ClientInputType view_input_tips_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewInputTipsList.push(reader.int32());
                    else
                        message.viewInputTipsList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternProjectionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ClientInputType view_switch_tips_list = 12; */
        for (let i = 0; i < message.viewSwitchTipsList.length; i++)
            writer.tag(12, WireType.Varint).int32(message.viewSwitchTipsList[i]);
        /* repeated com.midnights.game.LanternProjectionLevelInfo level_list = 6; */
        for (let i = 0; i < message.levelList.length; i++)
            LanternProjectionLevelInfo.internalBinaryWrite(message.levelList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 open_stage_list = 10; */
        for (let i = 0; i < message.openStageList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.openStageList[i]);
        /* repeated com.midnights.game.ClientInputType view_input_tips_list = 13; */
        for (let i = 0; i < message.viewInputTipsList.length; i++)
            writer.tag(13, WireType.Varint).int32(message.viewInputTipsList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternProjectionInfo
 */
export const LanternProjectionInfo = new LanternProjectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageBundleChallengeInfo$Type extends MessageType<SalvageBundleChallengeInfo> {
    constructor() {
        super("com.midnights.game.SalvageBundleChallengeInfo", [
            { no: 13, name: "finished_bundle_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageBundleChallengeInfo>): SalvageBundleChallengeInfo {
        const message = { finishedBundleList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageBundleChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageBundleChallengeInfo): SalvageBundleChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 finished_bundle_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedBundleList.push(reader.uint32());
                    else
                        message.finishedBundleList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageBundleChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 finished_bundle_list = 13; */
        for (let i = 0; i < message.finishedBundleList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.finishedBundleList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageBundleChallengeInfo
 */
export const SalvageBundleChallengeInfo = new SalvageBundleChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageScoreChallengeInfo$Type extends MessageType<SalvageScoreChallengeInfo> {
    constructor() {
        super("com.midnights.game.SalvageScoreChallengeInfo", [
            { no: 13, name: "salvage_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageScoreChallengeInfo>): SalvageScoreChallengeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageScoreChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageScoreChallengeInfo): SalvageScoreChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 salvage_challenge_id */ 13:
                    message.salvageChallengeId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 7:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageScoreChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 salvage_challenge_id = 13; */
        if (message.salvageChallengeId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.salvageChallengeId);
        /* optional uint32 max_score = 7; */
        if (message.maxScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageScoreChallengeInfo
 */
export const SalvageScoreChallengeInfo = new SalvageScoreChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageChallengeInfo$Type extends MessageType<SalvageChallengeInfo> {
    constructor() {
        super("com.midnights.game.SalvageChallengeInfo", [
            { no: 5, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "bundle_info", kind: "message", oneof: "challengeDetail", T: () => SalvageBundleChallengeInfo },
            { no: 13, name: "score_challenge_info", kind: "message", oneof: "challengeDetail", T: () => SalvageScoreChallengeInfo },
            { no: 2, name: "boss_challenge_id", kind: "scalar", oneof: "challengeDetail", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageChallengeInfo>): SalvageChallengeInfo {
        const message = { challengeDetail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageChallengeInfo): SalvageChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_type */ 5:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 12:
                    message.isUnlock = reader.bool();
                    break;
                case /* com.midnights.game.SalvageBundleChallengeInfo bundle_info */ 11:
                    message.challengeDetail = {
                        oneofKind: "bundleInfo",
                        bundleInfo: SalvageBundleChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, (message.challengeDetail as any).bundleInfo)
                    };
                    break;
                case /* com.midnights.game.SalvageScoreChallengeInfo score_challenge_info */ 13:
                    message.challengeDetail = {
                        oneofKind: "scoreChallengeInfo",
                        scoreChallengeInfo: SalvageScoreChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, (message.challengeDetail as any).scoreChallengeInfo)
                    };
                    break;
                case /* uint32 boss_challenge_id */ 2:
                    message.challengeDetail = {
                        oneofKind: "bossChallengeId",
                        bossChallengeId: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_type = 5; */
        if (message.challengeType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.challengeType);
        /* optional bool is_unlock = 12; */
        if (message.isUnlock !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isUnlock);
        /* com.midnights.game.SalvageBundleChallengeInfo bundle_info = 11; */
        if (message.challengeDetail.oneofKind === "bundleInfo")
            SalvageBundleChallengeInfo.internalBinaryWrite(message.challengeDetail.bundleInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SalvageScoreChallengeInfo score_challenge_info = 13; */
        if (message.challengeDetail.oneofKind === "scoreChallengeInfo")
            SalvageScoreChallengeInfo.internalBinaryWrite(message.challengeDetail.scoreChallengeInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* uint32 boss_challenge_id = 2; */
        if (message.challengeDetail.oneofKind === "bossChallengeId")
            writer.tag(2, WireType.Varint).uint32(message.challengeDetail.bossChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageChallengeInfo
 */
export const SalvageChallengeInfo = new SalvageChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageStageInfo$Type extends MessageType<SalvageStageInfo> {
    constructor() {
        super("com.midnights.game.SalvageStageInfo", [
            { no: 9, name: "challenge_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SalvageChallengeInfo },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageStageInfo>): SalvageStageInfo {
        const message = { challengeInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageStageInfo): SalvageStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SalvageChallengeInfo challenge_info_list */ 9:
                    message.challengeInfoList.push(SalvageChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SalvageChallengeInfo challenge_info_list = 9; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            SalvageChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageStageInfo
 */
export const SalvageStageInfo = new SalvageStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksChallengeInfo$Type extends MessageType<LanternRiteFireworksChallengeInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksChallengeInfo", [
            { no: 13, name: "is_full_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteFireworksChallengeInfo>): LanternRiteFireworksChallengeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteFireworksChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteFireworksChallengeInfo): LanternRiteFireworksChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_full_score */ 13:
                    message.isFullScore = reader.bool();
                    break;
                case /* optional uint32 best_score */ 7:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 3:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteFireworksChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_full_score = 13; */
        if (message.isFullScore !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isFullScore);
        /* optional uint32 best_score = 7; */
        if (message.bestScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.bestScore);
        /* optional uint32 challenge_id = 3; */
        if (message.challengeId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksChallengeInfo
 */
export const LanternRiteFireworksChallengeInfo = new LanternRiteFireworksChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksStageInfo$Type extends MessageType<LanternRiteFireworksStageInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksStageInfo", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "challenge_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternRiteFireworksChallengeInfo },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteFireworksStageInfo>): LanternRiteFireworksStageInfo {
        const message = { challengeInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteFireworksStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteFireworksStageInfo): LanternRiteFireworksStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksChallengeInfo challenge_info_list */ 9:
                    message.challengeInfoList.push(LanternRiteFireworksChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteFireworksStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.LanternRiteFireworksChallengeInfo challenge_info_list = 9; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            LanternRiteFireworksChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksStageInfo
 */
export const LanternRiteFireworksStageInfo = new LanternRiteFireworksStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksInfo$Type extends MessageType<LanternRiteFireworksInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksInfo", [
            { no: 6, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternRiteFireworksStageInfo }
        ]);
    }
    create(value?: PartialMessage<LanternRiteFireworksInfo>): LanternRiteFireworksInfo {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteFireworksInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteFireworksInfo): LanternRiteFireworksInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LanternRiteFireworksStageInfo stage_info_list */ 6:
                    message.stageInfoList.push(LanternRiteFireworksStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteFireworksInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.LanternRiteFireworksStageInfo stage_info_list = 6; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            LanternRiteFireworksStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksInfo
 */
export const LanternRiteFireworksInfo = new LanternRiteFireworksInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteActivityDetailInfo$Type extends MessageType<LanternRiteActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteActivityDetailInfo", [
            { no: 13, name: "projection_info", kind: "message", T: () => LanternProjectionInfo },
            { no: 5, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SalvageStageInfo },
            { no: 8, name: "fireworks_info", kind: "message", T: () => LanternRiteFireworksInfo },
            { no: 2, name: "is_mini_eldritch_dungeon_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_taken_skin_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteActivityDetailInfo>): LanternRiteActivityDetailInfo {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteActivityDetailInfo): LanternRiteActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LanternProjectionInfo projection_info */ 13:
                    message.projectionInfo = LanternProjectionInfo.internalBinaryRead(reader, reader.uint32(), options, message.projectionInfo);
                    break;
                case /* repeated com.midnights.game.SalvageStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(SalvageStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.LanternRiteFireworksInfo fireworks_info */ 8:
                    message.fireworksInfo = LanternRiteFireworksInfo.internalBinaryRead(reader, reader.uint32(), options, message.fireworksInfo);
                    break;
                case /* optional bool is_mini_eldritch_dungeon_open */ 2:
                    message.isMiniEldritchDungeonOpen = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 14:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional bool is_taken_skin_reward */ 6:
                    message.isTakenSkinReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LanternProjectionInfo projection_info = 13; */
        if (message.projectionInfo)
            LanternProjectionInfo.internalBinaryWrite(message.projectionInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.SalvageStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            SalvageStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.LanternRiteFireworksInfo fireworks_info = 8; */
        if (message.fireworksInfo)
            LanternRiteFireworksInfo.internalBinaryWrite(message.fireworksInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_mini_eldritch_dungeon_open = 2; */
        if (message.isMiniEldritchDungeonOpen !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isMiniEldritchDungeonOpen);
        /* optional bool is_content_closed = 14; */
        if (message.isContentClosed !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isContentClosed);
        /* optional bool is_taken_skin_reward = 6; */
        if (message.isTakenSkinReward !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isTakenSkinReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteActivityDetailInfo
 */
export const LanternRiteActivityDetailInfo = new LanternRiteActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishLanternProjectionReq$Type extends MessageType<FinishLanternProjectionReq> {
    constructor() {
        super("com.midnights.game.FinishLanternProjectionReq", [
            { no: 3, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishLanternProjectionReq>): FinishLanternProjectionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishLanternProjectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishLanternProjectionReq): FinishLanternProjectionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_time */ 3:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishLanternProjectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finish_time = 3; */
        if (message.finishTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.finishTime);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishLanternProjectionReq
 */
export const FinishLanternProjectionReq = new FinishLanternProjectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishLanternProjectionRsp$Type extends MessageType<FinishLanternProjectionRsp> {
    constructor() {
        super("com.midnights.game.FinishLanternProjectionRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FinishLanternProjectionRsp>): FinishLanternProjectionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FinishLanternProjectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FinishLanternProjectionRsp): FinishLanternProjectionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FinishLanternProjectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishLanternProjectionRsp
 */
export const FinishLanternProjectionRsp = new FinishLanternProjectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionTipsReq$Type extends MessageType<ViewLanternProjectionTipsReq> {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionTipsReq", [
            { no: 9, name: "is_input_tips", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "input_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ClientInputType", ClientInputType] }
        ]);
    }
    create(value?: PartialMessage<ViewLanternProjectionTipsReq>): ViewLanternProjectionTipsReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewLanternProjectionTipsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewLanternProjectionTipsReq): ViewLanternProjectionTipsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_input_tips */ 9:
                    message.isInputTips = reader.bool();
                    break;
                case /* optional com.midnights.game.ClientInputType input_type */ 10:
                    message.inputType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewLanternProjectionTipsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_input_tips = 9; */
        if (message.isInputTips !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isInputTips);
        /* optional com.midnights.game.ClientInputType input_type = 10; */
        if (message.inputType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.inputType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionTipsReq
 */
export const ViewLanternProjectionTipsReq = new ViewLanternProjectionTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionTipsRsp$Type extends MessageType<ViewLanternProjectionTipsRsp> {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionTipsRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ViewLanternProjectionTipsRsp>): ViewLanternProjectionTipsRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewLanternProjectionTipsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewLanternProjectionTipsRsp): ViewLanternProjectionTipsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewLanternProjectionTipsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionTipsRsp
 */
export const ViewLanternProjectionTipsRsp = new ViewLanternProjectionTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionLevelTipsReq$Type extends MessageType<ViewLanternProjectionLevelTipsReq> {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionLevelTipsReq", [
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ViewLanternProjectionLevelTipsReq>): ViewLanternProjectionLevelTipsReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewLanternProjectionLevelTipsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewLanternProjectionLevelTipsReq): ViewLanternProjectionLevelTipsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewLanternProjectionLevelTipsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionLevelTipsReq
 */
export const ViewLanternProjectionLevelTipsReq = new ViewLanternProjectionLevelTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionLevelTipsRsp$Type extends MessageType<ViewLanternProjectionLevelTipsRsp> {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionLevelTipsRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ViewLanternProjectionLevelTipsRsp>): ViewLanternProjectionLevelTipsRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ViewLanternProjectionLevelTipsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewLanternProjectionLevelTipsRsp): ViewLanternProjectionLevelTipsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewLanternProjectionLevelTipsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionLevelTipsRsp
 */
export const ViewLanternProjectionLevelTipsRsp = new ViewLanternProjectionLevelTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventSettleInfo$Type extends MessageType<SalvagePreventSettleInfo> {
    constructor() {
        super("com.midnights.game.SalvagePreventSettleInfo", [
            { no: 8, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "settle_info", kind: "message", T: () => SalvagePreventGallerySettleInfo }
        ]);
    }
    create(value?: PartialMessage<SalvagePreventSettleInfo>): SalvagePreventSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvagePreventSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvagePreventSettleInfo): SalvagePreventSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 8:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.SalvagePreventGallerySettleInfo settle_info */ 14:
                    message.settleInfo = SalvagePreventGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvagePreventSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 8; */
        if (message.isNewRecord !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.SalvagePreventGallerySettleInfo settle_info = 14; */
        if (message.settleInfo)
            SalvagePreventGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventSettleInfo
 */
export const SalvagePreventSettleInfo = new SalvagePreventSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventSettleNotify$Type extends MessageType<SalvagePreventSettleNotify> {
    constructor() {
        super("com.midnights.game.SalvagePreventSettleNotify", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "settle_info", kind: "message", T: () => SalvagePreventSettleInfo }
        ]);
    }
    create(value?: PartialMessage<SalvagePreventSettleNotify>): SalvagePreventSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvagePreventSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvagePreventSettleNotify): SalvagePreventSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvagePreventSettleInfo settle_info */ 12:
                    message.settleInfo = SalvagePreventSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvagePreventSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.SalvagePreventSettleInfo settle_info = 12; */
        if (message.settleInfo)
            SalvagePreventSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventSettleNotify
 */
export const SalvagePreventSettleNotify = new SalvagePreventSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortSettleInfo$Type extends MessageType<SalvageEscortSettleInfo> {
    constructor() {
        super("com.midnights.game.SalvageEscortSettleInfo", [
            { no: 3, name: "settle_info", kind: "message", T: () => SalvageEscortGallerySettleInfo },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageEscortSettleInfo>): SalvageEscortSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageEscortSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageEscortSettleInfo): SalvageEscortSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SalvageEscortGallerySettleInfo settle_info */ 3:
                    message.settleInfo = SalvageEscortGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageEscortSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SalvageEscortGallerySettleInfo settle_info = 3; */
        if (message.settleInfo)
            SalvageEscortGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortSettleInfo
 */
export const SalvageEscortSettleInfo = new SalvageEscortSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortSettleNotify$Type extends MessageType<SalvageEscortSettleNotify> {
    constructor() {
        super("com.midnights.game.SalvageEscortSettleNotify", [
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_info", kind: "message", T: () => SalvageEscortSettleInfo }
        ]);
    }
    create(value?: PartialMessage<SalvageEscortSettleNotify>): SalvageEscortSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageEscortSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageEscortSettleNotify): SalvageEscortSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvageEscortSettleInfo settle_info */ 15:
                    message.settleInfo = SalvageEscortSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageEscortSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.SalvageEscortSettleInfo settle_info = 15; */
        if (message.settleInfo)
            SalvageEscortSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortSettleNotify
 */
export const SalvageEscortSettleNotify = new SalvageEscortSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteTakeSkinRewardReq$Type extends MessageType<LanternRiteTakeSkinRewardReq> {
    constructor() {
        super("com.midnights.game.LanternRiteTakeSkinRewardReq", []);
    }
    create(value?: PartialMessage<LanternRiteTakeSkinRewardReq>): LanternRiteTakeSkinRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteTakeSkinRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteTakeSkinRewardReq): LanternRiteTakeSkinRewardReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LanternRiteTakeSkinRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteTakeSkinRewardReq
 */
export const LanternRiteTakeSkinRewardReq = new LanternRiteTakeSkinRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteTakeSkinRewardRsp$Type extends MessageType<LanternRiteTakeSkinRewardRsp> {
    constructor() {
        super("com.midnights.game.LanternRiteTakeSkinRewardRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteTakeSkinRewardRsp>): LanternRiteTakeSkinRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteTakeSkinRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteTakeSkinRewardRsp): LanternRiteTakeSkinRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteTakeSkinRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteTakeSkinRewardRsp
 */
export const LanternRiteTakeSkinRewardRsp = new LanternRiteTakeSkinRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventRestartReq$Type extends MessageType<SalvagePreventRestartReq> {
    constructor() {
        super("com.midnights.game.SalvagePreventRestartReq", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvagePreventRestartReq>): SalvagePreventRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvagePreventRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvagePreventRestartReq): SalvagePreventRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvagePreventRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventRestartReq
 */
export const SalvagePreventRestartReq = new SalvagePreventRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventRestartRsp$Type extends MessageType<SalvagePreventRestartRsp> {
    constructor() {
        super("com.midnights.game.SalvagePreventRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvagePreventRestartRsp>): SalvagePreventRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvagePreventRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvagePreventRestartRsp): SalvagePreventRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 12:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvagePreventRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 12; */
        if (message.galleryId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventRestartRsp
 */
export const SalvagePreventRestartRsp = new SalvagePreventRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortRestartReq$Type extends MessageType<SalvageEscortRestartReq> {
    constructor() {
        super("com.midnights.game.SalvageEscortRestartReq", [
            { no: 4, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageEscortRestartReq>): SalvageEscortRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageEscortRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageEscortRestartReq): SalvageEscortRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 4:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageEscortRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 4; */
        if (message.galleryId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortRestartReq
 */
export const SalvageEscortRestartReq = new SalvageEscortRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortRestartRsp$Type extends MessageType<SalvageEscortRestartRsp> {
    constructor() {
        super("com.midnights.game.SalvageEscortRestartRsp", [
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvageEscortRestartRsp>): SalvageEscortRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageEscortRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageEscortRestartRsp): SalvageEscortRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageEscortRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.galleryId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortRestartRsp
 */
export const SalvageEscortRestartRsp = new SalvageEscortRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteStartFireworksReformReq$Type extends MessageType<LanternRiteStartFireworksReformReq> {
    constructor() {
        super("com.midnights.game.LanternRiteStartFireworksReformReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteStartFireworksReformReq>): LanternRiteStartFireworksReformReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteStartFireworksReformReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteStartFireworksReformReq): LanternRiteStartFireworksReformReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteStartFireworksReformReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteStartFireworksReformReq
 */
export const LanternRiteStartFireworksReformReq = new LanternRiteStartFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksReformFactorInfo$Type extends MessageType<LanternRiteFireworksReformFactorInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksReformFactorInfo", [
            { no: 5, name: "factor_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteFireworksReformFactorInfo>): LanternRiteFireworksReformFactorInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteFireworksReformFactorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteFireworksReformFactorInfo): LanternRiteFireworksReformFactorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 factor_value */ 5:
                    message.factorValue = reader.uint32();
                    break;
                case /* optional uint32 factor_id */ 13:
                    message.factorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteFireworksReformFactorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 factor_value = 5; */
        if (message.factorValue !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.factorValue);
        /* optional uint32 factor_id = 13; */
        if (message.factorId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.factorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksReformFactorInfo
 */
export const LanternRiteFireworksReformFactorInfo = new LanternRiteFireworksReformFactorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksReformSkillInfo$Type extends MessageType<LanternRiteFireworksReformSkillInfo> {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksReformSkillInfo", [
            { no: 2, name: "skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "unlock_challenge_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "unlock_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteFireworksReformSkillInfo>): LanternRiteFireworksReformSkillInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteFireworksReformSkillInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteFireworksReformSkillInfo): LanternRiteFireworksReformSkillInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 skill_id */ 2:
                    message.skillId = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 11:
                    message.isUnlock = reader.bool();
                    break;
                case /* optional uint32 unlock_challenge_time */ 1:
                    message.unlockChallengeTime = reader.uint32();
                    break;
                case /* optional uint32 unlock_challenge_id */ 14:
                    message.unlockChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteFireworksReformSkillInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 skill_id = 2; */
        if (message.skillId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.skillId);
        /* optional bool is_unlock = 11; */
        if (message.isUnlock !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isUnlock);
        /* optional uint32 unlock_challenge_time = 1; */
        if (message.unlockChallengeTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.unlockChallengeTime);
        /* optional uint32 unlock_challenge_id = 14; */
        if (message.unlockChallengeId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.unlockChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksReformSkillInfo
 */
export const LanternRiteFireworksReformSkillInfo = new LanternRiteFireworksReformSkillInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteStartFireworksReformRsp$Type extends MessageType<LanternRiteStartFireworksReformRsp> {
    constructor() {
        super("com.midnights.game.LanternRiteStartFireworksReformRsp", [
            { no: 15, name: "factor_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternRiteFireworksReformFactorInfo },
            { no: 13, name: "fire_element_addition_ratio", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stamina_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "skill_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternRiteFireworksReformSkillInfo },
            { no: 6, name: "reform_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "fire_element_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteStartFireworksReformRsp>): LanternRiteStartFireworksReformRsp {
        const message = { factorInfoList: [], skillInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteStartFireworksReformRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteStartFireworksReformRsp): LanternRiteStartFireworksReformRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list */ 15:
                    message.factorInfoList.push(LanternRiteFireworksReformFactorInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 fire_element_addition_ratio */ 13:
                    message.fireElementAdditionRatio = reader.uint32();
                    break;
                case /* optional uint32 stamina_value */ 2:
                    message.staminaValue = reader.uint32();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksReformSkillInfo skill_info_list */ 8:
                    message.skillInfoList.push(LanternRiteFireworksReformSkillInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 reform_score */ 6:
                    message.reformScore = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 fire_element_value */ 14:
                    message.fireElementValue = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteStartFireworksReformRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 15; */
        for (let i = 0; i < message.factorInfoList.length; i++)
            LanternRiteFireworksReformFactorInfo.internalBinaryWrite(message.factorInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 fire_element_addition_ratio = 13; */
        if (message.fireElementAdditionRatio !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.fireElementAdditionRatio);
        /* optional uint32 stamina_value = 2; */
        if (message.staminaValue !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.staminaValue);
        /* repeated com.midnights.game.LanternRiteFireworksReformSkillInfo skill_info_list = 8; */
        for (let i = 0; i < message.skillInfoList.length; i++)
            LanternRiteFireworksReformSkillInfo.internalBinaryWrite(message.skillInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reform_score = 6; */
        if (message.reformScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reformScore);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 fire_element_value = 14; */
        if (message.fireElementValue !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.fireElementValue);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteStartFireworksReformRsp
 */
export const LanternRiteStartFireworksReformRsp = new LanternRiteStartFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteDoFireworksReformReq$Type extends MessageType<LanternRiteDoFireworksReformReq> {
    constructor() {
        super("com.midnights.game.LanternRiteDoFireworksReformReq", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteDoFireworksReformReq>): LanternRiteDoFireworksReformReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteDoFireworksReformReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteDoFireworksReformReq): LanternRiteDoFireworksReformReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 skill_id */ 11:
                    message.skillId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 10:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 factor_id */ 13:
                    message.factorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteDoFireworksReformReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* optional uint32 skill_id = 11; */
        if (message.skillId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.skillId);
        /* optional uint32 challenge_id = 10; */
        if (message.challengeId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 factor_id = 13; */
        if (message.factorId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.factorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteDoFireworksReformReq
 */
export const LanternRiteDoFireworksReformReq = new LanternRiteDoFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteDoFireworksReformRsp$Type extends MessageType<LanternRiteDoFireworksReformRsp> {
    constructor() {
        super("com.midnights.game.LanternRiteDoFireworksReformRsp", [
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_lucky", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "factor_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LanternRiteFireworksReformFactorInfo },
            { no: 10, name: "stamina_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "reform_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fire_element_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "fire_element_addition_ratio", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteDoFireworksReformRsp>): LanternRiteDoFireworksReformRsp {
        const message = { factorInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteDoFireworksReformRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteDoFireworksReformRsp): LanternRiteDoFireworksReformRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_lucky */ 13:
                    message.isLucky = reader.bool();
                    break;
                case /* optional uint32 challenge_id */ 8:
                    message.challengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list */ 2:
                    message.factorInfoList.push(LanternRiteFireworksReformFactorInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stamina_value */ 10:
                    message.staminaValue = reader.uint32();
                    break;
                case /* optional uint32 reform_score */ 15:
                    message.reformScore = reader.uint32();
                    break;
                case /* optional uint32 fire_element_value */ 11:
                    message.fireElementValue = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 fire_element_addition_ratio */ 12:
                    message.fireElementAdditionRatio = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteDoFireworksReformRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* optional bool is_lucky = 13; */
        if (message.isLucky !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isLucky);
        /* optional uint32 challenge_id = 8; */
        if (message.challengeId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.challengeId);
        /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 2; */
        for (let i = 0; i < message.factorInfoList.length; i++)
            LanternRiteFireworksReformFactorInfo.internalBinaryWrite(message.factorInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stamina_value = 10; */
        if (message.staminaValue !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.staminaValue);
        /* optional uint32 reform_score = 15; */
        if (message.reformScore !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.reformScore);
        /* optional uint32 fire_element_value = 11; */
        if (message.fireElementValue !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.fireElementValue);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 fire_element_addition_ratio = 12; */
        if (message.fireElementAdditionRatio !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.fireElementAdditionRatio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteDoFireworksReformRsp
 */
export const LanternRiteDoFireworksReformRsp = new LanternRiteDoFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteEndFireworksReformReq$Type extends MessageType<LanternRiteEndFireworksReformReq> {
    constructor() {
        super("com.midnights.game.LanternRiteEndFireworksReformReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteEndFireworksReformReq>): LanternRiteEndFireworksReformReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteEndFireworksReformReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteEndFireworksReformReq): LanternRiteEndFireworksReformReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteEndFireworksReformReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteEndFireworksReformReq
 */
export const LanternRiteEndFireworksReformReq = new LanternRiteEndFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteEndFireworksReformRsp$Type extends MessageType<LanternRiteEndFireworksReformRsp> {
    constructor() {
        super("com.midnights.game.LanternRiteEndFireworksReformRsp", [
            { no: 10, name: "is_full_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_unlock_fireworks", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock_new_skill", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_stamina_up", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LanternRiteEndFireworksReformRsp>): LanternRiteEndFireworksReformRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LanternRiteEndFireworksReformRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LanternRiteEndFireworksReformRsp): LanternRiteEndFireworksReformRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_full_score */ 10:
                    message.isFullScore = reader.bool();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_unlock_fireworks */ 6:
                    message.isUnlockFireworks = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_unlock_new_skill */ 12:
                    message.isUnlockNewSkill = reader.bool();
                    break;
                case /* optional bool is_stamina_up */ 4:
                    message.isStaminaUp = reader.bool();
                    break;
                case /* optional uint32 final_score */ 13:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 5:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 9:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LanternRiteEndFireworksReformRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_full_score = 10; */
        if (message.isFullScore !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFullScore);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional bool is_unlock_fireworks = 6; */
        if (message.isUnlockFireworks !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isUnlockFireworks);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* optional bool is_unlock_new_skill = 12; */
        if (message.isUnlockNewSkill !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isUnlockNewSkill);
        /* optional bool is_stamina_up = 4; */
        if (message.isStaminaUp !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isStaminaUp);
        /* optional uint32 final_score = 13; */
        if (message.finalScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 challenge_id = 5; */
        if (message.challengeId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.challengeId);
        /* optional bool is_new_record = 9; */
        if (message.isNewRecord !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteEndFireworksReformRsp
 */
export const LanternRiteEndFireworksReformRsp = new LanternRiteEndFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSalvageBundleMarkReq$Type extends MessageType<UpdateSalvageBundleMarkReq> {
    constructor() {
        super("com.midnights.game.UpdateSalvageBundleMarkReq", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSalvageBundleMarkReq>): UpdateSalvageBundleMarkReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSalvageBundleMarkReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSalvageBundleMarkReq): UpdateSalvageBundleMarkReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_type */ 13:
                    message.challengeType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSalvageBundleMarkReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_type = 13; */
        if (message.challengeType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.challengeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateSalvageBundleMarkReq
 */
export const UpdateSalvageBundleMarkReq = new UpdateSalvageBundleMarkReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSalvageBundleMarkRsp$Type extends MessageType<UpdateSalvageBundleMarkRsp> {
    constructor() {
        super("com.midnights.game.UpdateSalvageBundleMarkRsp", [
            { no: 1, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSalvageBundleMarkRsp>): UpdateSalvageBundleMarkRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSalvageBundleMarkRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSalvageBundleMarkRsp): UpdateSalvageBundleMarkRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_type */ 1:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSalvageBundleMarkRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_type = 1; */
        if (message.challengeType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeType);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateSalvageBundleMarkRsp
 */
export const UpdateSalvageBundleMarkRsp = new UpdateSalvageBundleMarkRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStage$Type extends MessageType<MichiaeMatsuriStage> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStage", [
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriStage>): MichiaeMatsuriStage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriStage): MichiaeMatsuriStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStage
 */
export const MichiaeMatsuriStage = new MichiaeMatsuriStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriChestPositionInfo$Type extends MessageType<MichiaeMatsuriChestPositionInfo> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriChestPositionInfo", [
            { no: 10, name: "pos", kind: "message", T: () => Vector },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriChestPositionInfo>): MichiaeMatsuriChestPositionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriChestPositionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriChestPositionInfo): MichiaeMatsuriChestPositionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 11:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriChestPositionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupId);
        /* optional uint32 config_id = 11; */
        if (message.configId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriChestPositionInfo
 */
export const MichiaeMatsuriChestPositionInfo = new MichiaeMatsuriChestPositionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriChallengePositionInfo$Type extends MessageType<MichiaeMatsuriChallengePositionInfo> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriChallengePositionInfo", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriChallengePositionInfo>): MichiaeMatsuriChallengePositionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriChallengePositionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriChallengePositionInfo): MichiaeMatsuriChallengePositionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 gadget_id */ 7:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 8:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriChallengePositionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.groupId);
        /* optional uint32 gadget_id = 7; */
        if (message.gadgetId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gadgetId);
        /* optional com.midnights.game.Vector pos = 8; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriChallengePositionInfo
 */
export const MichiaeMatsuriChallengePositionInfo = new MichiaeMatsuriChallengePositionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriActivityDetailInfo$Type extends MessageType<MichiaeMatsuriActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriActivityDetailInfo", [
            { no: 6, name: "challenge_pos_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MichiaeMatsuriChallengePositionInfo },
            { no: 13, name: "gain_crystal_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unlocked_crystal_skill_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "chest_pos_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MichiaeMatsuriChestPositionInfo },
            { no: 14, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MichiaeMatsuriStage }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriActivityDetailInfo>): MichiaeMatsuriActivityDetailInfo {
        const message = { challengePosList: [], unlockedCrystalSkillList: [], chestPosList: [], stageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriActivityDetailInfo): MichiaeMatsuriActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MichiaeMatsuriChallengePositionInfo challenge_pos_list */ 6:
                    message.challengePosList.push(MichiaeMatsuriChallengePositionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 gain_crystal_exp */ 13:
                    message.gainCrystalExp = reader.uint32();
                    break;
                case /* repeated uint32 unlocked_crystal_skill_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockedCrystalSkillList.push(reader.uint32());
                    else
                        message.unlockedCrystalSkillList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.MichiaeMatsuriChestPositionInfo chest_pos_list */ 10:
                    message.chestPosList.push(MichiaeMatsuriChestPositionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.MichiaeMatsuriStage stage_list */ 14:
                    message.stageList.push(MichiaeMatsuriStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MichiaeMatsuriChallengePositionInfo challenge_pos_list = 6; */
        for (let i = 0; i < message.challengePosList.length; i++)
            MichiaeMatsuriChallengePositionInfo.internalBinaryWrite(message.challengePosList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gain_crystal_exp = 13; */
        if (message.gainCrystalExp !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.gainCrystalExp);
        /* repeated uint32 unlocked_crystal_skill_list = 2; */
        for (let i = 0; i < message.unlockedCrystalSkillList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.unlockedCrystalSkillList[i]);
        /* repeated com.midnights.game.MichiaeMatsuriChestPositionInfo chest_pos_list = 10; */
        for (let i = 0; i < message.chestPosList.length; i++)
            MichiaeMatsuriChestPositionInfo.internalBinaryWrite(message.chestPosList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.MichiaeMatsuriStage stage_list = 14; */
        for (let i = 0; i < message.stageList.length; i++)
            MichiaeMatsuriStage.internalBinaryWrite(message.stageList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriActivityDetailInfo
 */
export const MichiaeMatsuriActivityDetailInfo = new MichiaeMatsuriActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriDarkPressureLevelUpdateNotify$Type extends MessageType<MichiaeMatsuriDarkPressureLevelUpdateNotify> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify", [
            { no: 8, name: "dark_pressure_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriDarkPressureLevelUpdateNotify>): MichiaeMatsuriDarkPressureLevelUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriDarkPressureLevelUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriDarkPressureLevelUpdateNotify): MichiaeMatsuriDarkPressureLevelUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dark_pressure_level */ 8:
                    message.darkPressureLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriDarkPressureLevelUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dark_pressure_level = 8; */
        if (message.darkPressureLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.darkPressureLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify
 */
export const MichiaeMatsuriDarkPressureLevelUpdateNotify = new MichiaeMatsuriDarkPressureLevelUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriInteractStatueReq$Type extends MessageType<MichiaeMatsuriInteractStatueReq> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriInteractStatueReq", [
            { no: 7, name: "statue_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriInteractStatueReq>): MichiaeMatsuriInteractStatueReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriInteractStatueReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriInteractStatueReq): MichiaeMatsuriInteractStatueReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 statue_entity_id */ 7:
                    message.statueEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriInteractStatueReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 statue_entity_id = 7; */
        if (message.statueEntityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.statueEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriInteractStatueReq
 */
export const MichiaeMatsuriInteractStatueReq = new MichiaeMatsuriInteractStatueReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriInteractStatueRsp$Type extends MessageType<MichiaeMatsuriInteractStatueRsp> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriInteractStatueRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriInteractStatueRsp>): MichiaeMatsuriInteractStatueRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriInteractStatueRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriInteractStatueRsp): MichiaeMatsuriInteractStatueRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriInteractStatueRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriInteractStatueRsp
 */
export const MichiaeMatsuriInteractStatueRsp = new MichiaeMatsuriInteractStatueRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriUnlockCrystalSkillReq$Type extends MessageType<MichiaeMatsuriUnlockCrystalSkillReq> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq", [
            { no: 1, name: "crystal_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriUnlockCrystalSkillReq>): MichiaeMatsuriUnlockCrystalSkillReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriUnlockCrystalSkillReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriUnlockCrystalSkillReq): MichiaeMatsuriUnlockCrystalSkillReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crystal_skill_id */ 1:
                    message.crystalSkillId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriUnlockCrystalSkillReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 crystal_skill_id = 1; */
        if (message.crystalSkillId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.crystalSkillId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq
 */
export const MichiaeMatsuriUnlockCrystalSkillReq = new MichiaeMatsuriUnlockCrystalSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriUnlockCrystalSkillRsp$Type extends MessageType<MichiaeMatsuriUnlockCrystalSkillRsp> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp", [
            { no: 1, name: "crystal_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriUnlockCrystalSkillRsp>): MichiaeMatsuriUnlockCrystalSkillRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriUnlockCrystalSkillRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriUnlockCrystalSkillRsp): MichiaeMatsuriUnlockCrystalSkillRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crystal_skill_id */ 1:
                    message.crystalSkillId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriUnlockCrystalSkillRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 crystal_skill_id = 1; */
        if (message.crystalSkillId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.crystalSkillId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp
 */
export const MichiaeMatsuriUnlockCrystalSkillRsp = new MichiaeMatsuriUnlockCrystalSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartBossChallengeReq$Type extends MessageType<MichiaeMatsuriStartBossChallengeReq> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartBossChallengeReq", [
            { no: 5, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriStartBossChallengeReq>): MichiaeMatsuriStartBossChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriStartBossChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriStartBossChallengeReq): MichiaeMatsuriStartBossChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 5:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 15:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriStartBossChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty = 5; */
        if (message.difficulty !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.difficulty);
        /* optional uint32 gadget_entity_id = 15; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeReq
 */
export const MichiaeMatsuriStartBossChallengeReq = new MichiaeMatsuriStartBossChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartBossChallengeRsp$Type extends MessageType<MichiaeMatsuriStartBossChallengeRsp> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartBossChallengeRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriStartBossChallengeRsp>): MichiaeMatsuriStartBossChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriStartBossChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriStartBossChallengeRsp): MichiaeMatsuriStartBossChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriStartBossChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeRsp
 */
export const MichiaeMatsuriStartBossChallengeRsp = new MichiaeMatsuriStartBossChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartDarkChallengeReq$Type extends MessageType<MichiaeMatsuriStartDarkChallengeReq> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartDarkChallengeReq", [
            { no: 2, name: "worktop_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriStartDarkChallengeReq>): MichiaeMatsuriStartDarkChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriStartDarkChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriStartDarkChallengeReq): MichiaeMatsuriStartDarkChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 worktop_entity_id */ 2:
                    message.worktopEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriStartDarkChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 worktop_entity_id = 2; */
        if (message.worktopEntityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.worktopEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeReq
 */
export const MichiaeMatsuriStartDarkChallengeReq = new MichiaeMatsuriStartDarkChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartDarkChallengeRsp$Type extends MessageType<MichiaeMatsuriStartDarkChallengeRsp> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriStartDarkChallengeRsp>): MichiaeMatsuriStartDarkChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriStartDarkChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriStartDarkChallengeRsp): MichiaeMatsuriStartDarkChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriStartDarkChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp
 */
export const MichiaeMatsuriStartDarkChallengeRsp = new MichiaeMatsuriStartDarkChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriRemoveChestMarkNotify$Type extends MessageType<MichiaeMatsuriRemoveChestMarkNotify> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify", [
            { no: 9, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriRemoveChestMarkNotify>): MichiaeMatsuriRemoveChestMarkNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriRemoveChestMarkNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriRemoveChestMarkNotify): MichiaeMatsuriRemoveChestMarkNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 config_id */ 9:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 11:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriRemoveChestMarkNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 config_id = 9; */
        if (message.configId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.configId);
        /* optional uint32 group_id = 11; */
        if (message.groupId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify
 */
export const MichiaeMatsuriRemoveChestMarkNotify = new MichiaeMatsuriRemoveChestMarkNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriRemoveChallengeMarkNotify$Type extends MessageType<MichiaeMatsuriRemoveChallengeMarkNotify> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify", [
            { no: 9, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriRemoveChallengeMarkNotify>): MichiaeMatsuriRemoveChallengeMarkNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriRemoveChallengeMarkNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriRemoveChallengeMarkNotify): MichiaeMatsuriRemoveChallengeMarkNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_id */ 9:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriRemoveChallengeMarkNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gadget_id = 9; */
        if (message.gadgetId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gadgetId);
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify
 */
export const MichiaeMatsuriRemoveChallengeMarkNotify = new MichiaeMatsuriRemoveChallengeMarkNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriGainCrystalExpUpdateNotify$Type extends MessageType<MichiaeMatsuriGainCrystalExpUpdateNotify> {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify", [
            { no: 2, name: "gain_crystal_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MichiaeMatsuriGainCrystalExpUpdateNotify>): MichiaeMatsuriGainCrystalExpUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MichiaeMatsuriGainCrystalExpUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MichiaeMatsuriGainCrystalExpUpdateNotify): MichiaeMatsuriGainCrystalExpUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gain_crystal_exp */ 2:
                    message.gainCrystalExp = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MichiaeMatsuriGainCrystalExpUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gain_crystal_exp = 2; */
        if (message.gainCrystalExp !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.gainCrystalExp);
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify
 */
export const MichiaeMatsuriGainCrystalExpUpdateNotify = new MichiaeMatsuriGainCrystalExpUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderTaskInfo$Type extends MessageType<BartenderTaskInfo> {
    constructor() {
        super("com.midnights.game.BartenderTaskInfo", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderTaskInfo>): BartenderTaskInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderTaskInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderTaskInfo): BartenderTaskInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_finish */ 14:
                    message.isFinish = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderTaskInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* optional bool is_finish = 14; */
        if (message.isFinish !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderTaskInfo
 */
export const BartenderTaskInfo = new BartenderTaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderLevelInfo$Type extends MessageType<BartenderLevelInfo> {
    constructor() {
        super("com.midnights.game.BartenderLevelInfo", [
            { no: 7, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderLevelInfo>): BartenderLevelInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderLevelInfo): BartenderLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 7:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 max_score */ 9:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 id */ 4:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finish = 7; */
        if (message.isFinish !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isFinish);
        /* optional uint32 max_score = 9; */
        if (message.maxScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 id = 4; */
        if (message.id !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderLevelInfo
 */
export const BartenderLevelInfo = new BartenderLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderActivityDetailInfo$Type extends MessageType<BartenderActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.BartenderActivityDetailInfo", [
            { no: 3, name: "unlock_item_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_develop_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "unlock_level_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BartenderLevelInfo },
            { no: 14, name: "unlock_formula_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unlock_task_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => BartenderTaskInfo }
        ]);
    }
    create(value?: PartialMessage<BartenderActivityDetailInfo>): BartenderActivityDetailInfo {
        const message = { unlockItemList: [], unlockLevelList: [], unlockFormulaList: [], unlockTaskList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderActivityDetailInfo): BartenderActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlock_item_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockItemList.push(reader.uint32());
                    else
                        message.unlockItemList.push(reader.uint32());
                    break;
                case /* optional bool is_develop_module_open */ 13:
                    message.isDevelopModuleOpen = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 6:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.BartenderLevelInfo unlock_level_list */ 5:
                    message.unlockLevelList.push(BartenderLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 unlock_formula_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockFormulaList.push(reader.uint32());
                    else
                        message.unlockFormulaList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.BartenderTaskInfo unlock_task_list */ 2:
                    message.unlockTaskList.push(BartenderTaskInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 unlock_item_list = 3; */
        for (let i = 0; i < message.unlockItemList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.unlockItemList[i]);
        /* optional bool is_develop_module_open = 13; */
        if (message.isDevelopModuleOpen !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isDevelopModuleOpen);
        /* optional bool is_content_closed = 6; */
        if (message.isContentClosed !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.BartenderLevelInfo unlock_level_list = 5; */
        for (let i = 0; i < message.unlockLevelList.length; i++)
            BartenderLevelInfo.internalBinaryWrite(message.unlockLevelList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 unlock_formula_list = 14; */
        for (let i = 0; i < message.unlockFormulaList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.unlockFormulaList[i]);
        /* repeated com.midnights.game.BartenderTaskInfo unlock_task_list = 2; */
        for (let i = 0; i < message.unlockTaskList.length; i++)
            BartenderTaskInfo.internalBinaryWrite(message.unlockTaskList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderActivityDetailInfo
 */
export const BartenderActivityDetailInfo = new BartenderActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCompleteOrderReq$Type extends MessageType<BartenderCompleteOrderReq> {
    constructor() {
        super("com.midnights.game.BartenderCompleteOrderReq", [
            { no: 14, name: "cup_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "qte_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 9, name: "is_view_formula", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "optional_order_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retry_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCompleteOrderReq>): BartenderCompleteOrderReq {
        const message = { itemList: [], optionalOrderList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCompleteOrderReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCompleteOrderReq): BartenderCompleteOrderReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cup_type */ 14:
                    message.cupType = reader.uint32();
                    break;
                case /* optional uint32 qte_count */ 7:
                    message.qteCount = reader.uint32();
                    break;
                case /* optional uint32 quest_id */ 11:
                    message.questId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 10:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_view_formula */ 9:
                    message.isViewFormula = reader.bool();
                    break;
                case /* repeated uint32 optional_order_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionalOrderList.push(reader.uint32());
                    else
                        message.optionalOrderList.push(reader.uint32());
                    break;
                case /* optional uint32 retry_count */ 3:
                    message.retryCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCompleteOrderReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cup_type = 14; */
        if (message.cupType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cupType);
        /* optional uint32 qte_count = 7; */
        if (message.qteCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.qteCount);
        /* optional uint32 quest_id = 11; */
        if (message.questId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.questId);
        /* repeated com.midnights.game.ItemParam item_list = 10; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_view_formula = 9; */
        if (message.isViewFormula !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isViewFormula);
        /* repeated uint32 optional_order_list = 6; */
        for (let i = 0; i < message.optionalOrderList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.optionalOrderList[i]);
        /* optional uint32 retry_count = 3; */
        if (message.retryCount !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.retryCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCompleteOrderReq
 */
export const BartenderCompleteOrderReq = new BartenderCompleteOrderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCompleteOrderRsp$Type extends MessageType<BartenderCompleteOrderRsp> {
    constructor() {
        super("com.midnights.game.BartenderCompleteOrderRsp", [
            { no: 10, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "finish_order_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "formula_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "affix_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCompleteOrderRsp>): BartenderCompleteOrderRsp {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCompleteOrderRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCompleteOrderRsp): BartenderCompleteOrderRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 10:
                    message.isNew = reader.bool();
                    break;
                case /* optional uint32 finish_order_id */ 3:
                    message.finishOrderId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 formula_id */ 6:
                    message.formulaId = reader.uint32();
                    break;
                case /* optional uint32 quest_id */ 15:
                    message.questId = reader.uint32();
                    break;
                case /* repeated uint32 affix_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCompleteOrderRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new = 10; */
        if (message.isNew !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isNew);
        /* optional uint32 finish_order_id = 3; */
        if (message.finishOrderId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.finishOrderId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 formula_id = 6; */
        if (message.formulaId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.formulaId);
        /* optional uint32 quest_id = 15; */
        if (message.questId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.questId);
        /* repeated uint32 affix_list = 2; */
        for (let i = 0; i < message.affixList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.affixList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCompleteOrderRsp
 */
export const BartenderCompleteOrderRsp = new BartenderCompleteOrderRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelOrderReq$Type extends MessageType<BartenderCancelOrderReq> {
    constructor() {
        super("com.midnights.game.BartenderCancelOrderReq", [
            { no: 3, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCancelOrderReq>): BartenderCancelOrderReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCancelOrderReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCancelOrderReq): BartenderCancelOrderReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCancelOrderReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quest_id = 3; */
        if (message.questId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelOrderReq
 */
export const BartenderCancelOrderReq = new BartenderCancelOrderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelOrderRsp$Type extends MessageType<BartenderCancelOrderRsp> {
    constructor() {
        super("com.midnights.game.BartenderCancelOrderRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCancelOrderRsp>): BartenderCancelOrderRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCancelOrderRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCancelOrderRsp): BartenderCancelOrderRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCancelOrderRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 quest_id = 3; */
        if (message.questId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelOrderRsp
 */
export const BartenderCancelOrderRsp = new BartenderCancelOrderRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderGetFormulaReq$Type extends MessageType<BartenderGetFormulaReq> {
    constructor() {
        super("com.midnights.game.BartenderGetFormulaReq", [
            { no: 7, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 4, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderGetFormulaReq>): BartenderGetFormulaReq {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderGetFormulaReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderGetFormulaReq): BartenderGetFormulaReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 7:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 quest_id */ 4:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderGetFormulaReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 7; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 quest_id = 4; */
        if (message.questId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderGetFormulaReq
 */
export const BartenderGetFormulaReq = new BartenderGetFormulaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderGetFormulaRsp$Type extends MessageType<BartenderGetFormulaRsp> {
    constructor() {
        super("com.midnights.game.BartenderGetFormulaRsp", [
            { no: 12, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "affix_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "formula_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderGetFormulaRsp>): BartenderGetFormulaRsp {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderGetFormulaRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderGetFormulaRsp): BartenderGetFormulaRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 12:
                    message.isNew = reader.bool();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 affix_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                case /* optional uint32 formula_id */ 11:
                    message.formulaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderGetFormulaRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new = 12; */
        if (message.isNew !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isNew);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* repeated uint32 affix_list = 8; */
        for (let i = 0; i < message.affixList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.affixList[i]);
        /* optional uint32 formula_id = 11; */
        if (message.formulaId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.formulaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderGetFormulaRsp
 */
export const BartenderGetFormulaRsp = new BartenderGetFormulaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderStartLevelReq$Type extends MessageType<BartenderStartLevelReq> {
    constructor() {
        super("com.midnights.game.BartenderStartLevelReq", [
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderStartLevelReq>): BartenderStartLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderStartLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderStartLevelReq): BartenderStartLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderStartLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderStartLevelReq
 */
export const BartenderStartLevelReq = new BartenderStartLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderStartLevelRsp$Type extends MessageType<BartenderStartLevelRsp> {
    constructor() {
        super("com.midnights.game.BartenderStartLevelRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "order_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderStartLevelRsp>): BartenderStartLevelRsp {
        const message = { orderList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderStartLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderStartLevelRsp): BartenderStartLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 order_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.orderList.push(reader.uint32());
                    else
                        message.orderList.push(reader.uint32());
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 time */ 8:
                    message.time = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderStartLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* repeated uint32 order_list = 13; */
        for (let i = 0; i < message.orderList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.orderList[i]);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        /* optional uint32 time = 8; */
        if (message.time !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderStartLevelRsp
 */
export const BartenderStartLevelRsp = new BartenderStartLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelLevelReq$Type extends MessageType<BartenderCancelLevelReq> {
    constructor() {
        super("com.midnights.game.BartenderCancelLevelReq", [
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCancelLevelReq>): BartenderCancelLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCancelLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCancelLevelReq): BartenderCancelLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCancelLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelLevelReq
 */
export const BartenderCancelLevelReq = new BartenderCancelLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelLevelRsp$Type extends MessageType<BartenderCancelLevelRsp> {
    constructor() {
        super("com.midnights.game.BartenderCancelLevelRsp", [
            { no: 2, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderCancelLevelRsp>): BartenderCancelLevelRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderCancelLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderCancelLevelRsp): BartenderCancelLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 2:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderCancelLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 2; */
        if (message.levelId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelLevelRsp
 */
export const BartenderCancelLevelRsp = new BartenderCancelLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderLevelProgressNotify$Type extends MessageType<BartenderLevelProgressNotify> {
    constructor() {
        super("com.midnights.game.BartenderLevelProgressNotify", [
            { no: 9, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderLevelProgressNotify>): BartenderLevelProgressNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderLevelProgressNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderLevelProgressNotify): BartenderLevelProgressNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 9:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 score */ 8:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderLevelProgressNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 9; */
        if (message.isNewRecord !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFinish);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional uint32 score = 8; */
        if (message.score !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderLevelProgressNotify
 */
export const BartenderLevelProgressNotify = new BartenderLevelProgressNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderFinishLevelReq$Type extends MessageType<BartenderFinishLevelReq> {
    constructor() {
        super("com.midnights.game.BartenderFinishLevelReq", [
            { no: 6, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderFinishLevelReq>): BartenderFinishLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderFinishLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderFinishLevelReq): BartenderFinishLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 6:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderFinishLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 6; */
        if (message.levelId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderFinishLevelReq
 */
export const BartenderFinishLevelReq = new BartenderFinishLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderFinishLevelRsp$Type extends MessageType<BartenderFinishLevelRsp> {
    constructor() {
        super("com.midnights.game.BartenderFinishLevelRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BartenderFinishLevelRsp>): BartenderFinishLevelRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BartenderFinishLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BartenderFinishLevelRsp): BartenderFinishLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BartenderFinishLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderFinishLevelRsp
 */
export const BartenderFinishLevelRsp = new BartenderFinishLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialCustomDungeon$Type extends MessageType<OfficialCustomDungeon> {
    constructor() {
        super("com.midnights.game.OfficialCustomDungeon", [
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "win_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OfficialCustomDungeon>): OfficialCustomDungeon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OfficialCustomDungeon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OfficialCustomDungeon): OfficialCustomDungeon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 win_times */ 3:
                    message.winTimes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OfficialCustomDungeon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 win_times = 3; */
        if (message.winTimes !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.winTimes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OfficialCustomDungeon
 */
export const OfficialCustomDungeon = new OfficialCustomDungeon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcActivityDetailInfo$Type extends MessageType<UgcActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.UgcActivityDetailInfo", [
            { no: 10, name: "is_ugc_feature_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "custom_dungeon_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "official_custom_dungeon_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OfficialCustomDungeon },
            { no: 11, name: "is_enable_ugc", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UgcActivityDetailInfo>): UgcActivityDetailInfo {
        const message = { officialCustomDungeonList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcActivityDetailInfo): UgcActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_ugc_feature_closed */ 10:
                    message.isUgcFeatureClosed = reader.bool();
                    break;
                case /* optional uint32 custom_dungeon_group_id */ 12:
                    message.customDungeonGroupId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.OfficialCustomDungeon official_custom_dungeon_list */ 5:
                    message.officialCustomDungeonList.push(OfficialCustomDungeon.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_enable_ugc */ 11:
                    message.isEnableUgc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_ugc_feature_closed = 10; */
        if (message.isUgcFeatureClosed !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isUgcFeatureClosed);
        /* optional uint32 custom_dungeon_group_id = 12; */
        if (message.customDungeonGroupId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.customDungeonGroupId);
        /* repeated com.midnights.game.OfficialCustomDungeon official_custom_dungeon_list = 5; */
        for (let i = 0; i < message.officialCustomDungeonList.length; i++)
            OfficialCustomDungeon.internalBinaryWrite(message.officialCustomDungeonList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_enable_ugc = 11; */
        if (message.isEnableUgc !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isEnableUgc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcActivityDetailInfo
 */
export const UgcActivityDetailInfo = new UgcActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkActivityDetailInfo$Type extends MessageType<CrystalLinkActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkActivityDetailInfo", [
            { no: 3, name: "level_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkLevelInfo },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkActivityDetailInfo>): CrystalLinkActivityDetailInfo {
        const message = { levelInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkActivityDetailInfo): CrystalLinkActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkLevelInfo level_info_list */ 3:
                    message.levelInfoList.push(CrystalLinkLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CrystalLinkLevelInfo level_info_list = 3; */
        for (let i = 0; i < message.levelInfoList.length; i++)
            CrystalLinkLevelInfo.internalBinaryWrite(message.levelInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkActivityDetailInfo
 */
export const CrystalLinkActivityDetailInfo = new CrystalLinkActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkLevelInfo$Type extends MessageType<CrystalLinkLevelInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkLevelInfo", [
            { no: 10, name: "team_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkTeamInfo },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkLevelInfo>): CrystalLinkLevelInfo {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkLevelInfo): CrystalLinkLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 10:
                    message.teamInfoList.push(CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 5:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 10; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelId);
        /* optional uint32 best_score = 5; */
        if (message.bestScore !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkLevelInfo
 */
export const CrystalLinkLevelInfo = new CrystalLinkLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkTeamInfo$Type extends MessageType<CrystalLinkTeamInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkTeamInfo", [
            { no: 2, name: "buff_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkBuffInfo },
            { no: 11, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkTeamInfo>): CrystalLinkTeamInfo {
        const message = { buffInfoList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkTeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkTeamInfo): CrystalLinkTeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list */ 2:
                    message.buffInfoList.push(CrystalLinkBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.CrystalLinkAvatarInfo avatar_info_list */ 11:
                    message.avatarInfoList.push(CrystalLinkAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkTeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 2; */
        for (let i = 0; i < message.buffInfoList.length; i++)
            CrystalLinkBuffInfo.internalBinaryWrite(message.buffInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.CrystalLinkAvatarInfo avatar_info_list = 11; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            CrystalLinkAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkTeamInfo
 */
export const CrystalLinkTeamInfo = new CrystalLinkTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkAvatarInfo$Type extends MessageType<CrystalLinkAvatarInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkAvatarInfo", [
            { no: 3, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkAvatarInfo>): CrystalLinkAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkAvatarInfo): CrystalLinkAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_id */ 3:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_trial */ 13:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_id = 3; */
        if (message.avatarId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.avatarId);
        /* optional bool is_trial = 13; */
        if (message.isTrial !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkAvatarInfo
 */
export const CrystalLinkAvatarInfo = new CrystalLinkAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkBuffInfo$Type extends MessageType<CrystalLinkBuffInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkBuffInfo", [
            { no: 1, name: "effect_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "cond_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkBuffInfo>): CrystalLinkBuffInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkBuffInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkBuffInfo): CrystalLinkBuffInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 effect_buff_id */ 1:
                    message.effectBuffId = reader.uint32();
                    break;
                case /* optional uint32 cond_buff_id */ 10:
                    message.condBuffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkBuffInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 effect_buff_id = 1; */
        if (message.effectBuffId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.effectBuffId);
        /* optional uint32 cond_buff_id = 10; */
        if (message.condBuffId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.condBuffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkBuffInfo
 */
export const CrystalLinkBuffInfo = new CrystalLinkBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkEnterDungeonReq$Type extends MessageType<CrystalLinkEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.CrystalLinkEnterDungeonReq", [
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "team_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkTeamInfo },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkEnterDungeonReq>): CrystalLinkEnterDungeonReq {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkEnterDungeonReq): CrystalLinkEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 13:
                    message.teamInfoList.push(CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.levelId);
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 13; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkEnterDungeonReq
 */
export const CrystalLinkEnterDungeonReq = new CrystalLinkEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkEnterDungeonRsp$Type extends MessageType<CrystalLinkEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.CrystalLinkEnterDungeonRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "team_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkTeamInfo }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkEnterDungeonRsp>): CrystalLinkEnterDungeonRsp {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkEnterDungeonRsp): CrystalLinkEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 8:
                    message.teamInfoList.push(CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.levelId);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.difficultyId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 8; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkEnterDungeonRsp
 */
export const CrystalLinkEnterDungeonRsp = new CrystalLinkEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkDungeonAvatarInfo$Type extends MessageType<CrystalLinkDungeonAvatarInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkDungeonAvatarInfo", [
            { no: 8, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkDungeonAvatarInfo>): CrystalLinkDungeonAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkDungeonAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkDungeonAvatarInfo): CrystalLinkDungeonAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 8:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_guid */ 11:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkDungeonAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_trial = 8; */
        if (message.isTrial !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_guid = 11; */
        if (message.avatarGuid !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkDungeonAvatarInfo
 */
export const CrystalLinkDungeonAvatarInfo = new CrystalLinkDungeonAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkDungeonInfoNotify$Type extends MessageType<CrystalLinkDungeonInfoNotify> {
    constructor() {
        super("com.midnights.game.CrystalLinkDungeonInfoNotify", [
            { no: 8, name: "buff_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkBuffInfo },
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_upper_part", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "dungeon_avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CrystalLinkDungeonAvatarInfo },
            { no: 7, name: "init_gallery_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkDungeonInfoNotify>): CrystalLinkDungeonInfoNotify {
        const message = { buffInfoList: [], dungeonAvatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkDungeonInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkDungeonInfoNotify): CrystalLinkDungeonInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list */ 8:
                    message.buffInfoList.push(CrystalLinkBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_upper_part */ 15:
                    message.isUpperPart = reader.bool();
                    break;
                case /* optional uint32 difficulty_id */ 11:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list */ 3:
                    message.dungeonAvatarInfoList.push(CrystalLinkDungeonAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 init_gallery_progress */ 7:
                    message.initGalleryProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkDungeonInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 8; */
        for (let i = 0; i < message.buffInfoList.length; i++)
            CrystalLinkBuffInfo.internalBinaryWrite(message.buffInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.levelId);
        /* optional bool is_upper_part = 15; */
        if (message.isUpperPart !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isUpperPart);
        /* optional uint32 difficulty_id = 11; */
        if (message.difficultyId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 3; */
        for (let i = 0; i < message.dungeonAvatarInfoList.length; i++)
            CrystalLinkDungeonAvatarInfo.internalBinaryWrite(message.dungeonAvatarInfoList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 init_gallery_progress = 7; */
        if (message.initGalleryProgress !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.initGalleryProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkDungeonInfoNotify
 */
export const CrystalLinkDungeonInfoNotify = new CrystalLinkDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkRestartDungeonReq$Type extends MessageType<CrystalLinkRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.CrystalLinkRestartDungeonReq", []);
    }
    create(value?: PartialMessage<CrystalLinkRestartDungeonReq>): CrystalLinkRestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkRestartDungeonReq): CrystalLinkRestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CrystalLinkRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkRestartDungeonReq
 */
export const CrystalLinkRestartDungeonReq = new CrystalLinkRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkRestartDungeonRsp$Type extends MessageType<CrystalLinkRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.CrystalLinkRestartDungeonRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkRestartDungeonRsp>): CrystalLinkRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkRestartDungeonRsp): CrystalLinkRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkRestartDungeonRsp
 */
export const CrystalLinkRestartDungeonRsp = new CrystalLinkRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickOpenActivityReq$Type extends MessageType<QuickOpenActivityReq> {
    constructor() {
        super("com.midnights.game.QuickOpenActivityReq", [
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QuickOpenActivityReq>): QuickOpenActivityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickOpenActivityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickOpenActivityReq): QuickOpenActivityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickOpenActivityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickOpenActivityReq
 */
export const QuickOpenActivityReq = new QuickOpenActivityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickOpenActivityRsp$Type extends MessageType<QuickOpenActivityRsp> {
    constructor() {
        super("com.midnights.game.QuickOpenActivityRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QuickOpenActivityRsp>): QuickOpenActivityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickOpenActivityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickOpenActivityRsp): QuickOpenActivityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickOpenActivityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickOpenActivityRsp
 */
export const QuickOpenActivityRsp = new QuickOpenActivityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessMapData$Type extends MessageType<IrodoriChessMapData> {
    constructor() {
        super("com.midnights.game.IrodoriChessMapData", [
            { no: 6, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "entrance_detail_info", kind: "message", T: () => IrodoriChessEntranceDetailInfo },
            { no: 3, name: "equiped_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessMapData>): IrodoriChessMapData {
        const message = { equipedCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessMapData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessMapData): IrodoriChessMapData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 map_id */ 6:
                    message.mapId = reader.uint32();
                    break;
                case /* optional com.midnights.game.IrodoriChessEntranceDetailInfo entrance_detail_info */ 7:
                    message.entranceDetailInfo = IrodoriChessEntranceDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.entranceDetailInfo);
                    break;
                case /* repeated uint32 equiped_card_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equipedCardList.push(reader.uint32());
                    else
                        message.equipedCardList.push(reader.uint32());
                    break;
                case /* optional uint32 best_score */ 8:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessMapData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 map_id = 6; */
        if (message.mapId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.mapId);
        /* optional com.midnights.game.IrodoriChessEntranceDetailInfo entrance_detail_info = 7; */
        if (message.entranceDetailInfo)
            IrodoriChessEntranceDetailInfo.internalBinaryWrite(message.entranceDetailInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 equiped_card_list = 3; */
        for (let i = 0; i < message.equipedCardList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.equipedCardList[i]);
        /* optional uint32 best_score = 8; */
        if (message.bestScore !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessMapData
 */
export const IrodoriChessMapData = new IrodoriChessMapData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessLevelData$Type extends MessageType<IrodoriChessLevelData> {
    constructor() {
        super("com.midnights.game.IrodoriChessLevelData", [
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "hard_map_data", kind: "message", T: () => IrodoriChessMapData },
            { no: 11, name: "normal_map_data", kind: "message", T: () => IrodoriChessMapData }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessLevelData>): IrodoriChessLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessLevelData): IrodoriChessLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional com.midnights.game.IrodoriChessMapData hard_map_data */ 7:
                    message.hardMapData = IrodoriChessMapData.internalBinaryRead(reader, reader.uint32(), options, message.hardMapData);
                    break;
                case /* optional com.midnights.game.IrodoriChessMapData normal_map_data */ 11:
                    message.normalMapData = IrodoriChessMapData.internalBinaryRead(reader, reader.uint32(), options, message.normalMapData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.openTime);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional com.midnights.game.IrodoriChessMapData hard_map_data = 7; */
        if (message.hardMapData)
            IrodoriChessMapData.internalBinaryWrite(message.hardMapData, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriChessMapData normal_map_data = 11; */
        if (message.normalMapData)
            IrodoriChessMapData.internalBinaryWrite(message.normalMapData, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessLevelData
 */
export const IrodoriChessLevelData = new IrodoriChessLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessData$Type extends MessageType<IrodoriChessData> {
    constructor() {
        super("com.midnights.game.IrodoriChessData", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IrodoriChessLevelData }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessData>): IrodoriChessData {
        const message = { levelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessData): IrodoriChessData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.IrodoriChessLevelData level_data_list */ 1:
                    message.levelDataList.push(IrodoriChessLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.IrodoriChessLevelData level_data_list = 1; */
        for (let i = 0; i < message.levelDataList.length; i++)
            IrodoriChessLevelData.internalBinaryWrite(message.levelDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessData
 */
export const IrodoriChessData = new IrodoriChessData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFlowerData$Type extends MessageType<IrodoriFlowerData> {
    constructor() {
        super("com.midnights.game.IrodoriFlowerData", [
            { no: 1, name: "finished_theme_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "used_flower_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<IrodoriFlowerData>): IrodoriFlowerData {
        const message = { finishedThemeList: [], usedFlowerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriFlowerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriFlowerData): IrodoriFlowerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 finished_theme_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedThemeList.push(reader.uint32());
                    else
                        message.finishedThemeList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam used_flower_list */ 7:
                    message.usedFlowerList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriFlowerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 finished_theme_list = 1; */
        for (let i = 0; i < message.finishedThemeList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.finishedThemeList[i]);
        /* repeated com.midnights.game.ItemParam used_flower_list = 7; */
        for (let i = 0; i < message.usedFlowerList.length; i++)
            ItemParam.internalBinaryWrite(message.usedFlowerList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFlowerData
 */
export const IrodoriFlowerData = new IrodoriFlowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriPoetryThemeData$Type extends MessageType<IrodoriPoetryThemeData> {
    constructor() {
        super("com.midnights.game.IrodoriPoetryThemeData", [
            { no: 1, name: "scanned_index_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "line_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "min_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "selected_line_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriPoetryThemeData>): IrodoriPoetryThemeData {
        const message = { scannedIndexList: [], lineIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriPoetryThemeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriPoetryThemeData): IrodoriPoetryThemeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scanned_index_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scannedIndexList.push(reader.uint32());
                    else
                        message.scannedIndexList.push(reader.uint32());
                    break;
                case /* repeated uint32 line_id_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lineIdList.push(reader.uint32());
                    else
                        message.lineIdList.push(reader.uint32());
                    break;
                case /* optional uint32 max_progress */ 2:
                    message.maxProgress = reader.uint32();
                    break;
                case /* optional uint32 theme_id */ 13:
                    message.themeId = reader.uint32();
                    break;
                case /* optional uint32 progress */ 5:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 min_progress */ 12:
                    message.minProgress = reader.uint32();
                    break;
                case /* optional uint32 selected_line_id */ 9:
                    message.selectedLineId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriPoetryThemeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 scanned_index_list = 1; */
        for (let i = 0; i < message.scannedIndexList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.scannedIndexList[i]);
        /* repeated uint32 line_id_list = 4; */
        for (let i = 0; i < message.lineIdList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.lineIdList[i]);
        /* optional uint32 max_progress = 2; */
        if (message.maxProgress !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.maxProgress);
        /* optional uint32 theme_id = 13; */
        if (message.themeId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.themeId);
        /* optional uint32 progress = 5; */
        if (message.progress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.progress);
        /* optional uint32 min_progress = 12; */
        if (message.minProgress !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.minProgress);
        /* optional uint32 selected_line_id = 9; */
        if (message.selectedLineId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.selectedLineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriPoetryThemeData
 */
export const IrodoriPoetryThemeData = new IrodoriPoetryThemeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriPoetryData$Type extends MessageType<IrodoriPoetryData> {
    constructor() {
        super("com.midnights.game.IrodoriPoetryData", [
            { no: 3, name: "theme_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IrodoriPoetryThemeData },
            { no: 14, name: "cur_theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriPoetryData>): IrodoriPoetryData {
        const message = { themeDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriPoetryData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriPoetryData): IrodoriPoetryData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriPoetryThemeData theme_data_list */ 3:
                    message.themeDataList.push(IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_theme_id */ 14:
                    message.curThemeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriPoetryData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.IrodoriPoetryThemeData theme_data_list = 3; */
        for (let i = 0; i < message.themeDataList.length; i++)
            IrodoriPoetryThemeData.internalBinaryWrite(message.themeDataList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_theme_id = 14; */
        if (message.curThemeId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.curThemeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriPoetryData
 */
export const IrodoriPoetryData = new IrodoriPoetryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterLevelDetailInfo$Type extends MessageType<IrodoriMasterLevelDetailInfo> {
    constructor() {
        super("com.midnights.game.IrodoriMasterLevelDetailInfo", [
            { no: 1, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "diffculty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "min_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_have_try", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterLevelDetailInfo>): IrodoriMasterLevelDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterLevelDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterLevelDetailInfo): IrodoriMasterLevelDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 1:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 diffculty */ 2:
                    message.diffculty = reader.uint32();
                    break;
                case /* optional uint32 min_finish_time */ 8:
                    message.minFinishTime = reader.uint32();
                    break;
                case /* optional bool is_have_try */ 7:
                    message.isHaveTry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterLevelDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finish = 1; */
        if (message.isFinish !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isFinish);
        /* optional uint32 diffculty = 2; */
        if (message.diffculty !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.diffculty);
        /* optional uint32 min_finish_time = 8; */
        if (message.minFinishTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.minFinishTime);
        /* optional bool is_have_try = 7; */
        if (message.isHaveTry !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isHaveTry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterLevelDetailInfo
 */
export const IrodoriMasterLevelDetailInfo = new IrodoriMasterLevelDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterLevelInfo$Type extends MessageType<IrodoriMasterLevelInfo> {
    constructor() {
        super("com.midnights.game.IrodoriMasterLevelInfo", [
            { no: 11, name: "detail_info", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IrodoriMasterLevelDetailInfo },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterLevelInfo>): IrodoriMasterLevelInfo {
        const message = { detailInfo: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterLevelInfo): IrodoriMasterLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriMasterLevelDetailInfo detail_info */ 11:
                    message.detailInfo.push(IrodoriMasterLevelDetailInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.IrodoriMasterLevelDetailInfo detail_info = 11; */
        for (let i = 0; i < message.detailInfo.length; i++)
            IrodoriMasterLevelDetailInfo.internalBinaryWrite(message.detailInfo[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterLevelInfo
 */
export const IrodoriMasterLevelInfo = new IrodoriMasterLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriActivityDetailInfo$Type extends MessageType<IrodoriActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.IrodoriActivityDetailInfo", [
            { no: 11, name: "master_level_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IrodoriMasterLevelInfo },
            { no: 6, name: "flower_data", kind: "message", T: () => IrodoriFlowerData },
            { no: 8, name: "poetry_data", kind: "message", T: () => IrodoriPoetryData },
            { no: 14, name: "chess_data", kind: "message", T: () => IrodoriChessData }
        ]);
    }
    create(value?: PartialMessage<IrodoriActivityDetailInfo>): IrodoriActivityDetailInfo {
        const message = { masterLevelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriActivityDetailInfo): IrodoriActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriMasterLevelInfo master_level_list */ 11:
                    message.masterLevelList.push(IrodoriMasterLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.IrodoriFlowerData flower_data */ 6:
                    message.flowerData = IrodoriFlowerData.internalBinaryRead(reader, reader.uint32(), options, message.flowerData);
                    break;
                case /* optional com.midnights.game.IrodoriPoetryData poetry_data */ 8:
                    message.poetryData = IrodoriPoetryData.internalBinaryRead(reader, reader.uint32(), options, message.poetryData);
                    break;
                case /* optional com.midnights.game.IrodoriChessData chess_data */ 14:
                    message.chessData = IrodoriChessData.internalBinaryRead(reader, reader.uint32(), options, message.chessData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.IrodoriMasterLevelInfo master_level_list = 11; */
        for (let i = 0; i < message.masterLevelList.length; i++)
            IrodoriMasterLevelInfo.internalBinaryWrite(message.masterLevelList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriFlowerData flower_data = 6; */
        if (message.flowerData)
            IrodoriFlowerData.internalBinaryWrite(message.flowerData, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriPoetryData poetry_data = 8; */
        if (message.poetryData)
            IrodoriPoetryData.internalBinaryWrite(message.poetryData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriChessData chess_data = 14; */
        if (message.chessData)
            IrodoriChessData.internalBinaryWrite(message.chessData, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriActivityDetailInfo
 */
export const IrodoriActivityDetailInfo = new IrodoriActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriEditFlowerCombinationReq$Type extends MessageType<IrodoriEditFlowerCombinationReq> {
    constructor() {
        super("com.midnights.game.IrodoriEditFlowerCombinationReq", [
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "combination_info", kind: "message", T: () => CustomGadgetTreeInfo }
        ]);
    }
    create(value?: PartialMessage<IrodoriEditFlowerCombinationReq>): IrodoriEditFlowerCombinationReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriEditFlowerCombinationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriEditFlowerCombinationReq): IrodoriEditFlowerCombinationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 1:
                    message.combinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriEditFlowerCombinationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 1; */
        if (message.combinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriEditFlowerCombinationReq
 */
export const IrodoriEditFlowerCombinationReq = new IrodoriEditFlowerCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriEditFlowerCombinationRsp$Type extends MessageType<IrodoriEditFlowerCombinationRsp> {
    constructor() {
        super("com.midnights.game.IrodoriEditFlowerCombinationRsp", [
            { no: 4, name: "is_already_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_can_take_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriEditFlowerCombinationRsp>): IrodoriEditFlowerCombinationRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriEditFlowerCombinationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriEditFlowerCombinationRsp): IrodoriEditFlowerCombinationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_already_finished */ 4:
                    message.isAlreadyFinished = reader.bool();
                    break;
                case /* optional bool is_can_take_reward */ 3:
                    message.isCanTakeReward = reader.bool();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriEditFlowerCombinationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_already_finished = 4; */
        if (message.isAlreadyFinished !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isAlreadyFinished);
        /* optional bool is_can_take_reward = 3; */
        if (message.isCanTakeReward !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isCanTakeReward);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriEditFlowerCombinationRsp
 */
export const IrodoriEditFlowerCombinationRsp = new IrodoriEditFlowerCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriScanEntityReq$Type extends MessageType<IrodoriScanEntityReq> {
    constructor() {
        super("com.midnights.game.IrodoriScanEntityReq", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriScanEntityReq>): IrodoriScanEntityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriScanEntityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriScanEntityReq): IrodoriScanEntityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriScanEntityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriScanEntityReq
 */
export const IrodoriScanEntityReq = new IrodoriScanEntityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriScanEntityRsp$Type extends MessageType<IrodoriScanEntityRsp> {
    constructor() {
        super("com.midnights.game.IrodoriScanEntityRsp", [
            { no: 10, name: "theme_data", kind: "message", T: () => IrodoriPoetryThemeData },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "is_get_inspiration", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriScanEntityRsp>): IrodoriScanEntityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriScanEntityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriScanEntityRsp): IrodoriScanEntityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriPoetryThemeData theme_data */ 10:
                    message.themeData = IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options, message.themeData);
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_get_inspiration */ 1:
                    message.isGetInspiration = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriScanEntityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.IrodoriPoetryThemeData theme_data = 10; */
        if (message.themeData)
            IrodoriPoetryThemeData.internalBinaryWrite(message.themeData, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional bool is_get_inspiration = 1; */
        if (message.isGetInspiration !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isGetInspiration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriScanEntityRsp
 */
export const IrodoriScanEntityRsp = new IrodoriScanEntityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFillPoetryReq$Type extends MessageType<IrodoriFillPoetryReq> {
    constructor() {
        super("com.midnights.game.IrodoriFillPoetryReq", [
            { no: 9, name: "theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "line_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriFillPoetryReq>): IrodoriFillPoetryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriFillPoetryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriFillPoetryReq): IrodoriFillPoetryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 theme_id */ 9:
                    message.themeId = reader.uint32();
                    break;
                case /* optional uint32 line_id */ 13:
                    message.lineId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriFillPoetryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 theme_id = 9; */
        if (message.themeId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.themeId);
        /* optional uint32 line_id = 13; */
        if (message.lineId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.lineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFillPoetryReq
 */
export const IrodoriFillPoetryReq = new IrodoriFillPoetryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFillPoetryRsp$Type extends MessageType<IrodoriFillPoetryRsp> {
    constructor() {
        super("com.midnights.game.IrodoriFillPoetryRsp", [
            { no: 13, name: "theme_data", kind: "message", T: () => IrodoriPoetryThemeData },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriFillPoetryRsp>): IrodoriFillPoetryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriFillPoetryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriFillPoetryRsp): IrodoriFillPoetryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriPoetryThemeData theme_data */ 13:
                    message.themeData = IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options, message.themeData);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriFillPoetryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.IrodoriPoetryThemeData theme_data = 13; */
        if (message.themeData)
            IrodoriPoetryThemeData.internalBinaryWrite(message.themeData, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFillPoetryRsp
 */
export const IrodoriFillPoetryRsp = new IrodoriFillPoetryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessEquipCardReq$Type extends MessageType<IrodoriChessEquipCardReq> {
    constructor() {
        super("com.midnights.game.IrodoriChessEquipCardReq", [
            { no: 2, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessEquipCardReq>): IrodoriChessEquipCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessEquipCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessEquipCardReq): IrodoriChessEquipCardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 2:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 card_id */ 9:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessEquipCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_hard_map = 2; */
        if (message.isHardMap !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        /* optional uint32 card_id = 9; */
        if (message.cardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessEquipCardReq
 */
export const IrodoriChessEquipCardReq = new IrodoriChessEquipCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessEquipCardRsp$Type extends MessageType<IrodoriChessEquipCardRsp> {
    constructor() {
        super("com.midnights.game.IrodoriChessEquipCardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessEquipCardRsp>): IrodoriChessEquipCardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessEquipCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessEquipCardRsp): IrodoriChessEquipCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_hard_map */ 12:
                    message.isHardMap = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessEquipCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        /* optional bool is_hard_map = 12; */
        if (message.isHardMap !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isHardMap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessEquipCardRsp
 */
export const IrodoriChessEquipCardRsp = new IrodoriChessEquipCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessUnequipCardReq$Type extends MessageType<IrodoriChessUnequipCardReq> {
    constructor() {
        super("com.midnights.game.IrodoriChessUnequipCardReq", [
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessUnequipCardReq>): IrodoriChessUnequipCardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessUnequipCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessUnequipCardReq): IrodoriChessUnequipCardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_hard_map */ 10:
                    message.isHardMap = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessUnequipCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        /* optional bool is_hard_map = 10; */
        if (message.isHardMap !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isHardMap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessUnequipCardReq
 */
export const IrodoriChessUnequipCardReq = new IrodoriChessUnequipCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessUnequipCardRsp$Type extends MessageType<IrodoriChessUnequipCardRsp> {
    constructor() {
        super("com.midnights.game.IrodoriChessUnequipCardRsp", [
            { no: 10, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriChessUnequipCardRsp>): IrodoriChessUnequipCardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriChessUnequipCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriChessUnequipCardRsp): IrodoriChessUnequipCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 10:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriChessUnequipCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_hard_map = 10; */
        if (message.isHardMap !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isHardMap);
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessUnequipCardRsp
 */
export const IrodoriChessUnequipCardRsp = new IrodoriChessUnequipCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterIrodoriChessDungeonReq$Type extends MessageType<EnterIrodoriChessDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterIrodoriChessDungeonReq", [
            { no: 1, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterIrodoriChessDungeonReq>): EnterIrodoriChessDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterIrodoriChessDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterIrodoriChessDungeonReq): EnterIrodoriChessDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 1:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterIrodoriChessDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_hard_map = 1; */
        if (message.isHardMap !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterIrodoriChessDungeonReq
 */
export const EnterIrodoriChessDungeonReq = new EnterIrodoriChessDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterIrodoriChessDungeonRsp$Type extends MessageType<EnterIrodoriChessDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterIrodoriChessDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterIrodoriChessDungeonRsp>): EnterIrodoriChessDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterIrodoriChessDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterIrodoriChessDungeonRsp): EnterIrodoriChessDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_hard_map */ 7:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterIrodoriChessDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional bool is_hard_map = 7; */
        if (message.isHardMap !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterIrodoriChessDungeonRsp
 */
export const EnterIrodoriChessDungeonRsp = new EnterIrodoriChessDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterStartGalleryReq$Type extends MessageType<IrodoriMasterStartGalleryReq> {
    constructor() {
        super("com.midnights.game.IrodoriMasterStartGalleryReq", [
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterStartGalleryReq>): IrodoriMasterStartGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterStartGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterStartGalleryReq): IrodoriMasterStartGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 4:
                    message.difficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterStartGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        /* optional uint32 difficulty = 4; */
        if (message.difficulty !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterStartGalleryReq
 */
export const IrodoriMasterStartGalleryReq = new IrodoriMasterStartGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterStartGalleryRsp$Type extends MessageType<IrodoriMasterStartGalleryRsp> {
    constructor() {
        super("com.midnights.game.IrodoriMasterStartGalleryRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterStartGalleryRsp>): IrodoriMasterStartGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterStartGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterStartGalleryRsp): IrodoriMasterStartGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterStartGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterStartGalleryRsp
 */
export const IrodoriMasterStartGalleryRsp = new IrodoriMasterStartGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterGalleryCgEndNotify$Type extends MessageType<IrodoriMasterGalleryCgEndNotify> {
    constructor() {
        super("com.midnights.game.IrodoriMasterGalleryCgEndNotify", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterGalleryCgEndNotify>): IrodoriMasterGalleryCgEndNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterGalleryCgEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterGalleryCgEndNotify): IrodoriMasterGalleryCgEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 4:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterGalleryCgEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional uint32 gallery_id = 4; */
        if (message.galleryId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterGalleryCgEndNotify
 */
export const IrodoriMasterGalleryCgEndNotify = new IrodoriMasterGalleryCgEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterGallerySettleNotify$Type extends MessageType<IrodoriMasterGallerySettleNotify> {
    constructor() {
        super("com.midnights.game.IrodoriMasterGallerySettleNotify", [
            { no: 13, name: "settle_info", kind: "message", T: () => IrodoriMasterGallerySettleInfo },
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterGallerySettleNotify>): IrodoriMasterGallerySettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterGallerySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterGallerySettleNotify): IrodoriMasterGallerySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriMasterGallerySettleInfo settle_info */ 13:
                    message.settleInfo = IrodoriMasterGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterGallerySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.IrodoriMasterGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            IrodoriMasterGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterGallerySettleNotify
 */
export const IrodoriMasterGallerySettleNotify = new IrodoriMasterGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoPosData$Type extends MessageType<PhotoPosData> {
    constructor() {
        super("com.midnights.game.PhotoPosData", [
            { no: 15, name: "center", kind: "message", T: () => Vector },
            { no: 2, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_view", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoPosData>): PhotoPosData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoPosData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoPosData): PhotoPosData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector center */ 15:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional uint32 open_time */ 2:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_view */ 4:
                    message.isView = reader.bool();
                    break;
                case /* optional uint32 pos_id */ 9:
                    message.posId = reader.uint32();
                    break;
                case /* optional bool is_open */ 6:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoPosData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector center = 15; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 open_time = 2; */
        if (message.openTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.openTime);
        /* optional bool is_view = 4; */
        if (message.isView !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isView);
        /* optional uint32 pos_id = 9; */
        if (message.posId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.posId);
        /* optional bool is_open = 6; */
        if (message.isOpen !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoPosData
 */
export const PhotoPosData = new PhotoPosData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityDetailInfo$Type extends MessageType<PhotoActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.PhotoActivityDetailInfo", [
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "photo_pos_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PhotoPosData }
        ]);
    }
    create(value?: PartialMessage<PhotoActivityDetailInfo>): PhotoActivityDetailInfo {
        const message = { photoPosDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoActivityDetailInfo): PhotoActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.PhotoPosData photo_pos_data_list */ 12:
                    message.photoPosDataList.push(PhotoPosData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.PhotoPosData photo_pos_data_list = 12; */
        for (let i = 0; i < message.photoPosDataList.length; i++)
            PhotoPosData.internalBinaryWrite(message.photoPosDataList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityDetailInfo
 */
export const PhotoActivityDetailInfo = new PhotoActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityFinishReq$Type extends MessageType<PhotoActivityFinishReq> {
    constructor() {
        super("com.midnights.game.PhotoActivityFinishReq", [
            { no: 15, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "check_root_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_succ", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoActivityFinishReq>): PhotoActivityFinishReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoActivityFinishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoActivityFinishReq): PhotoActivityFinishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pos_id */ 15:
                    message.posId = reader.uint32();
                    break;
                case /* optional uint32 check_root_id */ 2:
                    message.checkRootId = reader.uint32();
                    break;
                case /* optional bool is_succ */ 5:
                    message.isSucc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoActivityFinishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pos_id = 15; */
        if (message.posId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.posId);
        /* optional uint32 check_root_id = 2; */
        if (message.checkRootId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.checkRootId);
        /* optional bool is_succ = 5; */
        if (message.isSucc !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSucc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityFinishReq
 */
export const PhotoActivityFinishReq = new PhotoActivityFinishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityFinishRsp$Type extends MessageType<PhotoActivityFinishRsp> {
    constructor() {
        super("com.midnights.game.PhotoActivityFinishRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoActivityFinishRsp>): PhotoActivityFinishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoActivityFinishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoActivityFinishRsp): PhotoActivityFinishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 pos_id */ 8:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoActivityFinishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 pos_id = 8; */
        if (message.posId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityFinishRsp
 */
export const PhotoActivityFinishRsp = new PhotoActivityFinishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityClientViewReq$Type extends MessageType<PhotoActivityClientViewReq> {
    constructor() {
        super("com.midnights.game.PhotoActivityClientViewReq", [
            { no: 13, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoActivityClientViewReq>): PhotoActivityClientViewReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoActivityClientViewReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoActivityClientViewReq): PhotoActivityClientViewReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pos_id */ 13:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoActivityClientViewReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pos_id = 13; */
        if (message.posId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityClientViewReq
 */
export const PhotoActivityClientViewReq = new PhotoActivityClientViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityClientViewRsp$Type extends MessageType<PhotoActivityClientViewRsp> {
    constructor() {
        super("com.midnights.game.PhotoActivityClientViewRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PhotoActivityClientViewRsp>): PhotoActivityClientViewRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoActivityClientViewRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoActivityClientViewRsp): PhotoActivityClientViewRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 pos_id */ 8:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoActivityClientViewRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 pos_id = 8; */
        if (message.posId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityClientViewRsp
 */
export const PhotoActivityClientViewRsp = new PhotoActivityClientViewRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceStageData$Type extends MessageType<SpiceStageData> {
    constructor() {
        super("com.midnights.game.SpiceStageData", [
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "success_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpiceStageData>): SpiceStageData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceStageData): SpiceStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 success_times */ 1:
                    message.successTimes = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isOpen);
        /* optional uint32 success_times = 1; */
        if (message.successTimes !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.successTimes);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceStageData
 */
export const SpiceStageData = new SpiceStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityDetailInfo$Type extends MessageType<SpiceActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.SpiceActivityDetailInfo", [
            { no: 15, name: "current_increase_avatar_fetter_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "spice_stage_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SpiceStageData },
            { no: 13, name: "increase_avatar_fetter_limit_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityDetailInfo>): SpiceActivityDetailInfo {
        const message = { spiceStageDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityDetailInfo): SpiceActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_increase_avatar_fetter_times */ 15:
                    message.currentIncreaseAvatarFetterTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SpiceStageData spice_stage_data_list */ 7:
                    message.spiceStageDataList.push(SpiceStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 increase_avatar_fetter_limit_times */ 13:
                    message.increaseAvatarFetterLimitTimes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 current_increase_avatar_fetter_times = 15; */
        if (message.currentIncreaseAvatarFetterTimes !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.currentIncreaseAvatarFetterTimes);
        /* repeated com.midnights.game.SpiceStageData spice_stage_data_list = 7; */
        for (let i = 0; i < message.spiceStageDataList.length; i++)
            SpiceStageData.internalBinaryWrite(message.spiceStageDataList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 increase_avatar_fetter_limit_times = 13; */
        if (message.increaseAvatarFetterLimitTimes !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.increaseAvatarFetterLimitTimes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityDetailInfo
 */
export const SpiceActivityDetailInfo = new SpiceActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityFinishMakeSpiceReq$Type extends MessageType<SpiceActivityFinishMakeSpiceReq> {
    constructor() {
        super("com.midnights.game.SpiceActivityFinishMakeSpiceReq", [
            { no: 4, name: "left_turns", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "left_material_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityFinishMakeSpiceReq>): SpiceActivityFinishMakeSpiceReq {
        const message = { leftMaterialIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityFinishMakeSpiceReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityFinishMakeSpiceReq): SpiceActivityFinishMakeSpiceReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_turns */ 4:
                    message.leftTurns = reader.uint32();
                    break;
                case /* optional bool is_success */ 9:
                    message.isSuccess = reader.bool();
                    break;
                case /* repeated uint32 left_material_id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.leftMaterialIdList.push(reader.uint32());
                    else
                        message.leftMaterialIdList.push(reader.uint32());
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityFinishMakeSpiceReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 left_turns = 4; */
        if (message.leftTurns !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.leftTurns);
        /* optional bool is_success = 9; */
        if (message.isSuccess !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isSuccess);
        /* repeated uint32 left_material_id_list = 12; */
        for (let i = 0; i < message.leftMaterialIdList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.leftMaterialIdList[i]);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceReq
 */
export const SpiceActivityFinishMakeSpiceReq = new SpiceActivityFinishMakeSpiceReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityFinishMakeSpiceRsp$Type extends MessageType<SpiceActivityFinishMakeSpiceRsp> {
    constructor() {
        super("com.midnights.game.SpiceActivityFinishMakeSpiceRsp", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityFinishMakeSpiceRsp>): SpiceActivityFinishMakeSpiceRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityFinishMakeSpiceRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityFinishMakeSpiceRsp): SpiceActivityFinishMakeSpiceRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityFinishMakeSpiceRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 3; */
        if (message.isSuccess !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceRsp
 */
export const SpiceActivityFinishMakeSpiceRsp = new SpiceActivityFinishMakeSpiceRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityProcessFoodReq$Type extends MessageType<SpiceActivityProcessFoodReq> {
    constructor() {
        super("com.midnights.game.SpiceActivityProcessFoodReq", [
            { no: 1, name: "normal_food_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityProcessFoodReq>): SpiceActivityProcessFoodReq {
        const message = { normalFoodList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityProcessFoodReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityProcessFoodReq): SpiceActivityProcessFoodReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam normal_food_list */ 1:
                    message.normalFoodList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityProcessFoodReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam normal_food_list = 1; */
        for (let i = 0; i < message.normalFoodList.length; i++)
            ItemParam.internalBinaryWrite(message.normalFoodList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityProcessFoodReq
 */
export const SpiceActivityProcessFoodReq = new SpiceActivityProcessFoodReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityProcessFoodRsp$Type extends MessageType<SpiceActivityProcessFoodRsp> {
    constructor() {
        super("com.midnights.game.SpiceActivityProcessFoodRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "special_food_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 1, name: "normal_food_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityProcessFoodRsp>): SpiceActivityProcessFoodRsp {
        const message = { specialFoodList: [], normalFoodList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityProcessFoodRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityProcessFoodRsp): SpiceActivityProcessFoodRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam special_food_list */ 14:
                    message.specialFoodList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ItemParam normal_food_list */ 1:
                    message.normalFoodList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityProcessFoodRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam special_food_list = 14; */
        for (let i = 0; i < message.specialFoodList.length; i++)
            ItemParam.internalBinaryWrite(message.specialFoodList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam normal_food_list = 1; */
        for (let i = 0; i < message.normalFoodList.length; i++)
            ItemParam.internalBinaryWrite(message.normalFoodList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityProcessFoodRsp
 */
export const SpiceActivityProcessFoodRsp = new SpiceActivityProcessFoodRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityGivingRecordNotify$Type extends MessageType<SpiceActivityGivingRecordNotify> {
    constructor() {
        super("com.midnights.game.SpiceActivityGivingRecordNotify", [
            { no: 3, name: "current_increase_avatar_fetter_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "increase_avatar_fetter_limit_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SpiceActivityGivingRecordNotify>): SpiceActivityGivingRecordNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SpiceActivityGivingRecordNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpiceActivityGivingRecordNotify): SpiceActivityGivingRecordNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_increase_avatar_fetter_times */ 3:
                    message.currentIncreaseAvatarFetterTimes = reader.uint32();
                    break;
                case /* optional uint32 increase_avatar_fetter_limit_times */ 7:
                    message.increaseAvatarFetterLimitTimes = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 11:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpiceActivityGivingRecordNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 current_increase_avatar_fetter_times = 3; */
        if (message.currentIncreaseAvatarFetterTimes !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.currentIncreaseAvatarFetterTimes);
        /* optional uint32 increase_avatar_fetter_limit_times = 7; */
        if (message.increaseAvatarFetterLimitTimes !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.increaseAvatarFetterLimitTimes);
        /* optional uint32 avatar_id = 11; */
        if (message.avatarId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityGivingRecordNotify
 */
export const SpiceActivityGivingRecordNotify = new SpiceActivityGivingRecordNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaStageData$Type extends MessageType<GachaStageData> {
    constructor() {
        super("com.midnights.game.GachaStageData", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "target_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GachaStageData>): GachaStageData {
        const message = { targetNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaStageData): GachaStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* map<uint32, uint32> target_num_map */ 14:
                    this.binaryReadMap14(message.targetNumMap, reader, options);
                    break;
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: GachaStageData["targetNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaStageData["targetNumMap"] | undefined, val: GachaStageData["targetNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaStageData.target_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GachaStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* map<uint32, uint32> target_num_map = 14; */
        for (let k of Object.keys(message.targetNumMap))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.targetNumMap[k as any]).join();
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaStageData
 */
export const GachaStageData = new GachaStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityDetailInfo$Type extends MessageType<GachaActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.GachaActivityDetailInfo", [
            { no: 6, name: "have_get_robot_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_stage_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GachaStageData },
            { no: 8, name: "have_reward_robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 3, name: "tech_create_robot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "robot_finish_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityDetailInfo>): GachaActivityDetailInfo {
        const message = { haveGetRobotList: [], gachaStageDataList: [], haveRewardRobotNumMap: {}, robotNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityDetailInfo): GachaActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 have_get_robot_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.haveGetRobotList.push(reader.uint32());
                    else
                        message.haveGetRobotList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.GachaStageData gacha_stage_data_list */ 4:
                    message.gachaStageDataList.push(GachaStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, uint32> have_reward_robot_num_map */ 8:
                    this.binaryReadMap8(message.haveRewardRobotNumMap, reader, options);
                    break;
                case /* optional uint32 tech_create_robot_id */ 3:
                    message.techCreateRobotId = reader.uint32();
                    break;
                case /* map<uint32, uint32> robot_num_map */ 5:
                    this.binaryReadMap5(message.robotNumMap, reader, options);
                    break;
                case /* optional uint32 robot_finish_num */ 12:
                    message.robotFinishNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: GachaActivityDetailInfo["haveRewardRobotNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaActivityDetailInfo["haveRewardRobotNumMap"] | undefined, val: GachaActivityDetailInfo["haveRewardRobotNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityDetailInfo.have_reward_robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap5(map: GachaActivityDetailInfo["robotNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaActivityDetailInfo["robotNumMap"] | undefined, val: GachaActivityDetailInfo["robotNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityDetailInfo.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GachaActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 have_get_robot_list = 6; */
        for (let i = 0; i < message.haveGetRobotList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.haveGetRobotList[i]);
        /* repeated com.midnights.game.GachaStageData gacha_stage_data_list = 4; */
        for (let i = 0; i < message.gachaStageDataList.length; i++)
            GachaStageData.internalBinaryWrite(message.gachaStageDataList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> have_reward_robot_num_map = 8; */
        for (let k of Object.keys(message.haveRewardRobotNumMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.haveRewardRobotNumMap[k as any]).join();
        /* optional uint32 tech_create_robot_id = 3; */
        if (message.techCreateRobotId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.techCreateRobotId);
        /* map<uint32, uint32> robot_num_map = 5; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.robotNumMap[k as any]).join();
        /* optional uint32 robot_finish_num = 12; */
        if (message.robotFinishNum !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.robotFinishNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityDetailInfo
 */
export const GachaActivityDetailInfo = new GachaActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityPercentNotify$Type extends MessageType<GachaActivityPercentNotify> {
    constructor() {
        super("com.midnights.game.GachaActivityPercentNotify", [
            { no: 14, name: "item_stage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "target_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "sub_item_stage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "percent", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityPercentNotify>): GachaActivityPercentNotify {
        const message = { targetNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityPercentNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityPercentNotify): GachaActivityPercentNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_stage */ 14:
                    message.itemStage = reader.uint32();
                    break;
                case /* map<uint32, uint32> target_num_map */ 6:
                    this.binaryReadMap6(message.targetNumMap, reader, options);
                    break;
                case /* optional uint32 sub_item_stage */ 2:
                    message.subItemStage = reader.uint32();
                    break;
                case /* optional uint32 percent */ 13:
                    message.percent = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: GachaActivityPercentNotify["targetNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaActivityPercentNotify["targetNumMap"] | undefined, val: GachaActivityPercentNotify["targetNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityPercentNotify.target_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GachaActivityPercentNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_stage = 14; */
        if (message.itemStage !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.itemStage);
        /* map<uint32, uint32> target_num_map = 6; */
        for (let k of Object.keys(message.targetNumMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.targetNumMap[k as any]).join();
        /* optional uint32 sub_item_stage = 2; */
        if (message.subItemStage !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.subItemStage);
        /* optional uint32 percent = 13; */
        if (message.percent !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.percent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityPercentNotify
 */
export const GachaActivityPercentNotify = new GachaActivityPercentNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityUpdateElemNotify$Type extends MessageType<GachaActivityUpdateElemNotify> {
    constructor() {
        super("com.midnights.game.GachaActivityUpdateElemNotify", [
            { no: 10, name: "elem_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityUpdateElemNotify>): GachaActivityUpdateElemNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityUpdateElemNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityUpdateElemNotify): GachaActivityUpdateElemNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 elem_type */ 10:
                    message.elemType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaActivityUpdateElemNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 elem_type = 10; */
        if (message.elemType !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.elemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityUpdateElemNotify
 */
export const GachaActivityUpdateElemNotify = new GachaActivityUpdateElemNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityCreateRobotReq$Type extends MessageType<GachaActivityCreateRobotReq> {
    constructor() {
        super("com.midnights.game.GachaActivityCreateRobotReq", []);
    }
    create(value?: PartialMessage<GachaActivityCreateRobotReq>): GachaActivityCreateRobotReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityCreateRobotReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityCreateRobotReq): GachaActivityCreateRobotReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GachaActivityCreateRobotReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityCreateRobotReq
 */
export const GachaActivityCreateRobotReq = new GachaActivityCreateRobotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityCreateRobotRsp$Type extends MessageType<GachaActivityCreateRobotRsp> {
    constructor() {
        super("com.midnights.game.GachaActivityCreateRobotRsp", [
            { no: 1, name: "robot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityCreateRobotRsp>): GachaActivityCreateRobotRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityCreateRobotRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityCreateRobotRsp): GachaActivityCreateRobotRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 robot_id */ 1:
                    message.robotId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaActivityCreateRobotRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 robot_id = 1; */
        if (message.robotId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.robotId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityCreateRobotRsp
 */
export const GachaActivityCreateRobotRsp = new GachaActivityCreateRobotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityTakeRewardReq$Type extends MessageType<GachaActivityTakeRewardReq> {
    constructor() {
        super("com.midnights.game.GachaActivityTakeRewardReq", [
            { no: 12, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GachaActivityTakeRewardReq>): GachaActivityTakeRewardReq {
        const message = { robotNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityTakeRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityTakeRewardReq): GachaActivityTakeRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> robot_num_map */ 12:
                    this.binaryReadMap12(message.robotNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: GachaActivityTakeRewardReq["robotNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaActivityTakeRewardReq["robotNumMap"] | undefined, val: GachaActivityTakeRewardReq["robotNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityTakeRewardReq.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GachaActivityTakeRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> robot_num_map = 12; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.robotNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityTakeRewardReq
 */
export const GachaActivityTakeRewardReq = new GachaActivityTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityTakeRewardRsp$Type extends MessageType<GachaActivityTakeRewardRsp> {
    constructor() {
        super("com.midnights.game.GachaActivityTakeRewardRsp", [
            { no: 3, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityTakeRewardRsp>): GachaActivityTakeRewardRsp {
        const message = { robotNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityTakeRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityTakeRewardRsp): GachaActivityTakeRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> robot_num_map */ 3:
                    this.binaryReadMap3(message.robotNumMap, reader, options);
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: GachaActivityTakeRewardRsp["robotNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GachaActivityTakeRewardRsp["robotNumMap"] | undefined, val: GachaActivityTakeRewardRsp["robotNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityTakeRewardRsp.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GachaActivityTakeRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> robot_num_map = 3; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.robotNumMap[k as any]).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityTakeRewardRsp
 */
export const GachaActivityTakeRewardRsp = new GachaActivityTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityResetReq$Type extends MessageType<GachaActivityResetReq> {
    constructor() {
        super("com.midnights.game.GachaActivityResetReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityResetReq>): GachaActivityResetReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityResetReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityResetReq): GachaActivityResetReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaActivityResetReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityResetReq
 */
export const GachaActivityResetReq = new GachaActivityResetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityResetRsp$Type extends MessageType<GachaActivityResetRsp> {
    constructor() {
        super("com.midnights.game.GachaActivityResetRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityResetRsp>): GachaActivityResetRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityResetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityResetRsp): GachaActivityResetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaActivityResetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityResetRsp
 */
export const GachaActivityResetRsp = new GachaActivityResetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityNextStageReq$Type extends MessageType<GachaActivityNextStageReq> {
    constructor() {
        super("com.midnights.game.GachaActivityNextStageReq", []);
    }
    create(value?: PartialMessage<GachaActivityNextStageReq>): GachaActivityNextStageReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityNextStageReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityNextStageReq): GachaActivityNextStageReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GachaActivityNextStageReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityNextStageReq
 */
export const GachaActivityNextStageReq = new GachaActivityNextStageReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityNextStageRsp$Type extends MessageType<GachaActivityNextStageRsp> {
    constructor() {
        super("com.midnights.game.GachaActivityNextStageRsp", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GachaActivityNextStageRsp>): GachaActivityNextStageRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GachaActivityNextStageRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GachaActivityNextStageRsp): GachaActivityNextStageRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GachaActivityNextStageRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityNextStageRsp
 */
export const GachaActivityNextStageRsp = new GachaActivityNextStageRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGiveFriendGiftReq$Type extends MessageType<ActivityGiveFriendGiftReq> {
    constructor() {
        super("com.midnights.game.ActivityGiveFriendGiftReq", [
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<ActivityGiveFriendGiftReq>): ActivityGiveFriendGiftReq {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGiveFriendGiftReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGiveFriendGiftReq): ActivityGiveFriendGiftReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* map<uint32, uint32> gift_num_map */ 4:
                    this.binaryReadMap4(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: ActivityGiveFriendGiftReq["giftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityGiveFriendGiftReq["giftNumMap"] | undefined, val: ActivityGiveFriendGiftReq["giftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityGiveFriendGiftReq.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityGiveFriendGiftReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.uid);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.scheduleId);
        /* map<uint32, uint32> gift_num_map = 4; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.giftNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGiveFriendGiftReq
 */
export const ActivityGiveFriendGiftReq = new ActivityGiveFriendGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGiveFriendGiftRsp$Type extends MessageType<ActivityGiveFriendGiftRsp> {
    constructor() {
        super("com.midnights.game.ActivityGiveFriendGiftRsp", [
            { no: 3, name: "limit_gift_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGiveFriendGiftRsp>): ActivityGiveFriendGiftRsp {
        const message = { limitGiftList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGiveFriendGiftRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGiveFriendGiftRsp): ActivityGiveFriendGiftRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_gift_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitGiftList.push(reader.uint32());
                    else
                        message.limitGiftList.push(reader.uint32());
                    break;
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGiveFriendGiftRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 limit_gift_list = 3; */
        for (let i = 0; i < message.limitGiftList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.limitGiftList[i]);
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGiveFriendGiftRsp
 */
export const ActivityGiveFriendGiftRsp = new ActivityGiveFriendGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityRecvGiftData$Type extends MessageType<ActivityRecvGiftData> {
    constructor() {
        super("com.midnights.game.ActivityRecvGiftData", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 8, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<ActivityRecvGiftData>): ActivityRecvGiftData {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityRecvGiftData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityRecvGiftData): ActivityRecvGiftData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 10:
                    message.remarkName = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 14:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* map<uint32, uint32> gift_num_map */ 8:
                    this.binaryReadMap8(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: ActivityRecvGiftData["giftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityRecvGiftData["giftNumMap"] | undefined, val: ActivityRecvGiftData["giftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityRecvGiftData.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityRecvGiftData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* optional string nickname = 3; */
        if (message.nickname !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 10; */
        if (message.remarkName !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.remarkName);
        /* optional com.midnights.game.ProfilePicture profile_picture = 14; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> gift_num_map = 8; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.giftNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityRecvGiftData
 */
export const ActivityRecvGiftData = new ActivityRecvGiftData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetRecvGiftListReq$Type extends MessageType<ActivityGetRecvGiftListReq> {
    constructor() {
        super("com.midnights.game.ActivityGetRecvGiftListReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGetRecvGiftListReq>): ActivityGetRecvGiftListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetRecvGiftListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetRecvGiftListReq): ActivityGetRecvGiftListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGetRecvGiftListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetRecvGiftListReq
 */
export const ActivityGetRecvGiftListReq = new ActivityGetRecvGiftListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetRecvGiftListRsp$Type extends MessageType<ActivityGetRecvGiftListRsp> {
    constructor() {
        super("com.midnights.game.ActivityGetRecvGiftListRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "recv_gift_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityRecvGiftData },
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGetRecvGiftListRsp>): ActivityGetRecvGiftListRsp {
        const message = { recvGiftList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetRecvGiftListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetRecvGiftListRsp): ActivityGetRecvGiftListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityRecvGiftData recv_gift_list */ 11:
                    message.recvGiftList.push(ActivityRecvGiftData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGetRecvGiftListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityRecvGiftData recv_gift_list = 11; */
        for (let i = 0; i < message.recvGiftList.length; i++)
            ActivityRecvGiftData.internalBinaryWrite(message.recvGiftList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetRecvGiftListRsp
 */
export const ActivityGetRecvGiftListRsp = new ActivityGetRecvGiftListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityHaveRecvGiftNotify$Type extends MessageType<ActivityHaveRecvGiftNotify> {
    constructor() {
        super("com.midnights.game.ActivityHaveRecvGiftNotify", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityHaveRecvGiftNotify>): ActivityHaveRecvGiftNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityHaveRecvGiftNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityHaveRecvGiftNotify): ActivityHaveRecvGiftNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityHaveRecvGiftNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityHaveRecvGiftNotify
 */
export const ActivityHaveRecvGiftNotify = new ActivityHaveRecvGiftNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiftResultInfo$Type extends MessageType<ActivityAcceptGiftResultInfo> {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiftResultInfo", [
            { no: 3, name: "unaccept_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 6, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "accept_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<ActivityAcceptGiftResultInfo>): ActivityAcceptGiftResultInfo {
        const message = { unacceptGiftNumMap: {}, acceptGiftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityAcceptGiftResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcceptGiftResultInfo): ActivityAcceptGiftResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> unaccept_gift_num_map */ 3:
                    this.binaryReadMap3(message.unacceptGiftNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 6:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> accept_gift_num_map */ 13:
                    this.binaryReadMap13(message.acceptGiftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: ActivityAcceptGiftResultInfo["unacceptGiftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityAcceptGiftResultInfo["unacceptGiftNumMap"] | undefined, val: ActivityAcceptGiftResultInfo["unacceptGiftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityAcceptGiftResultInfo.unaccept_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap13(map: ActivityAcceptGiftResultInfo["acceptGiftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityAcceptGiftResultInfo["acceptGiftNumMap"] | undefined, val: ActivityAcceptGiftResultInfo["acceptGiftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityAcceptGiftResultInfo.accept_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityAcceptGiftResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> unaccept_gift_num_map = 3; */
        for (let k of Object.keys(message.unacceptGiftNumMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unacceptGiftNumMap[k as any]).join();
        /* optional uint32 uid = 6; */
        if (message.uid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> accept_gift_num_map = 13; */
        for (let k of Object.keys(message.acceptGiftNumMap))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.acceptGiftNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiftResultInfo
 */
export const ActivityAcceptGiftResultInfo = new ActivityAcceptGiftResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiveGiftReq$Type extends MessageType<ActivityAcceptGiveGiftReq> {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiveGiftReq", [
            { no: 3, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityAcceptGiveGiftReq>): ActivityAcceptGiveGiftReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityAcceptGiveGiftReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcceptGiveGiftReq): ActivityAcceptGiveGiftReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 3:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityAcceptGiveGiftReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 3; */
        if (message.scheduleId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiveGiftReq
 */
export const ActivityAcceptGiveGiftReq = new ActivityAcceptGiveGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiveGiftRsp$Type extends MessageType<ActivityAcceptGiveGiftRsp> {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiveGiftRsp", [
            { no: 4, name: "accept_gift_result_info", kind: "message", T: () => ActivityAcceptGiftResultInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityAcceptGiveGiftRsp>): ActivityAcceptGiveGiftRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityAcceptGiveGiftRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcceptGiveGiftRsp): ActivityAcceptGiveGiftRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info */ 4:
                    message.acceptGiftResultInfo = ActivityAcceptGiftResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptGiftResultInfo);
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityAcceptGiveGiftRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info = 4; */
        if (message.acceptGiftResultInfo)
            ActivityAcceptGiftResultInfo.internalBinaryWrite(message.acceptGiftResultInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiveGiftRsp
 */
export const ActivityAcceptGiveGiftRsp = new ActivityAcceptGiveGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptAllGiveGiftReq$Type extends MessageType<ActivityAcceptAllGiveGiftReq> {
    constructor() {
        super("com.midnights.game.ActivityAcceptAllGiveGiftReq", [
            { no: 3, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityAcceptAllGiveGiftReq>): ActivityAcceptAllGiveGiftReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityAcceptAllGiveGiftReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcceptAllGiveGiftReq): ActivityAcceptAllGiveGiftReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 3:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityAcceptAllGiveGiftReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 3; */
        if (message.scheduleId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptAllGiveGiftReq
 */
export const ActivityAcceptAllGiveGiftReq = new ActivityAcceptAllGiveGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptAllGiveGiftRsp$Type extends MessageType<ActivityAcceptAllGiveGiftRsp> {
    constructor() {
        super("com.midnights.game.ActivityAcceptAllGiveGiftRsp", [
            { no: 5, name: "accept_gift_result_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityAcceptGiftResultInfo },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityAcceptAllGiveGiftRsp>): ActivityAcceptAllGiveGiftRsp {
        const message = { acceptGiftResultInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityAcceptAllGiveGiftRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcceptAllGiveGiftRsp): ActivityAcceptAllGiveGiftRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info_list */ 5:
                    message.acceptGiftResultInfoList.push(ActivityAcceptGiftResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityAcceptAllGiveGiftRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info_list = 5; */
        for (let i = 0; i < message.acceptGiftResultInfoList.length; i++)
            ActivityAcceptGiftResultInfo.internalBinaryWrite(message.acceptGiftResultInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptAllGiveGiftRsp
 */
export const ActivityAcceptAllGiveGiftRsp = new ActivityAcceptAllGiveGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetCanGiveFriendGiftReq$Type extends MessageType<ActivityGetCanGiveFriendGiftReq> {
    constructor() {
        super("com.midnights.game.ActivityGetCanGiveFriendGiftReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGetCanGiveFriendGiftReq>): ActivityGetCanGiveFriendGiftReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetCanGiveFriendGiftReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetCanGiveFriendGiftReq): ActivityGetCanGiveFriendGiftReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGetCanGiveFriendGiftReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftReq
 */
export const ActivityGetCanGiveFriendGiftReq = new ActivityGetCanGiveFriendGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetCanGiveFriendGiftRsp$Type extends MessageType<ActivityGetCanGiveFriendGiftRsp> {
    constructor() {
        super("com.midnights.game.ActivityGetCanGiveFriendGiftRsp", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<ActivityGetCanGiveFriendGiftRsp>): ActivityGetCanGiveFriendGiftRsp {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetCanGiveFriendGiftRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetCanGiveFriendGiftRsp): ActivityGetCanGiveFriendGiftRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* map<uint32, uint32> gift_num_map */ 14:
                    this.binaryReadMap14(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: ActivityGetCanGiveFriendGiftRsp["giftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityGetCanGiveFriendGiftRsp["giftNumMap"] | undefined, val: ActivityGetCanGiveFriendGiftRsp["giftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityGetCanGiveFriendGiftRsp.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityGetCanGiveFriendGiftRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* map<uint32, uint32> gift_num_map = 14; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.giftNumMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftRsp
 */
export const ActivityGetCanGiveFriendGiftRsp = new ActivityGetCanGiveFriendGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySetGiftWishReq$Type extends MessageType<ActivitySetGiftWishReq> {
    constructor() {
        super("com.midnights.game.ActivitySetGiftWishReq", [
            { no: 2, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivitySetGiftWishReq>): ActivitySetGiftWishReq {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivitySetGiftWishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivitySetGiftWishReq): ActivitySetGiftWishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> gift_num_map */ 2:
                    this.binaryReadMap2(message.giftNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ActivitySetGiftWishReq["giftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivitySetGiftWishReq["giftNumMap"] | undefined, val: ActivitySetGiftWishReq["giftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivitySetGiftWishReq.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivitySetGiftWishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> gift_num_map = 2; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.giftNumMap[k as any]).join();
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySetGiftWishReq
 */
export const ActivitySetGiftWishReq = new ActivitySetGiftWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySetGiftWishRsp$Type extends MessageType<ActivitySetGiftWishRsp> {
    constructor() {
        super("com.midnights.game.ActivitySetGiftWishRsp", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivitySetGiftWishRsp>): ActivitySetGiftWishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivitySetGiftWishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivitySetGiftWishRsp): ActivitySetGiftWishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivitySetGiftWishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySetGiftWishRsp
 */
export const ActivitySetGiftWishRsp = new ActivitySetGiftWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityFriendGiftWishData$Type extends MessageType<ActivityFriendGiftWishData> {
    constructor() {
        super("com.midnights.game.ActivityFriendGiftWishData", [
            { no: 7, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 9, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityFriendGiftWishData>): ActivityFriendGiftWishData {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityFriendGiftWishData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityFriendGiftWishData): ActivityFriendGiftWishData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 7:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 3:
                    message.remarkName = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 11:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* map<uint32, uint32> gift_num_map */ 9:
                    this.binaryReadMap9(message.giftNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: ActivityFriendGiftWishData["giftNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ActivityFriendGiftWishData["giftNumMap"] | undefined, val: ActivityFriendGiftWishData["giftNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityFriendGiftWishData.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ActivityFriendGiftWishData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string nickname = 7; */
        if (message.nickname !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 3; */
        if (message.remarkName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.remarkName);
        /* optional com.midnights.game.ProfilePicture profile_picture = 11; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> gift_num_map = 9; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.giftNumMap[k as any]).join();
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityFriendGiftWishData
 */
export const ActivityFriendGiftWishData = new ActivityFriendGiftWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetFriendGiftWishListReq$Type extends MessageType<ActivityGetFriendGiftWishListReq> {
    constructor() {
        super("com.midnights.game.ActivityGetFriendGiftWishListReq", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGetFriendGiftWishListReq>): ActivityGetFriendGiftWishListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetFriendGiftWishListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetFriendGiftWishListReq): ActivityGetFriendGiftWishListReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGetFriendGiftWishListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetFriendGiftWishListReq
 */
export const ActivityGetFriendGiftWishListReq = new ActivityGetFriendGiftWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetFriendGiftWishListRsp$Type extends MessageType<ActivityGetFriendGiftWishListRsp> {
    constructor() {
        super("com.midnights.game.ActivityGetFriendGiftWishListRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "friend_gift_wish_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityFriendGiftWishData },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityGetFriendGiftWishListRsp>): ActivityGetFriendGiftWishListRsp {
        const message = { friendGiftWishList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityGetFriendGiftWishListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityGetFriendGiftWishListRsp): ActivityGetFriendGiftWishListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityFriendGiftWishData friend_gift_wish_list */ 11:
                    message.friendGiftWishList.push(ActivityFriendGiftWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityGetFriendGiftWishListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityFriendGiftWishData friend_gift_wish_list = 11; */
        for (let i = 0; i < message.friendGiftWishList.length; i++)
            ActivityFriendGiftWishData.internalBinaryWrite(message.friendGiftWishList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetFriendGiftWishListRsp
 */
export const ActivityGetFriendGiftWishListRsp = new ActivityGetFriendGiftWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeActivityDetailInfo$Type extends MessageType<LuminanceStoneChallengeActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeActivityDetailInfo", [
            { no: 11, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_final_gallery_complete", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "current_stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LuminanceStoneChallengeActivityDetailInfo>): LuminanceStoneChallengeActivityDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuminanceStoneChallengeActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuminanceStoneChallengeActivityDetailInfo): LuminanceStoneChallengeActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 11:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 6:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional bool is_final_gallery_complete */ 12:
                    message.isFinalGalleryComplete = reader.bool();
                    break;
                case /* optional uint32 current_stage_id */ 15:
                    message.currentStageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuminanceStoneChallengeActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 best_score = 11; */
        if (message.bestScore !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.bestScore);
        /* optional bool is_content_closed = 6; */
        if (message.isContentClosed !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isContentClosed);
        /* optional bool is_final_gallery_complete = 12; */
        if (message.isFinalGalleryComplete !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isFinalGalleryComplete);
        /* optional uint32 current_stage_id = 15; */
        if (message.currentStageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.currentStageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeActivityDetailInfo
 */
export const LuminanceStoneChallengeActivityDetailInfo = new LuminanceStoneChallengeActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeSettleInfo$Type extends MessageType<LuminanceStoneChallengeSettleInfo> {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeSettleInfo", [
            { no: 13, name: "settle_info", kind: "message", T: () => LuminanceStoneChallengeGallerySettleInfo },
            { no: 12, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<LuminanceStoneChallengeSettleInfo>): LuminanceStoneChallengeSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuminanceStoneChallengeSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuminanceStoneChallengeSettleInfo): LuminanceStoneChallengeSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LuminanceStoneChallengeGallerySettleInfo settle_info */ 13:
                    message.settleInfo = LuminanceStoneChallengeGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 12:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuminanceStoneChallengeSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LuminanceStoneChallengeGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            LuminanceStoneChallengeGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 12; */
        if (message.isNewRecord !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeSettleInfo
 */
export const LuminanceStoneChallengeSettleInfo = new LuminanceStoneChallengeSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeSettleNotify$Type extends MessageType<LuminanceStoneChallengeSettleNotify> {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeSettleNotify", [
            { no: 10, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "settle_info", kind: "message", T: () => LuminanceStoneChallengeSettleInfo }
        ]);
    }
    create(value?: PartialMessage<LuminanceStoneChallengeSettleNotify>): LuminanceStoneChallengeSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuminanceStoneChallengeSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuminanceStoneChallengeSettleNotify): LuminanceStoneChallengeSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 10:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.LuminanceStoneChallengeSettleInfo settle_info */ 13:
                    message.settleInfo = LuminanceStoneChallengeSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuminanceStoneChallengeSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 10; */
        if (message.galleryId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.LuminanceStoneChallengeSettleInfo settle_info = 13; */
        if (message.settleInfo)
            LuminanceStoneChallengeSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeSettleNotify
 */
export const LuminanceStoneChallengeSettleNotify = new LuminanceStoneChallengeSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonRecord$Type extends MessageType<RogueDiaryDungeonRecord> {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonRecord", [
            { no: 10, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "max_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryDungeonRecord>): RogueDiaryDungeonRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryDungeonRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryDungeonRecord): RogueDiaryDungeonRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 10:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 max_round */ 5:
                    message.maxRound = reader.uint32();
                    break;
                case /* optional uint32 finish_time */ 15:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 13:
                    message.difficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryDungeonRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finish = 10; */
        if (message.isFinish !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinish);
        /* optional uint32 max_round = 5; */
        if (message.maxRound !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.maxRound);
        /* optional uint32 finish_time = 15; */
        if (message.finishTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.finishTime);
        /* optional uint32 difficulty = 13; */
        if (message.difficulty !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonRecord
 */
export const RogueDiaryDungeonRecord = new RogueDiaryDungeonRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryStageInfo$Type extends MessageType<RogueDiaryStageInfo> {
    constructor() {
        super("com.midnights.game.RogueDiaryStageInfo", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "best_record", kind: "message", T: () => RogueDiaryDungeonRecord },
            { no: 10, name: "is_have_try", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryStageInfo>): RogueDiaryStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryStageInfo): RogueDiaryStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                case /* optional com.midnights.game.RogueDiaryDungeonRecord best_record */ 12:
                    message.bestRecord = RogueDiaryDungeonRecord.internalBinaryRead(reader, reader.uint32(), options, message.bestRecord);
                    break;
                case /* optional bool is_have_try */ 10:
                    message.isHaveTry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        /* optional com.midnights.game.RogueDiaryDungeonRecord best_record = 12; */
        if (message.bestRecord)
            RogueDiaryDungeonRecord.internalBinaryWrite(message.bestRecord, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_have_try = 10; */
        if (message.isHaveTry !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isHaveTry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryStageInfo
 */
export const RogueDiaryStageInfo = new RogueDiaryStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryProgress$Type extends MessageType<RogueDiaryProgress> {
    constructor() {
        super("com.midnights.game.RogueDiaryProgress", [
            { no: 7, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_enter_dungeon", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryProgress>): RogueDiaryProgress {
        const message = { optionalCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryProgress>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryProgress): RogueDiaryProgress {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 7:
                    message.difficulty = reader.uint32();
                    break;
                case /* repeated uint32 optional_card_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionalCardList.push(reader.uint32());
                    else
                        message.optionalCardList.push(reader.uint32());
                    break;
                case /* optional bool is_enter_dungeon */ 9:
                    message.isEnterDungeon = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 cur_round */ 3:
                    message.curRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryProgress, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty = 7; */
        if (message.difficulty !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficulty);
        /* repeated uint32 optional_card_list = 4; */
        for (let i = 0; i < message.optionalCardList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.optionalCardList[i]);
        /* optional bool is_enter_dungeon = 9; */
        if (message.isEnterDungeon !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isEnterDungeon);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* optional uint32 cur_round = 3; */
        if (message.curRound !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.curRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryProgress
 */
export const RogueDiaryProgress = new RogueDiaryProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryActivityDetailInfo$Type extends MessageType<RogueDiaryActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.RogueDiaryActivityDetailInfo", [
            { no: 11, name: "stage_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryStageInfo },
            { no: 10, name: "is_have_progress", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "cur_progress", kind: "message", T: () => RogueDiaryProgress }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryActivityDetailInfo>): RogueDiaryActivityDetailInfo {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryActivityDetailInfo): RogueDiaryActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryStageInfo stage_list */ 11:
                    message.stageList.push(RogueDiaryStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_have_progress */ 10:
                    message.isHaveProgress = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 2:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.RogueDiaryProgress cur_progress */ 7:
                    message.curProgress = RogueDiaryProgress.internalBinaryRead(reader, reader.uint32(), options, message.curProgress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueDiaryStageInfo stage_list = 11; */
        for (let i = 0; i < message.stageList.length; i++)
            RogueDiaryStageInfo.internalBinaryWrite(message.stageList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_have_progress = 10; */
        if (message.isHaveProgress !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isHaveProgress);
        /* optional bool is_content_closed = 2; */
        if (message.isContentClosed !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.RogueDiaryProgress cur_progress = 7; */
        if (message.curProgress)
            RogueDiaryProgress.internalBinaryWrite(message.curProgress, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryActivityDetailInfo
 */
export const RogueDiaryActivityDetailInfo = new RogueDiaryActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryAvatar$Type extends MessageType<RogueDiaryAvatar> {
    constructor() {
        super("com.midnights.game.RogueDiaryAvatar", [
            { no: 2, name: "avatar", kind: "message", T: () => ActivityDungeonAvatar },
            { no: 14, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "tired_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "disable_status_list", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["com.midnights.game.RogueDiaryAvatarDisableStatus", RogueDiaryAvatarDisableStatus] }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryAvatar>): RogueDiaryAvatar {
        const message = { disableStatusList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryAvatar): RogueDiaryAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityDungeonAvatar avatar */ 2:
                    message.avatar = ActivityDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* optional uint32 level */ 14:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 tired_round */ 13:
                    message.tiredRound = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatarDisableStatus disable_status_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.disableStatusList.push(reader.int32());
                    else
                        message.disableStatusList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ActivityDungeonAvatar avatar = 2; */
        if (message.avatar)
            ActivityDungeonAvatar.internalBinaryWrite(message.avatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level = 14; */
        if (message.level !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.level);
        /* optional uint32 tired_round = 13; */
        if (message.tiredRound !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.tiredRound);
        /* repeated com.midnights.game.RogueDiaryAvatarDisableStatus disable_status_list = 9; */
        for (let i = 0; i < message.disableStatusList.length; i++)
            writer.tag(9, WireType.Varint).int32(message.disableStatusList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryAvatar
 */
export const RogueDiaryAvatar = new RogueDiaryAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryRoomInfo$Type extends MessageType<RogueDiaryRoomInfo> {
    constructor() {
        super("com.midnights.game.RogueDiaryRoomInfo", [
            { no: 1, name: "monster_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Uint32Pair },
            { no: 3, name: "is_boss", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryRoomInfo>): RogueDiaryRoomInfo {
        const message = { monsterList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryRoomInfo): RogueDiaryRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Uint32Pair monster_list */ 1:
                    message.monsterList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_boss */ 3:
                    message.isBoss = reader.bool();
                    break;
                case /* optional uint32 config_id */ 7:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Uint32Pair monster_list = 1; */
        for (let i = 0; i < message.monsterList.length; i++)
            Uint32Pair.internalBinaryWrite(message.monsterList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_boss = 3; */
        if (message.isBoss !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isBoss);
        /* optional uint32 config_id = 7; */
        if (message.configId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryRoomInfo
 */
export const RogueDiaryRoomInfo = new RogueDiaryRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryPlayReq$Type extends MessageType<StartRogueDiaryPlayReq> {
    constructor() {
        super("com.midnights.game.StartRogueDiaryPlayReq", [
            { no: 1, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueDiaryPlayReq>): StartRogueDiaryPlayReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueDiaryPlayReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueDiaryPlayReq): StartRogueDiaryPlayReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 1:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueDiaryPlayReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficulty = 1; */
        if (message.difficulty !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.difficulty);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryPlayReq
 */
export const StartRogueDiaryPlayReq = new StartRogueDiaryPlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryPlayRsp$Type extends MessageType<StartRogueDiaryPlayRsp> {
    constructor() {
        super("com.midnights.game.StartRogueDiaryPlayRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "trial_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar },
            { no: 12, name: "rand_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<StartRogueDiaryPlayRsp>): StartRogueDiaryPlayRsp {
        const message = { trialAvatarList: [], randCardList: [], avatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueDiaryPlayRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueDiaryPlayRsp): StartRogueDiaryPlayRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list */ 13:
                    message.trialAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 rand_card_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar avatar_list */ 9:
                    message.avatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueDiaryPlayRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 13; */
        for (let i = 0; i < message.trialAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.trialAvatarList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 rand_card_list = 12; */
        for (let i = 0; i < message.randCardList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.randCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar avatar_list = 9; */
        for (let i = 0; i < message.avatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryPlayRsp
 */
export const StartRogueDiaryPlayRsp = new StartRogueDiaryPlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRogueDiaryPlayReq$Type extends MessageType<ResetRogueDiaryPlayReq> {
    constructor() {
        super("com.midnights.game.ResetRogueDiaryPlayReq", [
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResetRogueDiaryPlayReq>): ResetRogueDiaryPlayReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetRogueDiaryPlayReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetRogueDiaryPlayReq): ResetRogueDiaryPlayReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetRogueDiaryPlayReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResetRogueDiaryPlayReq
 */
export const ResetRogueDiaryPlayReq = new ResetRogueDiaryPlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRogueDiaryPlayRsp$Type extends MessageType<ResetRogueDiaryPlayRsp> {
    constructor() {
        super("com.midnights.game.ResetRogueDiaryPlayRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResetRogueDiaryPlayRsp>): ResetRogueDiaryPlayRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetRogueDiaryPlayRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetRogueDiaryPlayRsp): ResetRogueDiaryPlayRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetRogueDiaryPlayRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResetRogueDiaryPlayRsp
 */
export const ResetRogueDiaryPlayRsp = new ResetRogueDiaryPlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRogueDiaryDungeonReq$Type extends MessageType<EnterRogueDiaryDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterRogueDiaryDungeonReq", [
            { no: 9, name: "chosen_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chosen_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<EnterRogueDiaryDungeonReq>): EnterRogueDiaryDungeonReq {
        const message = { chosenCardList: [], chosenAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterRogueDiaryDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterRogueDiaryDungeonReq): EnterRogueDiaryDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 chosen_card_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list */ 11:
                    message.chosenAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterRogueDiaryDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 chosen_card_list = 9; */
        for (let i = 0; i < message.chosenCardList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.chosenCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 11; */
        for (let i = 0; i < message.chosenAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.chosenAvatarList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRogueDiaryDungeonReq
 */
export const EnterRogueDiaryDungeonReq = new EnterRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRogueDiaryDungeonRsp$Type extends MessageType<EnterRogueDiaryDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterRogueDiaryDungeonRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterRogueDiaryDungeonRsp>): EnterRogueDiaryDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterRogueDiaryDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterRogueDiaryDungeonRsp): EnterRogueDiaryDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterRogueDiaryDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRogueDiaryDungeonRsp
 */
export const EnterRogueDiaryDungeonRsp = new EnterRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeRogueDiaryDungeonReq$Type extends MessageType<ResumeRogueDiaryDungeonReq> {
    constructor() {
        super("com.midnights.game.ResumeRogueDiaryDungeonReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResumeRogueDiaryDungeonReq>): ResumeRogueDiaryDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResumeRogueDiaryDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeRogueDiaryDungeonReq): ResumeRogueDiaryDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeRogueDiaryDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResumeRogueDiaryDungeonReq
 */
export const ResumeRogueDiaryDungeonReq = new ResumeRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeRogueDiaryDungeonRsp$Type extends MessageType<ResumeRogueDiaryDungeonRsp> {
    constructor() {
        super("com.midnights.game.ResumeRogueDiaryDungeonRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResumeRogueDiaryDungeonRsp>): ResumeRogueDiaryDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResumeRogueDiaryDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResumeRogueDiaryDungeonRsp): ResumeRogueDiaryDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResumeRogueDiaryDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResumeRogueDiaryDungeonRsp
 */
export const ResumeRogueDiaryDungeonRsp = new ResumeRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonInfoNotify$Type extends MessageType<RogueDiaryDungeonInfoNotify> {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonInfoNotify", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "round_monster_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_room", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "room_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryRoomInfo },
            { no: 10, name: "round_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryDungeonInfoNotify>): RogueDiaryDungeonInfoNotify {
        const message = { roundMonsterList: [], roomList: [], roundCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryDungeonInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryDungeonInfoNotify): RogueDiaryDungeonInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 round_monster_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundMonsterList.push(reader.uint32());
                    else
                        message.roundMonsterList.push(reader.uint32());
                    break;
                case /* optional uint32 time */ 4:
                    message.time = reader.uint32();
                    break;
                case /* optional uint32 cur_room */ 5:
                    message.curRoom = reader.uint32();
                    break;
                case /* optional uint32 cur_round */ 6:
                    message.curRound = reader.uint32();
                    break;
                case /* optional uint32 coin */ 11:
                    message.coin = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 8:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryRoomInfo room_list */ 7:
                    message.roomList.push(RogueDiaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 round_card_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundCardList.push(reader.uint32());
                    else
                        message.roundCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryDungeonInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.stageId);
        /* repeated uint32 round_monster_list = 15; */
        for (let i = 0; i < message.roundMonsterList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.roundMonsterList[i]);
        /* optional uint32 time = 4; */
        if (message.time !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.time);
        /* optional uint32 cur_room = 5; */
        if (message.curRoom !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.curRoom);
        /* optional uint32 cur_round = 6; */
        if (message.curRound !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.curRound);
        /* optional uint32 coin = 11; */
        if (message.coin !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.coin);
        /* optional uint32 difficulty = 8; */
        if (message.difficulty !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.difficulty);
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dungeonId);
        /* repeated com.midnights.game.RogueDiaryRoomInfo room_list = 7; */
        for (let i = 0; i < message.roomList.length; i++)
            RogueDiaryRoomInfo.internalBinaryWrite(message.roomList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 round_card_list = 10; */
        for (let i = 0; i < message.roundCardList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.roundCardList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonInfoNotify
 */
export const RogueDiaryDungeonInfoNotify = new RogueDiaryDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonSettleNotify$Type extends MessageType<RogueDiaryDungeonSettleNotify> {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonSettleNotify", [
            { no: 1, name: "explore_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryDungeonSettleNotify>): RogueDiaryDungeonSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryDungeonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryDungeonSettleNotify): RogueDiaryDungeonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 explore_time */ 1:
                    message.exploreTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 cur_round */ 2:
                    message.curRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryDungeonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 explore_time = 1; */
        if (message.exploreTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.exploreTime);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFinish);
        /* optional uint32 cur_round = 2; */
        if (message.curRound !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.curRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonSettleNotify
 */
export const RogueDiaryDungeonSettleNotify = new RogueDiaryDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryRoomReq$Type extends MessageType<StartRogueDiaryRoomReq> {
    constructor() {
        super("com.midnights.game.StartRogueDiaryRoomReq", [
            { no: 13, name: "room_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_select_hard", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueDiaryRoomReq>): StartRogueDiaryRoomReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueDiaryRoomReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueDiaryRoomReq): StartRogueDiaryRoomReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 room_difficulty */ 13:
                    message.roomDifficulty = reader.uint32();
                    break;
                case /* optional bool is_select_hard */ 1:
                    message.isSelectHard = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueDiaryRoomReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 room_difficulty = 13; */
        if (message.roomDifficulty !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.roomDifficulty);
        /* optional bool is_select_hard = 1; */
        if (message.isSelectHard !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isSelectHard);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryRoomReq
 */
export const StartRogueDiaryRoomReq = new StartRogueDiaryRoomReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryRoomRsp$Type extends MessageType<StartRogueDiaryRoomRsp> {
    constructor() {
        super("com.midnights.game.StartRogueDiaryRoomRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartRogueDiaryRoomRsp>): StartRogueDiaryRoomRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StartRogueDiaryRoomRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRogueDiaryRoomRsp): StartRogueDiaryRoomRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRogueDiaryRoomRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryRoomRsp
 */
export const StartRogueDiaryRoomRsp = new StartRogueDiaryRoomRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryTiredAvatarNotify$Type extends MessageType<RogueDiaryTiredAvatarNotify> {
    constructor() {
        super("com.midnights.game.RogueDiaryTiredAvatarNotify", [
            { no: 10, name: "optianal_tired_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar },
            { no: 6, name: "reserve_avatar_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "tired_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_need_show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryTiredAvatarNotify>): RogueDiaryTiredAvatarNotify {
        const message = { optianalTiredAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryTiredAvatarNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryTiredAvatarNotify): RogueDiaryTiredAvatarNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryAvatar optianal_tired_avatar_list */ 10:
                    message.optianalTiredAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 reserve_avatar_num */ 6:
                    message.reserveAvatarNum = reader.uint32();
                    break;
                case /* optional uint32 tired_type */ 8:
                    message.tiredType = reader.uint32();
                    break;
                case /* optional bool is_need_show */ 7:
                    message.isNeedShow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryTiredAvatarNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueDiaryAvatar optianal_tired_avatar_list = 10; */
        for (let i = 0; i < message.optianalTiredAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.optianalTiredAvatarList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reserve_avatar_num = 6; */
        if (message.reserveAvatarNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reserveAvatarNum);
        /* optional uint32 tired_type = 8; */
        if (message.tiredType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.tiredType);
        /* optional bool is_need_show = 7; */
        if (message.isNeedShow !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isNeedShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryTiredAvatarNotify
 */
export const RogueDiaryTiredAvatarNotify = new RogueDiaryTiredAvatarNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveRogueDiaryAvatarReq$Type extends MessageType<ReserveRogueDiaryAvatarReq> {
    constructor() {
        super("com.midnights.game.ReserveRogueDiaryAvatarReq", [
            { no: 6, name: "reserve_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<ReserveRogueDiaryAvatarReq>): ReserveRogueDiaryAvatarReq {
        const message = { reserveAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReserveRogueDiaryAvatarReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReserveRogueDiaryAvatarReq): ReserveRogueDiaryAvatarReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryAvatar reserve_avatar_list */ 6:
                    message.reserveAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReserveRogueDiaryAvatarReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RogueDiaryAvatar reserve_avatar_list = 6; */
        for (let i = 0; i < message.reserveAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.reserveAvatarList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReserveRogueDiaryAvatarReq
 */
export const ReserveRogueDiaryAvatarReq = new ReserveRogueDiaryAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveRogueDiaryAvatarRsp$Type extends MessageType<ReserveRogueDiaryAvatarRsp> {
    constructor() {
        super("com.midnights.game.ReserveRogueDiaryAvatarRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReserveRogueDiaryAvatarRsp>): ReserveRogueDiaryAvatarRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReserveRogueDiaryAvatarRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReserveRogueDiaryAvatarRsp): ReserveRogueDiaryAvatarRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReserveRogueDiaryAvatarRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReserveRogueDiaryAvatarRsp
 */
export const ReserveRogueDiaryAvatarRsp = new ReserveRogueDiaryAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRogueDairyRepairInfoReq$Type extends MessageType<GetRogueDairyRepairInfoReq> {
    constructor() {
        super("com.midnights.game.GetRogueDairyRepairInfoReq", []);
    }
    create(value?: PartialMessage<GetRogueDairyRepairInfoReq>): GetRogueDairyRepairInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRogueDairyRepairInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRogueDairyRepairInfoReq): GetRogueDairyRepairInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetRogueDairyRepairInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetRogueDairyRepairInfoReq
 */
export const GetRogueDairyRepairInfoReq = new GetRogueDairyRepairInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRogueDairyRepairInfoRsp$Type extends MessageType<GetRogueDairyRepairInfoRsp> {
    constructor() {
        super("com.midnights.game.GetRogueDairyRepairInfoRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRogueDairyRepairInfoRsp>): GetRogueDairyRepairInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRogueDairyRepairInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRogueDairyRepairInfoRsp): GetRogueDairyRepairInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRogueDairyRepairInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetRogueDairyRepairInfoRsp
 */
export const GetRogueDairyRepairInfoRsp = new GetRogueDairyRepairInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRogueDiaryCardReq$Type extends MessageType<RefreshRogueDiaryCardReq> {
    constructor() {
        super("com.midnights.game.RefreshRogueDiaryCardReq", [
            { no: 8, name: "refresh_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshRogueDiaryCardReq>): RefreshRogueDiaryCardReq {
        const message = { refreshCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshRogueDiaryCardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRogueDiaryCardReq): RefreshRogueDiaryCardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 refresh_card_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.refreshCardList.push(reader.uint32());
                    else
                        message.refreshCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshRogueDiaryCardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 refresh_card_list = 8; */
        for (let i = 0; i < message.refreshCardList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.refreshCardList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRogueDiaryCardReq
 */
export const RefreshRogueDiaryCardReq = new RefreshRogueDiaryCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRogueDiaryCardRsp$Type extends MessageType<RefreshRogueDiaryCardRsp> {
    constructor() {
        super("com.midnights.game.RefreshRogueDiaryCardRsp", [
            { no: 15, name: "rand_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RefreshRogueDiaryCardRsp>): RefreshRogueDiaryCardRsp {
        const message = { randCardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RefreshRogueDiaryCardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshRogueDiaryCardRsp): RefreshRogueDiaryCardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 rand_card_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshRogueDiaryCardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 rand_card_list = 15; */
        for (let i = 0; i < message.randCardList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.randCardList[i]);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRogueDiaryCardRsp
 */
export const RefreshRogueDiaryCardRsp = new RefreshRogueDiaryCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueFinishRepairReq$Type extends MessageType<RogueFinishRepairReq> {
    constructor() {
        super("com.midnights.game.RogueFinishRepairReq", [
            { no: 1, name: "chosen_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "chosen_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<RogueFinishRepairReq>): RogueFinishRepairReq {
        const message = { chosenCardList: [], chosenAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueFinishRepairReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueFinishRepairReq): RogueFinishRepairReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 chosen_card_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list */ 8:
                    message.chosenAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueFinishRepairReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 chosen_card_list = 1; */
        for (let i = 0; i < message.chosenCardList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.chosenCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 8; */
        for (let i = 0; i < message.chosenAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.chosenAvatarList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueFinishRepairReq
 */
export const RogueFinishRepairReq = new RogueFinishRepairReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueFinishRepairRsp$Type extends MessageType<RogueFinishRepairRsp> {
    constructor() {
        super("com.midnights.game.RogueFinishRepairRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueFinishRepairRsp>): RogueFinishRepairRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueFinishRepairRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueFinishRepairRsp): RogueFinishRepairRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueFinishRepairRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueFinishRepairRsp
 */
export const RogueFinishRepairRsp = new RogueFinishRepairRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryInterruptRogueDiaryDungeonReq$Type extends MessageType<TryInterruptRogueDiaryDungeonReq> {
    constructor() {
        super("com.midnights.game.TryInterruptRogueDiaryDungeonReq", []);
    }
    create(value?: PartialMessage<TryInterruptRogueDiaryDungeonReq>): TryInterruptRogueDiaryDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TryInterruptRogueDiaryDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TryInterruptRogueDiaryDungeonReq): TryInterruptRogueDiaryDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TryInterruptRogueDiaryDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonReq
 */
export const TryInterruptRogueDiaryDungeonReq = new TryInterruptRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryInterruptRogueDiaryDungeonRsp$Type extends MessageType<TryInterruptRogueDiaryDungeonRsp> {
    constructor() {
        super("com.midnights.game.TryInterruptRogueDiaryDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TryInterruptRogueDiaryDungeonRsp>): TryInterruptRogueDiaryDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TryInterruptRogueDiaryDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TryInterruptRogueDiaryDungeonRsp): TryInterruptRogueDiaryDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TryInterruptRogueDiaryDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonRsp
 */
export const TryInterruptRogueDiaryDungeonRsp = new TryInterruptRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryRepairInfoNotify$Type extends MessageType<RogueDiaryRepairInfoNotify> {
    constructor() {
        super("com.midnights.game.RogueDiaryRepairInfoNotify", [
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "select_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar },
            { no: 2, name: "room_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryRoomInfo },
            { no: 10, name: "rand_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "select_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar },
            { no: 15, name: "chosen_card_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "trial_avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryRepairInfoNotify>): RogueDiaryRepairInfoNotify {
        const message = { selectCardList: [], avatarList: [], roomList: [], randCardList: [], selectAvatarList: [], chosenCardList: [], trialAvatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryRepairInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryRepairInfoNotify): RogueDiaryRepairInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 select_card_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectCardList.push(reader.uint32());
                    else
                        message.selectCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar avatar_list */ 13:
                    message.avatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RogueDiaryRoomInfo room_list */ 2:
                    message.roomList.push(RogueDiaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 rand_card_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar select_avatar_list */ 9:
                    message.selectAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 chosen_card_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list */ 11:
                    message.trialAvatarList.push(RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryRepairInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.stageId);
        /* repeated uint32 select_card_list = 14; */
        for (let i = 0; i < message.selectCardList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.selectCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar avatar_list = 13; */
        for (let i = 0; i < message.avatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RogueDiaryRoomInfo room_list = 2; */
        for (let i = 0; i < message.roomList.length; i++)
            RogueDiaryRoomInfo.internalBinaryWrite(message.roomList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 rand_card_list = 10; */
        for (let i = 0; i < message.randCardList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.randCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar select_avatar_list = 9; */
        for (let i = 0; i < message.selectAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.selectAvatarList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 chosen_card_list = 15; */
        for (let i = 0; i < message.chosenCardList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.chosenCardList[i]);
        /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 11; */
        for (let i = 0; i < message.trialAvatarList.length; i++)
            RogueDiaryAvatar.internalBinaryWrite(message.trialAvatarList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryRepairInfoNotify
 */
export const RogueDiaryRepairInfoNotify = new RogueDiaryRepairInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryCurRogueDiaryDungeonReq$Type extends MessageType<RetryCurRogueDiaryDungeonReq> {
    constructor() {
        super("com.midnights.game.RetryCurRogueDiaryDungeonReq", []);
    }
    create(value?: PartialMessage<RetryCurRogueDiaryDungeonReq>): RetryCurRogueDiaryDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RetryCurRogueDiaryDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetryCurRogueDiaryDungeonReq): RetryCurRogueDiaryDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: RetryCurRogueDiaryDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RetryCurRogueDiaryDungeonReq
 */
export const RetryCurRogueDiaryDungeonReq = new RetryCurRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryCurRogueDiaryDungeonRsp$Type extends MessageType<RetryCurRogueDiaryDungeonRsp> {
    constructor() {
        super("com.midnights.game.RetryCurRogueDiaryDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RetryCurRogueDiaryDungeonRsp>): RetryCurRogueDiaryDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RetryCurRogueDiaryDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetryCurRogueDiaryDungeonRsp): RetryCurRogueDiaryDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetryCurRogueDiaryDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RetryCurRogueDiaryDungeonRsp
 */
export const RetryCurRogueDiaryDungeonRsp = new RetryCurRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryReviveAvatarReq$Type extends MessageType<RogueDiaryReviveAvatarReq> {
    constructor() {
        super("com.midnights.game.RogueDiaryReviveAvatarReq", [
            { no: 2, name: "revive_avatar", kind: "message", T: () => RogueDiaryAvatar }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryReviveAvatarReq>): RogueDiaryReviveAvatarReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryReviveAvatarReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryReviveAvatarReq): RogueDiaryReviveAvatarReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueDiaryAvatar revive_avatar */ 2:
                    message.reviveAvatar = RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options, message.reviveAvatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryReviveAvatarReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.RogueDiaryAvatar revive_avatar = 2; */
        if (message.reviveAvatar)
            RogueDiaryAvatar.internalBinaryWrite(message.reviveAvatar, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryReviveAvatarReq
 */
export const RogueDiaryReviveAvatarReq = new RogueDiaryReviveAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryReviveAvatarRsp$Type extends MessageType<RogueDiaryReviveAvatarRsp> {
    constructor() {
        super("com.midnights.game.RogueDiaryReviveAvatarRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryReviveAvatarRsp>): RogueDiaryReviveAvatarRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryReviveAvatarRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryReviveAvatarRsp): RogueDiaryReviveAvatarRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryReviveAvatarRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryReviveAvatarRsp
 */
export const RogueDiaryReviveAvatarRsp = new RogueDiaryReviveAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryEnterNextRogueDiaryDungeonReq$Type extends MessageType<TryEnterNextRogueDiaryDungeonReq> {
    constructor() {
        super("com.midnights.game.TryEnterNextRogueDiaryDungeonReq", []);
    }
    create(value?: PartialMessage<TryEnterNextRogueDiaryDungeonReq>): TryEnterNextRogueDiaryDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TryEnterNextRogueDiaryDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TryEnterNextRogueDiaryDungeonReq): TryEnterNextRogueDiaryDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TryEnterNextRogueDiaryDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonReq
 */
export const TryEnterNextRogueDiaryDungeonReq = new TryEnterNextRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryEnterNextRogueDiaryDungeonRsp$Type extends MessageType<TryEnterNextRogueDiaryDungeonRsp> {
    constructor() {
        super("com.midnights.game.TryEnterNextRogueDiaryDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TryEnterNextRogueDiaryDungeonRsp>): TryEnterNextRogueDiaryDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TryEnterNextRogueDiaryDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TryEnterNextRogueDiaryDungeonRsp): TryEnterNextRogueDiaryDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TryEnterNextRogueDiaryDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonRsp
 */
export const TryEnterNextRogueDiaryDungeonRsp = new TryEnterNextRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryCoinAddNotify$Type extends MessageType<RogueDiaryCoinAddNotify> {
    constructor() {
        super("com.midnights.game.RogueDiaryCoinAddNotify", [
            { no: 10, name: "num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryCoinAddNotify>): RogueDiaryCoinAddNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryCoinAddNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryCoinAddNotify): RogueDiaryCoinAddNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 num */ 10:
                    message.num = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryCoinAddNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 num = 10; */
        if (message.num !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryCoinAddNotify
 */
export const RogueDiaryCoinAddNotify = new RogueDiaryCoinAddNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2DetailInfo$Type extends MessageType<SummerTimeV2DetailInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeV2DetailInfo", [
            { no: 13, name: "dungeon_stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SummerTimeV2DungeonStageInfo },
            { no: 10, name: "cur_dungeon_reward_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "taken_reward_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "boat_stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SummerTimeV2BoatStageInfo }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2DetailInfo>): SummerTimeV2DetailInfo {
        const message = { dungeonStageInfoList: [], boatStageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2DetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2DetailInfo): SummerTimeV2DetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeV2DungeonStageInfo dungeon_stage_info_list */ 13:
                    message.dungeonStageInfoList.push(SummerTimeV2DungeonStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_dungeon_reward_limit */ 10:
                    message.curDungeonRewardLimit = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 taken_reward_count */ 5:
                    message.takenRewardCount = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SummerTimeV2BoatStageInfo boat_stage_info_list */ 15:
                    message.boatStageInfoList.push(SummerTimeV2BoatStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2DetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 13; */
        for (let i = 0; i < message.dungeonStageInfoList.length; i++)
            SummerTimeV2DungeonStageInfo.internalBinaryWrite(message.dungeonStageInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_dungeon_reward_limit = 10; */
        if (message.curDungeonRewardLimit !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.curDungeonRewardLimit);
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 taken_reward_count = 5; */
        if (message.takenRewardCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.takenRewardCount);
        /* repeated com.midnights.game.SummerTimeV2BoatStageInfo boat_stage_info_list = 15; */
        for (let i = 0; i < message.boatStageInfoList.length; i++)
            SummerTimeV2BoatStageInfo.internalBinaryWrite(message.boatStageInfoList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2DetailInfo
 */
export const SummerTimeV2DetailInfo = new SummerTimeV2DetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2DungeonStageInfo$Type extends MessageType<SummerTimeV2DungeonStageInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeV2DungeonStageInfo", [
            { no: 10, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_prev_dungeon_succeed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2DungeonStageInfo>): SummerTimeV2DungeonStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2DungeonStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2DungeonStageInfo): SummerTimeV2DungeonStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 10:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 12:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_prev_dungeon_succeed */ 15:
                    message.isPrevDungeonSucceed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2DungeonStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 10; */
        if (message.stageId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 12; */
        if (message.openTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.openTime);
        /* optional bool is_prev_dungeon_succeed = 15; */
        if (message.isPrevDungeonSucceed !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isPrevDungeonSucceed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2DungeonStageInfo
 */
export const SummerTimeV2DungeonStageInfo = new SummerTimeV2DungeonStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2BoatStageInfo$Type extends MessageType<SummerTimeV2BoatStageInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeV2BoatStageInfo", [
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2BoatStageInfo>): SummerTimeV2BoatStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2BoatStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2BoatStageInfo): SummerTimeV2BoatStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 14:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 10:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 13:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2BoatStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 14; */
        if (message.isOpen !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 10; */
        if (message.stageId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.stageId);
        /* optional uint32 best_score = 13; */
        if (message.bestScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2BoatStageInfo
 */
export const SummerTimeV2BoatStageInfo = new SummerTimeV2BoatStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2BoatSettleNotify$Type extends MessageType<SummerTimeV2BoatSettleNotify> {
    constructor() {
        super("com.midnights.game.SummerTimeV2BoatSettleNotify", [
            { no: 11, name: "settle_info", kind: "message", T: () => SummerTimeV2BoatGallerySettleInfo },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2BoatSettleNotify>): SummerTimeV2BoatSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2BoatSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2BoatSettleNotify): SummerTimeV2BoatSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SummerTimeV2BoatGallerySettleInfo settle_info */ 11:
                    message.settleInfo = SummerTimeV2BoatGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 1:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2BoatSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SummerTimeV2BoatGallerySettleInfo settle_info = 11; */
        if (message.settleInfo)
            SummerTimeV2BoatGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 gallery_id = 1; */
        if (message.galleryId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2BoatSettleNotify
 */
export const SummerTimeV2BoatSettleNotify = new SummerTimeV2BoatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPushTipsData$Type extends MessageType<ActivityPushTipsData> {
    constructor() {
        super("com.midnights.game.ActivityPushTipsData", [
            { no: 10, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.ActivityPushTipsState", ActivityPushTipsState, "ACTIVITY_PUSH_TIPS_STATE_"] },
            { no: 4, name: "activity_push_tips_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityPushTipsData>): ActivityPushTipsData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityPushTipsData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityPushTipsData): ActivityPushTipsData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityPushTipsState state */ 10:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 activity_push_tips_id */ 4:
                    message.activityPushTipsId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityPushTipsData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ActivityPushTipsState state = 10; */
        if (message.state !== undefined)
            writer.tag(10, WireType.Varint).int32(message.state);
        /* optional uint32 activity_push_tips_id = 4; */
        if (message.activityPushTipsId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.activityPushTipsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPushTipsData
 */
export const ActivityPushTipsData = new ActivityPushTipsData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPushTipsInfoNotify$Type extends MessageType<ActivityPushTipsInfoNotify> {
    constructor() {
        super("com.midnights.game.ActivityPushTipsInfoNotify", [
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_push_tips_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityPushTipsData },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityPushTipsInfoNotify>): ActivityPushTipsInfoNotify {
        const message = { activityPushTipsDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityPushTipsInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityPushTipsInfoNotify): ActivityPushTipsInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list */ 3:
                    message.activityPushTipsDataList.push(ActivityPushTipsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityPushTipsInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.scheduleId);
        /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 3; */
        for (let i = 0; i < message.activityPushTipsDataList.length; i++)
            ActivityPushTipsData.internalBinaryWrite(message.activityPushTipsDataList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPushTipsInfoNotify
 */
export const ActivityPushTipsInfoNotify = new ActivityPushTipsInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityReadPushTipsReq$Type extends MessageType<ActivityReadPushTipsReq> {
    constructor() {
        super("com.midnights.game.ActivityReadPushTipsReq", [
            { no: 14, name: "activity_push_tips_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityReadPushTipsReq>): ActivityReadPushTipsReq {
        const message = { activityPushTipsIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityReadPushTipsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityReadPushTipsReq): ActivityReadPushTipsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activity_push_tips_id_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityPushTipsIdList.push(reader.uint32());
                    else
                        message.activityPushTipsIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityReadPushTipsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 activity_push_tips_id_list = 14; */
        for (let i = 0; i < message.activityPushTipsIdList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.activityPushTipsIdList[i]);
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityReadPushTipsReq
 */
export const ActivityReadPushTipsReq = new ActivityReadPushTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityReadPushTipsRsp$Type extends MessageType<ActivityReadPushTipsRsp> {
    constructor() {
        super("com.midnights.game.ActivityReadPushTipsRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivityReadPushTipsRsp>): ActivityReadPushTipsRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ActivityReadPushTipsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityReadPushTipsRsp): ActivityReadPushTipsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityReadPushTipsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityReadPushTipsRsp
 */
export const ActivityReadPushTipsRsp = new ActivityReadPushTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartBoatGalleryReq$Type extends MessageType<SummerTimeV2RestartBoatGalleryReq> {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartBoatGalleryReq", [
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2RestartBoatGalleryReq>): SummerTimeV2RestartBoatGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2RestartBoatGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2RestartBoatGalleryReq): SummerTimeV2RestartBoatGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2RestartBoatGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryReq
 */
export const SummerTimeV2RestartBoatGalleryReq = new SummerTimeV2RestartBoatGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartBoatGalleryRsp$Type extends MessageType<SummerTimeV2RestartBoatGalleryRsp> {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartBoatGalleryRsp", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2RestartBoatGalleryRsp>): SummerTimeV2RestartBoatGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2RestartBoatGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2RestartBoatGalleryRsp): SummerTimeV2RestartBoatGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2RestartBoatGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryRsp
 */
export const SummerTimeV2RestartBoatGalleryRsp = new SummerTimeV2RestartBoatGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartDungeonReq$Type extends MessageType<SummerTimeV2RestartDungeonReq> {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartDungeonReq", []);
    }
    create(value?: PartialMessage<SummerTimeV2RestartDungeonReq>): SummerTimeV2RestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2RestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2RestartDungeonReq): SummerTimeV2RestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SummerTimeV2RestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartDungeonReq
 */
export const SummerTimeV2RestartDungeonReq = new SummerTimeV2RestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartDungeonRsp$Type extends MessageType<SummerTimeV2RestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartDungeonRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2RestartDungeonRsp>): SummerTimeV2RestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2RestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2RestartDungeonRsp): SummerTimeV2RestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2RestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartDungeonRsp
 */
export const SummerTimeV2RestartDungeonRsp = new SummerTimeV2RestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyStageData$Type extends MessageType<IslandPartyStageData> {
    constructor() {
        super("com.midnights.game.IslandPartyStageData", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IslandPartyStageData>): IslandPartyStageData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartyStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartyStageData): IslandPartyStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 14:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 best_score */ 4:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartyStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 14; */
        if (message.isOpen !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isOpen);
        /* optional uint32 best_score = 4; */
        if (message.bestScore !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyStageData
 */
export const IslandPartyStageData = new IslandPartyStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyDetailInfo$Type extends MessageType<IslandPartyDetailInfo> {
    constructor() {
        super("com.midnights.game.IslandPartyDetailInfo", [
            { no: 15, name: "stage_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IslandPartyStageData }
        ]);
    }
    create(value?: PartialMessage<IslandPartyDetailInfo>): IslandPartyDetailInfo {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartyDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartyDetailInfo): IslandPartyDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IslandPartyStageData stage_data_list */ 15:
                    message.stageDataList.push(IslandPartyStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartyDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.IslandPartyStageData stage_data_list = 15; */
        for (let i = 0; i < message.stageDataList.length; i++)
            IslandPartyStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyDetailInfo
 */
export const IslandPartyDetailInfo = new IslandPartyDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartySettleNotify$Type extends MessageType<IslandPartySettleNotify> {
    constructor() {
        super("com.midnights.game.IslandPartySettleNotify", [
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 8, name: "settle_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IslandPartyGallerySettleInfo },
            { no: 6, name: "score_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExhibitionDisplayInfo },
            { no: 15, name: "time_remain", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IslandPartySettleNotify>): IslandPartySettleNotify {
        const message = { settleInfoList: [], scoreList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartySettleNotify): IslandPartySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* repeated com.midnights.game.IslandPartyGallerySettleInfo settle_info_list */ 8:
                    message.settleInfoList.push(IslandPartyGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ExhibitionDisplayInfo score_list */ 6:
                    message.scoreList.push(ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 time_remain */ 15:
                    message.timeRemain = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.GalleryStopReason reason = 1; */
        if (message.reason !== undefined)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* repeated com.midnights.game.IslandPartyGallerySettleInfo settle_info_list = 8; */
        for (let i = 0; i < message.settleInfoList.length; i++)
            IslandPartyGallerySettleInfo.internalBinaryWrite(message.settleInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ExhibitionDisplayInfo score_list = 6; */
        for (let i = 0; i < message.scoreList.length; i++)
            ExhibitionDisplayInfo.internalBinaryWrite(message.scoreList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 time_remain = 15; */
        if (message.timeRemain !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.timeRemain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartySettleNotify
 */
export const IslandPartySettleNotify = new IslandPartySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearLevelData$Type extends MessageType<GearLevelData> {
    constructor() {
        super("com.midnights.game.GearLevelData", [
            { no: 8, name: "shortest_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "last_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GearLevelData>): GearLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearLevelData): GearLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shortest_time */ 8:
                    message.shortestTime = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 11:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 last_duration */ 5:
                    message.lastDuration = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_finished */ 9:
                    message.isFinished = reader.bool();
                    break;
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 shortest_time = 8; */
        if (message.shortestTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.shortestTime);
        /* optional uint32 open_time = 11; */
        if (message.openTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.openTime);
        /* optional uint32 last_duration = 5; */
        if (message.lastDuration !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.lastDuration);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        /* optional bool is_finished = 9; */
        if (message.isFinished !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isFinished);
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearLevelData
 */
export const GearLevelData = new GearLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JigsawPictureData$Type extends MessageType<JigsawPictureData> {
    constructor() {
        super("com.midnights.game.JigsawPictureData", [
            { no: 7, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "shortest_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "last_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<JigsawPictureData>): JigsawPictureData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JigsawPictureData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JigsawPictureData): JigsawPictureData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 7:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 shortest_time */ 10:
                    message.shortestTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 last_duration */ 6:
                    message.lastDuration = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JigsawPictureData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 7; */
        if (message.isFinished !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isFinished);
        /* optional uint32 shortest_time = 10; */
        if (message.shortestTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.shortestTime);
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOpen);
        /* optional uint32 last_duration = 6; */
        if (message.lastDuration !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.lastDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.JigsawPictureData
 */
export const JigsawPictureData = new JigsawPictureData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityDetailInfo$Type extends MessageType<GearActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.GearActivityDetailInfo", [
            { no: 14, name: "gear_level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GearLevelData },
            { no: 8, name: "jigsaw_picture_data", kind: "message", T: () => JigsawPictureData }
        ]);
    }
    create(value?: PartialMessage<GearActivityDetailInfo>): GearActivityDetailInfo {
        const message = { gearLevelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityDetailInfo): GearActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GearLevelData gear_level_data_list */ 14:
                    message.gearLevelDataList.push(GearLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.JigsawPictureData jigsaw_picture_data */ 8:
                    message.jigsawPictureData = JigsawPictureData.internalBinaryRead(reader, reader.uint32(), options, message.jigsawPictureData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GearLevelData gear_level_data_list = 14; */
        for (let i = 0; i < message.gearLevelDataList.length; i++)
            GearLevelData.internalBinaryWrite(message.gearLevelDataList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.JigsawPictureData jigsaw_picture_data = 8; */
        if (message.jigsawPictureData)
            JigsawPictureData.internalBinaryWrite(message.jigsawPictureData, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityDetailInfo
 */
export const GearActivityDetailInfo = new GearActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayGearReq$Type extends MessageType<GearActivityStartPlayGearReq> {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayGearReq", [
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityStartPlayGearReq>): GearActivityStartPlayGearReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityStartPlayGearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityStartPlayGearReq): GearActivityStartPlayGearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityStartPlayGearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayGearReq
 */
export const GearActivityStartPlayGearReq = new GearActivityStartPlayGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayGearRsp$Type extends MessageType<GearActivityStartPlayGearRsp> {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayGearRsp", [
            { no: 9, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityStartPlayGearRsp>): GearActivityStartPlayGearRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityStartPlayGearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityStartPlayGearRsp): GearActivityStartPlayGearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 9:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityStartPlayGearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 9; */
        if (message.levelId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayGearRsp
 */
export const GearActivityStartPlayGearRsp = new GearActivityStartPlayGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearColumnInfo$Type extends MessageType<GearColumnInfo> {
    constructor() {
        super("com.midnights.game.GearColumnInfo", [
            { no: 7, name: "gear_column_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_overturn", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "has_gear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "placement_layer", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearColumnInfo>): GearColumnInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearColumnInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearColumnInfo): GearColumnInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gear_column_index */ 7:
                    message.gearColumnIndex = reader.uint32();
                    break;
                case /* optional bool is_overturn */ 3:
                    message.isOverturn = reader.bool();
                    break;
                case /* optional bool has_gear */ 2:
                    message.hasGear = reader.bool();
                    break;
                case /* optional uint32 gear_id */ 11:
                    message.gearId = reader.uint32();
                    break;
                case /* optional uint32 placement_layer */ 6:
                    message.placementLayer = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearColumnInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gear_column_index = 7; */
        if (message.gearColumnIndex !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gearColumnIndex);
        /* optional bool is_overturn = 3; */
        if (message.isOverturn !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isOverturn);
        /* optional bool has_gear = 2; */
        if (message.hasGear !== undefined)
            writer.tag(2, WireType.Varint).bool(message.hasGear);
        /* optional uint32 gear_id = 11; */
        if (message.gearId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.gearId);
        /* optional uint32 placement_layer = 6; */
        if (message.placementLayer !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.placementLayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearColumnInfo
 */
export const GearColumnInfo = new GearColumnInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayGearReq$Type extends MessageType<GearActivityFinishPlayGearReq> {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayGearReq", [
            { no: 4, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "use_clue", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "gear_column_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GearColumnInfo },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityFinishPlayGearReq>): GearActivityFinishPlayGearReq {
        const message = { gearColumnInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityFinishPlayGearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityFinishPlayGearReq): GearActivityFinishPlayGearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional bool use_clue */ 12:
                    message.useClue = reader.bool();
                    break;
                case /* repeated com.midnights.game.GearColumnInfo gear_column_info_list */ 9:
                    message.gearColumnInfoList.push(GearColumnInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityFinishPlayGearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 4; */
        if (message.isSuccess !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isSuccess);
        /* optional bool use_clue = 12; */
        if (message.useClue !== undefined)
            writer.tag(12, WireType.Varint).bool(message.useClue);
        /* repeated com.midnights.game.GearColumnInfo gear_column_info_list = 9; */
        for (let i = 0; i < message.gearColumnInfoList.length; i++)
            GearColumnInfo.internalBinaryWrite(message.gearColumnInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayGearReq
 */
export const GearActivityFinishPlayGearReq = new GearActivityFinishPlayGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayGearRsp$Type extends MessageType<GearActivityFinishPlayGearRsp> {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayGearRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityFinishPlayGearRsp>): GearActivityFinishPlayGearRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityFinishPlayGearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityFinishPlayGearRsp): GearActivityFinishPlayGearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 3:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityFinishPlayGearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 3; */
        if (message.levelId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayGearRsp
 */
export const GearActivityFinishPlayGearRsp = new GearActivityFinishPlayGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayPictureReq$Type extends MessageType<GearActivityStartPlayPictureReq> {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayPictureReq", []);
    }
    create(value?: PartialMessage<GearActivityStartPlayPictureReq>): GearActivityStartPlayPictureReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityStartPlayPictureReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityStartPlayPictureReq): GearActivityStartPlayPictureReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GearActivityStartPlayPictureReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayPictureReq
 */
export const GearActivityStartPlayPictureReq = new GearActivityStartPlayPictureReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayPictureRsp$Type extends MessageType<GearActivityStartPlayPictureRsp> {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayPictureRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityStartPlayPictureRsp>): GearActivityStartPlayPictureRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityStartPlayPictureRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityStartPlayPictureRsp): GearActivityStartPlayPictureRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityStartPlayPictureRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayPictureRsp
 */
export const GearActivityStartPlayPictureRsp = new GearActivityStartPlayPictureRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayPictureReq$Type extends MessageType<GearActivityFinishPlayPictureReq> {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayPictureReq", [
            { no: 8, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityFinishPlayPictureReq>): GearActivityFinishPlayPictureReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityFinishPlayPictureReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityFinishPlayPictureReq): GearActivityFinishPlayPictureReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 8:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityFinishPlayPictureReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 8; */
        if (message.isSuccess !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayPictureReq
 */
export const GearActivityFinishPlayPictureReq = new GearActivityFinishPlayPictureReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayPictureRsp$Type extends MessageType<GearActivityFinishPlayPictureRsp> {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayPictureRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GearActivityFinishPlayPictureRsp>): GearActivityFinishPlayPictureRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GearActivityFinishPlayPictureRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GearActivityFinishPlayPictureRsp): GearActivityFinishPlayPictureRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 6:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GearActivityFinishPlayPictureRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 6; */
        if (message.isSuccess !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayPictureRsp
 */
export const GearActivityFinishPlayPictureRsp = new GearActivityFinishPlayPictureRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoStageInfo$Type extends MessageType<GravenInnocencePhotoStageInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoStageInfo", [
            { no: 11, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoStageInfo>): GravenInnocencePhotoStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoStageInfo): GravenInnocencePhotoStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 11:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 11; */
        if (message.isFinished !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isFinished);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoStageInfo
 */
export const GravenInnocencePhotoStageInfo = new GravenInnocencePhotoStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoObjectInfo$Type extends MessageType<GravenInnocencePhotoObjectInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoObjectInfo", [
            { no: 1, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoObjectInfo>): GravenInnocencePhotoObjectInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoObjectInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoObjectInfo): GravenInnocencePhotoObjectInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 object_id */ 1:
                    message.objectId = reader.uint32();
                    break;
                case /* optional uint32 finish_time */ 4:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 param */ 14:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoObjectInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 object_id = 1; */
        if (message.objectId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.objectId);
        /* optional uint32 finish_time = 4; */
        if (message.finishTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.finishTime);
        /* optional uint32 param = 14; */
        if (message.param !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoObjectInfo
 */
export const GravenInnocencePhotoObjectInfo = new GravenInnocencePhotoObjectInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoInfo$Type extends MessageType<GravenInnocencePhotoInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoInfo", [
            { no: 5, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GravenInnocencePhotoStageInfo },
            { no: 7, name: "object_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GravenInnocencePhotoObjectInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoInfo>): GravenInnocencePhotoInfo {
        const message = { stageInfoList: [], objectInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoInfo): GravenInnocencePhotoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocencePhotoStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(GravenInnocencePhotoStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.GravenInnocencePhotoObjectInfo object_info_list */ 7:
                    message.objectInfoList.push(GravenInnocencePhotoObjectInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GravenInnocencePhotoStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            GravenInnocencePhotoStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.GravenInnocencePhotoObjectInfo object_info_list = 7; */
        for (let i = 0; i < message.objectInfoList.length; i++)
            GravenInnocencePhotoObjectInfo.internalBinaryWrite(message.objectInfoList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoInfo
 */
export const GravenInnocencePhotoInfo = new GravenInnocencePhotoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCampStageInfo$Type extends MessageType<GravenInnocenceCampStageInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceCampStageInfo", [
            { no: 15, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceCampStageInfo>): GravenInnocenceCampStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceCampStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceCampStageInfo): GravenInnocenceCampStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 15:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_finished */ 3:
                    message.isFinished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceCampStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 15; */
        if (message.isOpen !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional bool is_finished = 3; */
        if (message.isFinished !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFinished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCampStageInfo
 */
export const GravenInnocenceCampStageInfo = new GravenInnocenceCampStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCampInfo$Type extends MessageType<GravenInnocenceCampInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceCampInfo", [
            { no: 5, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GravenInnocenceCampStageInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceCampInfo>): GravenInnocenceCampInfo {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceCampInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceCampInfo): GravenInnocenceCampInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceCampStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(GravenInnocenceCampStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceCampInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GravenInnocenceCampStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            GravenInnocenceCampStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCampInfo
 */
export const GravenInnocenceCampInfo = new GravenInnocenceCampInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceLevelInfo$Type extends MessageType<GravenInnocenceRaceLevelInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceLevelInfo", [
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceRaceLevelInfo>): GravenInnocenceRaceLevelInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceRaceLevelInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceRaceLevelInfo): GravenInnocenceRaceLevelInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 14:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceRaceLevelInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.levelId);
        /* optional uint32 max_score = 14; */
        if (message.maxScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxScore);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceLevelInfo
 */
export const GravenInnocenceRaceLevelInfo = new GravenInnocenceRaceLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceInfo$Type extends MessageType<GravenInnocenceRaceInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceInfo", [
            { no: 11, name: "level_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GravenInnocenceRaceLevelInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceRaceInfo>): GravenInnocenceRaceInfo {
        const message = { levelInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceRaceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceRaceInfo): GravenInnocenceRaceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceRaceLevelInfo level_info_list */ 11:
                    message.levelInfoList.push(GravenInnocenceRaceLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceRaceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GravenInnocenceRaceLevelInfo level_info_list = 11; */
        for (let i = 0; i < message.levelInfoList.length; i++)
            GravenInnocenceRaceLevelInfo.internalBinaryWrite(message.levelInfoList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceInfo
 */
export const GravenInnocenceRaceInfo = new GravenInnocenceRaceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCarveStageInfo$Type extends MessageType<GravenInnocenceCarveStageInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceCarveStageInfo", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceCarveStageInfo>): GravenInnocenceCarveStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceCarveStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceCarveStageInfo): GravenInnocenceCarveStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceCarveStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCarveStageInfo
 */
export const GravenInnocenceCarveStageInfo = new GravenInnocenceCarveStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCarveInfo$Type extends MessageType<GravenInnocenceCarveInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceCarveInfo", [
            { no: 10, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GravenInnocenceCarveStageInfo },
            { no: 7, name: "can_edit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "has_edit_config_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceCarveInfo>): GravenInnocenceCarveInfo {
        const message = { stageInfoList: [], hasEditConfigIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceCarveInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceCarveInfo): GravenInnocenceCarveInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceCarveStageInfo stage_info_list */ 10:
                    message.stageInfoList.push(GravenInnocenceCarveStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 can_edit_count */ 7:
                    message.canEditCount = reader.uint32();
                    break;
                case /* repeated uint32 has_edit_config_id_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hasEditConfigIdList.push(reader.uint32());
                    else
                        message.hasEditConfigIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceCarveInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GravenInnocenceCarveStageInfo stage_info_list = 10; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            GravenInnocenceCarveStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 can_edit_count = 7; */
        if (message.canEditCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.canEditCount);
        /* repeated uint32 has_edit_config_id_list = 6; */
        for (let i = 0; i < message.hasEditConfigIdList.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.hasEditConfigIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCarveInfo
 */
export const GravenInnocenceCarveInfo = new GravenInnocenceCarveInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceDetailInfo$Type extends MessageType<GravenInnocenceDetailInfo> {
    constructor() {
        super("com.midnights.game.GravenInnocenceDetailInfo", [
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "race_info", kind: "message", T: () => GravenInnocenceRaceInfo },
            { no: 7, name: "photo_info", kind: "message", T: () => GravenInnocencePhotoInfo },
            { no: 13, name: "carve_info", kind: "message", T: () => GravenInnocenceCarveInfo },
            { no: 12, name: "camp_info", kind: "message", T: () => GravenInnocenceCampInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceDetailInfo>): GravenInnocenceDetailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceDetailInfo): GravenInnocenceDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.GravenInnocenceRaceInfo race_info */ 10:
                    message.raceInfo = GravenInnocenceRaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.raceInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocencePhotoInfo photo_info */ 7:
                    message.photoInfo = GravenInnocencePhotoInfo.internalBinaryRead(reader, reader.uint32(), options, message.photoInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocenceCarveInfo carve_info */ 13:
                    message.carveInfo = GravenInnocenceCarveInfo.internalBinaryRead(reader, reader.uint32(), options, message.carveInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocenceCampInfo camp_info */ 12:
                    message.campInfo = GravenInnocenceCampInfo.internalBinaryRead(reader, reader.uint32(), options, message.campInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.GravenInnocenceRaceInfo race_info = 10; */
        if (message.raceInfo)
            GravenInnocenceRaceInfo.internalBinaryWrite(message.raceInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocencePhotoInfo photo_info = 7; */
        if (message.photoInfo)
            GravenInnocencePhotoInfo.internalBinaryWrite(message.photoInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocenceCarveInfo carve_info = 13; */
        if (message.carveInfo)
            GravenInnocenceCarveInfo.internalBinaryWrite(message.carveInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocenceCampInfo camp_info = 12; */
        if (message.campInfo)
            GravenInnocenceCampInfo.internalBinaryWrite(message.campInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceDetailInfo
 */
export const GravenInnocenceDetailInfo = new GravenInnocenceDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceSettleNotify$Type extends MessageType<GravenInnocenceRaceSettleNotify> {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceSettleNotify", [
            { no: 4, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 13, name: "total_coint_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "remain_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "coin_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceRaceSettleNotify>): GravenInnocenceRaceSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceRaceSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceRaceSettleNotify): GravenInnocenceRaceSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 4:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 score */ 5:
                    message.score = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 2:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 total_coint_count */ 13:
                    message.totalCointCount = reader.uint32();
                    break;
                case /* optional uint32 remain_time */ 10:
                    message.remainTime = reader.uint32();
                    break;
                case /* optional uint32 challenge_progress */ 1:
                    message.challengeProgress = reader.uint32();
                    break;
                case /* optional uint32 coin_count */ 8:
                    message.coinCount = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceRaceSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 4; */
        if (message.isNewRecord !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 score = 5; */
        if (message.score !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.score);
        /* optional com.midnights.game.GalleryStopReason reason = 2; */
        if (message.reason !== undefined)
            writer.tag(2, WireType.Varint).int32(message.reason);
        /* optional uint32 total_coint_count = 13; */
        if (message.totalCointCount !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.totalCointCount);
        /* optional uint32 remain_time = 10; */
        if (message.remainTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.remainTime);
        /* optional uint32 challenge_progress = 1; */
        if (message.challengeProgress !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeProgress);
        /* optional uint32 coin_count = 8; */
        if (message.coinCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.coinCount);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceSettleNotify
 */
export const GravenInnocenceRaceSettleNotify = new GravenInnocenceRaceSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceRestartReq$Type extends MessageType<GravenInnocenceRaceRestartReq> {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceRestartReq", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceRaceRestartReq>): GravenInnocenceRaceRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceRaceRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceRaceRestartReq): GravenInnocenceRaceRestartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceRaceRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceRestartReq
 */
export const GravenInnocenceRaceRestartReq = new GravenInnocenceRaceRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceRestartRsp$Type extends MessageType<GravenInnocenceRaceRestartRsp> {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceRestartRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceRaceRestartRsp>): GravenInnocenceRaceRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceRaceRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceRaceRestartRsp): GravenInnocenceRaceRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceRaceRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceRestartRsp
 */
export const GravenInnocenceRaceRestartRsp = new GravenInnocenceRaceRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceEditCarveCombinationReq$Type extends MessageType<GravenInnocenceEditCarveCombinationReq> {
    constructor() {
        super("com.midnights.game.GravenInnocenceEditCarveCombinationReq", [
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combination_info", kind: "message", T: () => CustomGadgetTreeInfo }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceEditCarveCombinationReq>): GravenInnocenceEditCarveCombinationReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceEditCarveCombinationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceEditCarveCombinationReq): GravenInnocenceEditCarveCombinationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 11:
                    message.combinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceEditCarveCombinationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11; */
        if (message.combinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationReq
 */
export const GravenInnocenceEditCarveCombinationReq = new GravenInnocenceEditCarveCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceEditCarveCombinationRsp$Type extends MessageType<GravenInnocenceEditCarveCombinationRsp> {
    constructor() {
        super("com.midnights.game.GravenInnocenceEditCarveCombinationRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocenceEditCarveCombinationRsp>): GravenInnocenceEditCarveCombinationRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocenceEditCarveCombinationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocenceEditCarveCombinationRsp): GravenInnocenceEditCarveCombinationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocenceEditCarveCombinationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationRsp
 */
export const GravenInnocenceEditCarveCombinationRsp = new GravenInnocenceEditCarveCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoFinishReq$Type extends MessageType<GravenInnocencePhotoFinishReq> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoFinishReq", [
            { no: 1, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoFinishReq>): GravenInnocencePhotoFinishReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoFinishReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoFinishReq): GravenInnocencePhotoFinishReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 1:
                    message.param = reader.uint32();
                    break;
                case /* optional uint32 object_id */ 4:
                    message.objectId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoFinishReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param = 1; */
        if (message.param !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.param);
        /* optional uint32 object_id = 4; */
        if (message.objectId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.objectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoFinishReq
 */
export const GravenInnocencePhotoFinishReq = new GravenInnocencePhotoFinishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoFinishRsp$Type extends MessageType<GravenInnocencePhotoFinishRsp> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoFinishRsp", [
            { no: 6, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoFinishRsp>): GravenInnocencePhotoFinishRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoFinishRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoFinishRsp): GravenInnocencePhotoFinishRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 object_id */ 6:
                    message.objectId = reader.uint32();
                    break;
                case /* optional uint32 param */ 11:
                    message.param = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoFinishRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 object_id = 6; */
        if (message.objectId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.objectId);
        /* optional uint32 param = 11; */
        if (message.param !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.param);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoFinishRsp
 */
export const GravenInnocencePhotoFinishRsp = new GravenInnocencePhotoFinishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoReminderNotify$Type extends MessageType<GravenInnocencePhotoReminderNotify> {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoReminderNotify", [
            { no: 14, name: "group_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "reminder_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GravenInnocencePhotoReminderNotify>): GravenInnocencePhotoReminderNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GravenInnocencePhotoReminderNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GravenInnocencePhotoReminderNotify): GravenInnocencePhotoReminderNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_bundle_id */ 14:
                    message.groupBundleId = reader.uint32();
                    break;
                case /* optional uint32 reminder_id */ 6:
                    message.reminderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GravenInnocencePhotoReminderNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_bundle_id = 14; */
        if (message.groupBundleId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.groupBundleId);
        /* optional uint32 reminder_id = 6; */
        if (message.reminderId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reminderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoReminderNotify
 */
export const GravenInnocencePhotoReminderNotify = new GravenInnocencePhotoReminderNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayTeamInfo$Type extends MessageType<InstableSprayTeamInfo> {
    constructor() {
        super("com.midnights.game.InstableSprayTeamInfo", [
            { no: 13, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSprayTeamInfo>): InstableSprayTeamInfo {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayTeamInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayTeamInfo): InstableSprayTeamInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 13:
                    message.avatarInfoList.push(InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayTeamInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayTeamInfo
 */
export const InstableSprayTeamInfo = new InstableSprayTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayStageInfo$Type extends MessageType<InstableSprayStageInfo> {
    constructor() {
        super("com.midnights.game.InstableSprayStageInfo", [
            { no: 10, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "team_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayTeamInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSprayStageInfo>): InstableSprayStageInfo {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayStageInfo): InstableSprayStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 10:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 max_score */ 3:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.InstableSprayTeamInfo team_info_list */ 6:
                    message.teamInfoList.push(InstableSprayTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 10; */
        if (message.isFinished !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinished);
        /* optional uint32 max_score = 3; */
        if (message.maxScore !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.InstableSprayTeamInfo team_info_list = 6; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            InstableSprayTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayStageInfo
 */
export const InstableSprayStageInfo = new InstableSprayStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayDetailInfo$Type extends MessageType<InstableSprayDetailInfo> {
    constructor() {
        super("com.midnights.game.InstableSprayDetailInfo", [
            { no: 9, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayStageInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSprayDetailInfo>): InstableSprayDetailInfo {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayDetailInfo): InstableSprayDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayStageInfo stage_info_list */ 9:
                    message.stageInfoList.push(InstableSprayStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InstableSprayStageInfo stage_info_list = 9; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            InstableSprayStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayDetailInfo
 */
export const InstableSprayDetailInfo = new InstableSprayDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayAvatarInfo$Type extends MessageType<InstableSprayAvatarInfo> {
    constructor() {
        super("com.midnights.game.InstableSprayAvatarInfo", [
            { no: 8, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayAvatarInfo>): InstableSprayAvatarInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayAvatarInfo): InstableSprayAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 8:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 2:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_trial = 8; */
        if (message.isTrial !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 2; */
        if (message.avatarId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayAvatarInfo
 */
export const InstableSprayAvatarInfo = new InstableSprayAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayEnterDungeonReq$Type extends MessageType<InstableSprayEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.InstableSprayEnterDungeonReq", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSprayEnterDungeonReq>): InstableSprayEnterDungeonReq {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayEnterDungeonReq): InstableSprayEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 2:
                    message.difficulty = reader.uint32();
                    break;
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 7:
                    message.avatarInfoList.push(InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty = 2; */
        if (message.difficulty !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.difficulty);
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 7; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayEnterDungeonReq
 */
export const InstableSprayEnterDungeonReq = new InstableSprayEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayEnterDungeonRsp$Type extends MessageType<InstableSprayEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.InstableSprayEnterDungeonRsp", [
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayEnterDungeonRsp>): InstableSprayEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayEnterDungeonRsp): InstableSprayEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayEnterDungeonRsp
 */
export const InstableSprayEnterDungeonRsp = new InstableSprayEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSpraySwitchTeamReq$Type extends MessageType<InstableSpraySwitchTeamReq> {
    constructor() {
        super("com.midnights.game.InstableSpraySwitchTeamReq", [
            { no: 13, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSpraySwitchTeamReq>): InstableSpraySwitchTeamReq {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSpraySwitchTeamReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSpraySwitchTeamReq): InstableSpraySwitchTeamReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 13:
                    message.avatarInfoList.push(InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSpraySwitchTeamReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSpraySwitchTeamReq
 */
export const InstableSpraySwitchTeamReq = new InstableSpraySwitchTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSpraySwitchTeamRsp$Type extends MessageType<InstableSpraySwitchTeamRsp> {
    constructor() {
        super("com.midnights.game.InstableSpraySwitchTeamRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSpraySwitchTeamRsp>): InstableSpraySwitchTeamRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSpraySwitchTeamRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSpraySwitchTeamRsp): InstableSpraySwitchTeamRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSpraySwitchTeamRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSpraySwitchTeamRsp
 */
export const InstableSpraySwitchTeamRsp = new InstableSpraySwitchTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayLevelFinishNotify$Type extends MessageType<InstableSprayLevelFinishNotify> {
    constructor() {
        super("com.midnights.game.InstableSprayLevelFinishNotify", [
            { no: 11, name: "is_need_switch_team", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "is_skip_black_screen", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayLevelFinishNotify>): InstableSprayLevelFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayLevelFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayLevelFinishNotify): InstableSprayLevelFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_need_switch_team */ 11:
                    message.isNeedSwitchTeam = reader.bool();
                    break;
                case /* optional bool is_skip_black_screen */ 7:
                    message.isSkipBlackScreen = reader.bool();
                    break;
                case /* optional uint32 round */ 15:
                    message.round = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayLevelFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_need_switch_team = 11; */
        if (message.isNeedSwitchTeam !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isNeedSwitchTeam);
        /* optional bool is_skip_black_screen = 7; */
        if (message.isSkipBlackScreen !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSkipBlackScreen);
        /* optional uint32 round = 15; */
        if (message.round !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.round);
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.stageId);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayLevelFinishNotify
 */
export const InstableSprayLevelFinishNotify = new InstableSprayLevelFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayRestartDungeonReq$Type extends MessageType<InstableSprayRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.InstableSprayRestartDungeonReq", [
            { no: 6, name: "avatar_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InstableSprayAvatarInfo }
        ]);
    }
    create(value?: PartialMessage<InstableSprayRestartDungeonReq>): InstableSprayRestartDungeonReq {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayRestartDungeonReq): InstableSprayRestartDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 6:
                    message.avatarInfoList.push(InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 6; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayRestartDungeonReq
 */
export const InstableSprayRestartDungeonReq = new InstableSprayRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayRestartDungeonRsp$Type extends MessageType<InstableSprayRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.InstableSprayRestartDungeonRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayRestartDungeonRsp>): InstableSprayRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayRestartDungeonRsp): InstableSprayRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayRestartDungeonRsp
 */
export const InstableSprayRestartDungeonRsp = new InstableSprayRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionLevelData$Type extends MessageType<MuqadasPotionLevelData> {
    constructor() {
        super("com.midnights.game.MuqadasPotionLevelData", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionLevelData>): MuqadasPotionLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionLevelData): MuqadasPotionLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 9:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional uint32 max_score = 9; */
        if (message.maxScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.maxScore);
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionLevelData
 */
export const MuqadasPotionLevelData = new MuqadasPotionLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityDetailInfo$Type extends MessageType<MuqadasPotionActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityDetailInfo", [
            { no: 8, name: "muqadas_potion_level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MuqadasPotionLevelData }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionActivityDetailInfo>): MuqadasPotionActivityDetailInfo {
        const message = { muqadasPotionLevelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionActivityDetailInfo): MuqadasPotionActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MuqadasPotionLevelData muqadas_potion_level_data_list */ 8:
                    message.muqadasPotionLevelDataList.push(MuqadasPotionLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MuqadasPotionLevelData muqadas_potion_level_data_list = 8; */
        for (let i = 0; i < message.muqadasPotionLevelDataList.length; i++)
            MuqadasPotionLevelData.internalBinaryWrite(message.muqadasPotionLevelDataList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityDetailInfo
 */
export const MuqadasPotionActivityDetailInfo = new MuqadasPotionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityEnterDungeonReq$Type extends MessageType<MuqadasPotionActivityEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityEnterDungeonReq", [
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionActivityEnterDungeonReq>): MuqadasPotionActivityEnterDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionActivityEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionActivityEnterDungeonReq): MuqadasPotionActivityEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionActivityEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonReq
 */
export const MuqadasPotionActivityEnterDungeonReq = new MuqadasPotionActivityEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityEnterDungeonRsp$Type extends MessageType<MuqadasPotionActivityEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityEnterDungeonRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionActivityEnterDungeonRsp>): MuqadasPotionActivityEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionActivityEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionActivityEnterDungeonRsp): MuqadasPotionActivityEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level_id */ 9:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionActivityEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 level_id = 9; */
        if (message.levelId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonRsp
 */
export const MuqadasPotionActivityEnterDungeonRsp = new MuqadasPotionActivityEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionDungeonSettleNotify$Type extends MessageType<MuqadasPotionDungeonSettleNotify> {
    constructor() {
        super("com.midnights.game.MuqadasPotionDungeonSettleNotify", [
            { no: 11, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "capture_weakness_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionDungeonSettleNotify>): MuqadasPotionDungeonSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionDungeonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionDungeonSettleNotify): MuqadasPotionDungeonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 11:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 capture_weakness_count */ 15:
                    message.captureWeaknessCount = reader.uint32();
                    break;
                case /* optional bool is_success */ 6:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionDungeonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 final_score = 11; */
        if (message.finalScore !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 capture_weakness_count = 15; */
        if (message.captureWeaknessCount !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.captureWeaknessCount);
        /* optional bool is_success = 6; */
        if (message.isSuccess !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.levelId);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionDungeonSettleNotify
 */
export const MuqadasPotionDungeonSettleNotify = new MuqadasPotionDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionRestartDungeonReq$Type extends MessageType<MuqadasPotionRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.MuqadasPotionRestartDungeonReq", []);
    }
    create(value?: PartialMessage<MuqadasPotionRestartDungeonReq>): MuqadasPotionRestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionRestartDungeonReq): MuqadasPotionRestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MuqadasPotionRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionRestartDungeonReq
 */
export const MuqadasPotionRestartDungeonReq = new MuqadasPotionRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionRestartDungeonRsp$Type extends MessageType<MuqadasPotionRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.MuqadasPotionRestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionRestartDungeonRsp>): MuqadasPotionRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionRestartDungeonRsp): MuqadasPotionRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionRestartDungeonRsp
 */
export const MuqadasPotionRestartDungeonRsp = new MuqadasPotionRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionCaptureWeaknessReq$Type extends MessageType<MuqadasPotionCaptureWeaknessReq> {
    constructor() {
        super("com.midnights.game.MuqadasPotionCaptureWeaknessReq", [
            { no: 10, name: "capture_weakness_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionCaptureWeaknessReq>): MuqadasPotionCaptureWeaknessReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionCaptureWeaknessReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionCaptureWeaknessReq): MuqadasPotionCaptureWeaknessReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 capture_weakness_count */ 10:
                    message.captureWeaknessCount = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionCaptureWeaknessReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 capture_weakness_count = 10; */
        if (message.captureWeaknessCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.captureWeaknessCount);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessReq
 */
export const MuqadasPotionCaptureWeaknessReq = new MuqadasPotionCaptureWeaknessReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionCaptureWeaknessRsp$Type extends MessageType<MuqadasPotionCaptureWeaknessRsp> {
    constructor() {
        super("com.midnights.game.MuqadasPotionCaptureWeaknessRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MuqadasPotionCaptureWeaknessRsp>): MuqadasPotionCaptureWeaknessRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MuqadasPotionCaptureWeaknessRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MuqadasPotionCaptureWeaknessRsp): MuqadasPotionCaptureWeaknessRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MuqadasPotionCaptureWeaknessRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessRsp
 */
export const MuqadasPotionCaptureWeaknessRsp = new MuqadasPotionCaptureWeaknessRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieRegionData$Type extends MessageType<TreasureSeelieRegionData> {
    constructor() {
        super("com.midnights.game.TreasureSeelieRegionData", [
            { no: 12, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "open_day", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "opened_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "region_radius", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "region_center_pos", kind: "message", T: () => Vector },
            { no: 13, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "total_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureSeelieRegionData>): TreasureSeelieRegionData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureSeelieRegionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureSeelieRegionData): TreasureSeelieRegionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 12:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 open_day */ 6:
                    message.openDay = reader.uint32();
                    break;
                case /* optional uint32 opened_chest_num */ 10:
                    message.openedChestNum = reader.uint32();
                    break;
                case /* optional float region_radius */ 7:
                    message.regionRadius = reader.float();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector region_center_pos */ 11:
                    message.regionCenterPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.regionCenterPos);
                    break;
                case /* optional uint32 scene_id */ 13:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 total_chest_num */ 15:
                    message.totalChestNum = reader.uint32();
                    break;
                case /* optional uint32 region_id */ 1:
                    message.regionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureSeelieRegionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_done = 12; */
        if (message.isDone !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isDone);
        /* optional uint32 open_day = 6; */
        if (message.openDay !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.openDay);
        /* optional uint32 opened_chest_num = 10; */
        if (message.openedChestNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.openedChestNum);
        /* optional float region_radius = 7; */
        if (message.regionRadius !== undefined)
            writer.tag(7, WireType.Bit32).float(message.regionRadius);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.openTime);
        /* optional com.midnights.game.Vector region_center_pos = 11; */
        if (message.regionCenterPos)
            Vector.internalBinaryWrite(message.regionCenterPos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 13; */
        if (message.sceneId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 total_chest_num = 15; */
        if (message.totalChestNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.totalChestNum);
        /* optional uint32 region_id = 1; */
        if (message.regionId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.regionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieRegionData
 */
export const TreasureSeelieRegionData = new TreasureSeelieRegionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieActivityDetailInfo$Type extends MessageType<TreasureSeelieActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.TreasureSeelieActivityDetailInfo", [
            { no: 10, name: "treasure_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "region_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TreasureSeelieRegionData }
        ]);
    }
    create(value?: PartialMessage<TreasureSeelieActivityDetailInfo>): TreasureSeelieActivityDetailInfo {
        const message = { regionDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureSeelieActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureSeelieActivityDetailInfo): TreasureSeelieActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 treasure_close_time */ 10:
                    message.treasureCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.TreasureSeelieRegionData region_data_list */ 14:
                    message.regionDataList.push(TreasureSeelieRegionData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureSeelieActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 treasure_close_time = 10; */
        if (message.treasureCloseTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.treasureCloseTime);
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.TreasureSeelieRegionData region_data_list = 14; */
        for (let i = 0; i < message.regionDataList.length; i++)
            TreasureSeelieRegionData.internalBinaryWrite(message.regionDataList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieActivityDetailInfo
 */
export const TreasureSeelieActivityDetailInfo = new TreasureSeelieActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieCollectOrbsNotify$Type extends MessageType<TreasureSeelieCollectOrbsNotify> {
    constructor() {
        super("com.midnights.game.TreasureSeelieCollectOrbsNotify", [
            { no: 11, name: "current_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TreasureSeelieCollectOrbsNotify>): TreasureSeelieCollectOrbsNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TreasureSeelieCollectOrbsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TreasureSeelieCollectOrbsNotify): TreasureSeelieCollectOrbsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_num */ 11:
                    message.currentNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 5:
                    message.totalNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TreasureSeelieCollectOrbsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 current_num = 11; */
        if (message.currentNum !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.currentNum);
        /* optional uint32 total_num = 5; */
        if (message.totalNum !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.totalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieCollectOrbsNotify
 */
export const TreasureSeelieCollectOrbsNotify = new TreasureSeelieCollectOrbsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RockBoardExploreStageData$Type extends MessageType<RockBoardExploreStageData> {
    constructor() {
        super("com.midnights.game.RockBoardExploreStageData", [
            { no: 6, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RockBoardExploreStageData>): RockBoardExploreStageData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RockBoardExploreStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RockBoardExploreStageData): RockBoardExploreStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 6:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 3:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RockBoardExploreStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finish = 6; */
        if (message.isFinish !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isFinish);
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 3; */
        if (message.stageId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RockBoardExploreStageData
 */
export const RockBoardExploreStageData = new RockBoardExploreStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RockBoardExploreDetailInfo$Type extends MessageType<RockBoardExploreDetailInfo> {
    constructor() {
        super("com.midnights.game.RockBoardExploreDetailInfo", [
            { no: 9, name: "stage_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RockBoardExploreStageData }
        ]);
    }
    create(value?: PartialMessage<RockBoardExploreDetailInfo>): RockBoardExploreDetailInfo {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RockBoardExploreDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RockBoardExploreDetailInfo): RockBoardExploreDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RockBoardExploreStageData stage_data_list */ 9:
                    message.stageDataList.push(RockBoardExploreStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RockBoardExploreDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RockBoardExploreStageData stage_data_list = 9; */
        for (let i = 0; i < message.stageDataList.length; i++)
            RockBoardExploreStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RockBoardExploreDetailInfo
 */
export const RockBoardExploreDetailInfo = new RockBoardExploreDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStageData$Type extends MessageType<VintageHuntingStageData> {
    constructor() {
        super("com.midnights.game.VintageHuntingStageData", [
            { no: 10, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "record_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingStageData>): VintageHuntingStageData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingStageData): VintageHuntingStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 10:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 record_value */ 12:
                    message.recordValue = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 10; */
        if (message.openTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.openTime);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        /* optional uint32 record_value = 12; */
        if (message.recordValue !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.recordValue);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStageData
 */
export const VintageHuntingStageData = new VintageHuntingStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentLevelData$Type extends MessageType<VintagePresentLevelData> {
    constructor() {
        super("com.midnights.game.VintagePresentLevelData", [
            { no: 10, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintagePresentLevelData>): VintagePresentLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintagePresentLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintagePresentLevelData): VintagePresentLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 10:
                    message.presentId = reader.uint32();
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional bool is_finish */ 5:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintagePresentLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 present_id = 10; */
        if (message.presentId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.presentId);
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isOpen);
        /* optional bool is_finish = 5; */
        if (message.isFinish !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isFinish);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentLevelData
 */
export const VintagePresentLevelData = new VintagePresentLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentStageData$Type extends MessageType<VintagePresentStageData> {
    constructor() {
        super("com.midnights.game.VintagePresentStageData", [
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "present_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintagePresentLevelData } }
        ]);
    }
    create(value?: PartialMessage<VintagePresentStageData>): VintagePresentStageData {
        const message = { presentLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintagePresentStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintagePresentStageData): VintagePresentStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 13:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.VintagePresentLevelData> present_level_map */ 2:
                    this.binaryReadMap2(message.presentLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: VintagePresentStageData["presentLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintagePresentStageData["presentLevelMap"] | undefined, val: VintagePresentStageData["presentLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintagePresentLevelData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintagePresentStageData.present_level_map");
            }
        }
        map[key ?? 0] = val ?? VintagePresentLevelData.create();
    }
    internalBinaryWrite(message: VintagePresentStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* optional bool is_finish = 13; */
        if (message.isFinish !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isOpen);
        /* map<uint32, com.midnights.game.VintagePresentLevelData> present_level_map = 2; */
        for (let k of Object.keys(message.presentLevelMap)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintagePresentLevelData.internalBinaryWrite(message.presentLevelMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentStageData
 */
export const VintagePresentStageData = new VintagePresentStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageBoothUsedItemData$Type extends MessageType<VintageBoothUsedItemData> {
    constructor() {
        super("com.midnights.game.VintageBoothUsedItemData", [
            { no: 7, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageBoothUsedItemData>): VintageBoothUsedItemData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageBoothUsedItemData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageBoothUsedItemData): VintageBoothUsedItemData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 7:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 gadget_id */ 8:
                    message.gadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageBoothUsedItemData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 7; */
        if (message.isOpen !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isOpen);
        /* optional uint32 gadget_id = 8; */
        if (message.gadgetId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageBoothUsedItemData
 */
export const VintageBoothUsedItemData = new VintageBoothUsedItemData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampChallengeLevelData$Type extends MessageType<VintageCampChallengeLevelData> {
    constructor() {
        super("com.midnights.game.VintageCampChallengeLevelData", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VintageCampChallengeLevelData>): VintageCampChallengeLevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageCampChallengeLevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageCampChallengeLevelData): VintageCampChallengeLevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 8:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 6:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageCampChallengeLevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.stageId);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.levelId);
        /* optional bool is_finish = 8; */
        if (message.isFinish !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 6; */
        if (message.isOpen !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampChallengeLevelData
 */
export const VintageCampChallengeLevelData = new VintageCampChallengeLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampChallengeStageData$Type extends MessageType<VintageCampChallengeStageData> {
    constructor() {
        super("com.midnights.game.VintageCampChallengeStageData", [
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "max_finished_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "camp_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageCampChallengeLevelData } }
        ]);
    }
    create(value?: PartialMessage<VintageCampChallengeStageData>): VintageCampChallengeStageData {
        const message = { campLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageCampChallengeStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageCampChallengeStageData): VintageCampChallengeStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 max_finished_level */ 11:
                    message.maxFinishedLevel = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 10:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.VintageCampChallengeLevelData> camp_level_map */ 2:
                    this.binaryReadMap2(message.campLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: VintageCampChallengeStageData["campLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageCampChallengeStageData["campLevelMap"] | undefined, val: VintageCampChallengeStageData["campLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageCampChallengeLevelData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageCampChallengeStageData.camp_level_map");
            }
        }
        map[key ?? 0] = val ?? VintageCampChallengeLevelData.create();
    }
    internalBinaryWrite(message: VintageCampChallengeStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isOpen);
        /* optional uint32 max_finished_level = 11; */
        if (message.maxFinishedLevel !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.maxFinishedLevel);
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.openTime);
        /* optional bool is_finish = 10; */
        if (message.isFinish !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinish);
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.stageId);
        /* map<uint32, com.midnights.game.VintageCampChallengeLevelData> camp_level_map = 2; */
        for (let k of Object.keys(message.campLevelMap)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageCampChallengeLevelData.internalBinaryWrite(message.campLevelMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampChallengeStageData
 */
export const VintageCampChallengeStageData = new VintageCampChallengeStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketTraderInfo$Type extends MessageType<VintageMarketTraderInfo> {
    constructor() {
        super("com.midnights.game.VintageMarketTraderInfo", [
            { no: 7, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "available_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<VintageMarketTraderInfo>): VintageMarketTraderInfo {
        const message = { availableItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketTraderInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketTraderInfo): VintageMarketTraderInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trader_id */ 7:
                    message.traderId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam available_item_list */ 9:
                    message.availableItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketTraderInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trader_id = 7; */
        if (message.traderId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.traderId);
        /* repeated com.midnights.game.ItemParam available_item_list = 9; */
        for (let i = 0; i < message.availableItemList.length; i++)
            ItemParam.internalBinaryWrite(message.availableItemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketTraderInfo
 */
export const VintageMarketTraderInfo = new VintageMarketTraderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDealInfo$Type extends MessageType<VintageMarketDealInfo> {
    constructor() {
        super("com.midnights.game.VintageMarketDealInfo", [
            { no: 13, name: "trader_item_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageMarketTraderInfo } }
        ]);
    }
    create(value?: PartialMessage<VintageMarketDealInfo>): VintageMarketDealInfo {
        const message = { traderItemInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketDealInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketDealInfo): VintageMarketDealInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.VintageMarketTraderInfo> trader_item_info_map */ 13:
                    this.binaryReadMap13(message.traderItemInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap13(map: VintageMarketDealInfo["traderItemInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageMarketDealInfo["traderItemInfoMap"] | undefined, val: VintageMarketDealInfo["traderItemInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageMarketTraderInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketDealInfo.trader_item_info_map");
            }
        }
        map[key ?? 0] = val ?? VintageMarketTraderInfo.create();
    }
    internalBinaryWrite(message: VintageMarketDealInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.VintageMarketTraderInfo> trader_item_info_map = 13; */
        for (let k of Object.keys(message.traderItemInfoMap)) {
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageMarketTraderInfo.internalBinaryWrite(message.traderItemInfoMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDealInfo
 */
export const VintageMarketDealInfo = new VintageMarketDealInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreInfo$Type extends MessageType<VintageMarketStoreInfo> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreInfo", [
            { no: 5, name: "cur_attr_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "next_aim_attr_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "slot_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreInfo>): VintageMarketStoreInfo {
        const message = { curAttrList: [], nextAimAttrList: [], strategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreInfo): VintageMarketStoreInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 cur_attr_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curAttrList.push(reader.uint32());
                    else
                        message.curAttrList.push(reader.uint32());
                    break;
                case /* repeated uint32 next_aim_attr_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nextAimAttrList.push(reader.uint32());
                    else
                        message.nextAimAttrList.push(reader.uint32());
                    break;
                case /* repeated uint32 strategy_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 slot_count */ 3:
                    message.slotCount = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 cur_attr_list = 5; */
        for (let i = 0; i < message.curAttrList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.curAttrList[i]);
        /* repeated uint32 next_aim_attr_list = 14; */
        for (let i = 0; i < message.nextAimAttrList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.nextAimAttrList[i]);
        /* repeated uint32 strategy_list = 2; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.strategyList[i]);
        /* optional uint32 slot_count = 3; */
        if (message.slotCount !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.slotCount);
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreInfo
 */
export const VintageMarketStoreInfo = new VintageMarketStoreInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreOpInfo$Type extends MessageType<VintageMarketStoreOpInfo> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreOpInfo", [
            { no: 5, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "help_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "help_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "add_attr_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreOpInfo>): VintageMarketStoreOpInfo {
        const message = { strategyList: [], addAttrList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreOpInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreOpInfo): VintageMarketStoreOpInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 strategy_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 help_uid */ 9:
                    message.helpUid = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 2:
                    message.storeId = reader.uint32();
                    break;
                case /* optional uint32 help_skill_id */ 7:
                    message.helpSkillId = reader.uint32();
                    break;
                case /* repeated uint32 add_attr_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.addAttrList.push(reader.uint32());
                    else
                        message.addAttrList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreOpInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 strategy_list = 5; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.strategyList[i]);
        /* optional uint32 help_uid = 9; */
        if (message.helpUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.helpUid);
        /* optional uint32 store_id = 2; */
        if (message.storeId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.storeId);
        /* optional uint32 help_skill_id = 7; */
        if (message.helpSkillId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.helpSkillId);
        /* repeated uint32 add_attr_list = 15; */
        for (let i = 0; i < message.addAttrList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.addAttrList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreOpInfo
 */
export const VintageMarketStoreOpInfo = new VintageMarketStoreOpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketInfo$Type extends MessageType<VintageMarketInfo> {
    constructor() {
        super("com.midnights.game.VintageMarketInfo", [
            { no: 1485, name: "is_help_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "is_store_content_interrupt", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "deal_info", kind: "message", T: () => VintageMarketDealInfo },
            { no: 7, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 207, name: "store_round_income_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_store_content_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "cur_env_event_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_market_content_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1800, name: "next_can_use_help_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_market_content_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "viewed_strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "prev_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "bargain_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 1798, name: "dividend_reward_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_npc_event_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 366, name: "is_help_in_cd", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "prev_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_store_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VintageMarketStoreInfo },
            { no: 760, name: "help_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_round_tips_view", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 876, name: "is_strategy_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "unlock_strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketInfo>): VintageMarketInfo {
        const message = { storeRoundIncomeList: [], curEnvEventList: [], viewedStrategyList: [], bargainInfoMap: {}, curNpcEventList: [], openStoreList: [], unlockStrategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketInfo): VintageMarketInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_help_module_open */ 1485:
                    message.isHelpModuleOpen = reader.bool();
                    break;
                case /* optional bool is_store_content_interrupt */ 15:
                    message.isStoreContentInterrupt = reader.bool();
                    break;
                case /* optional com.midnights.game.VintageMarketDealInfo deal_info */ 11:
                    message.dealInfo = VintageMarketDealInfo.internalBinaryRead(reader, reader.uint32(), options, message.dealInfo);
                    break;
                case /* optional uint32 store_round */ 7:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated uint32 store_round_income_list */ 207:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.storeRoundIncomeList.push(reader.uint32());
                    else
                        message.storeRoundIncomeList.push(reader.uint32());
                    break;
                case /* optional bool is_store_content_finish */ 5:
                    message.isStoreContentFinish = reader.bool();
                    break;
                case /* repeated uint32 cur_env_event_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curEnvEventList.push(reader.uint32());
                    else
                        message.curEnvEventList.push(reader.uint32());
                    break;
                case /* optional bool is_market_content_open */ 10:
                    message.isMarketContentOpen = reader.bool();
                    break;
                case /* optional uint32 next_can_use_help_round */ 1800:
                    message.nextCanUseHelpRound = reader.uint32();
                    break;
                case /* optional bool is_market_content_finish */ 2:
                    message.isMarketContentFinish = reader.bool();
                    break;
                case /* repeated uint32 viewed_strategy_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewedStrategyList.push(reader.uint32());
                    else
                        message.viewedStrategyList.push(reader.uint32());
                    break;
                case /* optional uint32 prev_coin_c_num */ 3:
                    message.prevCoinCNum = reader.uint32();
                    break;
                case /* map<uint32, bool> bargain_info_map */ 6:
                    this.binaryReadMap6(message.bargainInfoMap, reader, options);
                    break;
                case /* optional uint32 dividend_reward_count */ 1798:
                    message.dividendRewardCount = reader.uint32();
                    break;
                case /* repeated uint32 cur_npc_event_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curNpcEventList.push(reader.uint32());
                    else
                        message.curNpcEventList.push(reader.uint32());
                    break;
                case /* optional bool is_help_in_cd */ 366:
                    message.isHelpInCd = reader.bool();
                    break;
                case /* optional uint32 prev_coin_b_num */ 1:
                    message.prevCoinBNum = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreInfo open_store_list */ 9:
                    message.openStoreList.push(VintageMarketStoreInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 help_skill_id */ 760:
                    message.helpSkillId = reader.uint32();
                    break;
                case /* optional bool is_round_tips_view */ 12:
                    message.isRoundTipsView = reader.bool();
                    break;
                case /* optional bool is_strategy_module_open */ 876:
                    message.isStrategyModuleOpen = reader.bool();
                    break;
                case /* repeated uint32 unlock_strategy_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockStrategyList.push(reader.uint32());
                    else
                        message.unlockStrategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: VintageMarketInfo["bargainInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageMarketInfo["bargainInfoMap"] | undefined, val: VintageMarketInfo["bargainInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketInfo.bargain_info_map");
            }
        }
        map[key ?? 0] = val ?? false;
    }
    internalBinaryWrite(message: VintageMarketInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_help_module_open = 1485; */
        if (message.isHelpModuleOpen !== undefined)
            writer.tag(1485, WireType.Varint).bool(message.isHelpModuleOpen);
        /* optional bool is_store_content_interrupt = 15; */
        if (message.isStoreContentInterrupt !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isStoreContentInterrupt);
        /* optional com.midnights.game.VintageMarketDealInfo deal_info = 11; */
        if (message.dealInfo)
            VintageMarketDealInfo.internalBinaryWrite(message.dealInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 store_round = 7; */
        if (message.storeRound !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.storeRound);
        /* repeated uint32 store_round_income_list = 207; */
        for (let i = 0; i < message.storeRoundIncomeList.length; i++)
            writer.tag(207, WireType.Varint).uint32(message.storeRoundIncomeList[i]);
        /* optional bool is_store_content_finish = 5; */
        if (message.isStoreContentFinish !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isStoreContentFinish);
        /* repeated uint32 cur_env_event_list = 8; */
        for (let i = 0; i < message.curEnvEventList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.curEnvEventList[i]);
        /* optional bool is_market_content_open = 10; */
        if (message.isMarketContentOpen !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isMarketContentOpen);
        /* optional uint32 next_can_use_help_round = 1800; */
        if (message.nextCanUseHelpRound !== undefined)
            writer.tag(1800, WireType.Varint).uint32(message.nextCanUseHelpRound);
        /* optional bool is_market_content_finish = 2; */
        if (message.isMarketContentFinish !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isMarketContentFinish);
        /* repeated uint32 viewed_strategy_list = 14; */
        for (let i = 0; i < message.viewedStrategyList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.viewedStrategyList[i]);
        /* optional uint32 prev_coin_c_num = 3; */
        if (message.prevCoinCNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.prevCoinCNum);
        /* map<uint32, bool> bargain_info_map = 6; */
        for (let k of Object.keys(message.bargainInfoMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).bool(message.bargainInfoMap[k as any]).join();
        /* optional uint32 dividend_reward_count = 1798; */
        if (message.dividendRewardCount !== undefined)
            writer.tag(1798, WireType.Varint).uint32(message.dividendRewardCount);
        /* repeated uint32 cur_npc_event_list = 4; */
        for (let i = 0; i < message.curNpcEventList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.curNpcEventList[i]);
        /* optional bool is_help_in_cd = 366; */
        if (message.isHelpInCd !== undefined)
            writer.tag(366, WireType.Varint).bool(message.isHelpInCd);
        /* optional uint32 prev_coin_b_num = 1; */
        if (message.prevCoinBNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.prevCoinBNum);
        /* repeated com.midnights.game.VintageMarketStoreInfo open_store_list = 9; */
        for (let i = 0; i < message.openStoreList.length; i++)
            VintageMarketStoreInfo.internalBinaryWrite(message.openStoreList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 help_skill_id = 760; */
        if (message.helpSkillId !== undefined)
            writer.tag(760, WireType.Varint).uint32(message.helpSkillId);
        /* optional bool is_round_tips_view = 12; */
        if (message.isRoundTipsView !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isRoundTipsView);
        /* optional bool is_strategy_module_open = 876; */
        if (message.isStrategyModuleOpen !== undefined)
            writer.tag(876, WireType.Varint).bool(message.isStrategyModuleOpen);
        /* repeated uint32 unlock_strategy_list = 13; */
        for (let i = 0; i < message.unlockStrategyList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.unlockStrategyList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketInfo
 */
export const VintageMarketInfo = new VintageMarketInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageActivityDetailInfo$Type extends MessageType<VintageActivityDetailInfo> {
    constructor() {
        super("com.midnights.game.VintageActivityDetailInfo", [
            { no: 2, name: "market_info", kind: "message", T: () => VintageMarketInfo },
            { no: 7, name: "hunting_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageHuntingStageData } },
            { no: 5, name: "booth_data", kind: "message", T: () => VintageBoothUsedItemData },
            { no: 13, name: "camp_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageCampChallengeStageData } },
            { no: 4, name: "present_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintagePresentStageData } },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VintageActivityDetailInfo>): VintageActivityDetailInfo {
        const message = { huntingStageMap: {}, campStageMap: {}, presentStageMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageActivityDetailInfo): VintageActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.VintageMarketInfo market_info */ 2:
                    message.marketInfo = VintageMarketInfo.internalBinaryRead(reader, reader.uint32(), options, message.marketInfo);
                    break;
                case /* map<uint32, com.midnights.game.VintageHuntingStageData> hunting_stage_map */ 7:
                    this.binaryReadMap7(message.huntingStageMap, reader, options);
                    break;
                case /* optional com.midnights.game.VintageBoothUsedItemData booth_data */ 5:
                    message.boothData = VintageBoothUsedItemData.internalBinaryRead(reader, reader.uint32(), options, message.boothData);
                    break;
                case /* map<uint32, com.midnights.game.VintageCampChallengeStageData> camp_stage_map */ 13:
                    this.binaryReadMap13(message.campStageMap, reader, options);
                    break;
                case /* map<uint32, com.midnights.game.VintagePresentStageData> present_stage_map */ 4:
                    this.binaryReadMap4(message.presentStageMap, reader, options);
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: VintageActivityDetailInfo["huntingStageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["huntingStageMap"] | undefined, val: VintageActivityDetailInfo["huntingStageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageHuntingStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.hunting_stage_map");
            }
        }
        map[key ?? 0] = val ?? VintageHuntingStageData.create();
    }
    private binaryReadMap13(map: VintageActivityDetailInfo["campStageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["campStageMap"] | undefined, val: VintageActivityDetailInfo["campStageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageCampChallengeStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.camp_stage_map");
            }
        }
        map[key ?? 0] = val ?? VintageCampChallengeStageData.create();
    }
    private binaryReadMap4(map: VintageActivityDetailInfo["presentStageMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["presentStageMap"] | undefined, val: VintageActivityDetailInfo["presentStageMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintagePresentStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.present_stage_map");
            }
        }
        map[key ?? 0] = val ?? VintagePresentStageData.create();
    }
    internalBinaryWrite(message: VintageActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.VintageMarketInfo market_info = 2; */
        if (message.marketInfo)
            VintageMarketInfo.internalBinaryWrite(message.marketInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.VintageHuntingStageData> hunting_stage_map = 7; */
        for (let k of Object.keys(message.huntingStageMap)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageHuntingStageData.internalBinaryWrite(message.huntingStageMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional com.midnights.game.VintageBoothUsedItemData booth_data = 5; */
        if (message.boothData)
            VintageBoothUsedItemData.internalBinaryWrite(message.boothData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.VintageCampChallengeStageData> camp_stage_map = 13; */
        for (let k of Object.keys(message.campStageMap)) {
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageCampChallengeStageData.internalBinaryWrite(message.campStageMap[k as any], writer, options);
            writer.join().join();
        }
        /* map<uint32, com.midnights.game.VintagePresentStageData> present_stage_map = 4; */
        for (let k of Object.keys(message.presentStageMap)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintagePresentStageData.internalBinaryWrite(message.presentStageMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isContentClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageActivityDetailInfo
 */
export const VintageActivityDetailInfo = new VintageActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDeliverItemReq$Type extends MessageType<VintageMarketDeliverItemReq> {
    constructor() {
        super("com.midnights.game.VintageMarketDeliverItemReq", [
            { no: 3, name: "deliver_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 5, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketDeliverItemReq>): VintageMarketDeliverItemReq {
        const message = { deliverItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketDeliverItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketDeliverItemReq): VintageMarketDeliverItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam deliver_item_list */ 3:
                    message.deliverItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 trader_id */ 5:
                    message.traderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketDeliverItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam deliver_item_list = 3; */
        for (let i = 0; i < message.deliverItemList.length; i++)
            ItemParam.internalBinaryWrite(message.deliverItemList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 trader_id = 5; */
        if (message.traderId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.traderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDeliverItemReq
 */
export const VintageMarketDeliverItemReq = new VintageMarketDeliverItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDeliverItemRsp$Type extends MessageType<VintageMarketDeliverItemRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketDeliverItemRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketDeliverItemRsp>): VintageMarketDeliverItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketDeliverItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketDeliverItemRsp): VintageMarketDeliverItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trader_id */ 3:
                    message.traderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketDeliverItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 trader_id = 3; */
        if (message.traderId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.traderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDeliverItemRsp
 */
export const VintageMarketDeliverItemRsp = new VintageMarketDeliverItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingFirstStageSettleInfo$Type extends MessageType<VintageHuntingFirstStageSettleInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingFirstStageSettleInfo", [
            { no: 10, name: "elite_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timid_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "brutal_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingFirstStageSettleInfo>): VintageHuntingFirstStageSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingFirstStageSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingFirstStageSettleInfo): VintageHuntingFirstStageSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 elite_cnt */ 10:
                    message.eliteCnt = reader.uint32();
                    break;
                case /* optional uint32 timid_cnt */ 2:
                    message.timidCnt = reader.uint32();
                    break;
                case /* optional uint32 brutal_cnt */ 6:
                    message.brutalCnt = reader.uint32();
                    break;
                case /* optional uint32 score */ 14:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingFirstStageSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 elite_cnt = 10; */
        if (message.eliteCnt !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.eliteCnt);
        /* optional uint32 timid_cnt = 2; */
        if (message.timidCnt !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.timidCnt);
        /* optional uint32 brutal_cnt = 6; */
        if (message.brutalCnt !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.brutalCnt);
        /* optional uint32 score = 14; */
        if (message.score !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingFirstStageSettleInfo
 */
export const VintageHuntingFirstStageSettleInfo = new VintageHuntingFirstStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingSecondStageSettleInfo$Type extends MessageType<VintageHuntingSecondStageSettleInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingSecondStageSettleInfo", [
            { no: 6, name: "animal_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "capture_animal_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingSecondStageSettleInfo>): VintageHuntingSecondStageSettleInfo {
        const message = { animalCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingSecondStageSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingSecondStageSettleInfo): VintageHuntingSecondStageSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> animal_count_map */ 6:
                    this.binaryReadMap6(message.animalCountMap, reader, options);
                    break;
                case /* optional uint32 capture_animal_num */ 7:
                    message.captureAnimalNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 15:
                    message.totalNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: VintageHuntingSecondStageSettleInfo["animalCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageHuntingSecondStageSettleInfo["animalCountMap"] | undefined, val: VintageHuntingSecondStageSettleInfo["animalCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageHuntingSecondStageSettleInfo.animal_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: VintageHuntingSecondStageSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> animal_count_map = 6; */
        for (let k of Object.keys(message.animalCountMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.animalCountMap[k as any]).join();
        /* optional uint32 capture_animal_num = 7; */
        if (message.captureAnimalNum !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.captureAnimalNum);
        /* optional uint32 total_num = 15; */
        if (message.totalNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.totalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingSecondStageSettleInfo
 */
export const VintageHuntingSecondStageSettleInfo = new VintageHuntingSecondStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingThirdStageSettleInfo$Type extends MessageType<VintageHuntingThirdStageSettleInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingThirdStageSettleInfo", [
            { no: 13, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingThirdStageSettleInfo>): VintageHuntingThirdStageSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingThirdStageSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingThirdStageSettleInfo): VintageHuntingThirdStageSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_time */ 13:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional bool is_success */ 9:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingThirdStageSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 left_time = 13; */
        if (message.leftTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.leftTime);
        /* optional bool is_success = 9; */
        if (message.isSuccess !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingThirdStageSettleInfo
 */
export const VintageHuntingThirdStageSettleInfo = new VintageHuntingThirdStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryVintageHuntingSettleNotify$Type extends MessageType<SceneGalleryVintageHuntingSettleNotify> {
    constructor() {
        super("com.midnights.game.SceneGalleryVintageHuntingSettleNotify", [
            { no: 11, name: "has_new_watcher", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_watcher_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "finished_watcher_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "first_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingFirstStageSettleInfo },
            { no: 10, name: "second_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingSecondStageSettleInfo },
            { no: 8, name: "third_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingThirdStageSettleInfo }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryVintageHuntingSettleNotify>): SceneGalleryVintageHuntingSettleNotify {
        const message = { info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryVintageHuntingSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryVintageHuntingSettleNotify): SceneGalleryVintageHuntingSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool has_new_watcher */ 11:
                    message.hasNewWatcher = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 total_watcher_num */ 12:
                    message.totalWatcherNum = reader.uint32();
                    break;
                case /* optional uint32 finished_watcher_num */ 6:
                    message.finishedWatcherNum = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* com.midnights.game.VintageHuntingFirstStageSettleInfo first_stage_info */ 4:
                    message.info = {
                        oneofKind: "firstStageInfo",
                        firstStageInfo: VintageHuntingFirstStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).firstStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingSecondStageSettleInfo second_stage_info */ 10:
                    message.info = {
                        oneofKind: "secondStageInfo",
                        secondStageInfo: VintageHuntingSecondStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).secondStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingThirdStageSettleInfo third_stage_info */ 8:
                    message.info = {
                        oneofKind: "thirdStageInfo",
                        thirdStageInfo: VintageHuntingThirdStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).thirdStageInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryVintageHuntingSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool has_new_watcher = 11; */
        if (message.hasNewWatcher !== undefined)
            writer.tag(11, WireType.Varint).bool(message.hasNewWatcher);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.stageId);
        /* optional uint32 total_watcher_num = 12; */
        if (message.totalWatcherNum !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.totalWatcherNum);
        /* optional uint32 finished_watcher_num = 6; */
        if (message.finishedWatcherNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.finishedWatcherNum);
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isNewRecord);
        /* com.midnights.game.VintageHuntingFirstStageSettleInfo first_stage_info = 4; */
        if (message.info.oneofKind === "firstStageInfo")
            VintageHuntingFirstStageSettleInfo.internalBinaryWrite(message.info.firstStageInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingSecondStageSettleInfo second_stage_info = 10; */
        if (message.info.oneofKind === "secondStageInfo")
            VintageHuntingSecondStageSettleInfo.internalBinaryWrite(message.info.secondStageInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingThirdStageSettleInfo third_stage_info = 8; */
        if (message.info.oneofKind === "thirdStageInfo")
            VintageHuntingThirdStageSettleInfo.internalBinaryWrite(message.info.thirdStageInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryVintageHuntingSettleNotify
 */
export const SceneGalleryVintageHuntingSettleNotify = new SceneGalleryVintageHuntingSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentFinishNoify$Type extends MessageType<VintagePresentFinishNoify> {
    constructor() {
        super("com.midnights.game.VintagePresentFinishNoify", [
            { no: 7, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintagePresentFinishNoify>): VintagePresentFinishNoify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintagePresentFinishNoify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintagePresentFinishNoify): VintagePresentFinishNoify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 7:
                    message.presentId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintagePresentFinishNoify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 present_id = 7; */
        if (message.presentId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.presentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentFinishNoify
 */
export const VintagePresentFinishNoify = new VintagePresentFinishNoify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageDecorateBoothReq$Type extends MessageType<VintageDecorateBoothReq> {
    constructor() {
        super("com.midnights.game.VintageDecorateBoothReq", [
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combination_info", kind: "message", T: () => CustomGadgetTreeInfo }
        ]);
    }
    create(value?: PartialMessage<VintageDecorateBoothReq>): VintageDecorateBoothReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageDecorateBoothReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageDecorateBoothReq): VintageDecorateBoothReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 11:
                    message.combinationInfo = CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageDecorateBoothReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11; */
        if (message.combinationInfo)
            CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageDecorateBoothReq
 */
export const VintageDecorateBoothReq = new VintageDecorateBoothReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageDecorateBoothRsp$Type extends MessageType<VintageDecorateBoothRsp> {
    constructor() {
        super("com.midnights.game.VintageDecorateBoothRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageDecorateBoothRsp>): VintageDecorateBoothRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageDecorateBoothRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageDecorateBoothRsp): VintageDecorateBoothRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageDecorateBoothRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageDecorateBoothRsp
 */
export const VintageDecorateBoothRsp = new VintageDecorateBoothRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStartGalleryReq$Type extends MessageType<VintageHuntingStartGalleryReq> {
    constructor() {
        super("com.midnights.game.VintageHuntingStartGalleryReq", [
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingStartGalleryReq>): VintageHuntingStartGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingStartGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingStartGalleryReq): VintageHuntingStartGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingStartGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStartGalleryReq
 */
export const VintageHuntingStartGalleryReq = new VintageHuntingStartGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStartGalleryRsp$Type extends MessageType<VintageHuntingStartGalleryRsp> {
    constructor() {
        super("com.midnights.game.VintageHuntingStartGalleryRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingStartGalleryRsp>): VintageHuntingStartGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingStartGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingStartGalleryRsp): VintageHuntingStartGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingStartGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStartGalleryRsp
 */
export const VintageHuntingStartGalleryRsp = new VintageHuntingStartGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampGroupBundleRegisterNotify$Type extends MessageType<VintageCampGroupBundleRegisterNotify> {
    constructor() {
        super("com.midnights.game.VintageCampGroupBundleRegisterNotify", [
            { no: 10, name: "group_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageCampGroupBundleRegisterNotify>): VintageCampGroupBundleRegisterNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageCampGroupBundleRegisterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageCampGroupBundleRegisterNotify): VintageCampGroupBundleRegisterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_bundle_id */ 10:
                    message.groupBundleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageCampGroupBundleRegisterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_bundle_id = 10; */
        if (message.groupBundleId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.groupBundleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampGroupBundleRegisterNotify
 */
export const VintageCampGroupBundleRegisterNotify = new VintageCampGroupBundleRegisterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampStageFinishNotify$Type extends MessageType<VintageCampStageFinishNotify> {
    constructor() {
        super("com.midnights.game.VintageCampStageFinishNotify", [
            { no: 11, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageCampStageFinishNotify>): VintageCampStageFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageCampStageFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageCampStageFinishNotify): VintageCampStageFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 11:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageCampStageFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 11; */
        if (message.stageId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampStageFinishNotify
 */
export const VintageCampStageFinishNotify = new VintageCampStageFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStartStorePlayReq$Type extends MessageType<VintageMarketStartStorePlayReq> {
    constructor() {
        super("com.midnights.game.VintageMarketStartStorePlayReq", [
            { no: 5, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStartStorePlayReq>): VintageMarketStartStorePlayReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStartStorePlayReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStartStorePlayReq): VintageMarketStartStorePlayReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_round */ 5:
                    message.storeRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStartStorePlayReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_round = 5; */
        if (message.storeRound !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.storeRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStartStorePlayReq
 */
export const VintageMarketStartStorePlayReq = new VintageMarketStartStorePlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStartStorePlayRsp$Type extends MessageType<VintageMarketStartStorePlayRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketStartStorePlayRsp", [
            { no: 7, name: "prev_round_coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "prev_round_coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStartStorePlayRsp>): VintageMarketStartStorePlayRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStartStorePlayRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStartStorePlayRsp): VintageMarketStartStorePlayRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 prev_round_coin_b */ 7:
                    message.prevRoundCoinB = reader.uint32();
                    break;
                case /* optional uint32 store_round */ 2:
                    message.storeRound = reader.uint32();
                    break;
                case /* optional uint32 prev_round_coin_c */ 5:
                    message.prevRoundCoinC = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStartStorePlayRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 prev_round_coin_b = 7; */
        if (message.prevRoundCoinB !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.prevRoundCoinB);
        /* optional uint32 store_round = 2; */
        if (message.storeRound !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.storeRound);
        /* optional uint32 prev_round_coin_c = 5; */
        if (message.prevRoundCoinC !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.prevRoundCoinC);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStartStorePlayRsp
 */
export const VintageMarketStartStorePlayRsp = new VintageMarketStartStorePlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketFinishStorePlayReq$Type extends MessageType<VintageMarketFinishStorePlayReq> {
    constructor() {
        super("com.midnights.game.VintageMarketFinishStorePlayReq", [
            { no: 9, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "store_op_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VintageMarketStoreOpInfo }
        ]);
    }
    create(value?: PartialMessage<VintageMarketFinishStorePlayReq>): VintageMarketFinishStorePlayReq {
        const message = { storeOpList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketFinishStorePlayReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketFinishStorePlayReq): VintageMarketFinishStorePlayReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_round */ 9:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list */ 3:
                    message.storeOpList.push(VintageMarketStoreOpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketFinishStorePlayReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_round = 9; */
        if (message.storeRound !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.storeRound);
        /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 3; */
        for (let i = 0; i < message.storeOpList.length; i++)
            VintageMarketStoreOpInfo.internalBinaryWrite(message.storeOpList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketFinishStorePlayReq
 */
export const VintageMarketFinishStorePlayReq = new VintageMarketFinishStorePlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketFinishStorePlayRsp$Type extends MessageType<VintageMarketFinishStorePlayRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketFinishStorePlayRsp", [
            { no: 8, name: "trigger_env_event_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "trigger_npc_event_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "low_attr_store_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "round_coin_b_income", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "round_delta_coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "store_income_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "round_total_income", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "display_return_coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketFinishStorePlayRsp>): VintageMarketFinishStorePlayRsp {
        const message = { triggerEnvEventList: [], triggerNpcEventList: [], lowAttrStoreList: [], storeIncomeMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketFinishStorePlayRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketFinishStorePlayRsp): VintageMarketFinishStorePlayRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 trigger_env_event_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.triggerEnvEventList.push(reader.uint32());
                    else
                        message.triggerEnvEventList.push(reader.uint32());
                    break;
                case /* optional uint32 store_round */ 12:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated uint32 trigger_npc_event_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.triggerNpcEventList.push(reader.uint32());
                    else
                        message.triggerNpcEventList.push(reader.uint32());
                    break;
                case /* repeated uint32 low_attr_store_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lowAttrStoreList.push(reader.uint32());
                    else
                        message.lowAttrStoreList.push(reader.uint32());
                    break;
                case /* optional uint32 round_coin_b_income */ 9:
                    message.roundCoinBIncome = reader.uint32();
                    break;
                case /* optional uint32 round_delta_coin_c */ 1:
                    message.roundDeltaCoinC = reader.uint32();
                    break;
                case /* map<uint32, uint32> store_income_map */ 3:
                    this.binaryReadMap3(message.storeIncomeMap, reader, options);
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 round_total_income */ 14:
                    message.roundTotalIncome = reader.uint32();
                    break;
                case /* optional uint32 display_return_coin_b */ 15:
                    message.displayReturnCoinB = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: VintageMarketFinishStorePlayRsp["storeIncomeMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageMarketFinishStorePlayRsp["storeIncomeMap"] | undefined, val: VintageMarketFinishStorePlayRsp["storeIncomeMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketFinishStorePlayRsp.store_income_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: VintageMarketFinishStorePlayRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 trigger_env_event_list = 8; */
        for (let i = 0; i < message.triggerEnvEventList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.triggerEnvEventList[i]);
        /* optional uint32 store_round = 12; */
        if (message.storeRound !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.storeRound);
        /* repeated uint32 trigger_npc_event_list = 10; */
        for (let i = 0; i < message.triggerNpcEventList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.triggerNpcEventList[i]);
        /* repeated uint32 low_attr_store_list = 11; */
        for (let i = 0; i < message.lowAttrStoreList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.lowAttrStoreList[i]);
        /* optional uint32 round_coin_b_income = 9; */
        if (message.roundCoinBIncome !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.roundCoinBIncome);
        /* optional uint32 round_delta_coin_c = 1; */
        if (message.roundDeltaCoinC !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.roundDeltaCoinC);
        /* map<uint32, uint32> store_income_map = 3; */
        for (let k of Object.keys(message.storeIncomeMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.storeIncomeMap[k as any]).join();
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 round_total_income = 14; */
        if (message.roundTotalIncome !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.roundTotalIncome);
        /* optional uint32 display_return_coin_b = 15; */
        if (message.displayReturnCoinB !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.displayReturnCoinB);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketFinishStorePlayRsp
 */
export const VintageMarketFinishStorePlayRsp = new VintageMarketFinishStorePlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentFinishNotify$Type extends MessageType<VintagePresentFinishNotify> {
    constructor() {
        super("com.midnights.game.VintagePresentFinishNotify", [
            { no: 3, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintagePresentFinishNotify>): VintagePresentFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintagePresentFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintagePresentFinishNotify): VintagePresentFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 3:
                    message.presentId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintagePresentFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 present_id = 3; */
        if (message.presentId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.presentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentFinishNotify
 */
export const VintagePresentFinishNotify = new VintagePresentFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreUnlockSlotReq$Type extends MessageType<VintageMarketStoreUnlockSlotReq> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreUnlockSlotReq", [
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreUnlockSlotReq>): VintageMarketStoreUnlockSlotReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreUnlockSlotReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreUnlockSlotReq): VintageMarketStoreUnlockSlotReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreUnlockSlotReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreUnlockSlotReq
 */
export const VintageMarketStoreUnlockSlotReq = new VintageMarketStoreUnlockSlotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreUnlockSlotRsp$Type extends MessageType<VintageMarketStoreUnlockSlotRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreUnlockSlotRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "slot_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreUnlockSlotRsp>): VintageMarketStoreUnlockSlotRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreUnlockSlotRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreUnlockSlotRsp): VintageMarketStoreUnlockSlotRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 slot_count */ 6:
                    message.slotCount = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreUnlockSlotRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 slot_count = 6; */
        if (message.slotCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.slotCount);
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreUnlockSlotRsp
 */
export const VintageMarketStoreUnlockSlotRsp = new VintageMarketStoreUnlockSlotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreChooseStrategyReq$Type extends MessageType<VintageMarketStoreChooseStrategyReq> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreChooseStrategyReq", [
            { no: 6, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "store_op_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VintageMarketStoreOpInfo },
            { no: 8, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreChooseStrategyReq>): VintageMarketStoreChooseStrategyReq {
        const message = { storeOpList: [], strategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreChooseStrategyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreChooseStrategyReq): VintageMarketStoreChooseStrategyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 6:
                    message.storeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list */ 9:
                    message.storeOpList.push(VintageMarketStoreOpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 strategy_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreChooseStrategyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_id = 6; */
        if (message.storeId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.storeId);
        /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 9; */
        for (let i = 0; i < message.storeOpList.length; i++)
            VintageMarketStoreOpInfo.internalBinaryWrite(message.storeOpList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 strategy_list = 8; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.strategyList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreChooseStrategyReq
 */
export const VintageMarketStoreChooseStrategyReq = new VintageMarketStoreChooseStrategyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreChooseStrategyRsp$Type extends MessageType<VintageMarketStoreChooseStrategyRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreChooseStrategyRsp", [
            { no: 15, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreChooseStrategyRsp>): VintageMarketStoreChooseStrategyRsp {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreChooseStrategyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreChooseStrategyRsp): VintageMarketStoreChooseStrategyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 15:
                    message.storeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 strategy_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreChooseStrategyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 store_id = 15; */
        if (message.storeId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.storeId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* repeated uint32 strategy_list = 2; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.strategyList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreChooseStrategyRsp
 */
export const VintageMarketStoreChooseStrategyRsp = new VintageMarketStoreChooseStrategyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreViewStrategyReq$Type extends MessageType<VintageMarketStoreViewStrategyReq> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreViewStrategyReq", [
            { no: 1, name: "strategy_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreViewStrategyReq>): VintageMarketStoreViewStrategyReq {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreViewStrategyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreViewStrategyReq): VintageMarketStoreViewStrategyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 strategy_id */ 1:
                    message.strategyId = reader.uint32();
                    break;
                case /* repeated uint32 strategy_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreViewStrategyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 strategy_id = 1; */
        if (message.strategyId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.strategyId);
        /* repeated uint32 strategy_list = 14; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.strategyList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreViewStrategyReq
 */
export const VintageMarketStoreViewStrategyReq = new VintageMarketStoreViewStrategyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreViewStrategyRsp$Type extends MessageType<VintageMarketStoreViewStrategyRsp> {
    constructor() {
        super("com.midnights.game.VintageMarketStoreViewStrategyRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "strategy_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketStoreViewStrategyRsp>): VintageMarketStoreViewStrategyRsp {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketStoreViewStrategyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketStoreViewStrategyRsp): VintageMarketStoreViewStrategyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 strategy_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 strategy_id */ 14:
                    message.strategyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketStoreViewStrategyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* repeated uint32 strategy_list = 3; */
        for (let i = 0; i < message.strategyList.length; i++)
            writer.tag(3, WireType.Varint).uint32(message.strategyList[i]);
        /* optional uint32 strategy_id = 14; */
        if (message.strategyId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.strategyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreViewStrategyRsp
 */
export const VintageMarketStoreViewStrategyRsp = new VintageMarketStoreViewStrategyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDividendFinishNotify$Type extends MessageType<VintageMarketDividendFinishNotify> {
    constructor() {
        super("com.midnights.game.VintageMarketDividendFinishNotify", [
            { no: 5, name: "coin_a", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketDividendFinishNotify>): VintageMarketDividendFinishNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketDividendFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketDividendFinishNotify): VintageMarketDividendFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin_a */ 5:
                    message.coinA = reader.uint32();
                    break;
                case /* optional uint32 coin_c */ 11:
                    message.coinC = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketDividendFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 coin_a = 5; */
        if (message.coinA !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.coinA);
        /* optional uint32 coin_c = 11; */
        if (message.coinC !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.coinC);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDividendFinishNotify
 */
export const VintageMarketDividendFinishNotify = new VintageMarketDividendFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketNpcEventFinishNotify$Type extends MessageType<VintageMarketNpcEventFinishNotify> {
    constructor() {
        super("com.midnights.game.VintageMarketNpcEventFinishNotify", [
            { no: 15, name: "unlock_strategy_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "coin_a", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageMarketNpcEventFinishNotify>): VintageMarketNpcEventFinishNotify {
        const message = { unlockStrategyList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageMarketNpcEventFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageMarketNpcEventFinishNotify): VintageMarketNpcEventFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlock_strategy_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockStrategyList.push(reader.uint32());
                    else
                        message.unlockStrategyList.push(reader.uint32());
                    break;
                case /* optional uint32 coin_c */ 12:
                    message.coinC = reader.uint32();
                    break;
                case /* optional uint32 coin_a */ 4:
                    message.coinA = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageMarketNpcEventFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 unlock_strategy_list = 15; */
        for (let i = 0; i < message.unlockStrategyList.length; i++)
            writer.tag(15, WireType.Varint).uint32(message.unlockStrategyList[i]);
        /* optional uint32 coin_c = 12; */
        if (message.coinC !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.coinC);
        /* optional uint32 coin_a = 4; */
        if (message.coinA !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.coinA);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketNpcEventFinishNotify
 */
export const VintageMarketNpcEventFinishNotify = new VintageMarketNpcEventFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldDetailInfo$Type extends MessageType<WindFieldDetailInfo> {
    constructor() {
        super("com.midnights.game.WindFieldDetailInfo", [
            { no: 11, name: "stage_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WindFieldStageInfo }
        ]);
    }
    create(value?: PartialMessage<WindFieldDetailInfo>): WindFieldDetailInfo {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldDetailInfo): WindFieldDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WindFieldStageInfo stage_info_list */ 11:
                    message.stageInfoList.push(WindFieldStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.WindFieldStageInfo stage_info_list = 11; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            WindFieldStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldDetailInfo
 */
export const WindFieldDetailInfo = new WindFieldDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldStageInfo$Type extends MessageType<WindFieldStageInfo> {
    constructor() {
        super("com.midnights.game.WindFieldStageInfo", [
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindFieldStageInfo>): WindFieldStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldStageInfo): WindFieldStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 14:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 14; */
        if (message.openTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldStageInfo
 */
export const WindFieldStageInfo = new WindFieldStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldRestartDungeonReq$Type extends MessageType<WindFieldRestartDungeonReq> {
    constructor() {
        super("com.midnights.game.WindFieldRestartDungeonReq", []);
    }
    create(value?: PartialMessage<WindFieldRestartDungeonReq>): WindFieldRestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldRestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldRestartDungeonReq): WindFieldRestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WindFieldRestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldRestartDungeonReq
 */
export const WindFieldRestartDungeonReq = new WindFieldRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldRestartDungeonRsp$Type extends MessageType<WindFieldRestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.WindFieldRestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindFieldRestartDungeonRsp>): WindFieldRestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldRestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldRestartDungeonRsp): WindFieldRestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldRestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldRestartDungeonRsp
 */
export const WindFieldRestartDungeonRsp = new WindFieldRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusDetail$Type extends MessageType<FungusDetail> {
    constructor() {
        super("com.midnights.game.FungusDetail", [
            { no: 5, name: "is_cultivate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "capture_order", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "min_cultivate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusDetail>): FungusDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusDetail): FungusDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_cultivate */ 5:
                    message.isCultivate = reader.bool();
                    break;
                case /* optional uint32 capture_order */ 6:
                    message.captureOrder = reader.uint32();
                    break;
                case /* optional uint32 name_id */ 14:
                    message.nameId = reader.uint32();
                    break;
                case /* optional uint32 min_cultivate_step */ 1:
                    message.minCultivateStep = reader.uint32();
                    break;
                case /* optional uint32 fungus_id */ 9:
                    message.fungusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_cultivate = 5; */
        if (message.isCultivate !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isCultivate);
        /* optional uint32 capture_order = 6; */
        if (message.captureOrder !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.captureOrder);
        /* optional uint32 name_id = 14; */
        if (message.nameId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.nameId);
        /* optional uint32 min_cultivate_step = 1; */
        if (message.minCultivateStep !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.minCultivateStep);
        /* optional uint32 fungus_id = 9; */
        if (message.fungusId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.fungusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusDetail
 */
export const FungusDetail = new FungusDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusPlotStageDetail$Type extends MessageType<FungusPlotStageDetail> {
    constructor() {
        super("com.midnights.game.FungusPlotStageDetail", [
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusPlotStageDetail>): FungusPlotStageDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusPlotStageDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusPlotStageDetail): FungusPlotStageDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusPlotStageDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusPlotStageDetail
 */
export const FungusPlotStageDetail = new FungusPlotStageDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingDungeonDetail$Type extends MessageType<FungusTrainingDungeonDetail> {
    constructor() {
        super("com.midnights.game.FungusTrainingDungeonDetail", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusTrainingDungeonDetail>): FungusTrainingDungeonDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusTrainingDungeonDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusTrainingDungeonDetail): FungusTrainingDungeonDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 9:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusTrainingDungeonDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isOpen);
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 best_score = 9; */
        if (message.bestScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingDungeonDetail
 */
export const FungusTrainingDungeonDetail = new FungusTrainingDungeonDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterMonsterDetail$Type extends MessageType<FungusFighterMonsterDetail> {
    constructor() {
        super("com.midnights.game.FungusFighterMonsterDetail", [
            { no: 2, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "cur_hp_percentage", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "is_alive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterMonsterDetail>): FungusFighterMonsterDetail {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterMonsterDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterMonsterDetail): FungusFighterMonsterDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 fungus_id */ 2:
                    message.fungusId = reader.uint32();
                    break;
                case /* optional float cur_hp_percentage */ 7:
                    message.curHpPercentage = reader.float();
                    break;
                case /* optional bool is_alive */ 9:
                    message.isAlive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterMonsterDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 fungus_id = 2; */
        if (message.fungusId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.fungusId);
        /* optional float cur_hp_percentage = 7; */
        if (message.curHpPercentage !== undefined)
            writer.tag(7, WireType.Bit32).float(message.curHpPercentage);
        /* optional bool is_alive = 9; */
        if (message.isAlive !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isAlive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterMonsterDetail
 */
export const FungusFighterMonsterDetail = new FungusFighterMonsterDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingMonsterPreviewDetail$Type extends MessageType<FungusTrainingMonsterPreviewDetail> {
    constructor() {
        super("com.midnights.game.FungusTrainingMonsterPreviewDetail", [
            { no: 8, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "affix_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusTrainingMonsterPreviewDetail>): FungusTrainingMonsterPreviewDetail {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusTrainingMonsterPreviewDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusTrainingMonsterPreviewDetail): FungusTrainingMonsterPreviewDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 monster_id */ 8:
                    message.monsterId = reader.uint32();
                    break;
                case /* optional uint32 level */ 10:
                    message.level = reader.uint32();
                    break;
                case /* repeated uint32 affix_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusTrainingMonsterPreviewDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 monster_id = 8; */
        if (message.monsterId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.monsterId);
        /* optional uint32 level = 10; */
        if (message.level !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.level);
        /* repeated uint32 affix_list = 7; */
        for (let i = 0; i < message.affixList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.affixList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingMonsterPreviewDetail
 */
export const FungusTrainingMonsterPreviewDetail = new FungusTrainingMonsterPreviewDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingPoolPreviewDetail$Type extends MessageType<FungusTrainingPoolPreviewDetail> {
    constructor() {
        super("com.midnights.game.FungusTrainingPoolPreviewDetail", [
            { no: 8, name: "pool_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "monster_preview_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusTrainingMonsterPreviewDetail }
        ]);
    }
    create(value?: PartialMessage<FungusTrainingPoolPreviewDetail>): FungusTrainingPoolPreviewDetail {
        const message = { monsterPreviewDetailList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusTrainingPoolPreviewDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusTrainingPoolPreviewDetail): FungusTrainingPoolPreviewDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pool_id */ 8:
                    message.poolId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FungusTrainingMonsterPreviewDetail monster_preview_detail_list */ 6:
                    message.monsterPreviewDetailList.push(FungusTrainingMonsterPreviewDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusTrainingPoolPreviewDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 pool_id = 8; */
        if (message.poolId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.poolId);
        /* repeated com.midnights.game.FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 6; */
        for (let i = 0; i < message.monsterPreviewDetailList.length; i++)
            FungusTrainingMonsterPreviewDetail.internalBinaryWrite(message.monsterPreviewDetailList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingPoolPreviewDetail
 */
export const FungusTrainingPoolPreviewDetail = new FungusTrainingPoolPreviewDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingProgressDetail$Type extends MessageType<FungusTrainingProgressDetail> {
    constructor() {
        super("com.midnights.game.FungusTrainingProgressDetail", [
            { no: 9, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "monster_pool_preview_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusTrainingPoolPreviewDetail },
            { no: 6, name: "monster_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusFighterMonsterDetail },
            { no: 7, name: "total_used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "backup_monster_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "choosen_monster_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusTrainingProgressDetail>): FungusTrainingProgressDetail {
        const message = { monsterPoolPreviewList: [], monsterDetailList: [], backupMonsterList: [], choosenMonsterList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusTrainingProgressDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusTrainingProgressDetail): FungusTrainingProgressDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_round */ 9:
                    message.curRound = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FungusTrainingPoolPreviewDetail monster_pool_preview_list */ 5:
                    message.monsterPoolPreviewList.push(FungusTrainingPoolPreviewDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusFighterMonsterDetail monster_detail_list */ 6:
                    message.monsterDetailList.push(FungusFighterMonsterDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 total_used_time */ 7:
                    message.totalUsedTime = reader.uint32();
                    break;
                case /* repeated uint32 backup_monster_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupMonsterList.push(reader.uint32());
                    else
                        message.backupMonsterList.push(reader.uint32());
                    break;
                case /* repeated uint32 choosen_monster_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.choosenMonsterList.push(reader.uint32());
                    else
                        message.choosenMonsterList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusTrainingProgressDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_round = 9; */
        if (message.curRound !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curRound);
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonId);
        /* repeated com.midnights.game.FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5; */
        for (let i = 0; i < message.monsterPoolPreviewList.length; i++)
            FungusTrainingPoolPreviewDetail.internalBinaryWrite(message.monsterPoolPreviewList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusFighterMonsterDetail monster_detail_list = 6; */
        for (let i = 0; i < message.monsterDetailList.length; i++)
            FungusFighterMonsterDetail.internalBinaryWrite(message.monsterDetailList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 total_used_time = 7; */
        if (message.totalUsedTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.totalUsedTime);
        /* repeated uint32 backup_monster_list = 4; */
        for (let i = 0; i < message.backupMonsterList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.backupMonsterList[i]);
        /* repeated uint32 choosen_monster_list = 8; */
        for (let i = 0; i < message.choosenMonsterList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.choosenMonsterList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingProgressDetail
 */
export const FungusTrainingProgressDetail = new FungusTrainingProgressDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterDetailInfo$Type extends MessageType<FungusFighterDetailInfo> {
    constructor() {
        super("com.midnights.game.FungusFighterDetailInfo", [
            { no: 6, name: "plot_stage_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusPlotStageDetail },
            { no: 4, name: "fungus_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusDetail },
            { no: 12, name: "unlock_camp_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "training_dungeon_progress_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusTrainingProgressDetail },
            { no: 15, name: "training_dungeon_detail_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FungusTrainingDungeonDetail },
            { no: 1, name: "finish_camp_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "unlock_cultivate_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterDetailInfo>): FungusFighterDetailInfo {
        const message = { plotStageDetailList: [], fungusDetailList: [], unlockCampIdList: [], trainingDungeonProgressDetailList: [], trainingDungeonDetailList: [], finishCampIdList: [], unlockCultivateIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterDetailInfo): FungusFighterDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FungusPlotStageDetail plot_stage_detail_list */ 6:
                    message.plotStageDetailList.push(FungusPlotStageDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusDetail fungus_detail_list */ 4:
                    message.fungusDetailList.push(FungusDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 unlock_camp_id_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCampIdList.push(reader.uint32());
                    else
                        message.unlockCampIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.FungusTrainingProgressDetail training_dungeon_progress_detail_list */ 3:
                    message.trainingDungeonProgressDetailList.push(FungusTrainingProgressDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusTrainingDungeonDetail training_dungeon_detail_list */ 15:
                    message.trainingDungeonDetailList.push(FungusTrainingDungeonDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 finish_camp_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishCampIdList.push(reader.uint32());
                    else
                        message.finishCampIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_cultivate_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCultivateIdList.push(reader.uint32());
                    else
                        message.unlockCultivateIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.FungusPlotStageDetail plot_stage_detail_list = 6; */
        for (let i = 0; i < message.plotStageDetailList.length; i++)
            FungusPlotStageDetail.internalBinaryWrite(message.plotStageDetailList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusDetail fungus_detail_list = 4; */
        for (let i = 0; i < message.fungusDetailList.length; i++)
            FungusDetail.internalBinaryWrite(message.fungusDetailList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 unlock_camp_id_list = 12; */
        for (let i = 0; i < message.unlockCampIdList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.unlockCampIdList[i]);
        /* repeated com.midnights.game.FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3; */
        for (let i = 0; i < message.trainingDungeonProgressDetailList.length; i++)
            FungusTrainingProgressDetail.internalBinaryWrite(message.trainingDungeonProgressDetailList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusTrainingDungeonDetail training_dungeon_detail_list = 15; */
        for (let i = 0; i < message.trainingDungeonDetailList.length; i++)
            FungusTrainingDungeonDetail.internalBinaryWrite(message.trainingDungeonDetailList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 finish_camp_id_list = 1; */
        for (let i = 0; i < message.finishCampIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.finishCampIdList[i]);
        /* repeated uint32 unlock_cultivate_id_list = 8; */
        for (let i = 0; i < message.unlockCultivateIdList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.unlockCultivateIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterDetailInfo
 */
export const FungusFighterDetailInfo = new FungusFighterDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterPlotDungeonReq$Type extends MessageType<EnterFungusFighterPlotDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterFungusFighterPlotDungeonReq", [
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterFungusFighterPlotDungeonReq>): EnterFungusFighterPlotDungeonReq {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterFungusFighterPlotDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterFungusFighterPlotDungeonReq): EnterFungusFighterPlotDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated uint32 fungus_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterFungusFighterPlotDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dungeonId);
        /* repeated uint32 fungus_id_list = 8; */
        for (let i = 0; i < message.fungusIdList.length; i++)
            writer.tag(8, WireType.Varint).uint32(message.fungusIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterPlotDungeonReq
 */
export const EnterFungusFighterPlotDungeonReq = new EnterFungusFighterPlotDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterPlotDungeonRsp$Type extends MessageType<EnterFungusFighterPlotDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterFungusFighterPlotDungeonRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterFungusFighterPlotDungeonRsp>): EnterFungusFighterPlotDungeonRsp {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterFungusFighterPlotDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterFungusFighterPlotDungeonRsp): EnterFungusFighterPlotDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 15:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated uint32 fungus_id_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterFungusFighterPlotDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 15; */
        if (message.dungeonId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dungeonId);
        /* repeated uint32 fungus_id_list = 2; */
        for (let i = 0; i < message.fungusIdList.length; i++)
            writer.tag(2, WireType.Varint).uint32(message.fungusIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterPlotDungeonRsp
 */
export const EnterFungusFighterPlotDungeonRsp = new EnterFungusFighterPlotDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterPlotInfoNotify$Type extends MessageType<FungusFighterPlotInfoNotify> {
    constructor() {
        super("com.midnights.game.FungusFighterPlotInfoNotify", [
            { no: 11, name: "fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterPlotInfoNotify>): FungusFighterPlotInfoNotify {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterPlotInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterPlotInfoNotify): FungusFighterPlotInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 fungus_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterPlotInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 fungus_id_list = 11; */
        for (let i = 0; i < message.fungusIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.fungusIdList[i]);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterPlotInfoNotify
 */
export const FungusFighterPlotInfoNotify = new FungusFighterPlotInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusCultivateReq$Type extends MessageType<FungusCultivateReq> {
    constructor() {
        super("com.midnights.game.FungusCultivateReq", [
            { no: 8, name: "cultivate_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "copy_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "exchange_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "cultivate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "rotate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "undo_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "place_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusCultivateReq>): FungusCultivateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusCultivateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusCultivateReq): FungusCultivateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cultivate_id */ 8:
                    message.cultivateId = reader.uint32();
                    break;
                case /* optional uint32 copy_step */ 7:
                    message.copyStep = reader.uint32();
                    break;
                case /* optional uint32 exchange_step */ 11:
                    message.exchangeStep = reader.uint32();
                    break;
                case /* optional uint32 cultivate_step */ 13:
                    message.cultivateStep = reader.uint32();
                    break;
                case /* optional uint32 rotate_step */ 15:
                    message.rotateStep = reader.uint32();
                    break;
                case /* optional uint32 undo_step */ 6:
                    message.undoStep = reader.uint32();
                    break;
                case /* optional uint32 time */ 2:
                    message.time = reader.uint32();
                    break;
                case /* optional uint32 place_step */ 10:
                    message.placeStep = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusCultivateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cultivate_id = 8; */
        if (message.cultivateId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cultivateId);
        /* optional uint32 copy_step = 7; */
        if (message.copyStep !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.copyStep);
        /* optional uint32 exchange_step = 11; */
        if (message.exchangeStep !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.exchangeStep);
        /* optional uint32 cultivate_step = 13; */
        if (message.cultivateStep !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.cultivateStep);
        /* optional uint32 rotate_step = 15; */
        if (message.rotateStep !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.rotateStep);
        /* optional uint32 undo_step = 6; */
        if (message.undoStep !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.undoStep);
        /* optional uint32 time = 2; */
        if (message.time !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.time);
        /* optional uint32 place_step = 10; */
        if (message.placeStep !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.placeStep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusCultivateReq
 */
export const FungusCultivateReq = new FungusCultivateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusCultivateRsp$Type extends MessageType<FungusCultivateRsp> {
    constructor() {
        super("com.midnights.game.FungusCultivateRsp", [
            { no: 4, name: "cultivate_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusCultivateRsp>): FungusCultivateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusCultivateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusCultivateRsp): FungusCultivateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cultivate_id */ 4:
                    message.cultivateId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusCultivateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cultivate_id = 4; */
        if (message.cultivateId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.cultivateId);
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isNewRecord);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusCultivateRsp
 */
export const FungusCultivateRsp = new FungusCultivateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusRenameReq$Type extends MessageType<FungusRenameReq> {
    constructor() {
        super("com.midnights.game.FungusRenameReq", [
            { no: 1, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusRenameReq>): FungusRenameReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusRenameReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusRenameReq): FungusRenameReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 name_id */ 1:
                    message.nameId = reader.uint32();
                    break;
                case /* optional uint32 fungus_id */ 11:
                    message.fungusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusRenameReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 name_id = 1; */
        if (message.nameId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.nameId);
        /* optional uint32 fungus_id = 11; */
        if (message.fungusId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.fungusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusRenameReq
 */
export const FungusRenameReq = new FungusRenameReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusRenameRsp$Type extends MessageType<FungusRenameRsp> {
    constructor() {
        super("com.midnights.game.FungusRenameRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusRenameRsp>): FungusRenameRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusRenameRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusRenameRsp): FungusRenameRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 fungus_id */ 15:
                    message.fungusId = reader.uint32();
                    break;
                case /* optional uint32 name_id */ 12:
                    message.nameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusRenameRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 fungus_id = 15; */
        if (message.fungusId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.fungusId);
        /* optional uint32 name_id = 12; */
        if (message.nameId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.nameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusRenameRsp
 */
export const FungusRenameRsp = new FungusRenameRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterTrainingDungeonReq$Type extends MessageType<EnterFungusFighterTrainingDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterFungusFighterTrainingDungeonReq", [
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterFungusFighterTrainingDungeonReq>): EnterFungusFighterTrainingDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterFungusFighterTrainingDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterFungusFighterTrainingDungeonReq): EnterFungusFighterTrainingDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterFungusFighterTrainingDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonReq
 */
export const EnterFungusFighterTrainingDungeonReq = new EnterFungusFighterTrainingDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterTrainingDungeonRsp$Type extends MessageType<EnterFungusFighterTrainingDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterFungusFighterTrainingDungeonRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterFungusFighterTrainingDungeonRsp>): EnterFungusFighterTrainingDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterFungusFighterTrainingDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterFungusFighterTrainingDungeonRsp): EnterFungusFighterTrainingDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterFungusFighterTrainingDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonRsp
 */
export const EnterFungusFighterTrainingDungeonRsp = new EnterFungusFighterTrainingDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRuntimeDataNotify$Type extends MessageType<FungusFighterRuntimeDataNotify> {
    constructor() {
        super("com.midnights.game.FungusFighterRuntimeDataNotify", [
            { no: 7, name: "progress_detail", kind: "message", T: () => FungusTrainingProgressDetail }
        ]);
    }
    create(value?: PartialMessage<FungusFighterRuntimeDataNotify>): FungusFighterRuntimeDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterRuntimeDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterRuntimeDataNotify): FungusFighterRuntimeDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FungusTrainingProgressDetail progress_detail */ 7:
                    message.progressDetail = FungusTrainingProgressDetail.internalBinaryRead(reader, reader.uint32(), options, message.progressDetail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterRuntimeDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FungusTrainingProgressDetail progress_detail = 7; */
        if (message.progressDetail)
            FungusTrainingProgressDetail.internalBinaryWrite(message.progressDetail, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRuntimeDataNotify
 */
export const FungusFighterRuntimeDataNotify = new FungusFighterRuntimeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingSelectFungusReq$Type extends MessageType<FungusFighterTrainingSelectFungusReq> {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingSelectFungusReq", [
            { no: 11, name: "backup_fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "fight_fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterTrainingSelectFungusReq>): FungusFighterTrainingSelectFungusReq {
        const message = { backupFungusIdList: [], fightFungusIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterTrainingSelectFungusReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterTrainingSelectFungusReq): FungusFighterTrainingSelectFungusReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 backup_fungus_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupFungusIdList.push(reader.uint32());
                    else
                        message.backupFungusIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 fight_fungus_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fightFungusIdList.push(reader.uint32());
                    else
                        message.fightFungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterTrainingSelectFungusReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 backup_fungus_id_list = 11; */
        for (let i = 0; i < message.backupFungusIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.backupFungusIdList[i]);
        /* repeated uint32 fight_fungus_id_list = 7; */
        for (let i = 0; i < message.fightFungusIdList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.fightFungusIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingSelectFungusReq
 */
export const FungusFighterTrainingSelectFungusReq = new FungusFighterTrainingSelectFungusReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingSelectFungusRsp$Type extends MessageType<FungusFighterTrainingSelectFungusRsp> {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingSelectFungusRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterTrainingSelectFungusRsp>): FungusFighterTrainingSelectFungusRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterTrainingSelectFungusRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterTrainingSelectFungusRsp): FungusFighterTrainingSelectFungusRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterTrainingSelectFungusRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingSelectFungusRsp
 */
export const FungusFighterTrainingSelectFungusRsp = new FungusFighterTrainingSelectFungusRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingGallerySettleNotify$Type extends MessageType<FungusFighterTrainingGallerySettleNotify> {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingGallerySettleNotify", [
            { no: 14, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "total_used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 1, name: "dead_fungus_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_final_settle", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "gadget_life_percentage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterTrainingGallerySettleNotify>): FungusFighterTrainingGallerySettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterTrainingGallerySettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterTrainingGallerySettleNotify): FungusFighterTrainingGallerySettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 14:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 total_used_time */ 4:
                    message.totalUsedTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 5:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 dead_fungus_num */ 1:
                    message.deadFungusNum = reader.uint32();
                    break;
                case /* optional uint32 settle_round */ 15:
                    message.settleRound = reader.uint32();
                    break;
                case /* optional bool is_final_settle */ 10:
                    message.isFinalSettle = reader.bool();
                    break;
                case /* optional uint32 gadget_life_percentage */ 11:
                    message.gadgetLifePercentage = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 9:
                    message.finalScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterTrainingGallerySettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_new_record = 14; */
        if (message.isNewRecord !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 total_used_time = 4; */
        if (message.totalUsedTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.totalUsedTime);
        /* optional com.midnights.game.GalleryStopReason reason = 5; */
        if (message.reason !== undefined)
            writer.tag(5, WireType.Varint).int32(message.reason);
        /* optional uint32 dead_fungus_num = 1; */
        if (message.deadFungusNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.deadFungusNum);
        /* optional uint32 settle_round = 15; */
        if (message.settleRound !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.settleRound);
        /* optional bool is_final_settle = 10; */
        if (message.isFinalSettle !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinalSettle);
        /* optional uint32 gadget_life_percentage = 11; */
        if (message.gadgetLifePercentage !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.gadgetLifePercentage);
        /* optional uint32 final_score = 9; */
        if (message.finalScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.finalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingGallerySettleNotify
 */
export const FungusFighterTrainingGallerySettleNotify = new FungusFighterTrainingGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterClearTrainingRuntimeDataReq$Type extends MessageType<FungusFighterClearTrainingRuntimeDataReq> {
    constructor() {
        super("com.midnights.game.FungusFighterClearTrainingRuntimeDataReq", [
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterClearTrainingRuntimeDataReq>): FungusFighterClearTrainingRuntimeDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterClearTrainingRuntimeDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterClearTrainingRuntimeDataReq): FungusFighterClearTrainingRuntimeDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterClearTrainingRuntimeDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataReq
 */
export const FungusFighterClearTrainingRuntimeDataReq = new FungusFighterClearTrainingRuntimeDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterClearTrainingRuntimeDataRsp$Type extends MessageType<FungusFighterClearTrainingRuntimeDataRsp> {
    constructor() {
        super("com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterClearTrainingRuntimeDataRsp>): FungusFighterClearTrainingRuntimeDataRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterClearTrainingRuntimeDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterClearTrainingRuntimeDataRsp): FungusFighterClearTrainingRuntimeDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterClearTrainingRuntimeDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp
 */
export const FungusFighterClearTrainingRuntimeDataRsp = new FungusFighterClearTrainingRuntimeDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterUseBackupFungusReq$Type extends MessageType<FungusFighterUseBackupFungusReq> {
    constructor() {
        super("com.midnights.game.FungusFighterUseBackupFungusReq", [
            { no: 1, name: "backup_fungus_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterUseBackupFungusReq>): FungusFighterUseBackupFungusReq {
        const message = { backupFungusIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterUseBackupFungusReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterUseBackupFungusReq): FungusFighterUseBackupFungusReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 backup_fungus_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupFungusIdList.push(reader.uint32());
                    else
                        message.backupFungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterUseBackupFungusReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 backup_fungus_id_list = 1; */
        for (let i = 0; i < message.backupFungusIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.backupFungusIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterUseBackupFungusReq
 */
export const FungusFighterUseBackupFungusReq = new FungusFighterUseBackupFungusReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterUseBackupFungusRsp$Type extends MessageType<FungusFighterUseBackupFungusRsp> {
    constructor() {
        super("com.midnights.game.FungusFighterUseBackupFungusRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterUseBackupFungusRsp>): FungusFighterUseBackupFungusRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterUseBackupFungusRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterUseBackupFungusRsp): FungusFighterUseBackupFungusRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterUseBackupFungusRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterUseBackupFungusRsp
 */
export const FungusFighterUseBackupFungusRsp = new FungusFighterUseBackupFungusRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRestartTraningDungeonReq$Type extends MessageType<FungusFighterRestartTraningDungeonReq> {
    constructor() {
        super("com.midnights.game.FungusFighterRestartTraningDungeonReq", []);
    }
    create(value?: PartialMessage<FungusFighterRestartTraningDungeonReq>): FungusFighterRestartTraningDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterRestartTraningDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterRestartTraningDungeonReq): FungusFighterRestartTraningDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: FungusFighterRestartTraningDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRestartTraningDungeonReq
 */
export const FungusFighterRestartTraningDungeonReq = new FungusFighterRestartTraningDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRestartTraningDungeonRsp$Type extends MessageType<FungusFighterRestartTraningDungeonRsp> {
    constructor() {
        super("com.midnights.game.FungusFighterRestartTraningDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterRestartTraningDungeonRsp>): FungusFighterRestartTraningDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterRestartTraningDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterRestartTraningDungeonRsp): FungusFighterRestartTraningDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterRestartTraningDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRestartTraningDungeonRsp
 */
export const FungusFighterRestartTraningDungeonRsp = new FungusFighterRestartTraningDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementStageData$Type extends MessageType<CharAmusementStageData> {
    constructor() {
        super("com.midnights.game.CharAmusementStageData", [
            { no: 15, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CharAmusementStageData>): CharAmusementStageData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CharAmusementStageData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharAmusementStageData): CharAmusementStageData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_time */ 15:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharAmusementStageData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finish_time = 15; */
        if (message.finishTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.finishTime);
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementStageData
 */
export const CharAmusementStageData = new CharAmusementStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementDetailInfo$Type extends MessageType<CharAmusementDetailInfo> {
    constructor() {
        super("com.midnights.game.CharAmusementDetailInfo", [
            { no: 1, name: "stage_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CharAmusementStageData }
        ]);
    }
    create(value?: PartialMessage<CharAmusementDetailInfo>): CharAmusementDetailInfo {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CharAmusementDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharAmusementDetailInfo): CharAmusementDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CharAmusementStageData stage_data_list */ 1:
                    message.stageDataList.push(CharAmusementStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharAmusementDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CharAmusementStageData stage_data_list = 1; */
        for (let i = 0; i < message.stageDataList.length; i++)
            CharAmusementStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementDetailInfo
 */
export const CharAmusementDetailInfo = new CharAmusementDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementSettleNotify$Type extends MessageType<CharAmusementSettleNotify> {
    constructor() {
        super("com.midnights.game.CharAmusementSettleNotify", [
            { no: 3, name: "is_succ", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CharAmusementSettleNotify>): CharAmusementSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CharAmusementSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharAmusementSettleNotify): CharAmusementSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_succ */ 3:
                    message.isSucc = reader.bool();
                    break;
                case /* optional uint32 finish_time */ 14:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharAmusementSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_succ = 3; */
        if (message.isSucc !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSucc);
        /* optional uint32 finish_time = 14; */
        if (message.finishTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.finishTime);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementSettleNotify
 */
export const CharAmusementSettleNotify = new CharAmusementSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2LevelData$Type extends MessageType<EffigyChallengeV2LevelData> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2LevelData", [
            { no: 1, name: "challenge_mode_difficulty_pass", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_mode_last_choose_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "best_cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_level_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "challenge_mode_difficulty_open", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2LevelData>): EffigyChallengeV2LevelData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2LevelData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2LevelData): EffigyChallengeV2LevelData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty_pass */ 1:
                    message.challengeModeDifficultyPass = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_last_choose_skill_no */ 10:
                    message.challengeModeLastChooseSkillNo = reader.uint32();
                    break;
                case /* optional uint32 best_cost_time */ 12:
                    message.bestCostTime = reader.uint32();
                    break;
                case /* optional bool is_level_open */ 7:
                    message.isLevelOpen = reader.bool();
                    break;
                case /* optional uint32 challenge_mode_difficulty_open */ 13:
                    message.challengeModeDifficultyOpen = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2LevelData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_mode_difficulty_pass = 1; */
        if (message.challengeModeDifficultyPass !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeModeDifficultyPass);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_last_choose_skill_no = 10; */
        if (message.challengeModeLastChooseSkillNo !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.challengeModeLastChooseSkillNo);
        /* optional uint32 best_cost_time = 12; */
        if (message.bestCostTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.bestCostTime);
        /* optional bool is_level_open = 7; */
        if (message.isLevelOpen !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isLevelOpen);
        /* optional uint32 challenge_mode_difficulty_open = 13; */
        if (message.challengeModeDifficultyOpen !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.challengeModeDifficultyOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2LevelData
 */
export const EffigyChallengeV2LevelData = new EffigyChallengeV2LevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2DetailInfo$Type extends MessageType<EffigyChallengeV2DetailInfo> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2DetailInfo", [
            { no: 3, name: "level_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EffigyChallengeV2LevelData }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2DetailInfo>): EffigyChallengeV2DetailInfo {
        const message = { levelDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2DetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2DetailInfo): EffigyChallengeV2DetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EffigyChallengeV2LevelData level_data_list */ 3:
                    message.levelDataList.push(EffigyChallengeV2LevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2DetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EffigyChallengeV2LevelData level_data_list = 3; */
        for (let i = 0; i < message.levelDataList.length; i++)
            EffigyChallengeV2LevelData.internalBinaryWrite(message.levelDataList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2DetailInfo
 */
export const EffigyChallengeV2DetailInfo = new EffigyChallengeV2DetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2EnterDungeonReq$Type extends MessageType<EffigyChallengeV2EnterDungeonReq> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2EnterDungeonReq", [
            { no: 7, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2EnterDungeonReq>): EffigyChallengeV2EnterDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2EnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2EnterDungeonReq): EffigyChallengeV2EnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty */ 7:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 11:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2EnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_mode_difficulty = 7; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_skill_no = 11; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonReq
 */
export const EffigyChallengeV2EnterDungeonReq = new EffigyChallengeV2EnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2EnterDungeonRsp$Type extends MessageType<EffigyChallengeV2EnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2EnterDungeonRsp", [
            { no: 11, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2EnterDungeonRsp>): EffigyChallengeV2EnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2EnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2EnterDungeonRsp): EffigyChallengeV2EnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_skill_no */ 11:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_mode_difficulty */ 14:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2EnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_mode_skill_no = 11; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeModeSkillNo);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_mode_difficulty = 14; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonRsp
 */
export const EffigyChallengeV2EnterDungeonRsp = new EffigyChallengeV2EnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2RestartDungeonReq$Type extends MessageType<EffigyChallengeV2RestartDungeonReq> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2RestartDungeonReq", []);
    }
    create(value?: PartialMessage<EffigyChallengeV2RestartDungeonReq>): EffigyChallengeV2RestartDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2RestartDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2RestartDungeonReq): EffigyChallengeV2RestartDungeonReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: EffigyChallengeV2RestartDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonReq
 */
export const EffigyChallengeV2RestartDungeonReq = new EffigyChallengeV2RestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2RestartDungeonRsp$Type extends MessageType<EffigyChallengeV2RestartDungeonRsp> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2RestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2RestartDungeonRsp>): EffigyChallengeV2RestartDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2RestartDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2RestartDungeonRsp): EffigyChallengeV2RestartDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2RestartDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonRsp
 */
export const EffigyChallengeV2RestartDungeonRsp = new EffigyChallengeV2RestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2ChooseSkillReq$Type extends MessageType<EffigyChallengeV2ChooseSkillReq> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2ChooseSkillReq", [
            { no: 6, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2ChooseSkillReq>): EffigyChallengeV2ChooseSkillReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2ChooseSkillReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2ChooseSkillReq): EffigyChallengeV2ChooseSkillReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 6:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 7:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2ChooseSkillReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 6; */
        if (message.levelId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_skill_no = 7; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillReq
 */
export const EffigyChallengeV2ChooseSkillReq = new EffigyChallengeV2ChooseSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2ChooseSkillRsp$Type extends MessageType<EffigyChallengeV2ChooseSkillRsp> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2ChooseSkillRsp", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2ChooseSkillRsp>): EffigyChallengeV2ChooseSkillRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2ChooseSkillRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2ChooseSkillRsp): EffigyChallengeV2ChooseSkillRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 3:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2ChooseSkillRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_mode_skill_no = 3; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillRsp
 */
export const EffigyChallengeV2ChooseSkillRsp = new EffigyChallengeV2ChooseSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2DungeonInfoNotify$Type extends MessageType<EffigyChallengeV2DungeonInfoNotify> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2DungeonInfoNotify", [
            { no: 2, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2DungeonInfoNotify>): EffigyChallengeV2DungeonInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2DungeonInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2DungeonInfoNotify): EffigyChallengeV2DungeonInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty */ 2:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 skill_no */ 4:
                    message.skillNo = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2DungeonInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_mode_difficulty = 2; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 skill_no = 4; */
        if (message.skillNo !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.skillNo);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2DungeonInfoNotify
 */
export const EffigyChallengeV2DungeonInfoNotify = new EffigyChallengeV2DungeonInfoNotify$Type();
