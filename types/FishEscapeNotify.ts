/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FishEscapeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./FishEscapeReason";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class FishEscapeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        reason?: dependency_1.FishEscapeReason;
        pos?: dependency_2.Vector;
        uid?: number;
        fish_id_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("fish_id_list" in data && data.fish_id_list != undefined) {
                this.fish_id_list = data.fish_id_list;
            }
        }
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.FishEscapeReason.FISH_ESCAPE_REASON_FISN_ESCAPE_NONE) as dependency_1.FishEscapeReason;
    }
    set reason(value: dependency_1.FishEscapeReason) {
        pb_1.Message.setField(this, 4, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 7) as dependency_2.Vector;
    }
    set pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get fish_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
    }
    set fish_id_list(value: number[]) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        reason?: dependency_1.FishEscapeReason;
        pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        uid?: number;
        fish_id_list?: number[];
    }): FishEscapeNotify {
        const message = new FishEscapeNotify({});
        if (data.reason != null) {
            message.reason = data.reason;
        }
        if (data.pos != null) {
            message.pos = dependency_2.Vector.fromObject(data.pos);
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.fish_id_list != null) {
            message.fish_id_list = data.fish_id_list;
        }
        return message;
    }
    toObject() {
        const data: {
            reason?: dependency_1.FishEscapeReason;
            pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            uid?: number;
            fish_id_list?: number[];
        } = {};
        if (this.reason != null) {
            data.reason = this.reason;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.fish_id_list != null) {
            data.fish_id_list = this.fish_id_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.reason != dependency_1.FishEscapeReason.FISH_ESCAPE_REASON_FISN_ESCAPE_NONE)
            writer.writeEnum(4, this.reason);
        if (this.has_pos)
            writer.writeMessage(7, this.pos, () => this.pos.serialize(writer));
        if (this.uid != 0)
            writer.writeUint32(14, this.uid);
        if (this.fish_id_list.length)
            writer.writePackedUint32(6, this.fish_id_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FishEscapeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FishEscapeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.reason = reader.readEnum();
                    break;
                case 7:
                    reader.readMessage(message.pos, () => message.pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 14:
                    message.uid = reader.readUint32();
                    break;
                case 6:
                    message.fish_id_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FishEscapeNotify {
        return FishEscapeNotify.deserialize(bytes);
    }
}
