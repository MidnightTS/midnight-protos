/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HachiActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HachiStageData";
import * as pb_1 from "google-protobuf";
export class HachiActivityDetailInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        stage_map?: Map<number, dependency_1.HachiStageData>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stage_map" in data && data.stage_map != undefined) {
                this.stage_map = data.stage_map;
            }
        }
        if (!this.stage_map)
            this.stage_map = new Map();
    }
    get stage_map() {
        return pb_1.Message.getField(this, 6) as any as Map<number, dependency_1.HachiStageData>;
    }
    set stage_map(value: Map<number, dependency_1.HachiStageData>) {
        pb_1.Message.setField(this, 6, value as any);
    }
    static fromObject(data: {
        stage_map?: {
            [key: number]: ReturnType<typeof dependency_1.HachiStageData.prototype.toObject>;
        };
    }): HachiActivityDetailInfo {
        const message = new HachiActivityDetailInfo({});
        if (typeof data.stage_map == "object") {
            message.stage_map = new Map(Object.entries(data.stage_map).map(([key, value]) => [Number(key), dependency_1.HachiStageData.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            stage_map?: {
                [key: number]: ReturnType<typeof dependency_1.HachiStageData.prototype.toObject>;
            };
        } = {};
        if (this.stage_map.size > 0) {
            data.stage_map = (Object.fromEntries)((Array.from)(this.stage_map).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.stage_map) {
            writer.writeMessage(6, this.stage_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HachiActivityDetailInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HachiActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.stage_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.HachiStageData.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HachiActivityDetailInfo {
        return HachiActivityDetailInfo.deserialize(bytes);
    }
}
