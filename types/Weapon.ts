/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Weapon.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Weapon extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        level?: number;
        exp?: number;
        promote_level?: number;
        affix_map?: Map<number, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("exp" in data && data.exp != undefined) {
                this.exp = data.exp;
            }
            if ("promote_level" in data && data.promote_level != undefined) {
                this.promote_level = data.promote_level;
            }
            if ("affix_map" in data && data.affix_map != undefined) {
                this.affix_map = data.affix_map;
            }
        }
        if (!this.affix_map)
            this.affix_map = new Map();
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set level(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get exp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set exp(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get promote_level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set promote_level(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get affix_map() {
        return pb_1.Message.getField(this, 4) as any as Map<number, number>;
    }
    set affix_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    static fromObject(data: {
        level?: number;
        exp?: number;
        promote_level?: number;
        affix_map?: {
            [key: number]: number;
        };
    }): Weapon {
        const message = new Weapon({});
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.exp != null) {
            message.exp = data.exp;
        }
        if (data.promote_level != null) {
            message.promote_level = data.promote_level;
        }
        if (typeof data.affix_map == "object") {
            message.affix_map = new Map(Object.entries(data.affix_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            level?: number;
            exp?: number;
            promote_level?: number;
            affix_map?: {
                [key: number]: number;
            };
        } = {};
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.exp != null) {
            data.exp = this.exp;
        }
        if (this.promote_level != null) {
            data.promote_level = this.promote_level;
        }
        if (this.affix_map.size > 0) {
            data.affix_map = (Object.fromEntries)(this.affix_map);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.level != 0)
            writer.writeUint32(1, this.level);
        if (this.exp != 0)
            writer.writeUint32(2, this.exp);
        if (this.promote_level != 0)
            writer.writeUint32(3, this.promote_level);
        for (const [key, value] of this.affix_map) {
            writer.writeMessage(4, this.affix_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Weapon {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Weapon();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.level = reader.readUint32();
                    break;
                case 2:
                    message.exp = reader.readUint32();
                    break;
                case 3:
                    message.promote_level = reader.readUint32();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.affix_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Weapon {
        return Weapon.deserialize(bytes);
    }
}
