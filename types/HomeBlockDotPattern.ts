/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HomeBlockDotPattern.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class HomeBlockDotPattern extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        width?: number;
        height?: number;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
            if ("height" in data && data.height != undefined) {
                this.height = data.height;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get height() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set height(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array()) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        width?: number;
        height?: number;
        data?: Uint8Array;
    }): HomeBlockDotPattern {
        const message = new HomeBlockDotPattern({});
        if (data.width != null) {
            message.width = data.width;
        }
        if (data.height != null) {
            message.height = data.height;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            width?: number;
            height?: number;
            data?: Uint8Array;
        } = {};
        if (this.width != null) {
            data.width = this.width;
        }
        if (this.height != null) {
            data.height = this.height;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.width != 0)
            writer.writeUint32(8, this.width);
        if (this.height != 0)
            writer.writeUint32(11, this.height);
        if (this.data.length)
            writer.writeBytes(9, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomeBlockDotPattern {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomeBlockDotPattern();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.width = reader.readUint32();
                    break;
                case 11:
                    message.height = reader.readUint32();
                    break;
                case 9:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HomeBlockDotPattern {
        return HomeBlockDotPattern.deserialize(bytes);
    }
}
