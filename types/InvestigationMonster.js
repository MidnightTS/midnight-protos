"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InvestigationMonster_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvestigationMonster = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InvestigationMonster.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Vector");
const dependency_2 = require("./WeeklyBossResinDiscountInfo");
const pb_1 = require("google-protobuf");
class InvestigationMonster extends pb_1.Message {
    constructor(data) {
        super();
        _InvestigationMonster_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _InvestigationMonster_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_alive" in data && data.is_alive != undefined) {
                this.is_alive = data.is_alive;
            }
            if ("refresh_interval" in data && data.refresh_interval != undefined) {
                this.refresh_interval = data.refresh_interval;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("boss_chest_num" in data && data.boss_chest_num != undefined) {
                this.boss_chest_num = data.boss_chest_num;
            }
            if ("weekly_boss_resin_discount_info" in data && data.weekly_boss_resin_discount_info != undefined) {
                this.weekly_boss_resin_discount_info = data.weekly_boss_resin_discount_info;
            }
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("resin" in data && data.resin != undefined) {
                this.resin = data.resin;
            }
            if ("max_boss_chest_num" in data && data.max_boss_chest_num != undefined) {
                this.max_boss_chest_num = data.max_boss_chest_num;
            }
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("is_area_locked" in data && data.is_area_locked != undefined) {
                this.is_area_locked = data.is_area_locked;
            }
            if ("lock_state" in data && data.lock_state != undefined) {
                this.lock_state = data.lock_state;
            }
            if ("next_boss_chest_refresh_time" in data && data.next_boss_chest_refresh_time != undefined) {
                this.next_boss_chest_refresh_time = data.next_boss_chest_refresh_time;
            }
            if ("city_id" in data && data.city_id != undefined) {
                this.city_id = data.city_id;
            }
        }
    }
    get is_alive() {
        return pb_1.Message.getFieldWithDefault(this, 9, false);
    }
    set is_alive(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get refresh_interval() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set refresh_interval(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set id(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set level(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get boss_chest_num() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set boss_chest_num(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get weekly_boss_resin_discount_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.WeeklyBossResinDiscountInfo, 12);
    }
    set weekly_boss_resin_discount_info(value) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_weekly_boss_resin_discount_info() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 301, 0);
    }
    set monster_id(value) {
        pb_1.Message.setField(this, 301, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 14);
    }
    set pos(value) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get resin() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set resin(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get max_boss_chest_num() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set max_boss_chest_num(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set next_refresh_time(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 285, 0);
    }
    set group_id(value) {
        pb_1.Message.setField(this, 285, value);
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set scene_id(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_area_locked() {
        return pb_1.Message.getFieldWithDefault(this, 15, false);
    }
    set is_area_locked(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get lock_state() {
        return pb_1.Message.getFieldWithDefault(this, 2, InvestigationMonster.LockState.LOCK_STATE_NONE);
    }
    set lock_state(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get next_boss_chest_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set next_boss_chest_refresh_time(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get city_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set city_id(value) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data) {
        const message = new InvestigationMonster({});
        if (data.is_alive != null) {
            message.is_alive = data.is_alive;
        }
        if (data.refresh_interval != null) {
            message.refresh_interval = data.refresh_interval;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.boss_chest_num != null) {
            message.boss_chest_num = data.boss_chest_num;
        }
        if (data.weekly_boss_resin_discount_info != null) {
            message.weekly_boss_resin_discount_info = dependency_2.WeeklyBossResinDiscountInfo.fromObject(data.weekly_boss_resin_discount_info);
        }
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.pos != null) {
            message.pos = dependency_1.Vector.fromObject(data.pos);
        }
        if (data.resin != null) {
            message.resin = data.resin;
        }
        if (data.max_boss_chest_num != null) {
            message.max_boss_chest_num = data.max_boss_chest_num;
        }
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.is_area_locked != null) {
            message.is_area_locked = data.is_area_locked;
        }
        if (data.lock_state != null) {
            message.lock_state = data.lock_state;
        }
        if (data.next_boss_chest_refresh_time != null) {
            message.next_boss_chest_refresh_time = data.next_boss_chest_refresh_time;
        }
        if (data.city_id != null) {
            message.city_id = data.city_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_alive != null) {
            data.is_alive = this.is_alive;
        }
        if (this.refresh_interval != null) {
            data.refresh_interval = this.refresh_interval;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.boss_chest_num != null) {
            data.boss_chest_num = this.boss_chest_num;
        }
        if (this.weekly_boss_resin_discount_info != null) {
            data.weekly_boss_resin_discount_info = this.weekly_boss_resin_discount_info.toObject();
        }
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.resin != null) {
            data.resin = this.resin;
        }
        if (this.max_boss_chest_num != null) {
            data.max_boss_chest_num = this.max_boss_chest_num;
        }
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.is_area_locked != null) {
            data.is_area_locked = this.is_area_locked;
        }
        if (this.lock_state != null) {
            data.lock_state = this.lock_state;
        }
        if (this.next_boss_chest_refresh_time != null) {
            data.next_boss_chest_refresh_time = this.next_boss_chest_refresh_time;
        }
        if (this.city_id != null) {
            data.city_id = this.city_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_alive != false)
            writer.writeBool(9, this.is_alive);
        if (this.refresh_interval != 0)
            writer.writeUint32(3, this.refresh_interval);
        if (this.id != 0)
            writer.writeUint32(13, this.id);
        if (this.level != 0)
            writer.writeUint32(5, this.level);
        if (this.boss_chest_num != 0)
            writer.writeUint32(1, this.boss_chest_num);
        if (this.has_weekly_boss_resin_discount_info)
            writer.writeMessage(12, this.weekly_boss_resin_discount_info, () => this.weekly_boss_resin_discount_info.serialize(writer));
        if (this.monster_id != 0)
            writer.writeUint32(301, this.monster_id);
        if (this.has_pos)
            writer.writeMessage(14, this.pos, () => this.pos.serialize(writer));
        if (this.resin != 0)
            writer.writeUint32(8, this.resin);
        if (this.max_boss_chest_num != 0)
            writer.writeUint32(4, this.max_boss_chest_num);
        if (this.next_refresh_time != 0)
            writer.writeUint32(11, this.next_refresh_time);
        if (this.group_id != 0)
            writer.writeUint32(285, this.group_id);
        if (this.scene_id != 0)
            writer.writeUint32(10, this.scene_id);
        if (this.is_area_locked != false)
            writer.writeBool(15, this.is_area_locked);
        if (this.lock_state != InvestigationMonster.LockState.LOCK_STATE_NONE)
            writer.writeEnum(2, this.lock_state);
        if (this.next_boss_chest_refresh_time != 0)
            writer.writeUint32(7, this.next_boss_chest_refresh_time);
        if (this.city_id != 0)
            writer.writeUint32(6, this.city_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvestigationMonster();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.is_alive = reader.readBool();
                    break;
                case 3:
                    message.refresh_interval = reader.readUint32();
                    break;
                case 13:
                    message.id = reader.readUint32();
                    break;
                case 5:
                    message.level = reader.readUint32();
                    break;
                case 1:
                    message.boss_chest_num = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.weekly_boss_resin_discount_info, () => message.weekly_boss_resin_discount_info = dependency_2.WeeklyBossResinDiscountInfo.deserialize(reader));
                    break;
                case 301:
                    message.monster_id = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message.pos, () => message.pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 8:
                    message.resin = reader.readUint32();
                    break;
                case 4:
                    message.max_boss_chest_num = reader.readUint32();
                    break;
                case 11:
                    message.next_refresh_time = reader.readUint32();
                    break;
                case 285:
                    message.group_id = reader.readUint32();
                    break;
                case 10:
                    message.scene_id = reader.readUint32();
                    break;
                case 15:
                    message.is_area_locked = reader.readBool();
                    break;
                case 2:
                    message.lock_state = reader.readEnum();
                    break;
                case 7:
                    message.next_boss_chest_refresh_time = reader.readUint32();
                    break;
                case 6:
                    message.city_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return InvestigationMonster.deserialize(bytes);
    }
}
exports.InvestigationMonster = InvestigationMonster;
_InvestigationMonster_one_of_decls = new WeakMap();
(function (InvestigationMonster) {
    let LockState;
    (function (LockState) {
        LockState[LockState["LOCK_STATE_NONE"] = 0] = "LOCK_STATE_NONE";
        LockState[LockState["LOCK_STATE_QUEST"] = 1] = "LOCK_STATE_QUEST";
    })(LockState = InvestigationMonster.LockState || (InvestigationMonster.LockState = {}));
})(InvestigationMonster = exports.InvestigationMonster || (exports.InvestigationMonster = {}));
