/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ExpeditionPathInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ExpeditionState";
import * as pb_1 from "google-protobuf";
export class ExpeditionPathInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mark_id?: number;
        start_time?: number;
        assist_avatar_id?: number;
        bonus_probability?: number;
        state?: dependency_1.ExpeditionState;
        avatar_id_list?: number[];
        assist_costume_id?: number;
        path_id?: number;
        challenge_id?: number;
        assist_uid?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mark_id" in data && data.mark_id != undefined) {
                this.mark_id = data.mark_id;
            }
            if ("start_time" in data && data.start_time != undefined) {
                this.start_time = data.start_time;
            }
            if ("assist_avatar_id" in data && data.assist_avatar_id != undefined) {
                this.assist_avatar_id = data.assist_avatar_id;
            }
            if ("bonus_probability" in data && data.bonus_probability != undefined) {
                this.bonus_probability = data.bonus_probability;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("avatar_id_list" in data && data.avatar_id_list != undefined) {
                this.avatar_id_list = data.avatar_id_list;
            }
            if ("assist_costume_id" in data && data.assist_costume_id != undefined) {
                this.assist_costume_id = data.assist_costume_id;
            }
            if ("path_id" in data && data.path_id != undefined) {
                this.path_id = data.path_id;
            }
            if ("challenge_id" in data && data.challenge_id != undefined) {
                this.challenge_id = data.challenge_id;
            }
            if ("assist_uid" in data && data.assist_uid != undefined) {
                this.assist_uid = data.assist_uid;
            }
        }
    }
    get mark_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set mark_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get start_time() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set start_time(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get assist_avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set assist_avatar_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get bonus_probability() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set bonus_probability(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 15, dependency_1.ExpeditionState.EXPEDITION_STATE_NONE) as dependency_1.ExpeditionState;
    }
    set state(value: dependency_1.ExpeditionState) {
        pb_1.Message.setField(this, 15, value);
    }
    get avatar_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set avatar_id_list(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get assist_costume_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set assist_costume_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get path_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set path_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get challenge_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set challenge_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get assist_uid() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set assist_uid(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        mark_id?: number;
        start_time?: number;
        assist_avatar_id?: number;
        bonus_probability?: number;
        state?: dependency_1.ExpeditionState;
        avatar_id_list?: number[];
        assist_costume_id?: number;
        path_id?: number;
        challenge_id?: number;
        assist_uid?: number;
    }): ExpeditionPathInfo {
        const message = new ExpeditionPathInfo({});
        if (data.mark_id != null) {
            message.mark_id = data.mark_id;
        }
        if (data.start_time != null) {
            message.start_time = data.start_time;
        }
        if (data.assist_avatar_id != null) {
            message.assist_avatar_id = data.assist_avatar_id;
        }
        if (data.bonus_probability != null) {
            message.bonus_probability = data.bonus_probability;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.avatar_id_list != null) {
            message.avatar_id_list = data.avatar_id_list;
        }
        if (data.assist_costume_id != null) {
            message.assist_costume_id = data.assist_costume_id;
        }
        if (data.path_id != null) {
            message.path_id = data.path_id;
        }
        if (data.challenge_id != null) {
            message.challenge_id = data.challenge_id;
        }
        if (data.assist_uid != null) {
            message.assist_uid = data.assist_uid;
        }
        return message;
    }
    toObject() {
        const data: {
            mark_id?: number;
            start_time?: number;
            assist_avatar_id?: number;
            bonus_probability?: number;
            state?: dependency_1.ExpeditionState;
            avatar_id_list?: number[];
            assist_costume_id?: number;
            path_id?: number;
            challenge_id?: number;
            assist_uid?: number;
        } = {};
        if (this.mark_id != null) {
            data.mark_id = this.mark_id;
        }
        if (this.start_time != null) {
            data.start_time = this.start_time;
        }
        if (this.assist_avatar_id != null) {
            data.assist_avatar_id = this.assist_avatar_id;
        }
        if (this.bonus_probability != null) {
            data.bonus_probability = this.bonus_probability;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.avatar_id_list != null) {
            data.avatar_id_list = this.avatar_id_list;
        }
        if (this.assist_costume_id != null) {
            data.assist_costume_id = this.assist_costume_id;
        }
        if (this.path_id != null) {
            data.path_id = this.path_id;
        }
        if (this.challenge_id != null) {
            data.challenge_id = this.challenge_id;
        }
        if (this.assist_uid != null) {
            data.assist_uid = this.assist_uid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mark_id != 0)
            writer.writeUint32(12, this.mark_id);
        if (this.start_time != 0)
            writer.writeUint32(9, this.start_time);
        if (this.assist_avatar_id != 0)
            writer.writeUint32(7, this.assist_avatar_id);
        if (this.bonus_probability != 0)
            writer.writeFloat(4, this.bonus_probability);
        if (this.state != dependency_1.ExpeditionState.EXPEDITION_STATE_NONE)
            writer.writeEnum(15, this.state);
        if (this.avatar_id_list.length)
            writer.writePackedUint32(2, this.avatar_id_list);
        if (this.assist_costume_id != 0)
            writer.writeUint32(5, this.assist_costume_id);
        if (this.path_id != 0)
            writer.writeUint32(8, this.path_id);
        if (this.challenge_id != 0)
            writer.writeUint32(11, this.challenge_id);
        if (this.assist_uid != 0)
            writer.writeUint32(10, this.assist_uid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExpeditionPathInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExpeditionPathInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.mark_id = reader.readUint32();
                    break;
                case 9:
                    message.start_time = reader.readUint32();
                    break;
                case 7:
                    message.assist_avatar_id = reader.readUint32();
                    break;
                case 4:
                    message.bonus_probability = reader.readFloat();
                    break;
                case 15:
                    message.state = reader.readEnum();
                    break;
                case 2:
                    message.avatar_id_list = reader.readPackedUint32();
                    break;
                case 5:
                    message.assist_costume_id = reader.readUint32();
                    break;
                case 8:
                    message.path_id = reader.readUint32();
                    break;
                case 11:
                    message.challenge_id = reader.readUint32();
                    break;
                case 10:
                    message.assist_uid = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExpeditionPathInfo {
        return ExpeditionPathInfo.deserialize(bytes);
    }
}
