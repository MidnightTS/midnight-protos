"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlayerMatchInfoNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerMatchInfoNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerMatchInfoNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./MatchType");
const pb_1 = require("google-protobuf");
class PlayerMatchInfoNotify extends pb_1.Message {
    constructor(data) {
        super();
        _PlayerMatchInfoNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PlayerMatchInfoNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mechanicus_difficult_level" in data && data.mechanicus_difficult_level != undefined) {
                this.mechanicus_difficult_level = data.mechanicus_difficult_level;
            }
            if ("estimate_match_cost_time" in data && data.estimate_match_cost_time != undefined) {
                this.estimate_match_cost_time = data.estimate_match_cost_time;
            }
            if ("match_type" in data && data.match_type != undefined) {
                this.match_type = data.match_type;
            }
            if ("mp_play_id" in data && data.mp_play_id != undefined) {
                this.mp_play_id = data.mp_play_id;
            }
            if ("match_id" in data && data.match_id != undefined) {
                this.match_id = data.match_id;
            }
            if ("match_begin_time" in data && data.match_begin_time != undefined) {
                this.match_begin_time = data.match_begin_time;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("host_uid" in data && data.host_uid != undefined) {
                this.host_uid = data.host_uid;
            }
        }
    }
    get mechanicus_difficult_level() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set mechanicus_difficult_level(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get estimate_match_cost_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set estimate_match_cost_time(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get match_type() {
        return pb_1.Message.getFieldWithDefault(this, 11, dependency_1.MatchType.MATCH_TYPE_NONE);
    }
    set match_type(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get mp_play_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set mp_play_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get match_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set match_id(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get match_begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set match_begin_time(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set dungeon_id(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get host_uid() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set host_uid(value) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data) {
        const message = new PlayerMatchInfoNotify({});
        if (data.mechanicus_difficult_level != null) {
            message.mechanicus_difficult_level = data.mechanicus_difficult_level;
        }
        if (data.estimate_match_cost_time != null) {
            message.estimate_match_cost_time = data.estimate_match_cost_time;
        }
        if (data.match_type != null) {
            message.match_type = data.match_type;
        }
        if (data.mp_play_id != null) {
            message.mp_play_id = data.mp_play_id;
        }
        if (data.match_id != null) {
            message.match_id = data.match_id;
        }
        if (data.match_begin_time != null) {
            message.match_begin_time = data.match_begin_time;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.host_uid != null) {
            message.host_uid = data.host_uid;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.mechanicus_difficult_level != null) {
            data.mechanicus_difficult_level = this.mechanicus_difficult_level;
        }
        if (this.estimate_match_cost_time != null) {
            data.estimate_match_cost_time = this.estimate_match_cost_time;
        }
        if (this.match_type != null) {
            data.match_type = this.match_type;
        }
        if (this.mp_play_id != null) {
            data.mp_play_id = this.mp_play_id;
        }
        if (this.match_id != null) {
            data.match_id = this.match_id;
        }
        if (this.match_begin_time != null) {
            data.match_begin_time = this.match_begin_time;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.host_uid != null) {
            data.host_uid = this.host_uid;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mechanicus_difficult_level != 0)
            writer.writeUint32(12, this.mechanicus_difficult_level);
        if (this.estimate_match_cost_time != 0)
            writer.writeUint32(3, this.estimate_match_cost_time);
        if (this.match_type != dependency_1.MatchType.MATCH_TYPE_NONE)
            writer.writeEnum(11, this.match_type);
        if (this.mp_play_id != 0)
            writer.writeUint32(5, this.mp_play_id);
        if (this.match_id != 0)
            writer.writeUint32(8, this.match_id);
        if (this.match_begin_time != 0)
            writer.writeUint32(4, this.match_begin_time);
        if (this.dungeon_id != 0)
            writer.writeUint32(10, this.dungeon_id);
        if (this.host_uid != 0)
            writer.writeUint32(13, this.host_uid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerMatchInfoNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.mechanicus_difficult_level = reader.readUint32();
                    break;
                case 3:
                    message.estimate_match_cost_time = reader.readUint32();
                    break;
                case 11:
                    message.match_type = reader.readEnum();
                    break;
                case 5:
                    message.mp_play_id = reader.readUint32();
                    break;
                case 8:
                    message.match_id = reader.readUint32();
                    break;
                case 4:
                    message.match_begin_time = reader.readUint32();
                    break;
                case 10:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 13:
                    message.host_uid = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlayerMatchInfoNotify.deserialize(bytes);
    }
}
exports.PlayerMatchInfoNotify = PlayerMatchInfoNotify;
_PlayerMatchInfoNotify_one_of_decls = new WeakMap();
