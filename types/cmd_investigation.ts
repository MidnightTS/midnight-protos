// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_investigation.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./define";
import { WeeklyBossResinDiscountInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.Investigation
 */
export interface Investigation {
    /**
     * @generated from protobuf field: optional uint32 total_progress = 5;
     */
    totalProgress?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Investigation.State state = 2;
     */
    state?: Investigation_State;
    /**
     * @generated from protobuf field: optional uint32 progress = 13;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 9;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.Investigation.State
 */
export enum Investigation_State {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: COMPLETE = 2;
     */
    COMPLETE = 2,
    /**
     * @generated from protobuf enum value: REWARD_TAKEN = 3;
     */
    REWARD_TAKEN = 3
}
/**
 * @generated from protobuf message com.midnights.game.InvestigationTarget
 */
export interface InvestigationTarget {
    /**
     * @generated from protobuf field: optional uint32 quest_id = 15;
     */
    questId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.InvestigationTarget.State state = 2;
     */
    state?: InvestigationTarget_State;
    /**
     * @generated from protobuf field: optional uint32 progress = 8;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 total_progress = 7;
     */
    totalProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 investigation_id = 3;
     */
    investigationId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InvestigationTarget.State
 */
export enum InvestigationTarget_State {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: IN_PROGRESS = 1;
     */
    IN_PROGRESS = 1,
    /**
     * @generated from protobuf enum value: COMPLETE = 2;
     */
    COMPLETE = 2,
    /**
     * @generated from protobuf enum value: REWARD_TAKEN = 3;
     */
    REWARD_TAKEN = 3
}
/**
 * @generated from protobuf message com.midnights.game.PlayerInvestigationAllInfoNotify
 */
export interface PlayerInvestigationAllInfoNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Investigation investigation_list = 15;
     */
    investigationList: Investigation[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.InvestigationTarget investigation_target_list = 12;
     */
    investigationTargetList: InvestigationTarget[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerInvestigationAllInfoNotify.CmdId
 */
export enum PlayerInvestigationAllInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1928;
     */
    CMD_ID = 1928,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeInvestigationRewardReq
 */
export interface TakeInvestigationRewardReq {
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeInvestigationRewardReq.CmdId
 */
export enum TakeInvestigationRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1912;
     */
    CMD_ID = 1912,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeInvestigationRewardRsp
 */
export interface TakeInvestigationRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 12;
     */
    id?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeInvestigationRewardRsp.CmdId
 */
export enum TakeInvestigationRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1922;
     */
    CMD_ID = 1922,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeInvestigationTargetRewardReq
 */
export interface TakeInvestigationTargetRewardReq {
    /**
     * @generated from protobuf field: optional uint32 quest_id = 11;
     */
    questId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeInvestigationTargetRewardReq.CmdId
 */
export enum TakeInvestigationTargetRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1918;
     */
    CMD_ID = 1918,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeInvestigationTargetRewardRsp
 */
export interface TakeInvestigationTargetRewardRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 2;
     */
    questId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeInvestigationTargetRewardRsp.CmdId
 */
export enum TakeInvestigationTargetRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1916;
     */
    CMD_ID = 1916,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetInvestigationMonsterReq
 */
export interface GetInvestigationMonsterReq {
    /**
     * @generated from protobuf field: repeated uint32 city_id_list = 3;
     */
    cityIdList: number[];
    /**
     * @generated from protobuf field: optional bool is_for_mark = 4;
     */
    isForMark?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GetInvestigationMonsterReq.CmdId
 */
export enum GetInvestigationMonsterReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1901;
     */
    CMD_ID = 1901,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InvestigationMonster
 */
export interface InvestigationMonster {
    /**
     * @generated from protobuf field: optional bool is_alive = 9;
     */
    isAlive?: boolean;
    /**
     * @generated from protobuf field: optional uint32 refresh_interval = 3;
     */
    refreshInterval?: number;
    /**
     * @generated from protobuf field: optional uint32 id = 13;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 5;
     */
    level?: number;
    /**
     * @generated from protobuf field: optional uint32 boss_chest_num = 1;
     */
    bossChestNum?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 12;
     */
    weeklyBossResinDiscountInfo?: WeeklyBossResinDiscountInfo;
    /**
     * @generated from protobuf field: optional uint32 monster_id = 301;
     */
    monsterId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 14;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 resin = 8;
     */
    resin?: number;
    /**
     * @generated from protobuf field: optional uint32 max_boss_chest_num = 4;
     */
    maxBossChestNum?: number;
    /**
     * @generated from protobuf field: optional uint32 next_refresh_time = 11;
     */
    nextRefreshTime?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 285;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 10;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional bool is_area_locked = 15;
     */
    isAreaLocked?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.InvestigationMonster.LockState lock_state = 2;
     */
    lockState?: InvestigationMonster_LockState;
    /**
     * @generated from protobuf field: optional uint32 next_boss_chest_refresh_time = 7;
     */
    nextBossChestRefreshTime?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 6;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InvestigationMonster.LockState
 */
export enum InvestigationMonster_LockState {
    /**
     * @generated from protobuf enum value: LOCK_NONE = 0;
     */
    LOCK_NONE = 0,
    /**
     * @generated from protobuf enum value: LOCK_QUEST = 1;
     */
    LOCK_QUEST = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetInvestigationMonsterRsp
 */
export interface GetInvestigationMonsterRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InvestigationMonster monster_list = 10;
     */
    monsterList: InvestigationMonster[];
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_for_mark = 2;
     */
    isForMark?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.GetInvestigationMonsterRsp.CmdId
 */
export enum GetInvestigationMonsterRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1910;
     */
    CMD_ID = 1910,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerInvestigationNotify
 */
export interface PlayerInvestigationNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Investigation investigation_list = 1;
     */
    investigationList: Investigation[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerInvestigationNotify.CmdId
 */
export enum PlayerInvestigationNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1911;
     */
    CMD_ID = 1911,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerInvestigationTargetNotify
 */
export interface PlayerInvestigationTargetNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.InvestigationTarget investigation_target_list = 1;
     */
    investigationTargetList: InvestigationTarget[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerInvestigationTargetNotify.CmdId
 */
export enum PlayerInvestigationTargetNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1929;
     */
    CMD_ID = 1929,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MarkTargetInvestigationMonsterNotify
 */
export interface MarkTargetInvestigationMonsterNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 11;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 monster_id = 4;
     */
    monsterId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 5;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 investigation_monster_id = 12;
     */
    investigationMonsterId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MarkTargetInvestigationMonsterNotify.CmdId
 */
export enum MarkTargetInvestigationMonsterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1915;
     */
    CMD_ID = 1915,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InvestigationMonsterUpdateNotify
 */
export interface InvestigationMonsterUpdateNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.InvestigationMonster investigation_monster = 5;
     */
    investigationMonster?: InvestigationMonster;
}
/**
 * @generated from protobuf enum com.midnights.game.InvestigationMonsterUpdateNotify.CmdId
 */
export enum InvestigationMonsterUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1906;
     */
    CMD_ID = 1906,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InvestigationQuestDailyNotify
 */
export interface InvestigationQuestDailyNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.InvestigationQuestDailyNotify.CmdId
 */
export enum InvestigationQuestDailyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1921;
     */
    CMD_ID = 1921,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InvestigationReadQuestDailyNotify
 */
export interface InvestigationReadQuestDailyNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.InvestigationReadQuestDailyNotify.CmdId
 */
export enum InvestigationReadQuestDailyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1902;
     */
    CMD_ID = 1902,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Investigation$Type extends MessageType<Investigation> {
    constructor() {
        super("com.midnights.game.Investigation", [
            { no: 5, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.Investigation.State", Investigation_State] },
            { no: 13, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Investigation>): Investigation {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Investigation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Investigation): Investigation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_progress */ 5:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional com.midnights.game.Investigation.State state */ 2:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 progress */ 13:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 id */ 9:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Investigation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_progress = 5; */
        if (message.totalProgress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.totalProgress);
        /* optional com.midnights.game.Investigation.State state = 2; */
        if (message.state !== undefined)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* optional uint32 progress = 13; */
        if (message.progress !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.progress);
        /* optional uint32 id = 9; */
        if (message.id !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.Investigation
 */
export const Investigation = new Investigation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvestigationTarget$Type extends MessageType<InvestigationTarget> {
    constructor() {
        super("com.midnights.game.InvestigationTarget", [
            { no: 15, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.InvestigationTarget.State", InvestigationTarget_State] },
            { no: 8, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "investigation_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InvestigationTarget>): InvestigationTarget {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvestigationTarget>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvestigationTarget): InvestigationTarget {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 15:
                    message.questId = reader.uint32();
                    break;
                case /* optional com.midnights.game.InvestigationTarget.State state */ 2:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 progress */ 8:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 total_progress */ 7:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional uint32 investigation_id */ 3:
                    message.investigationId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvestigationTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quest_id = 15; */
        if (message.questId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.questId);
        /* optional com.midnights.game.InvestigationTarget.State state = 2; */
        if (message.state !== undefined)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* optional uint32 progress = 8; */
        if (message.progress !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.progress);
        /* optional uint32 total_progress = 7; */
        if (message.totalProgress !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.totalProgress);
        /* optional uint32 investigation_id = 3; */
        if (message.investigationId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.investigationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InvestigationTarget
 */
export const InvestigationTarget = new InvestigationTarget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInvestigationAllInfoNotify$Type extends MessageType<PlayerInvestigationAllInfoNotify> {
    constructor() {
        super("com.midnights.game.PlayerInvestigationAllInfoNotify", [
            { no: 15, name: "investigation_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Investigation },
            { no: 12, name: "investigation_target_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InvestigationTarget }
        ]);
    }
    create(value?: PartialMessage<PlayerInvestigationAllInfoNotify>): PlayerInvestigationAllInfoNotify {
        const message = { investigationList: [], investigationTargetList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInvestigationAllInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInvestigationAllInfoNotify): PlayerInvestigationAllInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Investigation investigation_list */ 15:
                    message.investigationList.push(Investigation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.InvestigationTarget investigation_target_list */ 12:
                    message.investigationTargetList.push(InvestigationTarget.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInvestigationAllInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Investigation investigation_list = 15; */
        for (let i = 0; i < message.investigationList.length; i++)
            Investigation.internalBinaryWrite(message.investigationList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.InvestigationTarget investigation_target_list = 12; */
        for (let i = 0; i < message.investigationTargetList.length; i++)
            InvestigationTarget.internalBinaryWrite(message.investigationTargetList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerInvestigationAllInfoNotify
 */
export const PlayerInvestigationAllInfoNotify = new PlayerInvestigationAllInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeInvestigationRewardReq$Type extends MessageType<TakeInvestigationRewardReq> {
    constructor() {
        super("com.midnights.game.TakeInvestigationRewardReq", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeInvestigationRewardReq>): TakeInvestigationRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeInvestigationRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeInvestigationRewardReq): TakeInvestigationRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeInvestigationRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeInvestigationRewardReq
 */
export const TakeInvestigationRewardReq = new TakeInvestigationRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeInvestigationRewardRsp$Type extends MessageType<TakeInvestigationRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeInvestigationRewardRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeInvestigationRewardRsp>): TakeInvestigationRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeInvestigationRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeInvestigationRewardRsp): TakeInvestigationRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 id */ 12:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeInvestigationRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 id = 12; */
        if (message.id !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeInvestigationRewardRsp
 */
export const TakeInvestigationRewardRsp = new TakeInvestigationRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeInvestigationTargetRewardReq$Type extends MessageType<TakeInvestigationTargetRewardReq> {
    constructor() {
        super("com.midnights.game.TakeInvestigationTargetRewardReq", [
            { no: 11, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeInvestigationTargetRewardReq>): TakeInvestigationTargetRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeInvestigationTargetRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeInvestigationTargetRewardReq): TakeInvestigationTargetRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 11:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeInvestigationTargetRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quest_id = 11; */
        if (message.questId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeInvestigationTargetRewardReq
 */
export const TakeInvestigationTargetRewardReq = new TakeInvestigationTargetRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeInvestigationTargetRewardRsp$Type extends MessageType<TakeInvestigationTargetRewardRsp> {
    constructor() {
        super("com.midnights.game.TakeInvestigationTargetRewardRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeInvestigationTargetRewardRsp>): TakeInvestigationTargetRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeInvestigationTargetRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeInvestigationTargetRewardRsp): TakeInvestigationTargetRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 quest_id */ 2:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeInvestigationTargetRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 quest_id = 2; */
        if (message.questId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeInvestigationTargetRewardRsp
 */
export const TakeInvestigationTargetRewardRsp = new TakeInvestigationTargetRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInvestigationMonsterReq$Type extends MessageType<GetInvestigationMonsterReq> {
    constructor() {
        super("com.midnights.game.GetInvestigationMonsterReq", [
            { no: 3, name: "city_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_for_mark", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetInvestigationMonsterReq>): GetInvestigationMonsterReq {
        const message = { cityIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetInvestigationMonsterReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInvestigationMonsterReq): GetInvestigationMonsterReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 city_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cityIdList.push(reader.uint32());
                    else
                        message.cityIdList.push(reader.uint32());
                    break;
                case /* optional bool is_for_mark */ 4:
                    message.isForMark = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInvestigationMonsterReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 city_id_list = 3; */
        if (message.cityIdList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.cityIdList.length; i++)
                writer.uint32(message.cityIdList[i]);
            writer.join();
        }
        /* optional bool is_for_mark = 4; */
        if (message.isForMark !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isForMark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetInvestigationMonsterReq
 */
export const GetInvestigationMonsterReq = new GetInvestigationMonsterReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvestigationMonster$Type extends MessageType<InvestigationMonster> {
    constructor() {
        super("com.midnights.game.InvestigationMonster", [
            { no: 9, name: "is_alive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "refresh_interval", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "boss_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "weekly_boss_resin_discount_info", kind: "message", T: () => WeeklyBossResinDiscountInfo },
            { no: 301, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "pos", kind: "message", T: () => Vector },
            { no: 8, name: "resin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "max_boss_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 285, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_area_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "lock_state", kind: "enum", opt: true, T: () => ["com.midnights.game.InvestigationMonster.LockState", InvestigationMonster_LockState] },
            { no: 7, name: "next_boss_chest_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InvestigationMonster>): InvestigationMonster {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvestigationMonster>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvestigationMonster): InvestigationMonster {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_alive */ 9:
                    message.isAlive = reader.bool();
                    break;
                case /* optional uint32 refresh_interval */ 3:
                    message.refreshInterval = reader.uint32();
                    break;
                case /* optional uint32 id */ 13:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 level */ 5:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 boss_chest_num */ 1:
                    message.bossChestNum = reader.uint32();
                    break;
                case /* optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info */ 12:
                    message.weeklyBossResinDiscountInfo = WeeklyBossResinDiscountInfo.internalBinaryRead(reader, reader.uint32(), options, message.weeklyBossResinDiscountInfo);
                    break;
                case /* optional uint32 monster_id */ 301:
                    message.monsterId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 14:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 resin */ 8:
                    message.resin = reader.uint32();
                    break;
                case /* optional uint32 max_boss_chest_num */ 4:
                    message.maxBossChestNum = reader.uint32();
                    break;
                case /* optional uint32 next_refresh_time */ 11:
                    message.nextRefreshTime = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 285:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 10:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional bool is_area_locked */ 15:
                    message.isAreaLocked = reader.bool();
                    break;
                case /* optional com.midnights.game.InvestigationMonster.LockState lock_state */ 2:
                    message.lockState = reader.int32();
                    break;
                case /* optional uint32 next_boss_chest_refresh_time */ 7:
                    message.nextBossChestRefreshTime = reader.uint32();
                    break;
                case /* optional uint32 city_id */ 6:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvestigationMonster, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_alive = 9; */
        if (message.isAlive !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isAlive);
        /* optional uint32 refresh_interval = 3; */
        if (message.refreshInterval !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.refreshInterval);
        /* optional uint32 id = 13; */
        if (message.id !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.id);
        /* optional uint32 level = 5; */
        if (message.level !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.level);
        /* optional uint32 boss_chest_num = 1; */
        if (message.bossChestNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.bossChestNum);
        /* optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 12; */
        if (message.weeklyBossResinDiscountInfo)
            WeeklyBossResinDiscountInfo.internalBinaryWrite(message.weeklyBossResinDiscountInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 monster_id = 301; */
        if (message.monsterId !== undefined)
            writer.tag(301, WireType.Varint).uint32(message.monsterId);
        /* optional com.midnights.game.Vector pos = 14; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 resin = 8; */
        if (message.resin !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.resin);
        /* optional uint32 max_boss_chest_num = 4; */
        if (message.maxBossChestNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.maxBossChestNum);
        /* optional uint32 next_refresh_time = 11; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.nextRefreshTime);
        /* optional uint32 group_id = 285; */
        if (message.groupId !== undefined)
            writer.tag(285, WireType.Varint).uint32(message.groupId);
        /* optional uint32 scene_id = 10; */
        if (message.sceneId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sceneId);
        /* optional bool is_area_locked = 15; */
        if (message.isAreaLocked !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isAreaLocked);
        /* optional com.midnights.game.InvestigationMonster.LockState lock_state = 2; */
        if (message.lockState !== undefined)
            writer.tag(2, WireType.Varint).int32(message.lockState);
        /* optional uint32 next_boss_chest_refresh_time = 7; */
        if (message.nextBossChestRefreshTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.nextBossChestRefreshTime);
        /* optional uint32 city_id = 6; */
        if (message.cityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InvestigationMonster
 */
export const InvestigationMonster = new InvestigationMonster$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetInvestigationMonsterRsp$Type extends MessageType<GetInvestigationMonsterRsp> {
    constructor() {
        super("com.midnights.game.GetInvestigationMonsterRsp", [
            { no: 10, name: "monster_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InvestigationMonster },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_for_mark", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetInvestigationMonsterRsp>): GetInvestigationMonsterRsp {
        const message = { monsterList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetInvestigationMonsterRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetInvestigationMonsterRsp): GetInvestigationMonsterRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InvestigationMonster monster_list */ 10:
                    message.monsterList.push(InvestigationMonster.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_for_mark */ 2:
                    message.isForMark = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetInvestigationMonsterRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InvestigationMonster monster_list = 10; */
        for (let i = 0; i < message.monsterList.length; i++)
            InvestigationMonster.internalBinaryWrite(message.monsterList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional bool is_for_mark = 2; */
        if (message.isForMark !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isForMark);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetInvestigationMonsterRsp
 */
export const GetInvestigationMonsterRsp = new GetInvestigationMonsterRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInvestigationNotify$Type extends MessageType<PlayerInvestigationNotify> {
    constructor() {
        super("com.midnights.game.PlayerInvestigationNotify", [
            { no: 1, name: "investigation_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Investigation }
        ]);
    }
    create(value?: PartialMessage<PlayerInvestigationNotify>): PlayerInvestigationNotify {
        const message = { investigationList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInvestigationNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInvestigationNotify): PlayerInvestigationNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Investigation investigation_list */ 1:
                    message.investigationList.push(Investigation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInvestigationNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Investigation investigation_list = 1; */
        for (let i = 0; i < message.investigationList.length; i++)
            Investigation.internalBinaryWrite(message.investigationList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerInvestigationNotify
 */
export const PlayerInvestigationNotify = new PlayerInvestigationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInvestigationTargetNotify$Type extends MessageType<PlayerInvestigationTargetNotify> {
    constructor() {
        super("com.midnights.game.PlayerInvestigationTargetNotify", [
            { no: 1, name: "investigation_target_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => InvestigationTarget }
        ]);
    }
    create(value?: PartialMessage<PlayerInvestigationTargetNotify>): PlayerInvestigationTargetNotify {
        const message = { investigationTargetList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInvestigationTargetNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInvestigationTargetNotify): PlayerInvestigationTargetNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InvestigationTarget investigation_target_list */ 1:
                    message.investigationTargetList.push(InvestigationTarget.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInvestigationTargetNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.InvestigationTarget investigation_target_list = 1; */
        for (let i = 0; i < message.investigationTargetList.length; i++)
            InvestigationTarget.internalBinaryWrite(message.investigationTargetList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerInvestigationTargetNotify
 */
export const PlayerInvestigationTargetNotify = new PlayerInvestigationTargetNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkTargetInvestigationMonsterNotify$Type extends MessageType<MarkTargetInvestigationMonsterNotify> {
    constructor() {
        super("com.midnights.game.MarkTargetInvestigationMonsterNotify", [
            { no: 11, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "investigation_monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MarkTargetInvestigationMonsterNotify>): MarkTargetInvestigationMonsterNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MarkTargetInvestigationMonsterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkTargetInvestigationMonsterNotify): MarkTargetInvestigationMonsterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 11:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 monster_id */ 4:
                    message.monsterId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 5:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 investigation_monster_id */ 12:
                    message.investigationMonsterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkTargetInvestigationMonsterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 11; */
        if (message.sceneId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 monster_id = 4; */
        if (message.monsterId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.monsterId);
        /* optional uint32 group_id = 5; */
        if (message.groupId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.groupId);
        /* optional uint32 investigation_monster_id = 12; */
        if (message.investigationMonsterId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.investigationMonsterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MarkTargetInvestigationMonsterNotify
 */
export const MarkTargetInvestigationMonsterNotify = new MarkTargetInvestigationMonsterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvestigationMonsterUpdateNotify$Type extends MessageType<InvestigationMonsterUpdateNotify> {
    constructor() {
        super("com.midnights.game.InvestigationMonsterUpdateNotify", [
            { no: 5, name: "investigation_monster", kind: "message", T: () => InvestigationMonster }
        ]);
    }
    create(value?: PartialMessage<InvestigationMonsterUpdateNotify>): InvestigationMonsterUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvestigationMonsterUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvestigationMonsterUpdateNotify): InvestigationMonsterUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.InvestigationMonster investigation_monster */ 5:
                    message.investigationMonster = InvestigationMonster.internalBinaryRead(reader, reader.uint32(), options, message.investigationMonster);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvestigationMonsterUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.InvestigationMonster investigation_monster = 5; */
        if (message.investigationMonster)
            InvestigationMonster.internalBinaryWrite(message.investigationMonster, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InvestigationMonsterUpdateNotify
 */
export const InvestigationMonsterUpdateNotify = new InvestigationMonsterUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvestigationQuestDailyNotify$Type extends MessageType<InvestigationQuestDailyNotify> {
    constructor() {
        super("com.midnights.game.InvestigationQuestDailyNotify", []);
    }
    create(value?: PartialMessage<InvestigationQuestDailyNotify>): InvestigationQuestDailyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvestigationQuestDailyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvestigationQuestDailyNotify): InvestigationQuestDailyNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InvestigationQuestDailyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InvestigationQuestDailyNotify
 */
export const InvestigationQuestDailyNotify = new InvestigationQuestDailyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvestigationReadQuestDailyNotify$Type extends MessageType<InvestigationReadQuestDailyNotify> {
    constructor() {
        super("com.midnights.game.InvestigationReadQuestDailyNotify", []);
    }
    create(value?: PartialMessage<InvestigationReadQuestDailyNotify>): InvestigationReadQuestDailyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InvestigationReadQuestDailyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvestigationReadQuestDailyNotify): InvestigationReadQuestDailyNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InvestigationReadQuestDailyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InvestigationReadQuestDailyNotify
 */
export const InvestigationReadQuestDailyNotify = new InvestigationReadQuestDailyNotify$Type();
