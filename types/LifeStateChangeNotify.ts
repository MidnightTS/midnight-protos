/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: LifeStateChangeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./PlayerDieType";
import * as dependency_2 from "./ServerBuff";
import * as pb_1 from "google-protobuf";
export class LifeStateChangeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        entity_id?: number;
        server_buff_list?: dependency_2.ServerBuff[];
        attack_tag?: string;
        move_reliable_seq?: number;
        die_type?: dependency_1.PlayerDieType;
        life_state?: number;
        source_entity_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("server_buff_list" in data && data.server_buff_list != undefined) {
                this.server_buff_list = data.server_buff_list;
            }
            if ("attack_tag" in data && data.attack_tag != undefined) {
                this.attack_tag = data.attack_tag;
            }
            if ("move_reliable_seq" in data && data.move_reliable_seq != undefined) {
                this.move_reliable_seq = data.move_reliable_seq;
            }
            if ("die_type" in data && data.die_type != undefined) {
                this.die_type = data.die_type;
            }
            if ("life_state" in data && data.life_state != undefined) {
                this.life_state = data.life_state;
            }
            if ("source_entity_id" in data && data.source_entity_id != undefined) {
                this.source_entity_id = data.source_entity_id;
            }
        }
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set entity_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get server_buff_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ServerBuff, 6) as dependency_2.ServerBuff[];
    }
    set server_buff_list(value: dependency_2.ServerBuff[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get attack_tag() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set attack_tag(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get move_reliable_seq() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set move_reliable_seq(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get die_type() {
        return pb_1.Message.getFieldWithDefault(this, 14, dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE) as dependency_1.PlayerDieType;
    }
    set die_type(value: dependency_1.PlayerDieType) {
        pb_1.Message.setField(this, 14, value);
    }
    get life_state() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set life_state(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get source_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set source_entity_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        entity_id?: number;
        server_buff_list?: ReturnType<typeof dependency_2.ServerBuff.prototype.toObject>[];
        attack_tag?: string;
        move_reliable_seq?: number;
        die_type?: dependency_1.PlayerDieType;
        life_state?: number;
        source_entity_id?: number;
    }): LifeStateChangeNotify {
        const message = new LifeStateChangeNotify({});
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.server_buff_list != null) {
            message.server_buff_list = data.server_buff_list.map(item => dependency_2.ServerBuff.fromObject(item));
        }
        if (data.attack_tag != null) {
            message.attack_tag = data.attack_tag;
        }
        if (data.move_reliable_seq != null) {
            message.move_reliable_seq = data.move_reliable_seq;
        }
        if (data.die_type != null) {
            message.die_type = data.die_type;
        }
        if (data.life_state != null) {
            message.life_state = data.life_state;
        }
        if (data.source_entity_id != null) {
            message.source_entity_id = data.source_entity_id;
        }
        return message;
    }
    toObject() {
        const data: {
            entity_id?: number;
            server_buff_list?: ReturnType<typeof dependency_2.ServerBuff.prototype.toObject>[];
            attack_tag?: string;
            move_reliable_seq?: number;
            die_type?: dependency_1.PlayerDieType;
            life_state?: number;
            source_entity_id?: number;
        } = {};
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.server_buff_list != null) {
            data.server_buff_list = this.server_buff_list.map((item: dependency_2.ServerBuff) => item.toObject());
        }
        if (this.attack_tag != null) {
            data.attack_tag = this.attack_tag;
        }
        if (this.move_reliable_seq != null) {
            data.move_reliable_seq = this.move_reliable_seq;
        }
        if (this.die_type != null) {
            data.die_type = this.die_type;
        }
        if (this.life_state != null) {
            data.life_state = this.life_state;
        }
        if (this.source_entity_id != null) {
            data.source_entity_id = this.source_entity_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.entity_id != 0)
            writer.writeUint32(4, this.entity_id);
        if (this.server_buff_list.length)
            writer.writeRepeatedMessage(6, this.server_buff_list, (item: dependency_2.ServerBuff) => item.serialize(writer));
        if (this.attack_tag.length)
            writer.writeString(7, this.attack_tag);
        if (this.move_reliable_seq != 0)
            writer.writeUint32(15, this.move_reliable_seq);
        if (this.die_type != dependency_1.PlayerDieType.PLAYER_DIE_TYPE_NONE)
            writer.writeEnum(14, this.die_type);
        if (this.life_state != 0)
            writer.writeUint32(5, this.life_state);
        if (this.source_entity_id != 0)
            writer.writeUint32(1, this.source_entity_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LifeStateChangeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LifeStateChangeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.entity_id = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.server_buff_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.ServerBuff.deserialize(reader), dependency_2.ServerBuff));
                    break;
                case 7:
                    message.attack_tag = reader.readString();
                    break;
                case 15:
                    message.move_reliable_seq = reader.readUint32();
                    break;
                case 14:
                    message.die_type = reader.readEnum();
                    break;
                case 5:
                    message.life_state = reader.readUint32();
                    break;
                case 1:
                    message.source_entity_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LifeStateChangeNotify {
        return LifeStateChangeNotify.deserialize(bytes);
    }
}
