"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlatformInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlatformInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./MathQuaternion");
const dependency_2 = require("./MovingPlatformType");
const dependency_3 = require("./Route");
const dependency_4 = require("./Vector");
const pb_1 = require("google-protobuf");
class PlatformInfo extends pb_1.Message {
    constructor(data) {
        super();
        _PlatformInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PlatformInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("route_id" in data && data.route_id != undefined) {
                this.route_id = data.route_id;
            }
            if ("start_index" in data && data.start_index != undefined) {
                this.start_index = data.start_index;
            }
            if ("start_route_time" in data && data.start_route_time != undefined) {
                this.start_route_time = data.start_route_time;
            }
            if ("start_scene_time" in data && data.start_scene_time != undefined) {
                this.start_scene_time = data.start_scene_time;
            }
            if ("start_pos" in data && data.start_pos != undefined) {
                this.start_pos = data.start_pos;
            }
            if ("is_started" in data && data.is_started != undefined) {
                this.is_started = data.is_started;
            }
            if ("start_rot" in data && data.start_rot != undefined) {
                this.start_rot = data.start_rot;
            }
            if ("stop_scene_time" in data && data.stop_scene_time != undefined) {
                this.stop_scene_time = data.stop_scene_time;
            }
            if ("pos_offset" in data && data.pos_offset != undefined) {
                this.pos_offset = data.pos_offset;
            }
            if ("rot_offset" in data && data.rot_offset != undefined) {
                this.rot_offset = data.rot_offset;
            }
            if ("moving_platform_type" in data && data.moving_platform_type != undefined) {
                this.moving_platform_type = data.moving_platform_type;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
            if ("route" in data && data.route != undefined) {
                this.route = data.route;
            }
            if ("point_id" in data && data.point_id != undefined) {
                this.point_id = data.point_id;
            }
        }
    }
    get route_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set route_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get start_index() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set start_index(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get start_route_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set start_route_time(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get start_scene_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set start_scene_time(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get start_pos() {
        return pb_1.Message.getWrapperField(this, dependency_4.Vector, 7);
    }
    set start_pos(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_start_pos() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get is_started() {
        return pb_1.Message.getFieldWithDefault(this, 8, false);
    }
    set is_started(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get start_rot() {
        return pb_1.Message.getWrapperField(this, dependency_1.MathQuaternion, 9);
    }
    set start_rot(value) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_start_rot() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get stop_scene_time() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set stop_scene_time(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get pos_offset() {
        return pb_1.Message.getWrapperField(this, dependency_4.Vector, 11);
    }
    set pos_offset(value) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_pos_offset() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get rot_offset() {
        return pb_1.Message.getWrapperField(this, dependency_1.MathQuaternion, 12);
    }
    set rot_offset(value) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_rot_offset() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get moving_platform_type() {
        return pb_1.Message.getFieldWithDefault(this, 13, dependency_2.MovingPlatformType.MOVING_PLATFORM_TYPE_NONE);
    }
    set moving_platform_type(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 14, false);
    }
    set is_active(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get route() {
        return pb_1.Message.getWrapperField(this, dependency_3.Route, 15);
    }
    set route(value) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get has_route() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get point_id() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0);
    }
    set point_id(value) {
        pb_1.Message.setField(this, 16, value);
    }
    static fromObject(data) {
        const message = new PlatformInfo({});
        if (data.route_id != null) {
            message.route_id = data.route_id;
        }
        if (data.start_index != null) {
            message.start_index = data.start_index;
        }
        if (data.start_route_time != null) {
            message.start_route_time = data.start_route_time;
        }
        if (data.start_scene_time != null) {
            message.start_scene_time = data.start_scene_time;
        }
        if (data.start_pos != null) {
            message.start_pos = dependency_4.Vector.fromObject(data.start_pos);
        }
        if (data.is_started != null) {
            message.is_started = data.is_started;
        }
        if (data.start_rot != null) {
            message.start_rot = dependency_1.MathQuaternion.fromObject(data.start_rot);
        }
        if (data.stop_scene_time != null) {
            message.stop_scene_time = data.stop_scene_time;
        }
        if (data.pos_offset != null) {
            message.pos_offset = dependency_4.Vector.fromObject(data.pos_offset);
        }
        if (data.rot_offset != null) {
            message.rot_offset = dependency_1.MathQuaternion.fromObject(data.rot_offset);
        }
        if (data.moving_platform_type != null) {
            message.moving_platform_type = data.moving_platform_type;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        if (data.route != null) {
            message.route = dependency_3.Route.fromObject(data.route);
        }
        if (data.point_id != null) {
            message.point_id = data.point_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.route_id != null) {
            data.route_id = this.route_id;
        }
        if (this.start_index != null) {
            data.start_index = this.start_index;
        }
        if (this.start_route_time != null) {
            data.start_route_time = this.start_route_time;
        }
        if (this.start_scene_time != null) {
            data.start_scene_time = this.start_scene_time;
        }
        if (this.start_pos != null) {
            data.start_pos = this.start_pos.toObject();
        }
        if (this.is_started != null) {
            data.is_started = this.is_started;
        }
        if (this.start_rot != null) {
            data.start_rot = this.start_rot.toObject();
        }
        if (this.stop_scene_time != null) {
            data.stop_scene_time = this.stop_scene_time;
        }
        if (this.pos_offset != null) {
            data.pos_offset = this.pos_offset.toObject();
        }
        if (this.rot_offset != null) {
            data.rot_offset = this.rot_offset.toObject();
        }
        if (this.moving_platform_type != null) {
            data.moving_platform_type = this.moving_platform_type;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        if (this.route != null) {
            data.route = this.route.toObject();
        }
        if (this.point_id != null) {
            data.point_id = this.point_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.route_id != 0)
            writer.writeUint32(1, this.route_id);
        if (this.start_index != 0)
            writer.writeInt32(2, this.start_index);
        if (this.start_route_time != 0)
            writer.writeUint32(3, this.start_route_time);
        if (this.start_scene_time != 0)
            writer.writeUint32(4, this.start_scene_time);
        if (this.has_start_pos)
            writer.writeMessage(7, this.start_pos, () => this.start_pos.serialize(writer));
        if (this.is_started != false)
            writer.writeBool(8, this.is_started);
        if (this.has_start_rot)
            writer.writeMessage(9, this.start_rot, () => this.start_rot.serialize(writer));
        if (this.stop_scene_time != 0)
            writer.writeUint32(10, this.stop_scene_time);
        if (this.has_pos_offset)
            writer.writeMessage(11, this.pos_offset, () => this.pos_offset.serialize(writer));
        if (this.has_rot_offset)
            writer.writeMessage(12, this.rot_offset, () => this.rot_offset.serialize(writer));
        if (this.moving_platform_type != dependency_2.MovingPlatformType.MOVING_PLATFORM_TYPE_NONE)
            writer.writeEnum(13, this.moving_platform_type);
        if (this.is_active != false)
            writer.writeBool(14, this.is_active);
        if (this.has_route)
            writer.writeMessage(15, this.route, () => this.route.serialize(writer));
        if (this.point_id != 0)
            writer.writeUint32(16, this.point_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlatformInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.route_id = reader.readUint32();
                    break;
                case 2:
                    message.start_index = reader.readInt32();
                    break;
                case 3:
                    message.start_route_time = reader.readUint32();
                    break;
                case 4:
                    message.start_scene_time = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.start_pos, () => message.start_pos = dependency_4.Vector.deserialize(reader));
                    break;
                case 8:
                    message.is_started = reader.readBool();
                    break;
                case 9:
                    reader.readMessage(message.start_rot, () => message.start_rot = dependency_1.MathQuaternion.deserialize(reader));
                    break;
                case 10:
                    message.stop_scene_time = reader.readUint32();
                    break;
                case 11:
                    reader.readMessage(message.pos_offset, () => message.pos_offset = dependency_4.Vector.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.rot_offset, () => message.rot_offset = dependency_1.MathQuaternion.deserialize(reader));
                    break;
                case 13:
                    message.moving_platform_type = reader.readEnum();
                    break;
                case 14:
                    message.is_active = reader.readBool();
                    break;
                case 15:
                    reader.readMessage(message.route, () => message.route = dependency_3.Route.deserialize(reader));
                    break;
                case 16:
                    message.point_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlatformInfo.deserialize(bytes);
    }
}
exports.PlatformInfo = PlatformInfo;
_PlatformInfo_one_of_decls = new WeakMap();
