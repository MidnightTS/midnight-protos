// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "QuickUseWidgetRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SkyCrystalDetectorQuickUseResult } from "./SkyCrystalDetectorQuickUseResult";
import { ClientCollectorData } from "./ClientCollectorData";
import { OneoffGatherPointDetectorData } from "./OneoffGatherPointDetectorData";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 4265;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message QuickUseWidgetRsp
 */
export interface QuickUseWidgetRsp {
    /**
     * @generated from protobuf field: uint32 material_id = 11;
     */
    materialId: number;
    /**
     * @generated from protobuf field: int32 retcode = 12;
     */
    retcode: number;
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "detectorData";
        /**
         * @generated from protobuf field: OneoffGatherPointDetectorData detector_data = 14;
         */
        detectorData: OneoffGatherPointDetectorData;
    } | {
        oneofKind: "clientCollectorData";
        /**
         * @generated from protobuf field: ClientCollectorData client_collector_data = 10;
         */
        clientCollectorData: ClientCollectorData;
    } | {
        oneofKind: "skyCrystalDetectorQuickUseResult";
        /**
         * @generated from protobuf field: SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 172322;
         */
        skyCrystalDetectorQuickUseResult: SkyCrystalDetectorQuickUseResult;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class QuickUseWidgetRsp$Type extends MessageType<QuickUseWidgetRsp> {
    constructor() {
        super("QuickUseWidgetRsp", [
            { no: 11, name: "material_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "detector_data", kind: "message", oneof: "param", T: () => OneoffGatherPointDetectorData },
            { no: 10, name: "client_collector_data", kind: "message", oneof: "param", T: () => ClientCollectorData },
            { no: 172322, name: "sky_crystal_detector_quick_use_result", kind: "message", oneof: "param", T: () => SkyCrystalDetectorQuickUseResult }
        ]);
    }
    create(value?: PartialMessage<QuickUseWidgetRsp>): QuickUseWidgetRsp {
        const message = { materialId: 0, retcode: 0, param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuickUseWidgetRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickUseWidgetRsp): QuickUseWidgetRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 material_id */ 11:
                    message.materialId = reader.uint32();
                    break;
                case /* int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* OneoffGatherPointDetectorData detector_data */ 14:
                    message.param = {
                        oneofKind: "detectorData",
                        detectorData: OneoffGatherPointDetectorData.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).detectorData)
                    };
                    break;
                case /* ClientCollectorData client_collector_data */ 10:
                    message.param = {
                        oneofKind: "clientCollectorData",
                        clientCollectorData: ClientCollectorData.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).clientCollectorData)
                    };
                    break;
                case /* SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result */ 172322:
                    message.param = {
                        oneofKind: "skyCrystalDetectorQuickUseResult",
                        skyCrystalDetectorQuickUseResult: SkyCrystalDetectorQuickUseResult.internalBinaryRead(reader, reader.uint32(), options, (message.param as any).skyCrystalDetectorQuickUseResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickUseWidgetRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 material_id = 11; */
        if (message.materialId !== 0)
            writer.tag(11, WireType.Varint).uint32(message.materialId);
        /* int32 retcode = 12; */
        if (message.retcode !== 0)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* OneoffGatherPointDetectorData detector_data = 14; */
        if (message.param.oneofKind === "detectorData")
            OneoffGatherPointDetectorData.internalBinaryWrite(message.param.detectorData, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* ClientCollectorData client_collector_data = 10; */
        if (message.param.oneofKind === "clientCollectorData")
            ClientCollectorData.internalBinaryWrite(message.param.clientCollectorData, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* SkyCrystalDetectorQuickUseResult sky_crystal_detector_quick_use_result = 172322; */
        if (message.param.oneofKind === "skyCrystalDetectorQuickUseResult")
            SkyCrystalDetectorQuickUseResult.internalBinaryWrite(message.param.skyCrystalDetectorQuickUseResult, writer.tag(172322, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QuickUseWidgetRsp
 */
export const QuickUseWidgetRsp = new QuickUseWidgetRsp$Type();
