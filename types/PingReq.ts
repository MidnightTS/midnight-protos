/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PingReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PingReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        client_time?: number;
        ue_time?: number;
        total_tick_time?: number;
        sc_data?: Uint8Array;
        seq?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("client_time" in data && data.client_time != undefined) {
                this.client_time = data.client_time;
            }
            if ("ue_time" in data && data.ue_time != undefined) {
                this.ue_time = data.ue_time;
            }
            if ("total_tick_time" in data && data.total_tick_time != undefined) {
                this.total_tick_time = data.total_tick_time;
            }
            if ("sc_data" in data && data.sc_data != undefined) {
                this.sc_data = data.sc_data;
            }
            if ("seq" in data && data.seq != undefined) {
                this.seq = data.seq;
            }
        }
    }
    get client_time() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set client_time(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get ue_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set ue_time(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get total_tick_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set total_tick_time(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get sc_data() {
        return pb_1.Message.getFieldWithDefault(this, 10, new Uint8Array()) as Uint8Array;
    }
    set sc_data(value: Uint8Array) {
        pb_1.Message.setField(this, 10, value);
    }
    get seq() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set seq(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        client_time?: number;
        ue_time?: number;
        total_tick_time?: number;
        sc_data?: Uint8Array;
        seq?: number;
    }): PingReq {
        const message = new PingReq({});
        if (data.client_time != null) {
            message.client_time = data.client_time;
        }
        if (data.ue_time != null) {
            message.ue_time = data.ue_time;
        }
        if (data.total_tick_time != null) {
            message.total_tick_time = data.total_tick_time;
        }
        if (data.sc_data != null) {
            message.sc_data = data.sc_data;
        }
        if (data.seq != null) {
            message.seq = data.seq;
        }
        return message;
    }
    toObject() {
        const data: {
            client_time?: number;
            ue_time?: number;
            total_tick_time?: number;
            sc_data?: Uint8Array;
            seq?: number;
        } = {};
        if (this.client_time != null) {
            data.client_time = this.client_time;
        }
        if (this.ue_time != null) {
            data.ue_time = this.ue_time;
        }
        if (this.total_tick_time != null) {
            data.total_tick_time = this.total_tick_time;
        }
        if (this.sc_data != null) {
            data.sc_data = this.sc_data;
        }
        if (this.seq != null) {
            data.seq = this.seq;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.client_time != 0)
            writer.writeUint32(12, this.client_time);
        if (this.ue_time != 0)
            writer.writeFloat(14, this.ue_time);
        if (this.total_tick_time != 0)
            writer.writeDouble(6, this.total_tick_time);
        if (this.sc_data.length)
            writer.writeBytes(10, this.sc_data);
        if (this.seq != 0)
            writer.writeUint32(3, this.seq);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PingReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PingReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.client_time = reader.readUint32();
                    break;
                case 14:
                    message.ue_time = reader.readFloat();
                    break;
                case 6:
                    message.total_tick_time = reader.readDouble();
                    break;
                case 10:
                    message.sc_data = reader.readBytes();
                    break;
                case 3:
                    message.seq = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PingReq {
        return PingReq.deserialize(bytes);
    }
}
