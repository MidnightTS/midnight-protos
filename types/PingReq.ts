// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "PingReq.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 100;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 *   IS_ALLOW_CLIENT = 1;
 * }
 *
 * @generated from protobuf message PingReq
 */
export interface PingReq {
    /**
     * @generated from protobuf field: uint32 client_time = 6;
     */
    clientTime: number;
    /**
     * @generated from protobuf field: double total_tick_time = 9;
     */
    totalTickTime: number;
    /**
     * @generated from protobuf field: float ue_time = 2;
     */
    ueTime: number;
    /**
     * @generated from protobuf field: uint32 seq = 12;
     */
    seq: number;
    /**
     * @generated from protobuf field: bytes sc_data = 3;
     */
    scData: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class PingReq$Type extends MessageType<PingReq> {
    constructor() {
        super("PingReq", [
            { no: 6, name: "client_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "total_tick_time", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "ue_time", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "seq", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "sc_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PingReq>): PingReq {
        const message = { clientTime: 0, totalTickTime: 0, ueTime: 0, seq: 0, scData: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingReq): PingReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 client_time */ 6:
                    message.clientTime = reader.uint32();
                    break;
                case /* double total_tick_time */ 9:
                    message.totalTickTime = reader.double();
                    break;
                case /* float ue_time */ 2:
                    message.ueTime = reader.float();
                    break;
                case /* uint32 seq */ 12:
                    message.seq = reader.uint32();
                    break;
                case /* bytes sc_data */ 3:
                    message.scData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 client_time = 6; */
        if (message.clientTime !== 0)
            writer.tag(6, WireType.Varint).uint32(message.clientTime);
        /* double total_tick_time = 9; */
        if (message.totalTickTime !== 0)
            writer.tag(9, WireType.Bit64).double(message.totalTickTime);
        /* float ue_time = 2; */
        if (message.ueTime !== 0)
            writer.tag(2, WireType.Bit32).float(message.ueTime);
        /* uint32 seq = 12; */
        if (message.seq !== 0)
            writer.tag(12, WireType.Varint).uint32(message.seq);
        /* bytes sc_data = 3; */
        if (message.scData.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.scData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PingReq
 */
export const PingReq = new PingReq$Type();
