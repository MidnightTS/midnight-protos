"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AdjustTrackingInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdjustTrackingInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AdjustTrackingInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class AdjustTrackingInfo extends pb_1.Message {
    constructor(data) {
        super();
        _AdjustTrackingInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AdjustTrackingInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("event_token" in data && data.event_token != undefined) {
                this.event_token = data.event_token;
            }
            if ("adid" in data && data.adid != undefined) {
                this.adid = data.adid;
            }
            if ("idfa" in data && data.idfa != undefined) {
                this.idfa = data.idfa;
            }
            if ("app_token" in data && data.app_token != undefined) {
                this.app_token = data.app_token;
            }
            if ("gps_adid" in data && data.gps_adid != undefined) {
                this.gps_adid = data.gps_adid;
            }
            if ("fire_adid" in data && data.fire_adid != undefined) {
                this.fire_adid = data.fire_adid;
            }
        }
    }
    get event_token() {
        return pb_1.Message.getFieldWithDefault(this, 9, "");
    }
    set event_token(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get adid() {
        return pb_1.Message.getFieldWithDefault(this, 4, "");
    }
    set adid(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get idfa() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set idfa(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get app_token() {
        return pb_1.Message.getFieldWithDefault(this, 14, "");
    }
    set app_token(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get gps_adid() {
        return pb_1.Message.getFieldWithDefault(this, 3, "");
    }
    set gps_adid(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get fire_adid() {
        return pb_1.Message.getFieldWithDefault(this, 13, "");
    }
    set fire_adid(value) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data) {
        const message = new AdjustTrackingInfo({});
        if (data.event_token != null) {
            message.event_token = data.event_token;
        }
        if (data.adid != null) {
            message.adid = data.adid;
        }
        if (data.idfa != null) {
            message.idfa = data.idfa;
        }
        if (data.app_token != null) {
            message.app_token = data.app_token;
        }
        if (data.gps_adid != null) {
            message.gps_adid = data.gps_adid;
        }
        if (data.fire_adid != null) {
            message.fire_adid = data.fire_adid;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.event_token != null) {
            data.event_token = this.event_token;
        }
        if (this.adid != null) {
            data.adid = this.adid;
        }
        if (this.idfa != null) {
            data.idfa = this.idfa;
        }
        if (this.app_token != null) {
            data.app_token = this.app_token;
        }
        if (this.gps_adid != null) {
            data.gps_adid = this.gps_adid;
        }
        if (this.fire_adid != null) {
            data.fire_adid = this.fire_adid;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.event_token.length)
            writer.writeString(9, this.event_token);
        if (this.adid.length)
            writer.writeString(4, this.adid);
        if (this.idfa.length)
            writer.writeString(2, this.idfa);
        if (this.app_token.length)
            writer.writeString(14, this.app_token);
        if (this.gps_adid.length)
            writer.writeString(3, this.gps_adid);
        if (this.fire_adid.length)
            writer.writeString(13, this.fire_adid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdjustTrackingInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.event_token = reader.readString();
                    break;
                case 4:
                    message.adid = reader.readString();
                    break;
                case 2:
                    message.idfa = reader.readString();
                    break;
                case 14:
                    message.app_token = reader.readString();
                    break;
                case 3:
                    message.gps_adid = reader.readString();
                    break;
                case 13:
                    message.fire_adid = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AdjustTrackingInfo.deserialize(bytes);
    }
}
exports.AdjustTrackingInfo = AdjustTrackingInfo;
_AdjustTrackingInfo_one_of_decls = new WeakMap();
