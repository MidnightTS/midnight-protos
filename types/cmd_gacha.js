"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GachaSimpleInfoNotify = exports.GachaOpenWishNotify = exports.GachaWishRsp = exports.GachaWishReq = exports.DoGachaRsp = exports.GachaItem = exports.GachaTransferItem = exports.DoGachaReq = exports.GetGachaInfoRsp = exports.GachaInfo = exports.GachaUpInfo = exports.GetGachaInfoReq = exports.GachaSimpleInfoNotify_CmdId = exports.GachaOpenWishNotify_CmdId = exports.GachaWishRsp_CmdId = exports.GachaWishReq_CmdId = exports.DoGachaRsp_CmdId = exports.DoGachaReq_CmdId = exports.GetGachaInfoRsp_CmdId = exports.GetGachaInfoReq_CmdId = void 0;
// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_gacha.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const define_1 = require("./define");
/**
 * @generated from protobuf enum com.midnights.game.GetGachaInfoReq.CmdId
 */
var GetGachaInfoReq_CmdId;
(function (GetGachaInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetGachaInfoReq_CmdId[GetGachaInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1572;
     */
    GetGachaInfoReq_CmdId[GetGachaInfoReq_CmdId["CMD_ID"] = 1572] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetGachaInfoReq_CmdId[GetGachaInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetGachaInfoReq_CmdId[GetGachaInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetGachaInfoReq_CmdId[GetGachaInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetGachaInfoReq_CmdId = exports.GetGachaInfoReq_CmdId || (exports.GetGachaInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetGachaInfoRsp.CmdId
 */
var GetGachaInfoRsp_CmdId;
(function (GetGachaInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetGachaInfoRsp_CmdId[GetGachaInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1598;
     */
    GetGachaInfoRsp_CmdId[GetGachaInfoRsp_CmdId["CMD_ID"] = 1598] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetGachaInfoRsp_CmdId[GetGachaInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetGachaInfoRsp_CmdId[GetGachaInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetGachaInfoRsp_CmdId = exports.GetGachaInfoRsp_CmdId || (exports.GetGachaInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DoGachaReq.CmdId
 */
var DoGachaReq_CmdId;
(function (DoGachaReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoGachaReq_CmdId[DoGachaReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1512;
     */
    DoGachaReq_CmdId[DoGachaReq_CmdId["CMD_ID"] = 1512] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoGachaReq_CmdId[DoGachaReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoGachaReq_CmdId[DoGachaReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoGachaReq_CmdId[DoGachaReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(DoGachaReq_CmdId = exports.DoGachaReq_CmdId || (exports.DoGachaReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DoGachaRsp.CmdId
 */
var DoGachaRsp_CmdId;
(function (DoGachaRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoGachaRsp_CmdId[DoGachaRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1535;
     */
    DoGachaRsp_CmdId[DoGachaRsp_CmdId["CMD_ID"] = 1535] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoGachaRsp_CmdId[DoGachaRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoGachaRsp_CmdId[DoGachaRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DoGachaRsp_CmdId = exports.DoGachaRsp_CmdId || (exports.DoGachaRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaWishReq.CmdId
 */
var GachaWishReq_CmdId;
(function (GachaWishReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaWishReq_CmdId[GachaWishReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1507;
     */
    GachaWishReq_CmdId[GachaWishReq_CmdId["CMD_ID"] = 1507] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaWishReq_CmdId[GachaWishReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaWishReq_CmdId[GachaWishReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaWishReq_CmdId[GachaWishReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaWishReq_CmdId = exports.GachaWishReq_CmdId || (exports.GachaWishReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaWishRsp.CmdId
 */
var GachaWishRsp_CmdId;
(function (GachaWishRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaWishRsp_CmdId[GachaWishRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1521;
     */
    GachaWishRsp_CmdId[GachaWishRsp_CmdId["CMD_ID"] = 1521] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaWishRsp_CmdId[GachaWishRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaWishRsp_CmdId[GachaWishRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaWishRsp_CmdId = exports.GachaWishRsp_CmdId || (exports.GachaWishRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaOpenWishNotify.CmdId
 */
var GachaOpenWishNotify_CmdId;
(function (GachaOpenWishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaOpenWishNotify_CmdId[GachaOpenWishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1503;
     */
    GachaOpenWishNotify_CmdId[GachaOpenWishNotify_CmdId["CMD_ID"] = 1503] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaOpenWishNotify_CmdId[GachaOpenWishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaOpenWishNotify_CmdId[GachaOpenWishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaOpenWishNotify_CmdId[GachaOpenWishNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaOpenWishNotify_CmdId = exports.GachaOpenWishNotify_CmdId || (exports.GachaOpenWishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaSimpleInfoNotify.CmdId
 */
var GachaSimpleInfoNotify_CmdId;
(function (GachaSimpleInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaSimpleInfoNotify_CmdId[GachaSimpleInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 1590;
     */
    GachaSimpleInfoNotify_CmdId[GachaSimpleInfoNotify_CmdId["CMD_ID"] = 1590] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaSimpleInfoNotify_CmdId[GachaSimpleInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaSimpleInfoNotify_CmdId[GachaSimpleInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaSimpleInfoNotify_CmdId = exports.GachaSimpleInfoNotify_CmdId || (exports.GachaSimpleInfoNotify_CmdId = {}));
// @generated message type with reflection information, may provide speed optimized methods
class GetGachaInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetGachaInfoReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGachaInfoReq
 */
exports.GetGachaInfoReq = new GetGachaInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaUpInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaUpInfo", [
            { no: 7, name: "item_parent_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_parent_type */ 7:
                    message.itemParentType = reader.uint32();
                    break;
                case /* repeated uint32 item_id_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 item_parent_type = 7; */
        if (message.itemParentType !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.itemParentType);
        /* repeated uint32 item_id_list = 15; */
        if (message.itemIdList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaUpInfo
 */
exports.GachaUpInfo = new GachaUpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaInfo", [
            { no: 2, name: "ten_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1875, name: "display_up4_item_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 469, name: "cur_schedule_daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1233, name: "gacha_up_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GachaUpInfo },
            { no: 8, name: "gacha_prob_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "gacha_prefab_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1637, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1222, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1481, name: "gacha_prob_url_oversea", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "left_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2006, name: "display_up5_item_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "gacha_times_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 733, name: "is_new_wish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "ten_cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_preview_prefab_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1819, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 736, name: "title_textmap", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1854, name: "gacha_record_url_oversea", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "gacha_sort_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "gacha_record_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { displayUp4ItemList: [], gachaUpInfoList: [], displayUp5ItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 ten_cost_item_id */ 2:
                    message.tenCostItemId = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 14:
                    message.endTime = reader.uint32();
                    break;
                case /* repeated uint32 display_up4_item_list */ 1875:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.displayUp4ItemList.push(reader.uint32());
                    else
                        message.displayUp4ItemList.push(reader.uint32());
                    break;
                case /* optional uint32 cur_schedule_daily_gacha_times */ 469:
                    message.curScheduleDailyGachaTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaUpInfo gacha_up_info_list */ 1233:
                    message.gachaUpInfoList.push(exports.GachaUpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string gacha_prob_url */ 8:
                    message.gachaProbUrl = reader.string();
                    break;
                case /* optional string gacha_prefab_path */ 15:
                    message.gachaPrefabPath = reader.string();
                    break;
                case /* optional uint32 wish_item_id */ 1637:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 1:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 1222:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional string gacha_prob_url_oversea */ 1481:
                    message.gachaProbUrlOversea = reader.string();
                    break;
                case /* optional uint32 gacha_type */ 13:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 left_gacha_times */ 5:
                    message.leftGachaTimes = reader.uint32();
                    break;
                case /* repeated uint32 display_up5_item_list */ 2006:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.displayUp5ItemList.push(reader.uint32());
                    else
                        message.displayUp5ItemList.push(reader.uint32());
                    break;
                case /* optional uint32 gacha_times_limit */ 11:
                    message.gachaTimesLimit = reader.uint32();
                    break;
                case /* optional uint32 cost_item_num */ 3:
                    message.costItemNum = reader.uint32();
                    break;
                case /* optional bool is_new_wish */ 733:
                    message.isNewWish = reader.bool();
                    break;
                case /* optional uint32 cost_item_id */ 9:
                    message.costItemId = reader.uint32();
                    break;
                case /* optional uint32 ten_cost_item_num */ 6:
                    message.tenCostItemNum = reader.uint32();
                    break;
                case /* optional string gacha_preview_prefab_path */ 4:
                    message.gachaPreviewPrefabPath = reader.string();
                    break;
                case /* optional uint32 wish_progress */ 1819:
                    message.wishProgress = reader.uint32();
                    break;
                case /* optional string title_textmap */ 736:
                    message.titleTextmap = reader.string();
                    break;
                case /* optional string gacha_record_url_oversea */ 1854:
                    message.gachaRecordUrlOversea = reader.string();
                    break;
                case /* optional uint32 gacha_sort_id */ 7:
                    message.gachaSortId = reader.uint32();
                    break;
                case /* optional string gacha_record_url */ 12:
                    message.gachaRecordUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 ten_cost_item_id = 2; */
        if (message.tenCostItemId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.tenCostItemId);
        /* optional uint32 end_time = 14; */
        if (message.endTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.endTime);
        /* repeated uint32 display_up4_item_list = 1875; */
        if (message.displayUp4ItemList.length) {
            writer.tag(1875, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.displayUp4ItemList.length; i++)
                writer.uint32(message.displayUp4ItemList[i]);
            writer.join();
        }
        /* optional uint32 cur_schedule_daily_gacha_times = 469; */
        if (message.curScheduleDailyGachaTimes !== undefined)
            writer.tag(469, runtime_1.WireType.Varint).uint32(message.curScheduleDailyGachaTimes);
        /* repeated com.midnights.game.GachaUpInfo gacha_up_info_list = 1233; */
        for (let i = 0; i < message.gachaUpInfoList.length; i++)
            exports.GachaUpInfo.internalBinaryWrite(message.gachaUpInfoList[i], writer.tag(1233, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional string gacha_prob_url = 8; */
        if (message.gachaProbUrl !== undefined)
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.gachaProbUrl);
        /* optional string gacha_prefab_path = 15; */
        if (message.gachaPrefabPath !== undefined)
            writer.tag(15, runtime_1.WireType.LengthDelimited).string(message.gachaPrefabPath);
        /* optional uint32 wish_item_id = 1637; */
        if (message.wishItemId !== undefined)
            writer.tag(1637, runtime_1.WireType.Varint).uint32(message.wishItemId);
        /* optional uint32 begin_time = 1; */
        if (message.beginTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.beginTime);
        /* optional uint32 wish_max_progress = 1222; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(1222, runtime_1.WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional string gacha_prob_url_oversea = 1481; */
        if (message.gachaProbUrlOversea !== undefined)
            writer.tag(1481, runtime_1.WireType.LengthDelimited).string(message.gachaProbUrlOversea);
        /* optional uint32 gacha_type = 13; */
        if (message.gachaType !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 left_gacha_times = 5; */
        if (message.leftGachaTimes !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.leftGachaTimes);
        /* repeated uint32 display_up5_item_list = 2006; */
        if (message.displayUp5ItemList.length) {
            writer.tag(2006, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.displayUp5ItemList.length; i++)
                writer.uint32(message.displayUp5ItemList[i]);
            writer.join();
        }
        /* optional uint32 gacha_times_limit = 11; */
        if (message.gachaTimesLimit !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.gachaTimesLimit);
        /* optional uint32 cost_item_num = 3; */
        if (message.costItemNum !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.costItemNum);
        /* optional bool is_new_wish = 733; */
        if (message.isNewWish !== undefined)
            writer.tag(733, runtime_1.WireType.Varint).bool(message.isNewWish);
        /* optional uint32 cost_item_id = 9; */
        if (message.costItemId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.costItemId);
        /* optional uint32 ten_cost_item_num = 6; */
        if (message.tenCostItemNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.tenCostItemNum);
        /* optional string gacha_preview_prefab_path = 4; */
        if (message.gachaPreviewPrefabPath !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.gachaPreviewPrefabPath);
        /* optional uint32 wish_progress = 1819; */
        if (message.wishProgress !== undefined)
            writer.tag(1819, runtime_1.WireType.Varint).uint32(message.wishProgress);
        /* optional string title_textmap = 736; */
        if (message.titleTextmap !== undefined)
            writer.tag(736, runtime_1.WireType.LengthDelimited).string(message.titleTextmap);
        /* optional string gacha_record_url_oversea = 1854; */
        if (message.gachaRecordUrlOversea !== undefined)
            writer.tag(1854, runtime_1.WireType.LengthDelimited).string(message.gachaRecordUrlOversea);
        /* optional uint32 gacha_sort_id = 7; */
        if (message.gachaSortId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.gachaSortId);
        /* optional string gacha_record_url = 12; */
        if (message.gachaRecordUrl !== undefined)
            writer.tag(12, runtime_1.WireType.LengthDelimited).string(message.gachaRecordUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaInfo
 */
exports.GachaInfo = new GachaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGachaInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetGachaInfoRsp", [
            { no: 6, name: "is_under_general_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_under_minors_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GachaInfo }
        ]);
    }
    create(value) {
        const message = { gachaInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_under_general_restrict */ 6:
                    message.isUnderGeneralRestrict = reader.bool();
                    break;
                case /* optional uint32 gacha_random */ 9:
                    message.gachaRandom = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_under_minors_restrict */ 2:
                    message.isUnderMinorsRestrict = reader.bool();
                    break;
                case /* optional uint32 daily_gacha_times */ 5:
                    message.dailyGachaTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaInfo gacha_info_list */ 13:
                    message.gachaInfoList.push(exports.GachaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_under_general_restrict = 6; */
        if (message.isUnderGeneralRestrict !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isUnderGeneralRestrict);
        /* optional uint32 gacha_random = 9; */
        if (message.gachaRandom !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.gachaRandom);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_under_minors_restrict = 2; */
        if (message.isUnderMinorsRestrict !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isUnderMinorsRestrict);
        /* optional uint32 daily_gacha_times = 5; */
        if (message.dailyGachaTimes !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.dailyGachaTimes);
        /* repeated com.midnights.game.GachaInfo gacha_info_list = 13; */
        for (let i = 0; i < message.gachaInfoList.length; i++)
            exports.GachaInfo.internalBinaryWrite(message.gachaInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGachaInfoRsp
 */
exports.GetGachaInfoRsp = new GetGachaInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoGachaReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DoGachaReq", [
            { no: 10, name: "gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_tag", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_times */ 10:
                    message.gachaTimes = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 7:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 gacha_type */ 14:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_random */ 13:
                    message.gachaRandom = reader.uint32();
                    break;
                case /* optional string gacha_tag */ 4:
                    message.gachaTag = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gacha_times = 10; */
        if (message.gachaTimes !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.gachaTimes);
        /* optional uint32 gacha_schedule_id = 7; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 gacha_type = 14; */
        if (message.gachaType !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_random = 13; */
        if (message.gachaRandom !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.gachaRandom);
        /* optional string gacha_tag = 4; */
        if (message.gachaTag !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.gachaTag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoGachaReq
 */
exports.DoGachaReq = new DoGachaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaTransferItem$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaTransferItem", [
            { no: 3, name: "item", kind: "message", T: () => define_1.ItemParam },
            { no: 1, name: "is_transfer_item_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ItemParam item */ 3:
                    message.item = define_1.ItemParam.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* optional bool is_transfer_item_new */ 1:
                    message.isTransferItemNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ItemParam item = 3; */
        if (message.item)
            define_1.ItemParam.internalBinaryWrite(message.item, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfer_item_new = 1; */
        if (message.isTransferItemNew !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isTransferItemNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaTransferItem
 */
exports.GachaTransferItem = new GachaTransferItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaItem$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaItem", [
            { no: 7, name: "gacha_item", kind: "message", T: () => define_1.ItemParam },
            { no: 6, name: "is_gacha_item_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_flash_card", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "token_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_1.ItemParam },
            { no: 12, name: "transfer_items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GachaTransferItem }
        ]);
    }
    create(value) {
        const message = { tokenItemList: [], transferItems: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ItemParam gacha_item */ 7:
                    message.gachaItem = define_1.ItemParam.internalBinaryRead(reader, reader.uint32(), options, message.gachaItem);
                    break;
                case /* optional bool is_gacha_item_new */ 6:
                    message.isGachaItemNew = reader.bool();
                    break;
                case /* optional bool is_flash_card */ 8:
                    message.isFlashCard = reader.bool();
                    break;
                case /* repeated com.midnights.game.ItemParam token_item_list */ 9:
                    message.tokenItemList.push(define_1.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.GachaTransferItem transfer_items */ 12:
                    message.transferItems.push(exports.GachaTransferItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ItemParam gacha_item = 7; */
        if (message.gachaItem)
            define_1.ItemParam.internalBinaryWrite(message.gachaItem, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_gacha_item_new = 6; */
        if (message.isGachaItemNew !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isGachaItemNew);
        /* optional bool is_flash_card = 8; */
        if (message.isFlashCard !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isFlashCard);
        /* repeated com.midnights.game.ItemParam token_item_list = 9; */
        for (let i = 0; i < message.tokenItemList.length; i++)
            define_1.ItemParam.internalBinaryWrite(message.tokenItemList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.GachaTransferItem transfer_items = 12; */
        for (let i = 0; i < message.transferItems.length; i++)
            exports.GachaTransferItem.internalBinaryWrite(message.transferItems[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaItem
 */
exports.GachaItem = new GachaItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoGachaRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DoGachaRsp", [
            { no: 155, name: "cur_schedule_daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "ten_cost_item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "gacha_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GachaItem },
            { no: 7, name: "ten_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1435, name: "is_under_minors_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1868, name: "is_under_general_restrict", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "gacha_times_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1240, name: "daily_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "left_gacha_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "new_gacha_random", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { gachaItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_schedule_daily_gacha_times */ 155:
                    message.curScheduleDailyGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 cost_item_num */ 10:
                    message.costItemNum = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 9:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_item_id */ 8:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 ten_cost_item_num */ 3:
                    message.tenCostItemNum = reader.uint32();
                    break;
                case /* optional uint32 wish_progress */ 2:
                    message.wishProgress = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GachaItem gacha_item_list */ 15:
                    message.gachaItemList.push(exports.GachaItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 ten_cost_item_id */ 7:
                    message.tenCostItemId = reader.uint32();
                    break;
                case /* optional uint32 gacha_times */ 4:
                    message.gachaTimes = reader.uint32();
                    break;
                case /* optional bool is_under_minors_restrict */ 1435:
                    message.isUnderMinorsRestrict = reader.bool();
                    break;
                case /* optional bool is_under_general_restrict */ 1868:
                    message.isUnderGeneralRestrict = reader.bool();
                    break;
                case /* optional uint32 gacha_type */ 12:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_times_limit */ 1:
                    message.gachaTimesLimit = reader.uint32();
                    break;
                case /* optional uint32 cost_item_id */ 14:
                    message.costItemId = reader.uint32();
                    break;
                case /* optional uint32 daily_gacha_times */ 1240:
                    message.dailyGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 left_gacha_times */ 6:
                    message.leftGachaTimes = reader.uint32();
                    break;
                case /* optional uint32 new_gacha_random */ 11:
                    message.newGachaRandom = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 5:
                    message.gachaScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_schedule_daily_gacha_times = 155; */
        if (message.curScheduleDailyGachaTimes !== undefined)
            writer.tag(155, runtime_1.WireType.Varint).uint32(message.curScheduleDailyGachaTimes);
        /* optional uint32 cost_item_num = 10; */
        if (message.costItemNum !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.costItemNum);
        /* optional uint32 wish_max_progress = 9; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 wish_item_id = 8; */
        if (message.wishItemId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.wishItemId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 ten_cost_item_num = 3; */
        if (message.tenCostItemNum !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.tenCostItemNum);
        /* optional uint32 wish_progress = 2; */
        if (message.wishProgress !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.wishProgress);
        /* repeated com.midnights.game.GachaItem gacha_item_list = 15; */
        for (let i = 0; i < message.gachaItemList.length; i++)
            exports.GachaItem.internalBinaryWrite(message.gachaItemList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 ten_cost_item_id = 7; */
        if (message.tenCostItemId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.tenCostItemId);
        /* optional uint32 gacha_times = 4; */
        if (message.gachaTimes !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.gachaTimes);
        /* optional bool is_under_minors_restrict = 1435; */
        if (message.isUnderMinorsRestrict !== undefined)
            writer.tag(1435, runtime_1.WireType.Varint).bool(message.isUnderMinorsRestrict);
        /* optional bool is_under_general_restrict = 1868; */
        if (message.isUnderGeneralRestrict !== undefined)
            writer.tag(1868, runtime_1.WireType.Varint).bool(message.isUnderGeneralRestrict);
        /* optional uint32 gacha_type = 12; */
        if (message.gachaType !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_times_limit = 1; */
        if (message.gachaTimesLimit !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.gachaTimesLimit);
        /* optional uint32 cost_item_id = 14; */
        if (message.costItemId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.costItemId);
        /* optional uint32 daily_gacha_times = 1240; */
        if (message.dailyGachaTimes !== undefined)
            writer.tag(1240, runtime_1.WireType.Varint).uint32(message.dailyGachaTimes);
        /* optional uint32 left_gacha_times = 6; */
        if (message.leftGachaTimes !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.leftGachaTimes);
        /* optional uint32 new_gacha_random = 11; */
        if (message.newGachaRandom !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.newGachaRandom);
        /* optional uint32 gacha_schedule_id = 5; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.gachaScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoGachaRsp
 */
exports.DoGachaRsp = new DoGachaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaWishReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaWishReq", [
            { no: 14, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_schedule_id */ 14:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 gacha_type */ 13:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 4:
                    message.itemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gacha_schedule_id = 14; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 gacha_type = 13; */
        if (message.gachaType !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 item_id = 4; */
        if (message.itemId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaWishReq
 */
exports.GachaWishReq = new GachaWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaWishRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaWishRsp", [
            { no: 8, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "wish_max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "wish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "wish_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_type */ 8:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 7:
                    message.gachaScheduleId = reader.uint32();
                    break;
                case /* optional uint32 wish_max_progress */ 2:
                    message.wishMaxProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_progress */ 5:
                    message.wishProgress = reader.uint32();
                    break;
                case /* optional uint32 wish_item_id */ 3:
                    message.wishItemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gacha_type = 8; */
        if (message.gachaType !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_schedule_id = 7; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.gachaScheduleId);
        /* optional uint32 wish_max_progress = 2; */
        if (message.wishMaxProgress !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.wishMaxProgress);
        /* optional uint32 wish_progress = 5; */
        if (message.wishProgress !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.wishProgress);
        /* optional uint32 wish_item_id = 3; */
        if (message.wishItemId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.wishItemId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaWishRsp
 */
exports.GachaWishRsp = new GachaWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaOpenWishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaOpenWishNotify", [
            { no: 2, name: "gacha_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "gacha_schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gacha_type */ 2:
                    message.gachaType = reader.uint32();
                    break;
                case /* optional uint32 gacha_schedule_id */ 9:
                    message.gachaScheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gacha_type = 2; */
        if (message.gachaType !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.gachaType);
        /* optional uint32 gacha_schedule_id = 9; */
        if (message.gachaScheduleId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.gachaScheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaOpenWishNotify
 */
exports.GachaOpenWishNotify = new GachaOpenWishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaSimpleInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaSimpleInfoNotify", [
            { no: 5, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 5:
                    message.isNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new = 5; */
        if (message.isNew !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaSimpleInfoNotify
 */
exports.GachaSimpleInfoNotify = new GachaSimpleInfoNotify$Type();
