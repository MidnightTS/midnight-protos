"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SceneGadgetInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneGadgetInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneGadgetInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./AbilityGadgetInfo");
const dependency_2 = require("./BlossomChestInfo");
const dependency_3 = require("./BossChestInfo");
const dependency_4 = require("./ClientGadgetInfo");
const dependency_5 = require("./CustomGadgetTreeInfo");
const dependency_6 = require("./DeshretObeliskGadgetInfo");
const dependency_7 = require("./EchoShellInfo");
const dependency_8 = require("./FishPoolInfo");
const dependency_9 = require("./FoundationInfo");
const dependency_10 = require("./GadgetBornType");
const dependency_11 = require("./GadgetGeneralRewardInfo");
const dependency_12 = require("./GadgetPlayInfo");
const dependency_13 = require("./GatherGadgetInfo");
const dependency_14 = require("./Item");
const dependency_15 = require("./MpPlayRewardInfo");
const dependency_16 = require("./NightCrowGadgetInfo");
const dependency_17 = require("./OfferingInfo");
const dependency_18 = require("./PlatformInfo");
const dependency_19 = require("./RoguelikeGadgetInfo");
const dependency_20 = require("./ScreenInfo");
const dependency_21 = require("./StatueGadgetInfo");
const dependency_22 = require("./VehicleInfo");
const dependency_23 = require("./WeatherInfo");
const dependency_24 = require("./WorktopInfo");
const pb_1 = require("google-protobuf");
class SceneGadgetInfo extends pb_1.Message {
    constructor(data) {
        super();
        _SceneGadgetInfo_one_of_decls.set(this, [[12, 13, 14, 15, 17, 18, 19, 20, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [24], __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("gadget_id" in data && data.gadget_id != undefined) {
                this.gadget_id = data.gadget_id;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("owner_entity_id" in data && data.owner_entity_id != undefined) {
                this.owner_entity_id = data.owner_entity_id;
            }
            if ("born_type" in data && data.born_type != undefined) {
                this.born_type = data.born_type;
            }
            if ("gadget_state" in data && data.gadget_state != undefined) {
                this.gadget_state = data.gadget_state;
            }
            if ("gadget_type" in data && data.gadget_type != undefined) {
                this.gadget_type = data.gadget_type;
            }
            if ("is_show_cutscene" in data && data.is_show_cutscene != undefined) {
                this.is_show_cutscene = data.is_show_cutscene;
            }
            if ("authority_peer_id" in data && data.authority_peer_id != undefined) {
                this.authority_peer_id = data.authority_peer_id;
            }
            if ("is_enable_interact" in data && data.is_enable_interact != undefined) {
                this.is_enable_interact = data.is_enable_interact;
            }
            if ("interact_id" in data && data.interact_id != undefined) {
                this.interact_id = data.interact_id;
            }
            if ("mark_flag" in data && data.mark_flag != undefined) {
                this.mark_flag = data.mark_flag;
            }
            if ("prop_owner_entity_id" in data && data.prop_owner_entity_id != undefined) {
                this.prop_owner_entity_id = data.prop_owner_entity_id;
            }
            if ("platform" in data && data.platform != undefined) {
                this.platform = data.platform;
            }
            if ("interact_uid_list" in data && data.interact_uid_list != undefined) {
                this.interact_uid_list = data.interact_uid_list;
            }
            if ("draft_id" in data && data.draft_id != undefined) {
                this.draft_id = data.draft_id;
            }
            if ("gadget_talk_state" in data && data.gadget_talk_state != undefined) {
                this.gadget_talk_state = data.gadget_talk_state;
            }
            if ("play_info" in data && data.play_info != undefined) {
                this.play_info = data.play_info;
            }
            if ("trifle_item" in data && data.trifle_item != undefined) {
                this.trifle_item = data.trifle_item;
            }
            if ("gather_gadget" in data && data.gather_gadget != undefined) {
                this.gather_gadget = data.gather_gadget;
            }
            if ("worktop" in data && data.worktop != undefined) {
                this.worktop = data.worktop;
            }
            if ("client_gadget" in data && data.client_gadget != undefined) {
                this.client_gadget = data.client_gadget;
            }
            if ("weather" in data && data.weather != undefined) {
                this.weather = data.weather;
            }
            if ("ability_gadget" in data && data.ability_gadget != undefined) {
                this.ability_gadget = data.ability_gadget;
            }
            if ("statue_gadget" in data && data.statue_gadget != undefined) {
                this.statue_gadget = data.statue_gadget;
            }
            if ("boss_chest" in data && data.boss_chest != undefined) {
                this.boss_chest = data.boss_chest;
            }
            if ("blossom_chest" in data && data.blossom_chest != undefined) {
                this.blossom_chest = data.blossom_chest;
            }
            if ("mp_play_reward" in data && data.mp_play_reward != undefined) {
                this.mp_play_reward = data.mp_play_reward;
            }
            if ("general_reward" in data && data.general_reward != undefined) {
                this.general_reward = data.general_reward;
            }
            if ("offering_info" in data && data.offering_info != undefined) {
                this.offering_info = data.offering_info;
            }
            if ("foundation_info" in data && data.foundation_info != undefined) {
                this.foundation_info = data.foundation_info;
            }
            if ("vehicle_info" in data && data.vehicle_info != undefined) {
                this.vehicle_info = data.vehicle_info;
            }
            if ("shell_info" in data && data.shell_info != undefined) {
                this.shell_info = data.shell_info;
            }
            if ("screen_info" in data && data.screen_info != undefined) {
                this.screen_info = data.screen_info;
            }
            if ("fish_pool_info" in data && data.fish_pool_info != undefined) {
                this.fish_pool_info = data.fish_pool_info;
            }
            if ("custom_gadget_tree_info" in data && data.custom_gadget_tree_info != undefined) {
                this.custom_gadget_tree_info = data.custom_gadget_tree_info;
            }
            if ("roguelike_gadget_info" in data && data.roguelike_gadget_info != undefined) {
                this.roguelike_gadget_info = data.roguelike_gadget_info;
            }
            if ("night_crow_gadget_info" in data && data.night_crow_gadget_info != undefined) {
                this.night_crow_gadget_info = data.night_crow_gadget_info;
            }
            if ("deshret_obelisk_gadget_info" in data && data.deshret_obelisk_gadget_info != undefined) {
                this.deshret_obelisk_gadget_info = data.deshret_obelisk_gadget_info;
            }
        }
    }
    get gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set gadget_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set group_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set config_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get owner_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set owner_entity_id(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get born_type() {
        return pb_1.Message.getFieldWithDefault(this, 5, dependency_10.GadgetBornType.GADGET_BORN_TYPE_NONE);
    }
    set born_type(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get gadget_state() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set gadget_state(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get gadget_type() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set gadget_type(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get is_show_cutscene() {
        return pb_1.Message.getFieldWithDefault(this, 8, false);
    }
    set is_show_cutscene(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get authority_peer_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set authority_peer_id(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get is_enable_interact() {
        return pb_1.Message.getFieldWithDefault(this, 10, false);
    }
    set is_enable_interact(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get interact_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set interact_id(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get mark_flag() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0);
    }
    set mark_flag(value) {
        pb_1.Message.setField(this, 21, value);
    }
    get prop_owner_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0);
    }
    set prop_owner_entity_id(value) {
        pb_1.Message.setField(this, 22, value);
    }
    get platform() {
        return pb_1.Message.getWrapperField(this, dependency_18.PlatformInfo, 23);
    }
    set platform(value) {
        pb_1.Message.setWrapperField(this, 23, value);
    }
    get has_platform() {
        return pb_1.Message.getField(this, 23) != null;
    }
    get interact_uid_list() {
        return pb_1.Message.getFieldWithDefault(this, 24, []);
    }
    set interact_uid_list(value) {
        pb_1.Message.setField(this, 24, value);
    }
    get draft_id() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0);
    }
    set draft_id(value) {
        pb_1.Message.setField(this, 25, value);
    }
    get gadget_talk_state() {
        return pb_1.Message.getFieldWithDefault(this, 26, 0);
    }
    set gadget_talk_state(value) {
        pb_1.Message.setField(this, 26, value);
    }
    get play_info() {
        return pb_1.Message.getWrapperField(this, dependency_12.GadgetPlayInfo, 100);
    }
    set play_info(value) {
        pb_1.Message.setWrapperField(this, 100, value);
    }
    get has_play_info() {
        return pb_1.Message.getField(this, 100) != null;
    }
    get trifle_item() {
        return pb_1.Message.getWrapperField(this, dependency_14.Item, 12);
    }
    set trifle_item(value) {
        pb_1.Message.setOneofWrapperField(this, 12, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_trifle_item() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get gather_gadget() {
        return pb_1.Message.getWrapperField(this, dependency_13.GatherGadgetInfo, 13);
    }
    set gather_gadget(value) {
        pb_1.Message.setOneofWrapperField(this, 13, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_gather_gadget() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get worktop() {
        return pb_1.Message.getWrapperField(this, dependency_24.WorktopInfo, 14);
    }
    set worktop(value) {
        pb_1.Message.setOneofWrapperField(this, 14, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_worktop() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get client_gadget() {
        return pb_1.Message.getWrapperField(this, dependency_4.ClientGadgetInfo, 15);
    }
    set client_gadget(value) {
        pb_1.Message.setOneofWrapperField(this, 15, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_client_gadget() {
        return pb_1.Message.getField(this, 15) != null;
    }
    get weather() {
        return pb_1.Message.getWrapperField(this, dependency_23.WeatherInfo, 17);
    }
    set weather(value) {
        pb_1.Message.setOneofWrapperField(this, 17, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_weather() {
        return pb_1.Message.getField(this, 17) != null;
    }
    get ability_gadget() {
        return pb_1.Message.getWrapperField(this, dependency_1.AbilityGadgetInfo, 18);
    }
    set ability_gadget(value) {
        pb_1.Message.setOneofWrapperField(this, 18, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_ability_gadget() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get statue_gadget() {
        return pb_1.Message.getWrapperField(this, dependency_21.StatueGadgetInfo, 19);
    }
    set statue_gadget(value) {
        pb_1.Message.setOneofWrapperField(this, 19, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_statue_gadget() {
        return pb_1.Message.getField(this, 19) != null;
    }
    get boss_chest() {
        return pb_1.Message.getWrapperField(this, dependency_3.BossChestInfo, 20);
    }
    set boss_chest(value) {
        pb_1.Message.setOneofWrapperField(this, 20, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_boss_chest() {
        return pb_1.Message.getField(this, 20) != null;
    }
    get blossom_chest() {
        return pb_1.Message.getWrapperField(this, dependency_2.BlossomChestInfo, 41);
    }
    set blossom_chest(value) {
        pb_1.Message.setOneofWrapperField(this, 41, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_blossom_chest() {
        return pb_1.Message.getField(this, 41) != null;
    }
    get mp_play_reward() {
        return pb_1.Message.getWrapperField(this, dependency_15.MpPlayRewardInfo, 42);
    }
    set mp_play_reward(value) {
        pb_1.Message.setOneofWrapperField(this, 42, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_mp_play_reward() {
        return pb_1.Message.getField(this, 42) != null;
    }
    get general_reward() {
        return pb_1.Message.getWrapperField(this, dependency_11.GadgetGeneralRewardInfo, 43);
    }
    set general_reward(value) {
        pb_1.Message.setOneofWrapperField(this, 43, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_general_reward() {
        return pb_1.Message.getField(this, 43) != null;
    }
    get offering_info() {
        return pb_1.Message.getWrapperField(this, dependency_17.OfferingInfo, 44);
    }
    set offering_info(value) {
        pb_1.Message.setOneofWrapperField(this, 44, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_offering_info() {
        return pb_1.Message.getField(this, 44) != null;
    }
    get foundation_info() {
        return pb_1.Message.getWrapperField(this, dependency_9.FoundationInfo, 45);
    }
    set foundation_info(value) {
        pb_1.Message.setOneofWrapperField(this, 45, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_foundation_info() {
        return pb_1.Message.getField(this, 45) != null;
    }
    get vehicle_info() {
        return pb_1.Message.getWrapperField(this, dependency_22.VehicleInfo, 46);
    }
    set vehicle_info(value) {
        pb_1.Message.setOneofWrapperField(this, 46, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_vehicle_info() {
        return pb_1.Message.getField(this, 46) != null;
    }
    get shell_info() {
        return pb_1.Message.getWrapperField(this, dependency_7.EchoShellInfo, 47);
    }
    set shell_info(value) {
        pb_1.Message.setOneofWrapperField(this, 47, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_shell_info() {
        return pb_1.Message.getField(this, 47) != null;
    }
    get screen_info() {
        return pb_1.Message.getWrapperField(this, dependency_20.ScreenInfo, 48);
    }
    set screen_info(value) {
        pb_1.Message.setOneofWrapperField(this, 48, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_screen_info() {
        return pb_1.Message.getField(this, 48) != null;
    }
    get fish_pool_info() {
        return pb_1.Message.getWrapperField(this, dependency_8.FishPoolInfo, 59);
    }
    set fish_pool_info(value) {
        pb_1.Message.setOneofWrapperField(this, 59, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_fish_pool_info() {
        return pb_1.Message.getField(this, 59) != null;
    }
    get custom_gadget_tree_info() {
        return pb_1.Message.getWrapperField(this, dependency_5.CustomGadgetTreeInfo, 60);
    }
    set custom_gadget_tree_info(value) {
        pb_1.Message.setOneofWrapperField(this, 60, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_custom_gadget_tree_info() {
        return pb_1.Message.getField(this, 60) != null;
    }
    get roguelike_gadget_info() {
        return pb_1.Message.getWrapperField(this, dependency_19.RoguelikeGadgetInfo, 61);
    }
    set roguelike_gadget_info(value) {
        pb_1.Message.setOneofWrapperField(this, 61, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_roguelike_gadget_info() {
        return pb_1.Message.getField(this, 61) != null;
    }
    get night_crow_gadget_info() {
        return pb_1.Message.getWrapperField(this, dependency_16.NightCrowGadgetInfo, 62);
    }
    set night_crow_gadget_info(value) {
        pb_1.Message.setOneofWrapperField(this, 62, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_night_crow_gadget_info() {
        return pb_1.Message.getField(this, 62) != null;
    }
    get deshret_obelisk_gadget_info() {
        return pb_1.Message.getWrapperField(this, dependency_6.DeshretObeliskGadgetInfo, 63);
    }
    set deshret_obelisk_gadget_info(value) {
        pb_1.Message.setOneofWrapperField(this, 63, __classPrivateFieldGet(this, _SceneGadgetInfo_one_of_decls, "f")[0], value);
    }
    get has_deshret_obelisk_gadget_info() {
        return pb_1.Message.getField(this, 63) != null;
    }
    get content() {
        const cases = {
            0: "none",
            12: "trifle_item",
            13: "gather_gadget",
            14: "worktop",
            15: "client_gadget",
            17: "weather",
            18: "ability_gadget",
            19: "statue_gadget",
            20: "boss_chest",
            41: "blossom_chest",
            42: "mp_play_reward",
            43: "general_reward",
            44: "offering_info",
            45: "foundation_info",
            46: "vehicle_info",
            47: "shell_info",
            48: "screen_info",
            59: "fish_pool_info",
            60: "custom_gadget_tree_info",
            61: "roguelike_gadget_info",
            62: "night_crow_gadget_info",
            63: "deshret_obelisk_gadget_info"
        };
        return cases[pb_1.Message.computeOneofCase(this, [12, 13, 14, 15, 17, 18, 19, 20, 41, 42, 43, 44, 45, 46, 47, 48, 59, 60, 61, 62, 63])];
    }
    static fromObject(data) {
        const message = new SceneGadgetInfo({});
        if (data.gadget_id != null) {
            message.gadget_id = data.gadget_id;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.owner_entity_id != null) {
            message.owner_entity_id = data.owner_entity_id;
        }
        if (data.born_type != null) {
            message.born_type = data.born_type;
        }
        if (data.gadget_state != null) {
            message.gadget_state = data.gadget_state;
        }
        if (data.gadget_type != null) {
            message.gadget_type = data.gadget_type;
        }
        if (data.is_show_cutscene != null) {
            message.is_show_cutscene = data.is_show_cutscene;
        }
        if (data.authority_peer_id != null) {
            message.authority_peer_id = data.authority_peer_id;
        }
        if (data.is_enable_interact != null) {
            message.is_enable_interact = data.is_enable_interact;
        }
        if (data.interact_id != null) {
            message.interact_id = data.interact_id;
        }
        if (data.mark_flag != null) {
            message.mark_flag = data.mark_flag;
        }
        if (data.prop_owner_entity_id != null) {
            message.prop_owner_entity_id = data.prop_owner_entity_id;
        }
        if (data.platform != null) {
            message.platform = dependency_18.PlatformInfo.fromObject(data.platform);
        }
        if (data.interact_uid_list != null) {
            message.interact_uid_list = data.interact_uid_list;
        }
        if (data.draft_id != null) {
            message.draft_id = data.draft_id;
        }
        if (data.gadget_talk_state != null) {
            message.gadget_talk_state = data.gadget_talk_state;
        }
        if (data.play_info != null) {
            message.play_info = dependency_12.GadgetPlayInfo.fromObject(data.play_info);
        }
        if (data.trifle_item != null) {
            message.trifle_item = dependency_14.Item.fromObject(data.trifle_item);
        }
        if (data.gather_gadget != null) {
            message.gather_gadget = dependency_13.GatherGadgetInfo.fromObject(data.gather_gadget);
        }
        if (data.worktop != null) {
            message.worktop = dependency_24.WorktopInfo.fromObject(data.worktop);
        }
        if (data.client_gadget != null) {
            message.client_gadget = dependency_4.ClientGadgetInfo.fromObject(data.client_gadget);
        }
        if (data.weather != null) {
            message.weather = dependency_23.WeatherInfo.fromObject(data.weather);
        }
        if (data.ability_gadget != null) {
            message.ability_gadget = dependency_1.AbilityGadgetInfo.fromObject(data.ability_gadget);
        }
        if (data.statue_gadget != null) {
            message.statue_gadget = dependency_21.StatueGadgetInfo.fromObject(data.statue_gadget);
        }
        if (data.boss_chest != null) {
            message.boss_chest = dependency_3.BossChestInfo.fromObject(data.boss_chest);
        }
        if (data.blossom_chest != null) {
            message.blossom_chest = dependency_2.BlossomChestInfo.fromObject(data.blossom_chest);
        }
        if (data.mp_play_reward != null) {
            message.mp_play_reward = dependency_15.MpPlayRewardInfo.fromObject(data.mp_play_reward);
        }
        if (data.general_reward != null) {
            message.general_reward = dependency_11.GadgetGeneralRewardInfo.fromObject(data.general_reward);
        }
        if (data.offering_info != null) {
            message.offering_info = dependency_17.OfferingInfo.fromObject(data.offering_info);
        }
        if (data.foundation_info != null) {
            message.foundation_info = dependency_9.FoundationInfo.fromObject(data.foundation_info);
        }
        if (data.vehicle_info != null) {
            message.vehicle_info = dependency_22.VehicleInfo.fromObject(data.vehicle_info);
        }
        if (data.shell_info != null) {
            message.shell_info = dependency_7.EchoShellInfo.fromObject(data.shell_info);
        }
        if (data.screen_info != null) {
            message.screen_info = dependency_20.ScreenInfo.fromObject(data.screen_info);
        }
        if (data.fish_pool_info != null) {
            message.fish_pool_info = dependency_8.FishPoolInfo.fromObject(data.fish_pool_info);
        }
        if (data.custom_gadget_tree_info != null) {
            message.custom_gadget_tree_info = dependency_5.CustomGadgetTreeInfo.fromObject(data.custom_gadget_tree_info);
        }
        if (data.roguelike_gadget_info != null) {
            message.roguelike_gadget_info = dependency_19.RoguelikeGadgetInfo.fromObject(data.roguelike_gadget_info);
        }
        if (data.night_crow_gadget_info != null) {
            message.night_crow_gadget_info = dependency_16.NightCrowGadgetInfo.fromObject(data.night_crow_gadget_info);
        }
        if (data.deshret_obelisk_gadget_info != null) {
            message.deshret_obelisk_gadget_info = dependency_6.DeshretObeliskGadgetInfo.fromObject(data.deshret_obelisk_gadget_info);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.gadget_id != null) {
            data.gadget_id = this.gadget_id;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.owner_entity_id != null) {
            data.owner_entity_id = this.owner_entity_id;
        }
        if (this.born_type != null) {
            data.born_type = this.born_type;
        }
        if (this.gadget_state != null) {
            data.gadget_state = this.gadget_state;
        }
        if (this.gadget_type != null) {
            data.gadget_type = this.gadget_type;
        }
        if (this.is_show_cutscene != null) {
            data.is_show_cutscene = this.is_show_cutscene;
        }
        if (this.authority_peer_id != null) {
            data.authority_peer_id = this.authority_peer_id;
        }
        if (this.is_enable_interact != null) {
            data.is_enable_interact = this.is_enable_interact;
        }
        if (this.interact_id != null) {
            data.interact_id = this.interact_id;
        }
        if (this.mark_flag != null) {
            data.mark_flag = this.mark_flag;
        }
        if (this.prop_owner_entity_id != null) {
            data.prop_owner_entity_id = this.prop_owner_entity_id;
        }
        if (this.platform != null) {
            data.platform = this.platform.toObject();
        }
        if (this.interact_uid_list != null) {
            data.interact_uid_list = this.interact_uid_list;
        }
        if (this.draft_id != null) {
            data.draft_id = this.draft_id;
        }
        if (this.gadget_talk_state != null) {
            data.gadget_talk_state = this.gadget_talk_state;
        }
        if (this.play_info != null) {
            data.play_info = this.play_info.toObject();
        }
        if (this.trifle_item != null) {
            data.trifle_item = this.trifle_item.toObject();
        }
        if (this.gather_gadget != null) {
            data.gather_gadget = this.gather_gadget.toObject();
        }
        if (this.worktop != null) {
            data.worktop = this.worktop.toObject();
        }
        if (this.client_gadget != null) {
            data.client_gadget = this.client_gadget.toObject();
        }
        if (this.weather != null) {
            data.weather = this.weather.toObject();
        }
        if (this.ability_gadget != null) {
            data.ability_gadget = this.ability_gadget.toObject();
        }
        if (this.statue_gadget != null) {
            data.statue_gadget = this.statue_gadget.toObject();
        }
        if (this.boss_chest != null) {
            data.boss_chest = this.boss_chest.toObject();
        }
        if (this.blossom_chest != null) {
            data.blossom_chest = this.blossom_chest.toObject();
        }
        if (this.mp_play_reward != null) {
            data.mp_play_reward = this.mp_play_reward.toObject();
        }
        if (this.general_reward != null) {
            data.general_reward = this.general_reward.toObject();
        }
        if (this.offering_info != null) {
            data.offering_info = this.offering_info.toObject();
        }
        if (this.foundation_info != null) {
            data.foundation_info = this.foundation_info.toObject();
        }
        if (this.vehicle_info != null) {
            data.vehicle_info = this.vehicle_info.toObject();
        }
        if (this.shell_info != null) {
            data.shell_info = this.shell_info.toObject();
        }
        if (this.screen_info != null) {
            data.screen_info = this.screen_info.toObject();
        }
        if (this.fish_pool_info != null) {
            data.fish_pool_info = this.fish_pool_info.toObject();
        }
        if (this.custom_gadget_tree_info != null) {
            data.custom_gadget_tree_info = this.custom_gadget_tree_info.toObject();
        }
        if (this.roguelike_gadget_info != null) {
            data.roguelike_gadget_info = this.roguelike_gadget_info.toObject();
        }
        if (this.night_crow_gadget_info != null) {
            data.night_crow_gadget_info = this.night_crow_gadget_info.toObject();
        }
        if (this.deshret_obelisk_gadget_info != null) {
            data.deshret_obelisk_gadget_info = this.deshret_obelisk_gadget_info.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.gadget_id != 0)
            writer.writeUint32(1, this.gadget_id);
        if (this.group_id != 0)
            writer.writeUint32(2, this.group_id);
        if (this.config_id != 0)
            writer.writeUint32(3, this.config_id);
        if (this.owner_entity_id != 0)
            writer.writeUint32(4, this.owner_entity_id);
        if (this.born_type != dependency_10.GadgetBornType.GADGET_BORN_TYPE_NONE)
            writer.writeEnum(5, this.born_type);
        if (this.gadget_state != 0)
            writer.writeUint32(6, this.gadget_state);
        if (this.gadget_type != 0)
            writer.writeUint32(7, this.gadget_type);
        if (this.is_show_cutscene != false)
            writer.writeBool(8, this.is_show_cutscene);
        if (this.authority_peer_id != 0)
            writer.writeUint32(9, this.authority_peer_id);
        if (this.is_enable_interact != false)
            writer.writeBool(10, this.is_enable_interact);
        if (this.interact_id != 0)
            writer.writeUint32(11, this.interact_id);
        if (this.mark_flag != 0)
            writer.writeUint32(21, this.mark_flag);
        if (this.prop_owner_entity_id != 0)
            writer.writeUint32(22, this.prop_owner_entity_id);
        if (this.has_platform)
            writer.writeMessage(23, this.platform, () => this.platform.serialize(writer));
        if (this.interact_uid_list.length)
            writer.writePackedUint32(24, this.interact_uid_list);
        if (this.draft_id != 0)
            writer.writeUint32(25, this.draft_id);
        if (this.gadget_talk_state != 0)
            writer.writeUint32(26, this.gadget_talk_state);
        if (this.has_play_info)
            writer.writeMessage(100, this.play_info, () => this.play_info.serialize(writer));
        if (this.has_trifle_item)
            writer.writeMessage(12, this.trifle_item, () => this.trifle_item.serialize(writer));
        if (this.has_gather_gadget)
            writer.writeMessage(13, this.gather_gadget, () => this.gather_gadget.serialize(writer));
        if (this.has_worktop)
            writer.writeMessage(14, this.worktop, () => this.worktop.serialize(writer));
        if (this.has_client_gadget)
            writer.writeMessage(15, this.client_gadget, () => this.client_gadget.serialize(writer));
        if (this.has_weather)
            writer.writeMessage(17, this.weather, () => this.weather.serialize(writer));
        if (this.has_ability_gadget)
            writer.writeMessage(18, this.ability_gadget, () => this.ability_gadget.serialize(writer));
        if (this.has_statue_gadget)
            writer.writeMessage(19, this.statue_gadget, () => this.statue_gadget.serialize(writer));
        if (this.has_boss_chest)
            writer.writeMessage(20, this.boss_chest, () => this.boss_chest.serialize(writer));
        if (this.has_blossom_chest)
            writer.writeMessage(41, this.blossom_chest, () => this.blossom_chest.serialize(writer));
        if (this.has_mp_play_reward)
            writer.writeMessage(42, this.mp_play_reward, () => this.mp_play_reward.serialize(writer));
        if (this.has_general_reward)
            writer.writeMessage(43, this.general_reward, () => this.general_reward.serialize(writer));
        if (this.has_offering_info)
            writer.writeMessage(44, this.offering_info, () => this.offering_info.serialize(writer));
        if (this.has_foundation_info)
            writer.writeMessage(45, this.foundation_info, () => this.foundation_info.serialize(writer));
        if (this.has_vehicle_info)
            writer.writeMessage(46, this.vehicle_info, () => this.vehicle_info.serialize(writer));
        if (this.has_shell_info)
            writer.writeMessage(47, this.shell_info, () => this.shell_info.serialize(writer));
        if (this.has_screen_info)
            writer.writeMessage(48, this.screen_info, () => this.screen_info.serialize(writer));
        if (this.has_fish_pool_info)
            writer.writeMessage(59, this.fish_pool_info, () => this.fish_pool_info.serialize(writer));
        if (this.has_custom_gadget_tree_info)
            writer.writeMessage(60, this.custom_gadget_tree_info, () => this.custom_gadget_tree_info.serialize(writer));
        if (this.has_roguelike_gadget_info)
            writer.writeMessage(61, this.roguelike_gadget_info, () => this.roguelike_gadget_info.serialize(writer));
        if (this.has_night_crow_gadget_info)
            writer.writeMessage(62, this.night_crow_gadget_info, () => this.night_crow_gadget_info.serialize(writer));
        if (this.has_deshret_obelisk_gadget_info)
            writer.writeMessage(63, this.deshret_obelisk_gadget_info, () => this.deshret_obelisk_gadget_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneGadgetInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.gadget_id = reader.readUint32();
                    break;
                case 2:
                    message.group_id = reader.readUint32();
                    break;
                case 3:
                    message.config_id = reader.readUint32();
                    break;
                case 4:
                    message.owner_entity_id = reader.readUint32();
                    break;
                case 5:
                    message.born_type = reader.readEnum();
                    break;
                case 6:
                    message.gadget_state = reader.readUint32();
                    break;
                case 7:
                    message.gadget_type = reader.readUint32();
                    break;
                case 8:
                    message.is_show_cutscene = reader.readBool();
                    break;
                case 9:
                    message.authority_peer_id = reader.readUint32();
                    break;
                case 10:
                    message.is_enable_interact = reader.readBool();
                    break;
                case 11:
                    message.interact_id = reader.readUint32();
                    break;
                case 21:
                    message.mark_flag = reader.readUint32();
                    break;
                case 22:
                    message.prop_owner_entity_id = reader.readUint32();
                    break;
                case 23:
                    reader.readMessage(message.platform, () => message.platform = dependency_18.PlatformInfo.deserialize(reader));
                    break;
                case 24:
                    message.interact_uid_list = reader.readPackedUint32();
                    break;
                case 25:
                    message.draft_id = reader.readUint32();
                    break;
                case 26:
                    message.gadget_talk_state = reader.readUint32();
                    break;
                case 100:
                    reader.readMessage(message.play_info, () => message.play_info = dependency_12.GadgetPlayInfo.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.trifle_item, () => message.trifle_item = dependency_14.Item.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.gather_gadget, () => message.gather_gadget = dependency_13.GatherGadgetInfo.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.worktop, () => message.worktop = dependency_24.WorktopInfo.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.client_gadget, () => message.client_gadget = dependency_4.ClientGadgetInfo.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.weather, () => message.weather = dependency_23.WeatherInfo.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.ability_gadget, () => message.ability_gadget = dependency_1.AbilityGadgetInfo.deserialize(reader));
                    break;
                case 19:
                    reader.readMessage(message.statue_gadget, () => message.statue_gadget = dependency_21.StatueGadgetInfo.deserialize(reader));
                    break;
                case 20:
                    reader.readMessage(message.boss_chest, () => message.boss_chest = dependency_3.BossChestInfo.deserialize(reader));
                    break;
                case 41:
                    reader.readMessage(message.blossom_chest, () => message.blossom_chest = dependency_2.BlossomChestInfo.deserialize(reader));
                    break;
                case 42:
                    reader.readMessage(message.mp_play_reward, () => message.mp_play_reward = dependency_15.MpPlayRewardInfo.deserialize(reader));
                    break;
                case 43:
                    reader.readMessage(message.general_reward, () => message.general_reward = dependency_11.GadgetGeneralRewardInfo.deserialize(reader));
                    break;
                case 44:
                    reader.readMessage(message.offering_info, () => message.offering_info = dependency_17.OfferingInfo.deserialize(reader));
                    break;
                case 45:
                    reader.readMessage(message.foundation_info, () => message.foundation_info = dependency_9.FoundationInfo.deserialize(reader));
                    break;
                case 46:
                    reader.readMessage(message.vehicle_info, () => message.vehicle_info = dependency_22.VehicleInfo.deserialize(reader));
                    break;
                case 47:
                    reader.readMessage(message.shell_info, () => message.shell_info = dependency_7.EchoShellInfo.deserialize(reader));
                    break;
                case 48:
                    reader.readMessage(message.screen_info, () => message.screen_info = dependency_20.ScreenInfo.deserialize(reader));
                    break;
                case 59:
                    reader.readMessage(message.fish_pool_info, () => message.fish_pool_info = dependency_8.FishPoolInfo.deserialize(reader));
                    break;
                case 60:
                    reader.readMessage(message.custom_gadget_tree_info, () => message.custom_gadget_tree_info = dependency_5.CustomGadgetTreeInfo.deserialize(reader));
                    break;
                case 61:
                    reader.readMessage(message.roguelike_gadget_info, () => message.roguelike_gadget_info = dependency_19.RoguelikeGadgetInfo.deserialize(reader));
                    break;
                case 62:
                    reader.readMessage(message.night_crow_gadget_info, () => message.night_crow_gadget_info = dependency_16.NightCrowGadgetInfo.deserialize(reader));
                    break;
                case 63:
                    reader.readMessage(message.deshret_obelisk_gadget_info, () => message.deshret_obelisk_gadget_info = dependency_6.DeshretObeliskGadgetInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SceneGadgetInfo.deserialize(bytes);
    }
}
exports.SceneGadgetInfo = SceneGadgetInfo;
_SceneGadgetInfo_one_of_decls = new WeakMap();
