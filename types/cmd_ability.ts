// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_ability.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AbilityControlBlock } from "./define";
import { MassivePropSyncInfo } from "./define";
import { Vector } from "./define";
import { AnimatorParameterValueInfoPair } from "./define";
import { AbilityAttachedModifier } from "./define";
import { AbilityString } from "./define";
import { AbilityAppliedAbility } from "./define";
import { AbilityScalarValueEntry } from "./define";
import { ForwardType } from "./cmd_fight";
/**
 * @generated from protobuf message com.midnights.game.AbilityInvokeEntryHead
 */
export interface AbilityInvokeEntryHead {
    /**
     * @generated from protobuf field: optional int32 modifier_config_local_id = 7;
     */
    modifierConfigLocalId?: number;
    /**
     * @generated from protobuf field: optional bool is_serverbuff_modifier = 2;
     */
    isServerbuffModifier?: boolean;
    /**
     * @generated from protobuf field: optional uint32 instanced_ability_id = 1;
     */
    instancedAbilityId?: number;
    /**
     * @generated from protobuf field: optional uint32 instanced_modifier_id = 12;
     */
    instancedModifierId?: number;
    /**
     * @generated from protobuf field: optional int32 local_id = 10;
     */
    localId?: number;
    /**
     * @generated from protobuf field: optional uint32 server_buff_uid = 14;
     */
    serverBuffUid?: number;
    /**
     * @generated from protobuf field: optional uint32 target_id = 3;
     */
    targetId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityInvokeEntry
 */
export interface AbilityInvokeEntry {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeArgument argument_type = 1;
     */
    argumentType?: AbilityInvokeArgument;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntryHead head = 2;
     */
    head?: AbilityInvokeEntryHead;
    /**
     * @generated from protobuf field: optional uint32 forward_peer = 4;
     */
    forwardPeer?: number;
    /**
     * @generated from protobuf field: optional uint32 event_id = 12;
     */
    eventId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ForwardType forward_type = 3;
     */
    forwardType?: ForwardType;
    /**
     * @generated from protobuf field: optional bytes ability_data = 15;
     */
    abilityData?: Uint8Array;
    /**
     * @generated from protobuf field: optional double total_tick_time = 14;
     */
    totalTickTime?: number;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 9;
     */
    entityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityInvocationFixedNotify
 */
export interface AbilityInvocationFixedNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke6th = 14 [json_name = "invoke6th"];
     */
    invoke6Th?: AbilityInvokeEntry;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke5th = 8 [json_name = "invoke5th"];
     */
    invoke5Th?: AbilityInvokeEntry;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke4th = 1 [json_name = "invoke4th"];
     */
    invoke4Th?: AbilityInvokeEntry;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke2nd = 5 [json_name = "invoke2nd"];
     */
    invoke2Nd?: AbilityInvokeEntry;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke1st = 10 [json_name = "invoke1st"];
     */
    invoke1St?: AbilityInvokeEntry;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke3rd = 12 [json_name = "invoke3rd"];
     */
    invoke3Rd?: AbilityInvokeEntry;
}
/**
 * @generated from protobuf enum com.midnights.game.AbilityInvocationFixedNotify.CmdId
 */
export enum AbilityInvocationFixedNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1172;
     */
    CMD_ID = 1172,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AbilityInvocationsNotify
 */
export interface AbilityInvocationsNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AbilityInvokeEntry invokes = 2;
     */
    invokes: AbilityInvokeEntry[];
}
/**
 * @generated from protobuf enum com.midnights.game.AbilityInvocationsNotify.CmdId
 */
export enum AbilityInvocationsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1198;
     */
    CMD_ID = 1198,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaReInitOverrideMap
 */
export interface AbilityMetaReInitOverrideMap {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AbilityScalarValueEntry override_map = 7;
     */
    overrideMap: AbilityScalarValueEntry[];
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaAddAbility
 */
export interface AbilityMetaAddAbility {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityAppliedAbility ability = 12;
     */
    ability?: AbilityAppliedAbility;
}
/**
 * @generated from protobuf message com.midnights.game.ModifierProperty
 */
export interface ModifierProperty {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString key = 15;
     */
    key?: AbilityString;
    /**
     * @generated from protobuf field: optional float value = 5;
     */
    value?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaModifierChange
 */
export interface AbilityMetaModifierChange {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityAttachedModifier attached_instanced_modifier = 7;
     */
    attachedInstancedModifier?: AbilityAttachedModifier;
    /**
     * @generated from protobuf field: optional uint32 server_buff_uid = 4;
     */
    serverBuffUid?: number;
    /**
     * @generated from protobuf field: optional bool is_attached_parent_ability = 10;
     */
    isAttachedParentAbility?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.ModifierAction action = 13;
     */
    action?: ModifierAction;
    /**
     * @generated from protobuf field: optional int32 modifier_local_id = 2;
     */
    modifierLocalId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString parent_ability_name = 1;
     */
    parentAbilityName?: AbilityString;
    /**
     * @generated from protobuf field: optional bool is_mute_remote = 6;
     */
    isMuteRemote?: boolean;
    /**
     * @generated from protobuf field: optional uint32 apply_entity_id = 5;
     */
    applyEntityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ModifierProperty properties = 3;
     */
    properties: ModifierProperty[];
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString parent_ability_override = 11;
     */
    parentAbilityOverride?: AbilityString;
    /**
     * @generated from protobuf field: optional bool is_durability_zero = 9;
     */
    isDurabilityZero?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaDurabilityIsZero
 */
export interface AbilityMetaDurabilityIsZero {
    /**
     * @generated from protobuf field: optional bool is_zero = 5;
     */
    isZero?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaSpecialFloatArgument
 */
export interface AbilityMetaSpecialFloatArgument {
    /**
     * @generated from protobuf field: optional float argument_value = 14;
     */
    argumentValue?: number;
    /**
     * @generated from protobuf field: optional bool is_on = 10;
     */
    isOn?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaAddOrGetAbilityAndTrigger
 */
export interface AbilityMetaAddOrGetAbilityAndTrigger {
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString ability_name = 13;
     */
    abilityName?: AbilityString;
    /**
     * @generated from protobuf field: optional float trigger_argument = 3;
     */
    triggerArgument?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString ability_override = 8;
     */
    abilityOverride?: AbilityString;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaSetKilledState
 */
export interface AbilityMetaSetKilledState {
    /**
     * @generated from protobuf field: optional bool killed = 2;
     */
    killed?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaSetAbilityTrigger
 */
export interface AbilityMetaSetAbilityTrigger {
    /**
     * @generated from protobuf field: optional uint32 trigger_ability_entity_id = 11;
     */
    triggerAbilityEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaSetModifierApplyEntityId
 */
export interface AbilityMetaSetModifierApplyEntityId {
    /**
     * @generated from protobuf field: optional uint32 apply_entity_id = 10;
     */
    applyEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaModifierDurabilityChange
 */
export interface AbilityMetaModifierDurabilityChange {
    /**
     * @generated from protobuf field: optional float reduce_durability = 6;
     */
    reduceDurability?: number;
    /**
     * @generated from protobuf field: optional float remain_durability = 15;
     */
    remainDurability?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaElementReactionVisual
 */
export interface AbilityMetaElementReactionVisual {
    /**
     * @generated from protobuf field: optional int32 hit_index = 2;
     */
    hitIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 element_source_type = 12;
     */
    elementSourceType?: number;
    /**
     * @generated from protobuf field: optional uint32 element_reactor_type = 6;
     */
    elementReactorType?: number;
    /**
     * @generated from protobuf field: optional uint32 element_reaction_type = 5;
     */
    elementReactionType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaTriggerElementReaction
 */
export interface AbilityMetaTriggerElementReaction {
    /**
     * @generated from protobuf field: optional int32 hit_index = 9;
     */
    hitIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 element_source_type = 7;
     */
    elementSourceType?: number;
    /**
     * @generated from protobuf field: optional uint32 element_reactor_type = 12;
     */
    elementReactorType?: number;
    /**
     * @generated from protobuf field: optional uint32 trigger_entity_id = 2;
     */
    triggerEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 element_reaction_type = 1;
     */
    elementReactionType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaLoseHp
 */
export interface AbilityMetaLoseHp {
    /**
     * @generated from protobuf field: optional uint32 lose_hp_config_idx = 10;
     */
    loseHpConfigIdx?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaSetPoseParameter
 */
export interface AbilityMetaSetPoseParameter {
    /**
     * @generated from protobuf field: optional com.midnights.game.AnimatorParameterValueInfoPair value = 6;
     */
    value?: AnimatorParameterValueInfoPair;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMetaUpdateBaseReactionDamage
 */
export interface AbilityMetaUpdateBaseReactionDamage {
    /**
     * @generated from protobuf field: optional uint32 source_caster_id = 15;
     */
    sourceCasterId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString ability_name = 1;
     */
    abilityName?: AbilityString;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityString global_value_key = 4;
     */
    globalValueKey?: AbilityString;
    /**
     * @generated from protobuf field: optional uint32 reaction_type = 8;
     */
    reactionType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionTriggerAbility
 */
export interface AbilityActionTriggerAbility {
    /**
     * @generated from protobuf field: optional uint32 other_id = 14;
     */
    otherId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionSetCrashDamage
 */
export interface AbilityActionSetCrashDamage {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector hit_pos = 2;
     */
    hitPos?: Vector;
    /**
     * @generated from protobuf field: optional float damage = 15;
     */
    damage?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityBornType
 */
export interface AbilityBornType {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 2;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector move_dir = 14;
     */
    moveDir?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 5;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionSummon
 */
export interface AbilityActionSummon {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 1;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionBlink
 */
export interface AbilityActionBlink {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 11;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 10;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionCreateGadget
 */
export interface AbilityActionCreateGadget {
    /**
     * @generated from protobuf field: optional uint32 room_id = 3;
     */
    roomId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 8;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 11;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionSetRandomOverrideMapValue
 */
export interface AbilityActionSetRandomOverrideMapValue {
    /**
     * @generated from protobuf field: optional float random_value = 1;
     */
    randomValue?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionServerMonsterLog
 */
export interface AbilityActionServerMonsterLog {
    /**
     * @generated from protobuf field: repeated int32 param_list = 2;
     */
    paramList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionCreateTile
 */
export interface AbilityActionCreateTile {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 3;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 8;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionDestroyTile
 */
export interface AbilityActionDestroyTile {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 3;
     */
    rot?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 1;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionFireAfterImgae
 */
export interface AbilityActionFireAfterImgae {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector dir = 12;
     */
    dir?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityApplyLevelModifier
 */
export interface AbilityApplyLevelModifier {
    /**
     * @generated from protobuf field: optional uint32 apply_entity_id = 6;
     */
    applyEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionGenerateElemBall
 */
export interface AbilityActionGenerateElemBall {
    /**
     * @generated from protobuf field: optional uint32 room_id = 2;
     */
    roomId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 7;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector rot = 13;
     */
    rot?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionDeductStamina
 */
export interface AbilityActionDeductStamina {
    /**
     * @generated from protobuf field: optional bool is_swim = 1;
     */
    isSwim?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionHitEffect
 */
export interface AbilityActionHitEffect {
    /**
     * @generated from protobuf field: optional uint32 trigger_id = 3;
     */
    triggerId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityActionSetBulletTrackTarget
 */
export interface AbilityActionSetBulletTrackTarget {
    /**
     * @generated from protobuf field: optional uint32 chased_entity_id = 1;
     */
    chasedEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 lock_point_index = 2;
     */
    lockPointIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinEmpty
 */
export interface AbilityMixinEmpty {
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinAvatarSteerByCamera
 */
export interface AbilityMixinAvatarSteerByCamera {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector target_dir = 7;
     */
    targetDir?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector target_pos = 6;
     */
    targetPos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWindZone
 */
export interface AbilityMixinWindZone {
    /**
     * @generated from protobuf field: repeated uint32 entity_ids = 13;
     */
    entityIds: number[];
    /**
     * @generated from protobuf field: repeated uint32 zone_id_list = 10;
     */
    zoneIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinCostStamina
 */
export interface AbilityMixinCostStamina {
    /**
     * @generated from protobuf field: optional bool is_swim = 3;
     */
    isSwim?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinEliteShield
 */
export interface AbilityMixinEliteShield {
    /**
     * @generated from protobuf field: optional float sub_shield = 2;
     */
    subShield?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinElementShield
 */
export interface AbilityMixinElementShield {
    /**
     * @generated from protobuf field: optional float sub_shield = 10;
     */
    subShield?: number;
    /**
     * @generated from protobuf field: optional float shield = 8;
     */
    shield?: number;
    /**
     * @generated from protobuf field: optional uint32 absorb_type = 1;
     */
    absorbType?: number;
    /**
     * @generated from protobuf field: optional uint32 player_num = 4;
     */
    playerNum?: number;
    /**
     * @generated from protobuf field: optional bool is_shield_broken = 9;
     */
    isShieldBroken?: boolean;
    /**
     * @generated from protobuf field: optional float max_shield = 12;
     */
    maxShield?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinGlobalShield
 */
export interface AbilityMixinGlobalShield {
    /**
     * @generated from protobuf field: optional bool is_create_effect = 4;
     */
    isCreateEffect?: boolean;
    /**
     * @generated from protobuf field: optional float sub_shield = 7;
     */
    subShield?: number;
    /**
     * @generated from protobuf field: optional float height_offset = 5;
     */
    heightOffset?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 11;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional float max_shield = 10;
     */
    maxShield?: number;
    /**
     * @generated from protobuf field: optional string shield_effect_name = 2;
     */
    shieldEffectName?: string;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinShieldBar
 */
export interface AbilityMixinShieldBar {
    /**
     * @generated from protobuf field: optional uint32 player_num = 14;
     */
    playerNum?: number;
    /**
     * @generated from protobuf field: optional float max_shield = 15;
     */
    maxShield?: number;
    /**
     * @generated from protobuf field: optional float shield = 12;
     */
    shield?: number;
    /**
     * @generated from protobuf field: optional uint32 element_type = 13;
     */
    elementType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWindSeedSpawner
 */
export interface AbilityMixinWindSeedSpawner {
    /**
     * @generated from protobuf oneof: cmd
     */
    cmd: {
        oneofKind: "addSignal";
        /**
         * @generated from protobuf field: com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal add_signal = 2;
         */
        addSignal: AbilityMixinWindSeedSpawner_AddSignal;
    } | {
        oneofKind: "refreshSeed";
        /**
         * @generated from protobuf field: com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed = 15;
         */
        refreshSeed: AbilityMixinWindSeedSpawner_RefreshSeed;
    } | {
        oneofKind: "catchSeed";
        /**
         * @generated from protobuf field: com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed catch_seed = 11;
         */
        catchSeed: AbilityMixinWindSeedSpawner_CatchSeed;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal
 */
export interface AbilityMixinWindSeedSpawner_AddSignal {
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed
 */
export interface AbilityMixinWindSeedSpawner_RefreshSeed {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector pos_list = 6;
     */
    posList: Vector[];
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed
 */
export interface AbilityMixinWindSeedSpawner_CatchSeed {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinDoActionByElementReaction
 */
export interface AbilityMixinDoActionByElementReaction {
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 1;
     */
    targetEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinFieldEntityCountChange
 */
export interface AbilityMixinFieldEntityCountChange {
    /**
     * @generated from protobuf field: optional uint32 field_entity_count = 14;
     */
    fieldEntityCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinScenePropSync
 */
export interface AbilityMixinScenePropSync {
    /**
     * @generated from protobuf field: repeated int64 delete_id_list = 5;
     */
    deleteIdList: bigint[];
    /**
     * @generated from protobuf field: optional bool is_clear_all = 12;
     */
    isClearAll?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MassivePropSyncInfo massive_prop_list = 15;
     */
    massivePropList: MassivePropSyncInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinWidgetMpSupport
 */
export interface AbilityMixinWidgetMpSupport {
    /**
     * @generated from protobuf field: optional uint32 target_entity_id = 9;
     */
    targetEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinDoActionBySelfModifierElementDurabilityRatio
 */
export interface AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
    /**
     * @generated from protobuf field: optional float last_duability_ratio = 9;
     */
    lastDuabilityRatio?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinFireworksLauncher
 */
export interface AbilityMixinFireworksLauncher {
    /**
     * @generated from protobuf field: optional uint32 invoke_type = 2;
     */
    invokeType?: number;
    /**
     * @generated from protobuf field: optional uint32 start_count_down_time = 3;
     */
    startCountDownTime?: number;
    /**
     * @generated from protobuf field: optional uint32 fired_bullet_count = 1;
     */
    firedBulletCount?: number;
    /**
     * @generated from protobuf field: optional uint32 phase = 6;
     */
    phase?: number;
    /**
     * @generated from protobuf field: repeated uint32 fireworks_config = 4;
     */
    fireworksConfig: number[];
    /**
     * @generated from protobuf field: optional uint32 turn_index = 7;
     */
    turnIndex?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinUGCTimeControl
 */
export interface AbilityMixinUGCTimeControl {
    /**
     * @generated from protobuf field: optional uint64 start_move_time_ms = 13;
     */
    startMoveTimeMs?: bigint;
    /**
     * @generated from protobuf field: optional uint32 start_move_time = 3;
     */
    startMoveTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinUIInteract
 */
export interface AbilityMixinUIInteract {
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinAvatarCombat
 */
export interface AbilityMixinAvatarCombat {
    /**
     * @generated from protobuf field: optional bool is_enter_combat = 9;
     */
    isEnterCombat?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinShootFromCamera
 */
export interface AbilityMixinShootFromCamera {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector init_pos = 13;
     */
    initPos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector forward = 2;
     */
    forward?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.AbilityMixinEraseBrickActivity
 */
export interface AbilityMixinEraseBrickActivity {
    /**
     * @generated from protobuf field: repeated uint32 data = 6;
     */
    data: number[];
}
/**
 * @generated from protobuf message com.midnights.game.AttackResultCreateCount
 */
export interface AttackResultCreateCount {
    /**
     * @generated from protobuf field: repeated uint32 create_count_list = 10;
     */
    createCountList: number[];
    /**
     * @generated from protobuf field: repeated uint32 create_count_no_cost_list = 7;
     */
    createCountNoCostList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.ClientAbilityInitBeginNotify
 */
export interface ClientAbilityInitBeginNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientAbilityInitBeginNotify.CmdId
 */
export enum ClientAbilityInitBeginNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1112;
     */
    CMD_ID = 1112,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientAbilityInitFinishNotify
 */
export interface ClientAbilityInitFinishNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.AbilityInvokeEntry invokes = 14;
     */
    invokes: AbilityInvokeEntry[];
    /**
     * @generated from protobuf field: optional uint32 entity_id = 11;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientAbilityInitFinishNotify.CmdId
 */
export enum ClientAbilityInitFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1135;
     */
    CMD_ID = 1135,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AbilityInvocationFailNotify
 */
export interface AbilityInvocationFailNotify {
    /**
     * @generated from protobuf field: optional string reason = 7;
     */
    reason?: string;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 13;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityInvokeEntry invoke = 3;
     */
    invoke?: AbilityInvokeEntry;
}
/**
 * @generated from protobuf enum com.midnights.game.AbilityInvocationFailNotify.CmdId
 */
export enum AbilityInvocationFailNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1107;
     */
    CMD_ID = 1107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EntityAbilityInvokeEntry
 */
export interface EntityAbilityInvokeEntry {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 8;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.AbilityInvokeEntry invokes = 1;
     */
    invokes: AbilityInvokeEntry[];
}
/**
 * @generated from protobuf message com.midnights.game.ClientAbilitiesInitFinishCombineNotify
 */
export interface ClientAbilitiesInitFinishCombineNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.EntityAbilityInvokeEntry entity_invoke_list = 1;
     */
    entityInvokeList: EntityAbilityInvokeEntry[];
}
/**
 * @generated from protobuf enum com.midnights.game.ClientAbilitiesInitFinishCombineNotify.CmdId
 */
export enum ClientAbilitiesInitFinishCombineNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1103;
     */
    CMD_ID = 1103,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WindSeedClientNotify
 */
export interface WindSeedClientNotify {
    /**
     * @generated from protobuf oneof: notify
     */
    notify: {
        oneofKind: "refreshNotify";
        /**
         * @generated from protobuf field: com.midnights.game.WindSeedClientNotify.RefreshNotify refresh_notify = 14;
         */
        refreshNotify: WindSeedClientNotify_RefreshNotify;
    } | {
        oneofKind: "addWindBulletNotify";
        /**
         * @generated from protobuf field: com.midnights.game.WindSeedClientNotify.AddWindBulletNotify add_wind_bullet_notify = 6;
         */
        addWindBulletNotify: WindSeedClientNotify_AddWindBulletNotify;
    } | {
        oneofKind: "areaNotify";
        /**
         * @generated from protobuf field: com.midnights.game.WindSeedClientNotify.AreaNotify area_notify = 4;
         */
        areaNotify: WindSeedClientNotify_AreaNotify;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.WindSeedClientNotify.RefreshNotify
 */
export interface WindSeedClientNotify_RefreshNotify {
    /**
     * @generated from protobuf field: optional uint32 refresh_num = 9;
     */
    refreshNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WindSeedClientNotify.AddWindBulletNotify
 */
export interface WindSeedClientNotify_AddWindBulletNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector seed_pos = 6;
     */
    seedPos?: Vector;
    /**
     * @generated from protobuf field: optional uint32 catch_player_uid = 8;
     */
    catchPlayerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 seed_entity_id = 7;
     */
    seedEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WindSeedClientNotify.AreaNotify
 */
export interface WindSeedClientNotify_AreaNotify {
    /**
     * @generated from protobuf field: optional bytes area_code = 5;
     */
    areaCode?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 area_id = 10;
     */
    areaId?: number;
    /**
     * @generated from protobuf field: optional uint32 area_type = 7;
     */
    areaType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WindSeedClientNotify.CmdId
 */
export enum WindSeedClientNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1199;
     */
    CMD_ID = 1199,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AbilityChangeNotify
 */
export interface AbilityChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 1;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AbilityControlBlock ability_control_block = 15;
     */
    abilityControlBlock?: AbilityControlBlock;
}
/**
 * @generated from protobuf enum com.midnights.game.AbilityChangeNotify.CmdId
 */
export enum AbilityChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1131;
     */
    CMD_ID = 1131,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientAbilityChangeNotify
 */
export interface ClientAbilityChangeNotify {
    /**
     * @generated from protobuf field: optional bool is_init_hash = 9;
     */
    isInitHash?: boolean;
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.AbilityInvokeEntry invokes = 3;
     */
    invokes: AbilityInvokeEntry[];
}
/**
 * @generated from protobuf enum com.midnights.game.ClientAbilityChangeNotify.CmdId
 */
export enum ClientAbilityChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1175;
     */
    CMD_ID = 1175,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerUpdateGlobalValueNotify
 */
export interface ServerUpdateGlobalValueNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 9;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ServerUpdateGlobalValueNotify.UpdateType update_type = 13;
     */
    updateType?: ServerUpdateGlobalValueNotify_UpdateType;
    /**
     * @generated from protobuf field: optional float delta = 3;
     */
    delta?: number;
    /**
     * @generated from protobuf field: optional uint32 key_hash = 10;
     */
    keyHash?: number;
    /**
     * @generated from protobuf field: optional float value = 6;
     */
    value?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerUpdateGlobalValueNotify.UpdateType
 */
export enum ServerUpdateGlobalValueNotify_UpdateType {
    /**
     * @generated from protobuf enum value: INVALUE = 0;
     */
    INVALUE = 0,
    /**
     * @generated from protobuf enum value: ADD = 1;
     */
    ADD = 1,
    /**
     * @generated from protobuf enum value: SET = 2;
     */
    SET = 2
}
/**
 * @generated from protobuf enum com.midnights.game.ServerUpdateGlobalValueNotify.CmdId
 */
export enum ServerUpdateGlobalValueNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1148;
     */
    CMD_ID = 1148,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerGlobalValueChangeNotify
 */
export interface ServerGlobalValueChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 6;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional float value = 12;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional uint32 key_hash = 13;
     */
    keyHash?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerGlobalValueChangeNotify.CmdId
 */
export enum ServerGlobalValueChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1197;
     */
    CMD_ID = 1197,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientAIStateNotify
 */
export interface ClientAIStateNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 9;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_tactic = 15;
     */
    curTactic?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientAIStateNotify.CmdId
 */
export enum ClientAIStateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1181;
     */
    CMD_ID = 1181,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerCombatEndNotify
 */
export interface ServerCombatEndNotify {
    /**
     * @generated from protobuf field: repeated uint32 combat_end_type_list = 14;
     */
    combatEndTypeList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ServerCombatEndNotify.CmdId
 */
export enum ServerCombatEndNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1105;
     */
    CMD_ID = 1105,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientRemoveCombatEndModifierNotify
 */
export interface ClientRemoveCombatEndModifierNotify {
    /**
     * @generated from protobuf field: repeated uint32 combat_end_type_list = 7;
     */
    combatEndTypeList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ClientRemoveCombatEndModifierNotify.CmdId
 */
export enum ClientRemoveCombatEndModifierNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1182;
     */
    CMD_ID = 1182,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.AbilityInvokeArgument
 */
export enum AbilityInvokeArgument {
    /**
     * @generated from protobuf enum value: ABILITY_NONE = 0;
     */
    ABILITY_NONE = 0,
    /**
     * @generated from protobuf enum value: ABILITY_META_MODIFIER_CHANGE = 1;
     */
    ABILITY_META_MODIFIER_CHANGE = 1,
    /**
     * @generated from protobuf enum value: ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2;
     */
    ABILITY_META_COMMAND_MODIFIER_CHANGE_REQUEST = 2,
    /**
     * @generated from protobuf enum value: ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3;
     */
    ABILITY_META_SPECIAL_FLOAT_ARGUMENT = 3,
    /**
     * @generated from protobuf enum value: ABILITY_META_OVERRIDE_PARAM = 4;
     */
    ABILITY_META_OVERRIDE_PARAM = 4,
    /**
     * @generated from protobuf enum value: ABILITY_META_CLEAR_OVERRIDE_PARAM = 5;
     */
    ABILITY_META_CLEAR_OVERRIDE_PARAM = 5,
    /**
     * @generated from protobuf enum value: ABILITY_META_REINIT_OVERRIDEMAP = 6;
     */
    ABILITY_META_REINIT_OVERRIDEMAP = 6,
    /**
     * @generated from protobuf enum value: ABILITY_META_GLOBAL_FLOAT_VALUE = 7;
     */
    ABILITY_META_GLOBAL_FLOAT_VALUE = 7,
    /**
     * @generated from protobuf enum value: ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8;
     */
    ABILITY_META_CLEAR_GLOBAL_FLOAT_VALUE = 8,
    /**
     * @generated from protobuf enum value: ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9;
     */
    ABILITY_META_ABILITY_ELEMENT_STRENGTH = 9,
    /**
     * @generated from protobuf enum value: ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10;
     */
    ABILITY_META_ADD_OR_GET_ABILITY_AND_TRIGGER = 10,
    /**
     * @generated from protobuf enum value: ABILITY_META_SET_KILLED_SETATE = 11;
     */
    ABILITY_META_SET_KILLED_SETATE = 11,
    /**
     * @generated from protobuf enum value: ABILITY_META_SET_ABILITY_TRIGGER = 12;
     */
    ABILITY_META_SET_ABILITY_TRIGGER = 12,
    /**
     * @generated from protobuf enum value: ABILITY_META_ADD_NEW_ABILITY = 13;
     */
    ABILITY_META_ADD_NEW_ABILITY = 13,
    /**
     * @generated from protobuf enum value: ABILITY_META_REMOVE_ABILITY = 14;
     */
    ABILITY_META_REMOVE_ABILITY = 14,
    /**
     * @generated from protobuf enum value: ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15;
     */
    ABILITY_META_SET_MODIFIER_APPLY_ENTITY = 15,
    /**
     * @generated from protobuf enum value: ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16;
     */
    ABILITY_META_MODIFIER_DURABILITY_CHANGE = 16,
    /**
     * @generated from protobuf enum value: ABILITY_META_ELEMENT_REACTION_VISUAL = 17;
     */
    ABILITY_META_ELEMENT_REACTION_VISUAL = 17,
    /**
     * @generated from protobuf enum value: ABILITY_META_SET_POSE_PARAMETER = 18;
     */
    ABILITY_META_SET_POSE_PARAMETER = 18,
    /**
     * @generated from protobuf enum value: ABILITY_META_UPDATE_BASE_REACTION_DAMAGE = 19;
     */
    ABILITY_META_UPDATE_BASE_REACTION_DAMAGE = 19,
    /**
     * @generated from protobuf enum value: ABILITY_META_TRIGGER_ELEMENT_REACTION = 20;
     */
    ABILITY_META_TRIGGER_ELEMENT_REACTION = 20,
    /**
     * @generated from protobuf enum value: ABILITY_META_LOSE_HP = 21;
     */
    ABILITY_META_LOSE_HP = 21,
    /**
     * @generated from protobuf enum value: ABILITY_META_DURABILITY_IS_ZERO = 22;
     */
    ABILITY_META_DURABILITY_IS_ZERO = 22,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_TRIGGER_ABILITY = 50;
     */
    ABILITY_ACTION_TRIGGER_ABILITY = 50,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_SET_CRASH_DAMAGE = 51;
     */
    ABILITY_ACTION_SET_CRASH_DAMAGE = 51,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_EFFECT = 52;
     */
    ABILITY_ACTION_EFFECT = 52,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_SUMMON = 53;
     */
    ABILITY_ACTION_SUMMON = 53,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_BLINK = 54;
     */
    ABILITY_ACTION_BLINK = 54,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_CREATE_GADGET = 55;
     */
    ABILITY_ACTION_CREATE_GADGET = 55,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56;
     */
    ABILITY_ACTION_APPLY_LEVEL_MODIFIER = 56,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_GENERATE_ELEM_BALL = 57;
     */
    ABILITY_ACTION_GENERATE_ELEM_BALL = 57,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58;
     */
    ABILITY_ACTION_SET_RANDOM_OVERRIDE_MAP_VALUE = 58,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_SERVER_MONSTER_LOG = 59;
     */
    ABILITY_ACTION_SERVER_MONSTER_LOG = 59,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_CREATE_TILE = 60;
     */
    ABILITY_ACTION_CREATE_TILE = 60,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_DESTROY_TILE = 61;
     */
    ABILITY_ACTION_DESTROY_TILE = 61,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_FIRE_AFTER_IMAGE = 62;
     */
    ABILITY_ACTION_FIRE_AFTER_IMAGE = 62,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_DEDUCT_STAMINA = 63;
     */
    ABILITY_ACTION_DEDUCT_STAMINA = 63,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_HIT_EFFECT = 64;
     */
    ABILITY_ACTION_HIT_EFFECT = 64,
    /**
     * @generated from protobuf enum value: ABILITY_ACTION_SET_BULLET_TRACK_TARGET = 65;
     */
    ABILITY_ACTION_SET_BULLET_TRACK_TARGET = 65,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100;
     */
    ABILITY_MIXIN_AVATAR_STEER_BY_CAMERA = 100,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_MONSTER_DEFEND = 101;
     */
    ABILITY_MIXIN_MONSTER_DEFEND = 101,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_WIND_ZONE = 102;
     */
    ABILITY_MIXIN_WIND_ZONE = 102,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_COST_STAMINA = 103;
     */
    ABILITY_MIXIN_COST_STAMINA = 103,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_ELITE_SHIELD = 104;
     */
    ABILITY_MIXIN_ELITE_SHIELD = 104,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_ELEMENT_SHIELD = 105;
     */
    ABILITY_MIXIN_ELEMENT_SHIELD = 105,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_GLOBAL_SHIELD = 106;
     */
    ABILITY_MIXIN_GLOBAL_SHIELD = 106,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_SHIELD_BAR = 107;
     */
    ABILITY_MIXIN_SHIELD_BAR = 107,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_WIND_SEED_SPAWNER = 108;
     */
    ABILITY_MIXIN_WIND_SEED_SPAWNER = 108,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109;
     */
    ABILITY_MIXIN_DO_ACTION_BY_ELEMENT_REACTION = 109,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110;
     */
    ABILITY_MIXIN_FIELD_ENTITY_COUNT_CHANGE = 110,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_SCENE_PROP_SYNC = 111;
     */
    ABILITY_MIXIN_SCENE_PROP_SYNC = 111,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_WIDGET_MP_SUPPORT = 112;
     */
    ABILITY_MIXIN_WIDGET_MP_SUPPORT = 112,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = 113;
     */
    ABILITY_MIXIN_DO_ACTION_BY_SELF_MODIFIER_ELEMENT_DURABILITY_RATIO = 113,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_FIREWORKS_LAUNCHER = 114;
     */
    ABILITY_MIXIN_FIREWORKS_LAUNCHER = 114,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115;
     */
    ABILITY_MIXIN_ATTACK_RESULT_CREATE_COUNT = 115,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_UGC_TIME_CONTROL = 116;
     */
    ABILITY_MIXIN_UGC_TIME_CONTROL = 116,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_AVATAR_COMBAT = 117;
     */
    ABILITY_MIXIN_AVATAR_COMBAT = 117,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118;
     */
    ABILITY_MIXIN_DEATH_ZONE_REGIONAL_PLAY_MIXIN = 118,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_UI_INTERACT = 119;
     */
    ABILITY_MIXIN_UI_INTERACT = 119,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_SHOOT_FROM_CAMERA = 120;
     */
    ABILITY_MIXIN_SHOOT_FROM_CAMERA = 120,
    /**
     * @generated from protobuf enum value: ABILITY_MIXIN_ERASE_BRICK_ACTIVITY = 121;
     */
    ABILITY_MIXIN_ERASE_BRICK_ACTIVITY = 121
}
/**
 * @generated from protobuf enum com.midnights.game.ModifierAction
 */
export enum ModifierAction {
    /**
     * @generated from protobuf enum value: ADDED = 0;
     */
    ADDED = 0,
    /**
     * @generated from protobuf enum value: REMOVED = 1;
     */
    REMOVED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvokeEntryHead$Type extends MessageType<AbilityInvokeEntryHead> {
    constructor() {
        super("com.midnights.game.AbilityInvokeEntryHead", [
            { no: 7, name: "modifier_config_local_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_serverbuff_modifier", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "instanced_ability_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "instanced_modifier_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "local_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "server_buff_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "target_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityInvokeEntryHead>): AbilityInvokeEntryHead {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvokeEntryHead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvokeEntryHead): AbilityInvokeEntryHead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 modifier_config_local_id */ 7:
                    message.modifierConfigLocalId = reader.int32();
                    break;
                case /* optional bool is_serverbuff_modifier */ 2:
                    message.isServerbuffModifier = reader.bool();
                    break;
                case /* optional uint32 instanced_ability_id */ 1:
                    message.instancedAbilityId = reader.uint32();
                    break;
                case /* optional uint32 instanced_modifier_id */ 12:
                    message.instancedModifierId = reader.uint32();
                    break;
                case /* optional int32 local_id */ 10:
                    message.localId = reader.int32();
                    break;
                case /* optional uint32 server_buff_uid */ 14:
                    message.serverBuffUid = reader.uint32();
                    break;
                case /* optional uint32 target_id */ 3:
                    message.targetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvokeEntryHead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 modifier_config_local_id = 7; */
        if (message.modifierConfigLocalId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.modifierConfigLocalId);
        /* optional bool is_serverbuff_modifier = 2; */
        if (message.isServerbuffModifier !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isServerbuffModifier);
        /* optional uint32 instanced_ability_id = 1; */
        if (message.instancedAbilityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.instancedAbilityId);
        /* optional uint32 instanced_modifier_id = 12; */
        if (message.instancedModifierId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.instancedModifierId);
        /* optional int32 local_id = 10; */
        if (message.localId !== undefined)
            writer.tag(10, WireType.Varint).int32(message.localId);
        /* optional uint32 server_buff_uid = 14; */
        if (message.serverBuffUid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.serverBuffUid);
        /* optional uint32 target_id = 3; */
        if (message.targetId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.targetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityInvokeEntryHead
 */
export const AbilityInvokeEntryHead = new AbilityInvokeEntryHead$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvokeEntry$Type extends MessageType<AbilityInvokeEntry> {
    constructor() {
        super("com.midnights.game.AbilityInvokeEntry", [
            { no: 1, name: "argument_type", kind: "enum", opt: true, T: () => ["com.midnights.game.AbilityInvokeArgument", AbilityInvokeArgument] },
            { no: 2, name: "head", kind: "message", T: () => AbilityInvokeEntryHead },
            { no: 4, name: "forward_peer", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "event_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "forward_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ForwardType", ForwardType] },
            { no: 15, name: "ability_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 14, name: "total_tick_time", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityInvokeEntry>): AbilityInvokeEntry {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvokeEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvokeEntry): AbilityInvokeEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityInvokeArgument argument_type */ 1:
                    message.argumentType = reader.int32();
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntryHead head */ 2:
                    message.head = AbilityInvokeEntryHead.internalBinaryRead(reader, reader.uint32(), options, message.head);
                    break;
                case /* optional uint32 forward_peer */ 4:
                    message.forwardPeer = reader.uint32();
                    break;
                case /* optional uint32 event_id */ 12:
                    message.eventId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ForwardType forward_type */ 3:
                    message.forwardType = reader.int32();
                    break;
                case /* optional bytes ability_data */ 15:
                    message.abilityData = reader.bytes();
                    break;
                case /* optional double total_tick_time */ 14:
                    message.totalTickTime = reader.double();
                    break;
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvokeEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityInvokeArgument argument_type = 1; */
        if (message.argumentType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.argumentType);
        /* optional com.midnights.game.AbilityInvokeEntryHead head = 2; */
        if (message.head)
            AbilityInvokeEntryHead.internalBinaryWrite(message.head, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 forward_peer = 4; */
        if (message.forwardPeer !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.forwardPeer);
        /* optional uint32 event_id = 12; */
        if (message.eventId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.eventId);
        /* optional com.midnights.game.ForwardType forward_type = 3; */
        if (message.forwardType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.forwardType);
        /* optional bytes ability_data = 15; */
        if (message.abilityData !== undefined)
            writer.tag(15, WireType.LengthDelimited).bytes(message.abilityData);
        /* optional double total_tick_time = 14; */
        if (message.totalTickTime !== undefined)
            writer.tag(14, WireType.Bit64).double(message.totalTickTime);
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityInvokeEntry
 */
export const AbilityInvokeEntry = new AbilityInvokeEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvocationFixedNotify$Type extends MessageType<AbilityInvocationFixedNotify> {
    constructor() {
        super("com.midnights.game.AbilityInvocationFixedNotify", [
            { no: 14, name: "invoke6th", kind: "message", jsonName: "invoke6th", T: () => AbilityInvokeEntry },
            { no: 8, name: "invoke5th", kind: "message", jsonName: "invoke5th", T: () => AbilityInvokeEntry },
            { no: 1, name: "invoke4th", kind: "message", jsonName: "invoke4th", T: () => AbilityInvokeEntry },
            { no: 5, name: "invoke2nd", kind: "message", jsonName: "invoke2nd", T: () => AbilityInvokeEntry },
            { no: 10, name: "invoke1st", kind: "message", jsonName: "invoke1st", T: () => AbilityInvokeEntry },
            { no: 12, name: "invoke3rd", kind: "message", jsonName: "invoke3rd", T: () => AbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<AbilityInvocationFixedNotify>): AbilityInvocationFixedNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvocationFixedNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvocationFixedNotify): AbilityInvocationFixedNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityInvokeEntry invoke6th = 14 [json_name = "invoke6th"];*/ 14:
                    message.invoke6Th = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke6Th);
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke5th = 8 [json_name = "invoke5th"];*/ 8:
                    message.invoke5Th = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke5Th);
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke4th = 1 [json_name = "invoke4th"];*/ 1:
                    message.invoke4Th = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke4Th);
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke2nd = 5 [json_name = "invoke2nd"];*/ 5:
                    message.invoke2Nd = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke2Nd);
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke1st = 10 [json_name = "invoke1st"];*/ 10:
                    message.invoke1St = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke1St);
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke3rd = 12 [json_name = "invoke3rd"];*/ 12:
                    message.invoke3Rd = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke3Rd);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvocationFixedNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityInvokeEntry invoke6th = 14 [json_name = "invoke6th"]; */
        if (message.invoke6Th)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke6Th, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityInvokeEntry invoke5th = 8 [json_name = "invoke5th"]; */
        if (message.invoke5Th)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke5Th, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityInvokeEntry invoke4th = 1 [json_name = "invoke4th"]; */
        if (message.invoke4Th)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke4Th, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityInvokeEntry invoke2nd = 5 [json_name = "invoke2nd"]; */
        if (message.invoke2Nd)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke2Nd, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityInvokeEntry invoke1st = 10 [json_name = "invoke1st"]; */
        if (message.invoke1St)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke1St, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityInvokeEntry invoke3rd = 12 [json_name = "invoke3rd"]; */
        if (message.invoke3Rd)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke3Rd, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityInvocationFixedNotify
 */
export const AbilityInvocationFixedNotify = new AbilityInvocationFixedNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvocationsNotify$Type extends MessageType<AbilityInvocationsNotify> {
    constructor() {
        super("com.midnights.game.AbilityInvocationsNotify", [
            { no: 2, name: "invokes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<AbilityInvocationsNotify>): AbilityInvocationsNotify {
        const message = { invokes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvocationsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvocationsNotify): AbilityInvocationsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AbilityInvokeEntry invokes */ 2:
                    message.invokes.push(AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvocationsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AbilityInvokeEntry invokes = 2; */
        for (let i = 0; i < message.invokes.length; i++)
            AbilityInvokeEntry.internalBinaryWrite(message.invokes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityInvocationsNotify
 */
export const AbilityInvocationsNotify = new AbilityInvocationsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaReInitOverrideMap$Type extends MessageType<AbilityMetaReInitOverrideMap> {
    constructor() {
        super("com.midnights.game.AbilityMetaReInitOverrideMap", [
            { no: 7, name: "override_map", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AbilityScalarValueEntry }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaReInitOverrideMap>): AbilityMetaReInitOverrideMap {
        const message = { overrideMap: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaReInitOverrideMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaReInitOverrideMap): AbilityMetaReInitOverrideMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AbilityScalarValueEntry override_map */ 7:
                    message.overrideMap.push(AbilityScalarValueEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaReInitOverrideMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AbilityScalarValueEntry override_map = 7; */
        for (let i = 0; i < message.overrideMap.length; i++)
            AbilityScalarValueEntry.internalBinaryWrite(message.overrideMap[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaReInitOverrideMap
 */
export const AbilityMetaReInitOverrideMap = new AbilityMetaReInitOverrideMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaAddAbility$Type extends MessageType<AbilityMetaAddAbility> {
    constructor() {
        super("com.midnights.game.AbilityMetaAddAbility", [
            { no: 12, name: "ability", kind: "message", T: () => AbilityAppliedAbility }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaAddAbility>): AbilityMetaAddAbility {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaAddAbility>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaAddAbility): AbilityMetaAddAbility {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityAppliedAbility ability */ 12:
                    message.ability = AbilityAppliedAbility.internalBinaryRead(reader, reader.uint32(), options, message.ability);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaAddAbility, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityAppliedAbility ability = 12; */
        if (message.ability)
            AbilityAppliedAbility.internalBinaryWrite(message.ability, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaAddAbility
 */
export const AbilityMetaAddAbility = new AbilityMetaAddAbility$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifierProperty$Type extends MessageType<ModifierProperty> {
    constructor() {
        super("com.midnights.game.ModifierProperty", [
            { no: 15, name: "key", kind: "message", T: () => AbilityString },
            { no: 5, name: "value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ModifierProperty>): ModifierProperty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModifierProperty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifierProperty): ModifierProperty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityString key */ 15:
                    message.key = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.key);
                    break;
                case /* optional float value */ 5:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifierProperty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityString key = 15; */
        if (message.key)
            AbilityString.internalBinaryWrite(message.key, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional float value = 5; */
        if (message.value !== undefined)
            writer.tag(5, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ModifierProperty
 */
export const ModifierProperty = new ModifierProperty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaModifierChange$Type extends MessageType<AbilityMetaModifierChange> {
    constructor() {
        super("com.midnights.game.AbilityMetaModifierChange", [
            { no: 7, name: "attached_instanced_modifier", kind: "message", T: () => AbilityAttachedModifier },
            { no: 4, name: "server_buff_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_attached_parent_ability", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "action", kind: "enum", opt: true, T: () => ["com.midnights.game.ModifierAction", ModifierAction] },
            { no: 2, name: "modifier_local_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "parent_ability_name", kind: "message", T: () => AbilityString },
            { no: 6, name: "is_mute_remote", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "apply_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "properties", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ModifierProperty },
            { no: 11, name: "parent_ability_override", kind: "message", T: () => AbilityString },
            { no: 9, name: "is_durability_zero", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaModifierChange>): AbilityMetaModifierChange {
        const message = { properties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaModifierChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaModifierChange): AbilityMetaModifierChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityAttachedModifier attached_instanced_modifier */ 7:
                    message.attachedInstancedModifier = AbilityAttachedModifier.internalBinaryRead(reader, reader.uint32(), options, message.attachedInstancedModifier);
                    break;
                case /* optional uint32 server_buff_uid */ 4:
                    message.serverBuffUid = reader.uint32();
                    break;
                case /* optional bool is_attached_parent_ability */ 10:
                    message.isAttachedParentAbility = reader.bool();
                    break;
                case /* optional com.midnights.game.ModifierAction action */ 13:
                    message.action = reader.int32();
                    break;
                case /* optional int32 modifier_local_id */ 2:
                    message.modifierLocalId = reader.int32();
                    break;
                case /* optional com.midnights.game.AbilityString parent_ability_name */ 1:
                    message.parentAbilityName = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.parentAbilityName);
                    break;
                case /* optional bool is_mute_remote */ 6:
                    message.isMuteRemote = reader.bool();
                    break;
                case /* optional uint32 apply_entity_id */ 5:
                    message.applyEntityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ModifierProperty properties */ 3:
                    message.properties.push(ModifierProperty.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.AbilityString parent_ability_override */ 11:
                    message.parentAbilityOverride = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.parentAbilityOverride);
                    break;
                case /* optional bool is_durability_zero */ 9:
                    message.isDurabilityZero = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaModifierChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityAttachedModifier attached_instanced_modifier = 7; */
        if (message.attachedInstancedModifier)
            AbilityAttachedModifier.internalBinaryWrite(message.attachedInstancedModifier, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 server_buff_uid = 4; */
        if (message.serverBuffUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.serverBuffUid);
        /* optional bool is_attached_parent_ability = 10; */
        if (message.isAttachedParentAbility !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isAttachedParentAbility);
        /* optional com.midnights.game.ModifierAction action = 13; */
        if (message.action !== undefined)
            writer.tag(13, WireType.Varint).int32(message.action);
        /* optional int32 modifier_local_id = 2; */
        if (message.modifierLocalId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.modifierLocalId);
        /* optional com.midnights.game.AbilityString parent_ability_name = 1; */
        if (message.parentAbilityName)
            AbilityString.internalBinaryWrite(message.parentAbilityName, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_mute_remote = 6; */
        if (message.isMuteRemote !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isMuteRemote);
        /* optional uint32 apply_entity_id = 5; */
        if (message.applyEntityId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.applyEntityId);
        /* repeated com.midnights.game.ModifierProperty properties = 3; */
        for (let i = 0; i < message.properties.length; i++)
            ModifierProperty.internalBinaryWrite(message.properties[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityString parent_ability_override = 11; */
        if (message.parentAbilityOverride)
            AbilityString.internalBinaryWrite(message.parentAbilityOverride, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_durability_zero = 9; */
        if (message.isDurabilityZero !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isDurabilityZero);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaModifierChange
 */
export const AbilityMetaModifierChange = new AbilityMetaModifierChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaDurabilityIsZero$Type extends MessageType<AbilityMetaDurabilityIsZero> {
    constructor() {
        super("com.midnights.game.AbilityMetaDurabilityIsZero", [
            { no: 5, name: "is_zero", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaDurabilityIsZero>): AbilityMetaDurabilityIsZero {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaDurabilityIsZero>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaDurabilityIsZero): AbilityMetaDurabilityIsZero {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_zero */ 5:
                    message.isZero = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaDurabilityIsZero, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_zero = 5; */
        if (message.isZero !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isZero);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaDurabilityIsZero
 */
export const AbilityMetaDurabilityIsZero = new AbilityMetaDurabilityIsZero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaSpecialFloatArgument$Type extends MessageType<AbilityMetaSpecialFloatArgument> {
    constructor() {
        super("com.midnights.game.AbilityMetaSpecialFloatArgument", [
            { no: 14, name: "argument_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "is_on", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaSpecialFloatArgument>): AbilityMetaSpecialFloatArgument {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaSpecialFloatArgument>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaSpecialFloatArgument): AbilityMetaSpecialFloatArgument {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float argument_value */ 14:
                    message.argumentValue = reader.float();
                    break;
                case /* optional bool is_on */ 10:
                    message.isOn = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaSpecialFloatArgument, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float argument_value = 14; */
        if (message.argumentValue !== undefined)
            writer.tag(14, WireType.Bit32).float(message.argumentValue);
        /* optional bool is_on = 10; */
        if (message.isOn !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isOn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaSpecialFloatArgument
 */
export const AbilityMetaSpecialFloatArgument = new AbilityMetaSpecialFloatArgument$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaAddOrGetAbilityAndTrigger$Type extends MessageType<AbilityMetaAddOrGetAbilityAndTrigger> {
    constructor() {
        super("com.midnights.game.AbilityMetaAddOrGetAbilityAndTrigger", [
            { no: 13, name: "ability_name", kind: "message", T: () => AbilityString },
            { no: 3, name: "trigger_argument", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "ability_override", kind: "message", T: () => AbilityString }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaAddOrGetAbilityAndTrigger>): AbilityMetaAddOrGetAbilityAndTrigger {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaAddOrGetAbilityAndTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaAddOrGetAbilityAndTrigger): AbilityMetaAddOrGetAbilityAndTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AbilityString ability_name */ 13:
                    message.abilityName = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.abilityName);
                    break;
                case /* optional float trigger_argument */ 3:
                    message.triggerArgument = reader.float();
                    break;
                case /* optional com.midnights.game.AbilityString ability_override */ 8:
                    message.abilityOverride = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.abilityOverride);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaAddOrGetAbilityAndTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AbilityString ability_name = 13; */
        if (message.abilityName)
            AbilityString.internalBinaryWrite(message.abilityName, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional float trigger_argument = 3; */
        if (message.triggerArgument !== undefined)
            writer.tag(3, WireType.Bit32).float(message.triggerArgument);
        /* optional com.midnights.game.AbilityString ability_override = 8; */
        if (message.abilityOverride)
            AbilityString.internalBinaryWrite(message.abilityOverride, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaAddOrGetAbilityAndTrigger
 */
export const AbilityMetaAddOrGetAbilityAndTrigger = new AbilityMetaAddOrGetAbilityAndTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaSetKilledState$Type extends MessageType<AbilityMetaSetKilledState> {
    constructor() {
        super("com.midnights.game.AbilityMetaSetKilledState", [
            { no: 2, name: "killed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaSetKilledState>): AbilityMetaSetKilledState {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaSetKilledState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaSetKilledState): AbilityMetaSetKilledState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool killed */ 2:
                    message.killed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaSetKilledState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool killed = 2; */
        if (message.killed !== undefined)
            writer.tag(2, WireType.Varint).bool(message.killed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaSetKilledState
 */
export const AbilityMetaSetKilledState = new AbilityMetaSetKilledState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaSetAbilityTrigger$Type extends MessageType<AbilityMetaSetAbilityTrigger> {
    constructor() {
        super("com.midnights.game.AbilityMetaSetAbilityTrigger", [
            { no: 11, name: "trigger_ability_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaSetAbilityTrigger>): AbilityMetaSetAbilityTrigger {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaSetAbilityTrigger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaSetAbilityTrigger): AbilityMetaSetAbilityTrigger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trigger_ability_entity_id */ 11:
                    message.triggerAbilityEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaSetAbilityTrigger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trigger_ability_entity_id = 11; */
        if (message.triggerAbilityEntityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.triggerAbilityEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaSetAbilityTrigger
 */
export const AbilityMetaSetAbilityTrigger = new AbilityMetaSetAbilityTrigger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaSetModifierApplyEntityId$Type extends MessageType<AbilityMetaSetModifierApplyEntityId> {
    constructor() {
        super("com.midnights.game.AbilityMetaSetModifierApplyEntityId", [
            { no: 10, name: "apply_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaSetModifierApplyEntityId>): AbilityMetaSetModifierApplyEntityId {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaSetModifierApplyEntityId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaSetModifierApplyEntityId): AbilityMetaSetModifierApplyEntityId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 apply_entity_id */ 10:
                    message.applyEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaSetModifierApplyEntityId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 apply_entity_id = 10; */
        if (message.applyEntityId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.applyEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaSetModifierApplyEntityId
 */
export const AbilityMetaSetModifierApplyEntityId = new AbilityMetaSetModifierApplyEntityId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaModifierDurabilityChange$Type extends MessageType<AbilityMetaModifierDurabilityChange> {
    constructor() {
        super("com.midnights.game.AbilityMetaModifierDurabilityChange", [
            { no: 6, name: "reduce_durability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "remain_durability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaModifierDurabilityChange>): AbilityMetaModifierDurabilityChange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaModifierDurabilityChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaModifierDurabilityChange): AbilityMetaModifierDurabilityChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float reduce_durability */ 6:
                    message.reduceDurability = reader.float();
                    break;
                case /* optional float remain_durability */ 15:
                    message.remainDurability = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaModifierDurabilityChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float reduce_durability = 6; */
        if (message.reduceDurability !== undefined)
            writer.tag(6, WireType.Bit32).float(message.reduceDurability);
        /* optional float remain_durability = 15; */
        if (message.remainDurability !== undefined)
            writer.tag(15, WireType.Bit32).float(message.remainDurability);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaModifierDurabilityChange
 */
export const AbilityMetaModifierDurabilityChange = new AbilityMetaModifierDurabilityChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaElementReactionVisual$Type extends MessageType<AbilityMetaElementReactionVisual> {
    constructor() {
        super("com.midnights.game.AbilityMetaElementReactionVisual", [
            { no: 2, name: "hit_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "element_source_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "element_reactor_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "element_reaction_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaElementReactionVisual>): AbilityMetaElementReactionVisual {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaElementReactionVisual>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaElementReactionVisual): AbilityMetaElementReactionVisual {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 hit_index */ 2:
                    message.hitIndex = reader.int32();
                    break;
                case /* optional uint32 element_source_type */ 12:
                    message.elementSourceType = reader.uint32();
                    break;
                case /* optional uint32 element_reactor_type */ 6:
                    message.elementReactorType = reader.uint32();
                    break;
                case /* optional uint32 element_reaction_type */ 5:
                    message.elementReactionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaElementReactionVisual, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 hit_index = 2; */
        if (message.hitIndex !== undefined)
            writer.tag(2, WireType.Varint).int32(message.hitIndex);
        /* optional uint32 element_source_type = 12; */
        if (message.elementSourceType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.elementSourceType);
        /* optional uint32 element_reactor_type = 6; */
        if (message.elementReactorType !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.elementReactorType);
        /* optional uint32 element_reaction_type = 5; */
        if (message.elementReactionType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.elementReactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaElementReactionVisual
 */
export const AbilityMetaElementReactionVisual = new AbilityMetaElementReactionVisual$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaTriggerElementReaction$Type extends MessageType<AbilityMetaTriggerElementReaction> {
    constructor() {
        super("com.midnights.game.AbilityMetaTriggerElementReaction", [
            { no: 9, name: "hit_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "element_source_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "element_reactor_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "trigger_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "element_reaction_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaTriggerElementReaction>): AbilityMetaTriggerElementReaction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaTriggerElementReaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaTriggerElementReaction): AbilityMetaTriggerElementReaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 hit_index */ 9:
                    message.hitIndex = reader.int32();
                    break;
                case /* optional uint32 element_source_type */ 7:
                    message.elementSourceType = reader.uint32();
                    break;
                case /* optional uint32 element_reactor_type */ 12:
                    message.elementReactorType = reader.uint32();
                    break;
                case /* optional uint32 trigger_entity_id */ 2:
                    message.triggerEntityId = reader.uint32();
                    break;
                case /* optional uint32 element_reaction_type */ 1:
                    message.elementReactionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaTriggerElementReaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 hit_index = 9; */
        if (message.hitIndex !== undefined)
            writer.tag(9, WireType.Varint).int32(message.hitIndex);
        /* optional uint32 element_source_type = 7; */
        if (message.elementSourceType !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.elementSourceType);
        /* optional uint32 element_reactor_type = 12; */
        if (message.elementReactorType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.elementReactorType);
        /* optional uint32 trigger_entity_id = 2; */
        if (message.triggerEntityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.triggerEntityId);
        /* optional uint32 element_reaction_type = 1; */
        if (message.elementReactionType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.elementReactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaTriggerElementReaction
 */
export const AbilityMetaTriggerElementReaction = new AbilityMetaTriggerElementReaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaLoseHp$Type extends MessageType<AbilityMetaLoseHp> {
    constructor() {
        super("com.midnights.game.AbilityMetaLoseHp", [
            { no: 10, name: "lose_hp_config_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaLoseHp>): AbilityMetaLoseHp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaLoseHp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaLoseHp): AbilityMetaLoseHp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 lose_hp_config_idx */ 10:
                    message.loseHpConfigIdx = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaLoseHp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 lose_hp_config_idx = 10; */
        if (message.loseHpConfigIdx !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.loseHpConfigIdx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaLoseHp
 */
export const AbilityMetaLoseHp = new AbilityMetaLoseHp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaSetPoseParameter$Type extends MessageType<AbilityMetaSetPoseParameter> {
    constructor() {
        super("com.midnights.game.AbilityMetaSetPoseParameter", [
            { no: 6, name: "value", kind: "message", T: () => AnimatorParameterValueInfoPair }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaSetPoseParameter>): AbilityMetaSetPoseParameter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaSetPoseParameter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaSetPoseParameter): AbilityMetaSetPoseParameter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AnimatorParameterValueInfoPair value */ 6:
                    message.value = AnimatorParameterValueInfoPair.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaSetPoseParameter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.AnimatorParameterValueInfoPair value = 6; */
        if (message.value)
            AnimatorParameterValueInfoPair.internalBinaryWrite(message.value, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaSetPoseParameter
 */
export const AbilityMetaSetPoseParameter = new AbilityMetaSetPoseParameter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMetaUpdateBaseReactionDamage$Type extends MessageType<AbilityMetaUpdateBaseReactionDamage> {
    constructor() {
        super("com.midnights.game.AbilityMetaUpdateBaseReactionDamage", [
            { no: 15, name: "source_caster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "ability_name", kind: "message", T: () => AbilityString },
            { no: 4, name: "global_value_key", kind: "message", T: () => AbilityString },
            { no: 8, name: "reaction_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMetaUpdateBaseReactionDamage>): AbilityMetaUpdateBaseReactionDamage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMetaUpdateBaseReactionDamage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMetaUpdateBaseReactionDamage): AbilityMetaUpdateBaseReactionDamage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 source_caster_id */ 15:
                    message.sourceCasterId = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilityString ability_name */ 1:
                    message.abilityName = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.abilityName);
                    break;
                case /* optional com.midnights.game.AbilityString global_value_key */ 4:
                    message.globalValueKey = AbilityString.internalBinaryRead(reader, reader.uint32(), options, message.globalValueKey);
                    break;
                case /* optional uint32 reaction_type */ 8:
                    message.reactionType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMetaUpdateBaseReactionDamage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 source_caster_id = 15; */
        if (message.sourceCasterId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sourceCasterId);
        /* optional com.midnights.game.AbilityString ability_name = 1; */
        if (message.abilityName)
            AbilityString.internalBinaryWrite(message.abilityName, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AbilityString global_value_key = 4; */
        if (message.globalValueKey)
            AbilityString.internalBinaryWrite(message.globalValueKey, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reaction_type = 8; */
        if (message.reactionType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.reactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMetaUpdateBaseReactionDamage
 */
export const AbilityMetaUpdateBaseReactionDamage = new AbilityMetaUpdateBaseReactionDamage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionTriggerAbility$Type extends MessageType<AbilityActionTriggerAbility> {
    constructor() {
        super("com.midnights.game.AbilityActionTriggerAbility", [
            { no: 14, name: "other_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionTriggerAbility>): AbilityActionTriggerAbility {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionTriggerAbility>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionTriggerAbility): AbilityActionTriggerAbility {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 other_id */ 14:
                    message.otherId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionTriggerAbility, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 other_id = 14; */
        if (message.otherId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.otherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionTriggerAbility
 */
export const AbilityActionTriggerAbility = new AbilityActionTriggerAbility$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionSetCrashDamage$Type extends MessageType<AbilityActionSetCrashDamage> {
    constructor() {
        super("com.midnights.game.AbilityActionSetCrashDamage", [
            { no: 2, name: "hit_pos", kind: "message", T: () => Vector },
            { no: 15, name: "damage", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionSetCrashDamage>): AbilityActionSetCrashDamage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionSetCrashDamage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionSetCrashDamage): AbilityActionSetCrashDamage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector hit_pos */ 2:
                    message.hitPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.hitPos);
                    break;
                case /* optional float damage */ 15:
                    message.damage = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionSetCrashDamage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector hit_pos = 2; */
        if (message.hitPos)
            Vector.internalBinaryWrite(message.hitPos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional float damage = 15; */
        if (message.damage !== undefined)
            writer.tag(15, WireType.Bit32).float(message.damage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionSetCrashDamage
 */
export const AbilityActionSetCrashDamage = new AbilityActionSetCrashDamage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityBornType$Type extends MessageType<AbilityBornType> {
    constructor() {
        super("com.midnights.game.AbilityBornType", [
            { no: 2, name: "rot", kind: "message", T: () => Vector },
            { no: 14, name: "move_dir", kind: "message", T: () => Vector },
            { no: 5, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityBornType>): AbilityBornType {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityBornType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityBornType): AbilityBornType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 2:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector move_dir */ 14:
                    message.moveDir = Vector.internalBinaryRead(reader, reader.uint32(), options, message.moveDir);
                    break;
                case /* optional com.midnights.game.Vector pos */ 5:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityBornType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 2; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector move_dir = 14; */
        if (message.moveDir)
            Vector.internalBinaryWrite(message.moveDir, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 5; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityBornType
 */
export const AbilityBornType = new AbilityBornType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionSummon$Type extends MessageType<AbilityActionSummon> {
    constructor() {
        super("com.midnights.game.AbilityActionSummon", [
            { no: 10, name: "pos", kind: "message", T: () => Vector },
            { no: 1, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionSummon>): AbilityActionSummon {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionSummon>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionSummon): AbilityActionSummon {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 1:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionSummon, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 1; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionSummon
 */
export const AbilityActionSummon = new AbilityActionSummon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionBlink$Type extends MessageType<AbilityActionBlink> {
    constructor() {
        super("com.midnights.game.AbilityActionBlink", [
            { no: 11, name: "rot", kind: "message", T: () => Vector },
            { no: 10, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionBlink>): AbilityActionBlink {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionBlink>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionBlink): AbilityActionBlink {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 11:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionBlink, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 11; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionBlink
 */
export const AbilityActionBlink = new AbilityActionBlink$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionCreateGadget$Type extends MessageType<AbilityActionCreateGadget> {
    constructor() {
        super("com.midnights.game.AbilityActionCreateGadget", [
            { no: 3, name: "room_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "rot", kind: "message", T: () => Vector },
            { no: 11, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionCreateGadget>): AbilityActionCreateGadget {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionCreateGadget>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionCreateGadget): AbilityActionCreateGadget {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 room_id */ 3:
                    message.roomId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 8:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 11:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionCreateGadget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 room_id = 3; */
        if (message.roomId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.roomId);
        /* optional com.midnights.game.Vector rot = 8; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 11; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionCreateGadget
 */
export const AbilityActionCreateGadget = new AbilityActionCreateGadget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionSetRandomOverrideMapValue$Type extends MessageType<AbilityActionSetRandomOverrideMapValue> {
    constructor() {
        super("com.midnights.game.AbilityActionSetRandomOverrideMapValue", [
            { no: 1, name: "random_value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionSetRandomOverrideMapValue>): AbilityActionSetRandomOverrideMapValue {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionSetRandomOverrideMapValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionSetRandomOverrideMapValue): AbilityActionSetRandomOverrideMapValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float random_value */ 1:
                    message.randomValue = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionSetRandomOverrideMapValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float random_value = 1; */
        if (message.randomValue !== undefined)
            writer.tag(1, WireType.Bit32).float(message.randomValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionSetRandomOverrideMapValue
 */
export const AbilityActionSetRandomOverrideMapValue = new AbilityActionSetRandomOverrideMapValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionServerMonsterLog$Type extends MessageType<AbilityActionServerMonsterLog> {
    constructor() {
        super("com.midnights.game.AbilityActionServerMonsterLog", [
            { no: 2, name: "param_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionServerMonsterLog>): AbilityActionServerMonsterLog {
        const message = { paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionServerMonsterLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionServerMonsterLog): AbilityActionServerMonsterLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 param_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.int32());
                    else
                        message.paramList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionServerMonsterLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 param_list = 2; */
        for (let i = 0; i < message.paramList.length; i++)
            writer.tag(2, WireType.Varint).int32(message.paramList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionServerMonsterLog
 */
export const AbilityActionServerMonsterLog = new AbilityActionServerMonsterLog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionCreateTile$Type extends MessageType<AbilityActionCreateTile> {
    constructor() {
        super("com.midnights.game.AbilityActionCreateTile", [
            { no: 3, name: "rot", kind: "message", T: () => Vector },
            { no: 8, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionCreateTile>): AbilityActionCreateTile {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionCreateTile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionCreateTile): AbilityActionCreateTile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 3:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 8:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionCreateTile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 3; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 8; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionCreateTile
 */
export const AbilityActionCreateTile = new AbilityActionCreateTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionDestroyTile$Type extends MessageType<AbilityActionDestroyTile> {
    constructor() {
        super("com.midnights.game.AbilityActionDestroyTile", [
            { no: 3, name: "rot", kind: "message", T: () => Vector },
            { no: 1, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionDestroyTile>): AbilityActionDestroyTile {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionDestroyTile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionDestroyTile): AbilityActionDestroyTile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector rot */ 3:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                case /* optional com.midnights.game.Vector pos */ 1:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionDestroyTile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector rot = 3; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 1; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionDestroyTile
 */
export const AbilityActionDestroyTile = new AbilityActionDestroyTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionFireAfterImgae$Type extends MessageType<AbilityActionFireAfterImgae> {
    constructor() {
        super("com.midnights.game.AbilityActionFireAfterImgae", [
            { no: 12, name: "dir", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionFireAfterImgae>): AbilityActionFireAfterImgae {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionFireAfterImgae>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionFireAfterImgae): AbilityActionFireAfterImgae {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector dir */ 12:
                    message.dir = Vector.internalBinaryRead(reader, reader.uint32(), options, message.dir);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionFireAfterImgae, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector dir = 12; */
        if (message.dir)
            Vector.internalBinaryWrite(message.dir, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionFireAfterImgae
 */
export const AbilityActionFireAfterImgae = new AbilityActionFireAfterImgae$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityApplyLevelModifier$Type extends MessageType<AbilityApplyLevelModifier> {
    constructor() {
        super("com.midnights.game.AbilityApplyLevelModifier", [
            { no: 6, name: "apply_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityApplyLevelModifier>): AbilityApplyLevelModifier {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityApplyLevelModifier>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityApplyLevelModifier): AbilityApplyLevelModifier {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 apply_entity_id */ 6:
                    message.applyEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityApplyLevelModifier, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 apply_entity_id = 6; */
        if (message.applyEntityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.applyEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityApplyLevelModifier
 */
export const AbilityApplyLevelModifier = new AbilityApplyLevelModifier$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionGenerateElemBall$Type extends MessageType<AbilityActionGenerateElemBall> {
    constructor() {
        super("com.midnights.game.AbilityActionGenerateElemBall", [
            { no: 2, name: "room_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "pos", kind: "message", T: () => Vector },
            { no: 13, name: "rot", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityActionGenerateElemBall>): AbilityActionGenerateElemBall {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionGenerateElemBall>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionGenerateElemBall): AbilityActionGenerateElemBall {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 room_id */ 2:
                    message.roomId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 7:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.Vector rot */ 13:
                    message.rot = Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionGenerateElemBall, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 room_id = 2; */
        if (message.roomId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.roomId);
        /* optional com.midnights.game.Vector pos = 7; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector rot = 13; */
        if (message.rot)
            Vector.internalBinaryWrite(message.rot, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionGenerateElemBall
 */
export const AbilityActionGenerateElemBall = new AbilityActionGenerateElemBall$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionDeductStamina$Type extends MessageType<AbilityActionDeductStamina> {
    constructor() {
        super("com.midnights.game.AbilityActionDeductStamina", [
            { no: 1, name: "is_swim", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionDeductStamina>): AbilityActionDeductStamina {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionDeductStamina>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionDeductStamina): AbilityActionDeductStamina {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_swim */ 1:
                    message.isSwim = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionDeductStamina, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_swim = 1; */
        if (message.isSwim !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isSwim);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionDeductStamina
 */
export const AbilityActionDeductStamina = new AbilityActionDeductStamina$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionHitEffect$Type extends MessageType<AbilityActionHitEffect> {
    constructor() {
        super("com.midnights.game.AbilityActionHitEffect", [
            { no: 3, name: "trigger_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionHitEffect>): AbilityActionHitEffect {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionHitEffect>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionHitEffect): AbilityActionHitEffect {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trigger_id */ 3:
                    message.triggerId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionHitEffect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trigger_id = 3; */
        if (message.triggerId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.triggerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionHitEffect
 */
export const AbilityActionHitEffect = new AbilityActionHitEffect$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityActionSetBulletTrackTarget$Type extends MessageType<AbilityActionSetBulletTrackTarget> {
    constructor() {
        super("com.midnights.game.AbilityActionSetBulletTrackTarget", [
            { no: 1, name: "chased_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lock_point_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityActionSetBulletTrackTarget>): AbilityActionSetBulletTrackTarget {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityActionSetBulletTrackTarget>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityActionSetBulletTrackTarget): AbilityActionSetBulletTrackTarget {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 chased_entity_id */ 1:
                    message.chasedEntityId = reader.uint32();
                    break;
                case /* optional uint32 lock_point_index */ 2:
                    message.lockPointIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityActionSetBulletTrackTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 chased_entity_id = 1; */
        if (message.chasedEntityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.chasedEntityId);
        /* optional uint32 lock_point_index = 2; */
        if (message.lockPointIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.lockPointIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityActionSetBulletTrackTarget
 */
export const AbilityActionSetBulletTrackTarget = new AbilityActionSetBulletTrackTarget$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinEmpty$Type extends MessageType<AbilityMixinEmpty> {
    constructor() {
        super("com.midnights.game.AbilityMixinEmpty", []);
    }
    create(value?: PartialMessage<AbilityMixinEmpty>): AbilityMixinEmpty {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinEmpty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinEmpty): AbilityMixinEmpty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AbilityMixinEmpty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinEmpty
 */
export const AbilityMixinEmpty = new AbilityMixinEmpty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinAvatarSteerByCamera$Type extends MessageType<AbilityMixinAvatarSteerByCamera> {
    constructor() {
        super("com.midnights.game.AbilityMixinAvatarSteerByCamera", [
            { no: 7, name: "target_dir", kind: "message", T: () => Vector },
            { no: 6, name: "target_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinAvatarSteerByCamera>): AbilityMixinAvatarSteerByCamera {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinAvatarSteerByCamera>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinAvatarSteerByCamera): AbilityMixinAvatarSteerByCamera {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector target_dir */ 7:
                    message.targetDir = Vector.internalBinaryRead(reader, reader.uint32(), options, message.targetDir);
                    break;
                case /* optional com.midnights.game.Vector target_pos */ 6:
                    message.targetPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.targetPos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinAvatarSteerByCamera, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector target_dir = 7; */
        if (message.targetDir)
            Vector.internalBinaryWrite(message.targetDir, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector target_pos = 6; */
        if (message.targetPos)
            Vector.internalBinaryWrite(message.targetPos, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinAvatarSteerByCamera
 */
export const AbilityMixinAvatarSteerByCamera = new AbilityMixinAvatarSteerByCamera$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindZone$Type extends MessageType<AbilityMixinWindZone> {
    constructor() {
        super("com.midnights.game.AbilityMixinWindZone", [
            { no: 13, name: "entity_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "zone_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindZone>): AbilityMixinWindZone {
        const message = { entityIds: [], zoneIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindZone>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindZone): AbilityMixinWindZone {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 entity_ids */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.entityIds.push(reader.uint32());
                    else
                        message.entityIds.push(reader.uint32());
                    break;
                case /* repeated uint32 zone_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.zoneIdList.push(reader.uint32());
                    else
                        message.zoneIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindZone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 entity_ids = 13; */
        for (let i = 0; i < message.entityIds.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.entityIds[i]);
        /* repeated uint32 zone_id_list = 10; */
        for (let i = 0; i < message.zoneIdList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.zoneIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWindZone
 */
export const AbilityMixinWindZone = new AbilityMixinWindZone$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinCostStamina$Type extends MessageType<AbilityMixinCostStamina> {
    constructor() {
        super("com.midnights.game.AbilityMixinCostStamina", [
            { no: 3, name: "is_swim", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinCostStamina>): AbilityMixinCostStamina {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinCostStamina>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinCostStamina): AbilityMixinCostStamina {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_swim */ 3:
                    message.isSwim = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinCostStamina, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_swim = 3; */
        if (message.isSwim !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSwim);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinCostStamina
 */
export const AbilityMixinCostStamina = new AbilityMixinCostStamina$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinEliteShield$Type extends MessageType<AbilityMixinEliteShield> {
    constructor() {
        super("com.midnights.game.AbilityMixinEliteShield", [
            { no: 2, name: "sub_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinEliteShield>): AbilityMixinEliteShield {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinEliteShield>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinEliteShield): AbilityMixinEliteShield {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float sub_shield */ 2:
                    message.subShield = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinEliteShield, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float sub_shield = 2; */
        if (message.subShield !== undefined)
            writer.tag(2, WireType.Bit32).float(message.subShield);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinEliteShield
 */
export const AbilityMixinEliteShield = new AbilityMixinEliteShield$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinElementShield$Type extends MessageType<AbilityMixinElementShield> {
    constructor() {
        super("com.midnights.game.AbilityMixinElementShield", [
            { no: 10, name: "sub_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 1, name: "absorb_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "player_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_shield_broken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "max_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinElementShield>): AbilityMixinElementShield {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinElementShield>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinElementShield): AbilityMixinElementShield {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float sub_shield */ 10:
                    message.subShield = reader.float();
                    break;
                case /* optional float shield */ 8:
                    message.shield = reader.float();
                    break;
                case /* optional uint32 absorb_type */ 1:
                    message.absorbType = reader.uint32();
                    break;
                case /* optional uint32 player_num */ 4:
                    message.playerNum = reader.uint32();
                    break;
                case /* optional bool is_shield_broken */ 9:
                    message.isShieldBroken = reader.bool();
                    break;
                case /* optional float max_shield */ 12:
                    message.maxShield = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinElementShield, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float sub_shield = 10; */
        if (message.subShield !== undefined)
            writer.tag(10, WireType.Bit32).float(message.subShield);
        /* optional float shield = 8; */
        if (message.shield !== undefined)
            writer.tag(8, WireType.Bit32).float(message.shield);
        /* optional uint32 absorb_type = 1; */
        if (message.absorbType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.absorbType);
        /* optional uint32 player_num = 4; */
        if (message.playerNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.playerNum);
        /* optional bool is_shield_broken = 9; */
        if (message.isShieldBroken !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isShieldBroken);
        /* optional float max_shield = 12; */
        if (message.maxShield !== undefined)
            writer.tag(12, WireType.Bit32).float(message.maxShield);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinElementShield
 */
export const AbilityMixinElementShield = new AbilityMixinElementShield$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinGlobalShield$Type extends MessageType<AbilityMixinGlobalShield> {
    constructor() {
        super("com.midnights.game.AbilityMixinGlobalShield", [
            { no: 4, name: "is_create_effect", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "sub_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "height_offset", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "max_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "shield_effect_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinGlobalShield>): AbilityMixinGlobalShield {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinGlobalShield>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinGlobalShield): AbilityMixinGlobalShield {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_create_effect */ 4:
                    message.isCreateEffect = reader.bool();
                    break;
                case /* optional float sub_shield */ 7:
                    message.subShield = reader.float();
                    break;
                case /* optional float height_offset */ 5:
                    message.heightOffset = reader.float();
                    break;
                case /* optional uint32 avatar_id */ 11:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional float max_shield */ 10:
                    message.maxShield = reader.float();
                    break;
                case /* optional string shield_effect_name */ 2:
                    message.shieldEffectName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinGlobalShield, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_create_effect = 4; */
        if (message.isCreateEffect !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isCreateEffect);
        /* optional float sub_shield = 7; */
        if (message.subShield !== undefined)
            writer.tag(7, WireType.Bit32).float(message.subShield);
        /* optional float height_offset = 5; */
        if (message.heightOffset !== undefined)
            writer.tag(5, WireType.Bit32).float(message.heightOffset);
        /* optional uint32 avatar_id = 11; */
        if (message.avatarId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.avatarId);
        /* optional float max_shield = 10; */
        if (message.maxShield !== undefined)
            writer.tag(10, WireType.Bit32).float(message.maxShield);
        /* optional string shield_effect_name = 2; */
        if (message.shieldEffectName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.shieldEffectName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinGlobalShield
 */
export const AbilityMixinGlobalShield = new AbilityMixinGlobalShield$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinShieldBar$Type extends MessageType<AbilityMixinShieldBar> {
    constructor() {
        super("com.midnights.game.AbilityMixinShieldBar", [
            { no: 14, name: "player_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "max_shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "shield", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "element_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinShieldBar>): AbilityMixinShieldBar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinShieldBar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinShieldBar): AbilityMixinShieldBar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_num */ 14:
                    message.playerNum = reader.uint32();
                    break;
                case /* optional float max_shield */ 15:
                    message.maxShield = reader.float();
                    break;
                case /* optional float shield */ 12:
                    message.shield = reader.float();
                    break;
                case /* optional uint32 element_type */ 13:
                    message.elementType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinShieldBar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_num = 14; */
        if (message.playerNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.playerNum);
        /* optional float max_shield = 15; */
        if (message.maxShield !== undefined)
            writer.tag(15, WireType.Bit32).float(message.maxShield);
        /* optional float shield = 12; */
        if (message.shield !== undefined)
            writer.tag(12, WireType.Bit32).float(message.shield);
        /* optional uint32 element_type = 13; */
        if (message.elementType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.elementType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinShieldBar
 */
export const AbilityMixinShieldBar = new AbilityMixinShieldBar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner$Type extends MessageType<AbilityMixinWindSeedSpawner> {
    constructor() {
        super("com.midnights.game.AbilityMixinWindSeedSpawner", [
            { no: 2, name: "add_signal", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_AddSignal },
            { no: 15, name: "refresh_seed", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_RefreshSeed },
            { no: 11, name: "catch_seed", kind: "message", oneof: "cmd", T: () => AbilityMixinWindSeedSpawner_CatchSeed }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner>): AbilityMixinWindSeedSpawner {
        const message = { cmd: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner): AbilityMixinWindSeedSpawner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal add_signal */ 2:
                    message.cmd = {
                        oneofKind: "addSignal",
                        addSignal: AbilityMixinWindSeedSpawner_AddSignal.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).addSignal)
                    };
                    break;
                case /* com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed */ 15:
                    message.cmd = {
                        oneofKind: "refreshSeed",
                        refreshSeed: AbilityMixinWindSeedSpawner_RefreshSeed.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).refreshSeed)
                    };
                    break;
                case /* com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed catch_seed */ 11:
                    message.cmd = {
                        oneofKind: "catchSeed",
                        catchSeed: AbilityMixinWindSeedSpawner_CatchSeed.internalBinaryRead(reader, reader.uint32(), options, (message.cmd as any).catchSeed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal add_signal = 2; */
        if (message.cmd.oneofKind === "addSignal")
            AbilityMixinWindSeedSpawner_AddSignal.internalBinaryWrite(message.cmd.addSignal, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed refresh_seed = 15; */
        if (message.cmd.oneofKind === "refreshSeed")
            AbilityMixinWindSeedSpawner_RefreshSeed.internalBinaryWrite(message.cmd.refreshSeed, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed catch_seed = 11; */
        if (message.cmd.oneofKind === "catchSeed")
            AbilityMixinWindSeedSpawner_CatchSeed.internalBinaryWrite(message.cmd.catchSeed, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWindSeedSpawner
 */
export const AbilityMixinWindSeedSpawner = new AbilityMixinWindSeedSpawner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_AddSignal$Type extends MessageType<AbilityMixinWindSeedSpawner_AddSignal> {
    constructor() {
        super("com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal", []);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_AddSignal>): AbilityMixinWindSeedSpawner_AddSignal {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_AddSignal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_AddSignal): AbilityMixinWindSeedSpawner_AddSignal {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_AddSignal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.AddSignal
 */
export const AbilityMixinWindSeedSpawner_AddSignal = new AbilityMixinWindSeedSpawner_AddSignal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_RefreshSeed$Type extends MessageType<AbilityMixinWindSeedSpawner_RefreshSeed> {
    constructor() {
        super("com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed", [
            { no: 6, name: "pos_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_RefreshSeed>): AbilityMixinWindSeedSpawner_RefreshSeed {
        const message = { posList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_RefreshSeed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_RefreshSeed): AbilityMixinWindSeedSpawner_RefreshSeed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Vector pos_list */ 6:
                    message.posList.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_RefreshSeed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Vector pos_list = 6; */
        for (let i = 0; i < message.posList.length; i++)
            Vector.internalBinaryWrite(message.posList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.RefreshSeed
 */
export const AbilityMixinWindSeedSpawner_RefreshSeed = new AbilityMixinWindSeedSpawner_RefreshSeed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWindSeedSpawner_CatchSeed$Type extends MessageType<AbilityMixinWindSeedSpawner_CatchSeed> {
    constructor() {
        super("com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed", [
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWindSeedSpawner_CatchSeed>): AbilityMixinWindSeedSpawner_CatchSeed {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWindSeedSpawner_CatchSeed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWindSeedSpawner_CatchSeed): AbilityMixinWindSeedSpawner_CatchSeed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWindSeedSpawner_CatchSeed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWindSeedSpawner.CatchSeed
 */
export const AbilityMixinWindSeedSpawner_CatchSeed = new AbilityMixinWindSeedSpawner_CatchSeed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinDoActionByElementReaction$Type extends MessageType<AbilityMixinDoActionByElementReaction> {
    constructor() {
        super("com.midnights.game.AbilityMixinDoActionByElementReaction", [
            { no: 1, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinDoActionByElementReaction>): AbilityMixinDoActionByElementReaction {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinDoActionByElementReaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinDoActionByElementReaction): AbilityMixinDoActionByElementReaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_entity_id */ 1:
                    message.targetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinDoActionByElementReaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_entity_id = 1; */
        if (message.targetEntityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.targetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinDoActionByElementReaction
 */
export const AbilityMixinDoActionByElementReaction = new AbilityMixinDoActionByElementReaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinFieldEntityCountChange$Type extends MessageType<AbilityMixinFieldEntityCountChange> {
    constructor() {
        super("com.midnights.game.AbilityMixinFieldEntityCountChange", [
            { no: 14, name: "field_entity_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinFieldEntityCountChange>): AbilityMixinFieldEntityCountChange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinFieldEntityCountChange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinFieldEntityCountChange): AbilityMixinFieldEntityCountChange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 field_entity_count */ 14:
                    message.fieldEntityCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinFieldEntityCountChange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 field_entity_count = 14; */
        if (message.fieldEntityCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.fieldEntityCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinFieldEntityCountChange
 */
export const AbilityMixinFieldEntityCountChange = new AbilityMixinFieldEntityCountChange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinScenePropSync$Type extends MessageType<AbilityMixinScenePropSync> {
    constructor() {
        super("com.midnights.game.AbilityMixinScenePropSync", [
            { no: 5, name: "delete_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "is_clear_all", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "massive_prop_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MassivePropSyncInfo }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinScenePropSync>): AbilityMixinScenePropSync {
        const message = { deleteIdList: [], massivePropList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinScenePropSync>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinScenePropSync): AbilityMixinScenePropSync {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 delete_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.deleteIdList.push(reader.int64().toBigInt());
                    else
                        message.deleteIdList.push(reader.int64().toBigInt());
                    break;
                case /* optional bool is_clear_all */ 12:
                    message.isClearAll = reader.bool();
                    break;
                case /* repeated com.midnights.game.MassivePropSyncInfo massive_prop_list */ 15:
                    message.massivePropList.push(MassivePropSyncInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinScenePropSync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 delete_id_list = 5; */
        for (let i = 0; i < message.deleteIdList.length; i++)
            writer.tag(5, WireType.Varint).int64(message.deleteIdList[i]);
        /* optional bool is_clear_all = 12; */
        if (message.isClearAll !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isClearAll);
        /* repeated com.midnights.game.MassivePropSyncInfo massive_prop_list = 15; */
        for (let i = 0; i < message.massivePropList.length; i++)
            MassivePropSyncInfo.internalBinaryWrite(message.massivePropList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinScenePropSync
 */
export const AbilityMixinScenePropSync = new AbilityMixinScenePropSync$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinWidgetMpSupport$Type extends MessageType<AbilityMixinWidgetMpSupport> {
    constructor() {
        super("com.midnights.game.AbilityMixinWidgetMpSupport", [
            { no: 9, name: "target_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinWidgetMpSupport>): AbilityMixinWidgetMpSupport {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinWidgetMpSupport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinWidgetMpSupport): AbilityMixinWidgetMpSupport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_entity_id */ 9:
                    message.targetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinWidgetMpSupport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_entity_id = 9; */
        if (message.targetEntityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.targetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinWidgetMpSupport
 */
export const AbilityMixinWidgetMpSupport = new AbilityMixinWidgetMpSupport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinDoActionBySelfModifierElementDurabilityRatio$Type extends MessageType<AbilityMixinDoActionBySelfModifierElementDurabilityRatio> {
    constructor() {
        super("com.midnights.game.AbilityMixinDoActionBySelfModifierElementDurabilityRatio", [
            { no: 9, name: "last_duability_ratio", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinDoActionBySelfModifierElementDurabilityRatio>): AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinDoActionBySelfModifierElementDurabilityRatio>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinDoActionBySelfModifierElementDurabilityRatio): AbilityMixinDoActionBySelfModifierElementDurabilityRatio {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float last_duability_ratio */ 9:
                    message.lastDuabilityRatio = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinDoActionBySelfModifierElementDurabilityRatio, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional float last_duability_ratio = 9; */
        if (message.lastDuabilityRatio !== undefined)
            writer.tag(9, WireType.Bit32).float(message.lastDuabilityRatio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinDoActionBySelfModifierElementDurabilityRatio
 */
export const AbilityMixinDoActionBySelfModifierElementDurabilityRatio = new AbilityMixinDoActionBySelfModifierElementDurabilityRatio$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinFireworksLauncher$Type extends MessageType<AbilityMixinFireworksLauncher> {
    constructor() {
        super("com.midnights.game.AbilityMixinFireworksLauncher", [
            { no: 2, name: "invoke_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "start_count_down_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "fired_bullet_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "phase", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "fireworks_config", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "turn_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinFireworksLauncher>): AbilityMixinFireworksLauncher {
        const message = { fireworksConfig: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinFireworksLauncher>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinFireworksLauncher): AbilityMixinFireworksLauncher {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 invoke_type */ 2:
                    message.invokeType = reader.uint32();
                    break;
                case /* optional uint32 start_count_down_time */ 3:
                    message.startCountDownTime = reader.uint32();
                    break;
                case /* optional uint32 fired_bullet_count */ 1:
                    message.firedBulletCount = reader.uint32();
                    break;
                case /* optional uint32 phase */ 6:
                    message.phase = reader.uint32();
                    break;
                case /* repeated uint32 fireworks_config */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fireworksConfig.push(reader.uint32());
                    else
                        message.fireworksConfig.push(reader.uint32());
                    break;
                case /* optional uint32 turn_index */ 7:
                    message.turnIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinFireworksLauncher, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 invoke_type = 2; */
        if (message.invokeType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.invokeType);
        /* optional uint32 start_count_down_time = 3; */
        if (message.startCountDownTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.startCountDownTime);
        /* optional uint32 fired_bullet_count = 1; */
        if (message.firedBulletCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.firedBulletCount);
        /* optional uint32 phase = 6; */
        if (message.phase !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.phase);
        /* repeated uint32 fireworks_config = 4; */
        for (let i = 0; i < message.fireworksConfig.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.fireworksConfig[i]);
        /* optional uint32 turn_index = 7; */
        if (message.turnIndex !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.turnIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinFireworksLauncher
 */
export const AbilityMixinFireworksLauncher = new AbilityMixinFireworksLauncher$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinUGCTimeControl$Type extends MessageType<AbilityMixinUGCTimeControl> {
    constructor() {
        super("com.midnights.game.AbilityMixinUGCTimeControl", [
            { no: 13, name: "start_move_time_ms", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "start_move_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinUGCTimeControl>): AbilityMixinUGCTimeControl {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinUGCTimeControl>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinUGCTimeControl): AbilityMixinUGCTimeControl {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 start_move_time_ms */ 13:
                    message.startMoveTimeMs = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 start_move_time */ 3:
                    message.startMoveTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinUGCTimeControl, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 start_move_time_ms = 13; */
        if (message.startMoveTimeMs !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.startMoveTimeMs);
        /* optional uint32 start_move_time = 3; */
        if (message.startMoveTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.startMoveTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinUGCTimeControl
 */
export const AbilityMixinUGCTimeControl = new AbilityMixinUGCTimeControl$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinUIInteract$Type extends MessageType<AbilityMixinUIInteract> {
    constructor() {
        super("com.midnights.game.AbilityMixinUIInteract", []);
    }
    create(value?: PartialMessage<AbilityMixinUIInteract>): AbilityMixinUIInteract {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinUIInteract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinUIInteract): AbilityMixinUIInteract {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AbilityMixinUIInteract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinUIInteract
 */
export const AbilityMixinUIInteract = new AbilityMixinUIInteract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinAvatarCombat$Type extends MessageType<AbilityMixinAvatarCombat> {
    constructor() {
        super("com.midnights.game.AbilityMixinAvatarCombat", [
            { no: 9, name: "is_enter_combat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinAvatarCombat>): AbilityMixinAvatarCombat {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinAvatarCombat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinAvatarCombat): AbilityMixinAvatarCombat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_enter_combat */ 9:
                    message.isEnterCombat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinAvatarCombat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_enter_combat = 9; */
        if (message.isEnterCombat !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isEnterCombat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinAvatarCombat
 */
export const AbilityMixinAvatarCombat = new AbilityMixinAvatarCombat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinShootFromCamera$Type extends MessageType<AbilityMixinShootFromCamera> {
    constructor() {
        super("com.midnights.game.AbilityMixinShootFromCamera", [
            { no: 13, name: "init_pos", kind: "message", T: () => Vector },
            { no: 2, name: "forward", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinShootFromCamera>): AbilityMixinShootFromCamera {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinShootFromCamera>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinShootFromCamera): AbilityMixinShootFromCamera {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector init_pos */ 13:
                    message.initPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.initPos);
                    break;
                case /* optional com.midnights.game.Vector forward */ 2:
                    message.forward = Vector.internalBinaryRead(reader, reader.uint32(), options, message.forward);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinShootFromCamera, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector init_pos = 13; */
        if (message.initPos)
            Vector.internalBinaryWrite(message.initPos, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector forward = 2; */
        if (message.forward)
            Vector.internalBinaryWrite(message.forward, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinShootFromCamera
 */
export const AbilityMixinShootFromCamera = new AbilityMixinShootFromCamera$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinEraseBrickActivity$Type extends MessageType<AbilityMixinEraseBrickActivity> {
    constructor() {
        super("com.midnights.game.AbilityMixinEraseBrickActivity", [
            { no: 6, name: "data", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinEraseBrickActivity>): AbilityMixinEraseBrickActivity {
        const message = { data: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinEraseBrickActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinEraseBrickActivity): AbilityMixinEraseBrickActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 data */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.data.push(reader.uint32());
                    else
                        message.data.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinEraseBrickActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 data = 6; */
        for (let i = 0; i < message.data.length; i++)
            writer.tag(6, WireType.Varint).uint32(message.data[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityMixinEraseBrickActivity
 */
export const AbilityMixinEraseBrickActivity = new AbilityMixinEraseBrickActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackResultCreateCount$Type extends MessageType<AttackResultCreateCount> {
    constructor() {
        super("com.midnights.game.AttackResultCreateCount", [
            { no: 10, name: "create_count_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "create_count_no_cost_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AttackResultCreateCount>): AttackResultCreateCount {
        const message = { createCountList: [], createCountNoCostList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttackResultCreateCount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackResultCreateCount): AttackResultCreateCount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 create_count_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.createCountList.push(reader.uint32());
                    else
                        message.createCountList.push(reader.uint32());
                    break;
                case /* repeated uint32 create_count_no_cost_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.createCountNoCostList.push(reader.uint32());
                    else
                        message.createCountNoCostList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackResultCreateCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 create_count_list = 10; */
        for (let i = 0; i < message.createCountList.length; i++)
            writer.tag(10, WireType.Varint).uint32(message.createCountList[i]);
        /* repeated uint32 create_count_no_cost_list = 7; */
        for (let i = 0; i < message.createCountNoCostList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.createCountNoCostList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AttackResultCreateCount
 */
export const AttackResultCreateCount = new AttackResultCreateCount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientAbilityInitBeginNotify$Type extends MessageType<ClientAbilityInitBeginNotify> {
    constructor() {
        super("com.midnights.game.ClientAbilityInitBeginNotify", [
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientAbilityInitBeginNotify>): ClientAbilityInitBeginNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientAbilityInitBeginNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAbilityInitBeginNotify): ClientAbilityInitBeginNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 1:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAbilityInitBeginNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientAbilityInitBeginNotify
 */
export const ClientAbilityInitBeginNotify = new ClientAbilityInitBeginNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientAbilityInitFinishNotify$Type extends MessageType<ClientAbilityInitFinishNotify> {
    constructor() {
        super("com.midnights.game.ClientAbilityInitFinishNotify", [
            { no: 14, name: "invokes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AbilityInvokeEntry },
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientAbilityInitFinishNotify>): ClientAbilityInitFinishNotify {
        const message = { invokes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientAbilityInitFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAbilityInitFinishNotify): ClientAbilityInitFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AbilityInvokeEntry invokes */ 14:
                    message.invokes.push(AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAbilityInitFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.AbilityInvokeEntry invokes = 14; */
        for (let i = 0; i < message.invokes.length; i++)
            AbilityInvokeEntry.internalBinaryWrite(message.invokes[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientAbilityInitFinishNotify
 */
export const ClientAbilityInitFinishNotify = new ClientAbilityInitFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvocationFailNotify$Type extends MessageType<AbilityInvocationFailNotify> {
    constructor() {
        super("com.midnights.game.AbilityInvocationFailNotify", [
            { no: 7, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "invoke", kind: "message", T: () => AbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<AbilityInvocationFailNotify>): AbilityInvocationFailNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvocationFailNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvocationFailNotify): AbilityInvocationFailNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string reason */ 7:
                    message.reason = reader.string();
                    break;
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilityInvokeEntry invoke */ 3:
                    message.invoke = AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options, message.invoke);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvocationFailNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string reason = 7; */
        if (message.reason !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.reason);
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.AbilityInvokeEntry invoke = 3; */
        if (message.invoke)
            AbilityInvokeEntry.internalBinaryWrite(message.invoke, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityInvocationFailNotify
 */
export const AbilityInvocationFailNotify = new AbilityInvocationFailNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityAbilityInvokeEntry$Type extends MessageType<EntityAbilityInvokeEntry> {
    constructor() {
        super("com.midnights.game.EntityAbilityInvokeEntry", [
            { no: 8, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "invokes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<EntityAbilityInvokeEntry>): EntityAbilityInvokeEntry {
        const message = { invokes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EntityAbilityInvokeEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EntityAbilityInvokeEntry): EntityAbilityInvokeEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 8:
                    message.entityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.AbilityInvokeEntry invokes */ 1:
                    message.invokes.push(AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EntityAbilityInvokeEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 8; */
        if (message.entityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.entityId);
        /* repeated com.midnights.game.AbilityInvokeEntry invokes = 1; */
        for (let i = 0; i < message.invokes.length; i++)
            AbilityInvokeEntry.internalBinaryWrite(message.invokes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EntityAbilityInvokeEntry
 */
export const EntityAbilityInvokeEntry = new EntityAbilityInvokeEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientAbilitiesInitFinishCombineNotify$Type extends MessageType<ClientAbilitiesInitFinishCombineNotify> {
    constructor() {
        super("com.midnights.game.ClientAbilitiesInitFinishCombineNotify", [
            { no: 1, name: "entity_invoke_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EntityAbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<ClientAbilitiesInitFinishCombineNotify>): ClientAbilitiesInitFinishCombineNotify {
        const message = { entityInvokeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientAbilitiesInitFinishCombineNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAbilitiesInitFinishCombineNotify): ClientAbilitiesInitFinishCombineNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EntityAbilityInvokeEntry entity_invoke_list */ 1:
                    message.entityInvokeList.push(EntityAbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAbilitiesInitFinishCombineNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.EntityAbilityInvokeEntry entity_invoke_list = 1; */
        for (let i = 0; i < message.entityInvokeList.length; i++)
            EntityAbilityInvokeEntry.internalBinaryWrite(message.entityInvokeList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientAbilitiesInitFinishCombineNotify
 */
export const ClientAbilitiesInitFinishCombineNotify = new ClientAbilitiesInitFinishCombineNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindSeedClientNotify$Type extends MessageType<WindSeedClientNotify> {
    constructor() {
        super("com.midnights.game.WindSeedClientNotify", [
            { no: 14, name: "refresh_notify", kind: "message", oneof: "notify", T: () => WindSeedClientNotify_RefreshNotify },
            { no: 6, name: "add_wind_bullet_notify", kind: "message", oneof: "notify", T: () => WindSeedClientNotify_AddWindBulletNotify },
            { no: 4, name: "area_notify", kind: "message", oneof: "notify", T: () => WindSeedClientNotify_AreaNotify }
        ]);
    }
    create(value?: PartialMessage<WindSeedClientNotify>): WindSeedClientNotify {
        const message = { notify: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindSeedClientNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindSeedClientNotify): WindSeedClientNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.midnights.game.WindSeedClientNotify.RefreshNotify refresh_notify */ 14:
                    message.notify = {
                        oneofKind: "refreshNotify",
                        refreshNotify: WindSeedClientNotify_RefreshNotify.internalBinaryRead(reader, reader.uint32(), options, (message.notify as any).refreshNotify)
                    };
                    break;
                case /* com.midnights.game.WindSeedClientNotify.AddWindBulletNotify add_wind_bullet_notify */ 6:
                    message.notify = {
                        oneofKind: "addWindBulletNotify",
                        addWindBulletNotify: WindSeedClientNotify_AddWindBulletNotify.internalBinaryRead(reader, reader.uint32(), options, (message.notify as any).addWindBulletNotify)
                    };
                    break;
                case /* com.midnights.game.WindSeedClientNotify.AreaNotify area_notify */ 4:
                    message.notify = {
                        oneofKind: "areaNotify",
                        areaNotify: WindSeedClientNotify_AreaNotify.internalBinaryRead(reader, reader.uint32(), options, (message.notify as any).areaNotify)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindSeedClientNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.midnights.game.WindSeedClientNotify.RefreshNotify refresh_notify = 14; */
        if (message.notify.oneofKind === "refreshNotify")
            WindSeedClientNotify_RefreshNotify.internalBinaryWrite(message.notify.refreshNotify, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WindSeedClientNotify.AddWindBulletNotify add_wind_bullet_notify = 6; */
        if (message.notify.oneofKind === "addWindBulletNotify")
            WindSeedClientNotify_AddWindBulletNotify.internalBinaryWrite(message.notify.addWindBulletNotify, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WindSeedClientNotify.AreaNotify area_notify = 4; */
        if (message.notify.oneofKind === "areaNotify")
            WindSeedClientNotify_AreaNotify.internalBinaryWrite(message.notify.areaNotify, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindSeedClientNotify
 */
export const WindSeedClientNotify = new WindSeedClientNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindSeedClientNotify_RefreshNotify$Type extends MessageType<WindSeedClientNotify_RefreshNotify> {
    constructor() {
        super("com.midnights.game.WindSeedClientNotify.RefreshNotify", [
            { no: 9, name: "refresh_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindSeedClientNotify_RefreshNotify>): WindSeedClientNotify_RefreshNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindSeedClientNotify_RefreshNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindSeedClientNotify_RefreshNotify): WindSeedClientNotify_RefreshNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 refresh_num */ 9:
                    message.refreshNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindSeedClientNotify_RefreshNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 refresh_num = 9; */
        if (message.refreshNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.refreshNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindSeedClientNotify.RefreshNotify
 */
export const WindSeedClientNotify_RefreshNotify = new WindSeedClientNotify_RefreshNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindSeedClientNotify_AddWindBulletNotify$Type extends MessageType<WindSeedClientNotify_AddWindBulletNotify> {
    constructor() {
        super("com.midnights.game.WindSeedClientNotify.AddWindBulletNotify", [
            { no: 6, name: "seed_pos", kind: "message", T: () => Vector },
            { no: 8, name: "catch_player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "seed_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindSeedClientNotify_AddWindBulletNotify>): WindSeedClientNotify_AddWindBulletNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindSeedClientNotify_AddWindBulletNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindSeedClientNotify_AddWindBulletNotify): WindSeedClientNotify_AddWindBulletNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector seed_pos */ 6:
                    message.seedPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.seedPos);
                    break;
                case /* optional uint32 catch_player_uid */ 8:
                    message.catchPlayerUid = reader.uint32();
                    break;
                case /* optional uint32 seed_entity_id */ 7:
                    message.seedEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindSeedClientNotify_AddWindBulletNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector seed_pos = 6; */
        if (message.seedPos)
            Vector.internalBinaryWrite(message.seedPos, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 catch_player_uid = 8; */
        if (message.catchPlayerUid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.catchPlayerUid);
        /* optional uint32 seed_entity_id = 7; */
        if (message.seedEntityId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.seedEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindSeedClientNotify.AddWindBulletNotify
 */
export const WindSeedClientNotify_AddWindBulletNotify = new WindSeedClientNotify_AddWindBulletNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindSeedClientNotify_AreaNotify$Type extends MessageType<WindSeedClientNotify_AreaNotify> {
    constructor() {
        super("com.midnights.game.WindSeedClientNotify.AreaNotify", [
            { no: 5, name: "area_code", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 10, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "area_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindSeedClientNotify_AreaNotify>): WindSeedClientNotify_AreaNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindSeedClientNotify_AreaNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindSeedClientNotify_AreaNotify): WindSeedClientNotify_AreaNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes area_code */ 5:
                    message.areaCode = reader.bytes();
                    break;
                case /* optional uint32 area_id */ 10:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 area_type */ 7:
                    message.areaType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindSeedClientNotify_AreaNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes area_code = 5; */
        if (message.areaCode !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.areaCode);
        /* optional uint32 area_id = 10; */
        if (message.areaId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.areaId);
        /* optional uint32 area_type = 7; */
        if (message.areaType !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.areaType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindSeedClientNotify.AreaNotify
 */
export const WindSeedClientNotify_AreaNotify = new WindSeedClientNotify_AreaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AbilityChangeNotify$Type extends MessageType<AbilityChangeNotify> {
    constructor() {
        super("com.midnights.game.AbilityChangeNotify", [
            { no: 1, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "ability_control_block", kind: "message", T: () => AbilityControlBlock }
        ]);
    }
    create(value?: PartialMessage<AbilityChangeNotify>): AbilityChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityChangeNotify): AbilityChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 1:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.AbilityControlBlock ability_control_block */ 15:
                    message.abilityControlBlock = AbilityControlBlock.internalBinaryRead(reader, reader.uint32(), options, message.abilityControlBlock);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 1; */
        if (message.entityId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.AbilityControlBlock ability_control_block = 15; */
        if (message.abilityControlBlock)
            AbilityControlBlock.internalBinaryWrite(message.abilityControlBlock, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AbilityChangeNotify
 */
export const AbilityChangeNotify = new AbilityChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientAbilityChangeNotify$Type extends MessageType<ClientAbilityChangeNotify> {
    constructor() {
        super("com.midnights.game.ClientAbilityChangeNotify", [
            { no: 9, name: "is_init_hash", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "invokes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AbilityInvokeEntry }
        ]);
    }
    create(value?: PartialMessage<ClientAbilityChangeNotify>): ClientAbilityChangeNotify {
        const message = { invokes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientAbilityChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAbilityChangeNotify): ClientAbilityChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_init_hash */ 9:
                    message.isInitHash = reader.bool();
                    break;
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.AbilityInvokeEntry invokes */ 3:
                    message.invokes.push(AbilityInvokeEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAbilityChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_init_hash = 9; */
        if (message.isInitHash !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isInitHash);
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* repeated com.midnights.game.AbilityInvokeEntry invokes = 3; */
        for (let i = 0; i < message.invokes.length; i++)
            AbilityInvokeEntry.internalBinaryWrite(message.invokes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientAbilityChangeNotify
 */
export const ClientAbilityChangeNotify = new ClientAbilityChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerUpdateGlobalValueNotify$Type extends MessageType<ServerUpdateGlobalValueNotify> {
    constructor() {
        super("com.midnights.game.ServerUpdateGlobalValueNotify", [
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "update_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ServerUpdateGlobalValueNotify.UpdateType", ServerUpdateGlobalValueNotify_UpdateType] },
            { no: 3, name: "delta", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "key_hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<ServerUpdateGlobalValueNotify>): ServerUpdateGlobalValueNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerUpdateGlobalValueNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerUpdateGlobalValueNotify): ServerUpdateGlobalValueNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ServerUpdateGlobalValueNotify.UpdateType update_type */ 13:
                    message.updateType = reader.int32();
                    break;
                case /* optional float delta */ 3:
                    message.delta = reader.float();
                    break;
                case /* optional uint32 key_hash */ 10:
                    message.keyHash = reader.uint32();
                    break;
                case /* optional float value */ 6:
                    message.value = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerUpdateGlobalValueNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.ServerUpdateGlobalValueNotify.UpdateType update_type = 13; */
        if (message.updateType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.updateType);
        /* optional float delta = 3; */
        if (message.delta !== undefined)
            writer.tag(3, WireType.Bit32).float(message.delta);
        /* optional uint32 key_hash = 10; */
        if (message.keyHash !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.keyHash);
        /* optional float value = 6; */
        if (message.value !== undefined)
            writer.tag(6, WireType.Bit32).float(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerUpdateGlobalValueNotify
 */
export const ServerUpdateGlobalValueNotify = new ServerUpdateGlobalValueNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerGlobalValueChangeNotify$Type extends MessageType<ServerGlobalValueChangeNotify> {
    constructor() {
        super("com.midnights.game.ServerGlobalValueChangeNotify", [
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "value", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "key_hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerGlobalValueChangeNotify>): ServerGlobalValueChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerGlobalValueChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerGlobalValueChangeNotify): ServerGlobalValueChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                case /* optional float value */ 12:
                    message.value = reader.float();
                    break;
                case /* optional uint32 key_hash */ 13:
                    message.keyHash = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerGlobalValueChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.entityId);
        /* optional float value = 12; */
        if (message.value !== undefined)
            writer.tag(12, WireType.Bit32).float(message.value);
        /* optional uint32 key_hash = 13; */
        if (message.keyHash !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.keyHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerGlobalValueChangeNotify
 */
export const ServerGlobalValueChangeNotify = new ServerGlobalValueChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientAIStateNotify$Type extends MessageType<ClientAIStateNotify> {
    constructor() {
        super("com.midnights.game.ClientAIStateNotify", [
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "cur_tactic", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientAIStateNotify>): ClientAIStateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientAIStateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientAIStateNotify): ClientAIStateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 cur_tactic */ 15:
                    message.curTactic = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientAIStateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.entityId);
        /* optional uint32 cur_tactic = 15; */
        if (message.curTactic !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.curTactic);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientAIStateNotify
 */
export const ClientAIStateNotify = new ClientAIStateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerCombatEndNotify$Type extends MessageType<ServerCombatEndNotify> {
    constructor() {
        super("com.midnights.game.ServerCombatEndNotify", [
            { no: 14, name: "combat_end_type_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerCombatEndNotify>): ServerCombatEndNotify {
        const message = { combatEndTypeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerCombatEndNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerCombatEndNotify): ServerCombatEndNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 combat_end_type_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.combatEndTypeList.push(reader.uint32());
                    else
                        message.combatEndTypeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerCombatEndNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 combat_end_type_list = 14; */
        for (let i = 0; i < message.combatEndTypeList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.combatEndTypeList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerCombatEndNotify
 */
export const ServerCombatEndNotify = new ServerCombatEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientRemoveCombatEndModifierNotify$Type extends MessageType<ClientRemoveCombatEndModifierNotify> {
    constructor() {
        super("com.midnights.game.ClientRemoveCombatEndModifierNotify", [
            { no: 7, name: "combat_end_type_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientRemoveCombatEndModifierNotify>): ClientRemoveCombatEndModifierNotify {
        const message = { combatEndTypeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientRemoveCombatEndModifierNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientRemoveCombatEndModifierNotify): ClientRemoveCombatEndModifierNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 combat_end_type_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.combatEndTypeList.push(reader.uint32());
                    else
                        message.combatEndTypeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientRemoveCombatEndModifierNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 combat_end_type_list = 7; */
        for (let i = 0; i < message.combatEndTypeList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.combatEndTypeList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientRemoveCombatEndModifierNotify
 */
export const ClientRemoveCombatEndModifierNotify = new ClientRemoveCombatEndModifierNotify$Type();
