"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ServerLogNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerLogNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ServerLogNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ServerLogLevel");
const dependency_2 = require("./ServerLogType");
const pb_1 = require("google-protobuf");
class ServerLogNotify extends pb_1.Message {
    constructor(data) {
        super();
        _ServerLogNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ServerLogNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("server_log" in data && data.server_log != undefined) {
                this.server_log = data.server_log;
            }
            if ("log_type" in data && data.log_type != undefined) {
                this.log_type = data.log_type;
            }
            if ("log_level" in data && data.log_level != undefined) {
                this.log_level = data.log_level;
            }
        }
    }
    get server_log() {
        return pb_1.Message.getFieldWithDefault(this, 7, "");
    }
    set server_log(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get log_type() {
        return pb_1.Message.getFieldWithDefault(this, 9, dependency_2.ServerLogType.SERVER_LOG_TYPE_NONE);
    }
    set log_type(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get log_level() {
        return pb_1.Message.getFieldWithDefault(this, 15, dependency_1.ServerLogLevel.SERVER_LOG_LEVEL_NONE);
    }
    set log_level(value) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data) {
        const message = new ServerLogNotify({});
        if (data.server_log != null) {
            message.server_log = data.server_log;
        }
        if (data.log_type != null) {
            message.log_type = data.log_type;
        }
        if (data.log_level != null) {
            message.log_level = data.log_level;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.server_log != null) {
            data.server_log = this.server_log;
        }
        if (this.log_type != null) {
            data.log_type = this.log_type;
        }
        if (this.log_level != null) {
            data.log_level = this.log_level;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.server_log.length)
            writer.writeString(7, this.server_log);
        if (this.log_type != dependency_2.ServerLogType.SERVER_LOG_TYPE_NONE)
            writer.writeEnum(9, this.log_type);
        if (this.log_level != dependency_1.ServerLogLevel.SERVER_LOG_LEVEL_NONE)
            writer.writeEnum(15, this.log_level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerLogNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.server_log = reader.readString();
                    break;
                case 9:
                    message.log_type = reader.readEnum();
                    break;
                case 15:
                    message.log_level = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ServerLogNotify.deserialize(bytes);
    }
}
exports.ServerLogNotify = ServerLogNotify;
_ServerLogNotify_one_of_decls = new WeakMap();
