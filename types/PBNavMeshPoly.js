"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PBNavMeshPoly_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PBNavMeshPoly = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PBNavMeshPoly.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class PBNavMeshPoly extends pb_1.Message {
    constructor(data) {
        super();
        _PBNavMeshPoly_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 7], __classPrivateFieldGet(this, _PBNavMeshPoly_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("edge_types" in data && data.edge_types != undefined) {
                this.edge_types = data.edge_types;
            }
            if ("area" in data && data.area != undefined) {
                this.area = data.area;
            }
            if ("vects" in data && data.vects != undefined) {
                this.vects = data.vects;
            }
        }
    }
    get edge_types() {
        return pb_1.Message.getFieldWithDefault(this, 10, PBNavMeshPoly.EdgeType.EDGE_TYPE_INNER);
    }
    set edge_types(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get area() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set area(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get vects() {
        return pb_1.Message.getFieldWithDefault(this, 7, []);
    }
    set vects(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new PBNavMeshPoly({});
        if (data.edge_types != null) {
            message.edge_types = data.edge_types;
        }
        if (data.area != null) {
            message.area = data.area;
        }
        if (data.vects != null) {
            message.vects = data.vects;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.edge_types != null) {
            data.edge_types = this.edge_types;
        }
        if (this.area != null) {
            data.area = this.area;
        }
        if (this.vects != null) {
            data.vects = this.vects;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.edge_types.length)
            writer.writePackedEnum(10, this.edge_types);
        if (this.area != 0)
            writer.writeInt32(6, this.area);
        if (this.vects.length)
            writer.writePackedInt32(7, this.vects);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PBNavMeshPoly();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.edge_types = reader.readPackedEnum();
                    break;
                case 6:
                    message.area = reader.readInt32();
                    break;
                case 7:
                    message.vects = reader.readPackedInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PBNavMeshPoly.deserialize(bytes);
    }
}
exports.PBNavMeshPoly = PBNavMeshPoly;
_PBNavMeshPoly_one_of_decls = new WeakMap();
(function (PBNavMeshPoly) {
    let EdgeType;
    (function (EdgeType) {
        EdgeType[EdgeType["EDGE_TYPE_INNER"] = 0] = "EDGE_TYPE_INNER";
        EdgeType[EdgeType["EDGE_TYPE_TILE_BOUND"] = 1] = "EDGE_TYPE_TILE_BOUND";
        EdgeType[EdgeType["EDGE_TYPE_TILE_BOUND_UNCONNECT"] = 2] = "EDGE_TYPE_TILE_BOUND_UNCONNECT";
        EdgeType[EdgeType["EDGE_TYPE_Unk2700_BFOKBOEBPJF"] = 3] = "EDGE_TYPE_Unk2700_BFOKBOEBPJF";
    })(EdgeType = PBNavMeshPoly.EdgeType || (PBNavMeshPoly.EdgeType = {}));
})(PBNavMeshPoly = exports.PBNavMeshPoly || (exports.PBNavMeshPoly = {}));
