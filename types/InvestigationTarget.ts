/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InvestigationTarget.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class InvestigationTarget extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        quest_id?: number;
        state?: InvestigationTarget.State;
        progress?: number;
        total_progress?: number;
        investigation_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("quest_id" in data && data.quest_id != undefined) {
                this.quest_id = data.quest_id;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("progress" in data && data.progress != undefined) {
                this.progress = data.progress;
            }
            if ("total_progress" in data && data.total_progress != undefined) {
                this.total_progress = data.total_progress;
            }
            if ("investigation_id" in data && data.investigation_id != undefined) {
                this.investigation_id = data.investigation_id;
            }
        }
    }
    get quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set quest_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 2, InvestigationTarget.State.STATE_INVALID) as InvestigationTarget.State;
    }
    set state(value: InvestigationTarget.State) {
        pb_1.Message.setField(this, 2, value);
    }
    get progress() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set progress(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get total_progress() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set total_progress(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get investigation_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set investigation_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        quest_id?: number;
        state?: InvestigationTarget.State;
        progress?: number;
        total_progress?: number;
        investigation_id?: number;
    }): InvestigationTarget {
        const message = new InvestigationTarget({});
        if (data.quest_id != null) {
            message.quest_id = data.quest_id;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.progress != null) {
            message.progress = data.progress;
        }
        if (data.total_progress != null) {
            message.total_progress = data.total_progress;
        }
        if (data.investigation_id != null) {
            message.investigation_id = data.investigation_id;
        }
        return message;
    }
    toObject() {
        const data: {
            quest_id?: number;
            state?: InvestigationTarget.State;
            progress?: number;
            total_progress?: number;
            investigation_id?: number;
        } = {};
        if (this.quest_id != null) {
            data.quest_id = this.quest_id;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.progress != null) {
            data.progress = this.progress;
        }
        if (this.total_progress != null) {
            data.total_progress = this.total_progress;
        }
        if (this.investigation_id != null) {
            data.investigation_id = this.investigation_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.quest_id != 0)
            writer.writeUint32(15, this.quest_id);
        if (this.state != InvestigationTarget.State.STATE_INVALID)
            writer.writeEnum(2, this.state);
        if (this.progress != 0)
            writer.writeUint32(8, this.progress);
        if (this.total_progress != 0)
            writer.writeUint32(7, this.total_progress);
        if (this.investigation_id != 0)
            writer.writeUint32(3, this.investigation_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvestigationTarget {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvestigationTarget();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.quest_id = reader.readUint32();
                    break;
                case 2:
                    message.state = reader.readEnum();
                    break;
                case 8:
                    message.progress = reader.readUint32();
                    break;
                case 7:
                    message.total_progress = reader.readUint32();
                    break;
                case 3:
                    message.investigation_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvestigationTarget {
        return InvestigationTarget.deserialize(bytes);
    }
}
export namespace InvestigationTarget {
    export enum State {
        STATE_INVALID = 0,
        STATE_IN_PROGRESS = 1,
        STATE_COMPLETE = 2,
        STATE_REWARD_TAKEN = 3
    }
}
