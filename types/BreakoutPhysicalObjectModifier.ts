// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "BreakoutPhysicalObjectModifier.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message BreakoutPhysicalObjectModifier
 */
export interface BreakoutPhysicalObjectModifier {
    /**
     * @generated from protobuf field: uint32 type = 1;
     */
    type: number;
    /**
     * @generated from protobuf field: uint32 id = 2;
     */
    id: number;
    /**
     * @generated from protobuf field: int32 param1 = 3;
     */
    param1: number;
    /**
     * @generated from protobuf field: int32 param2 = 4;
     */
    param2: number;
    /**
     * @generated from protobuf field: int32 param3 = 5;
     */
    param3: number;
    /**
     * @generated from protobuf field: int32 param4 = 6;
     */
    param4: number;
    /**
     * @generated from protobuf field: int32 param5 = 7;
     */
    param5: number;
    /**
     * @generated from protobuf field: int32 param6 = 8;
     */
    param6: number;
    /**
     * @generated from protobuf field: bool bool1 = 9;
     */
    bool1: boolean;
    /**
     * @generated from protobuf field: int32 duration = 10;
     */
    duration: number;
    /**
     * @generated from protobuf field: int32 end_time = 11;
     */
    endTime: number;
    /**
     * @generated from protobuf field: uint32 combo = 12;
     */
    combo: number;
    /**
     * @generated from protobuf field: uint32 peer_id = 13;
     */
    peerId: number;
    /**
     * @generated from protobuf field: uint32 skill_type = 14;
     */
    skillType: number;
    /**
     * @generated from protobuf field: uint32 level = 15;
     */
    level: number;
    /**
     * @generated from protobuf field: uint32 choose_player_count = 16;
     */
    choosePlayerCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class BreakoutPhysicalObjectModifier$Type extends MessageType<BreakoutPhysicalObjectModifier> {
    constructor() {
        super("BreakoutPhysicalObjectModifier", [
            { no: 1, name: "type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "param1", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "param2", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "param3", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "param4", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "param5", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "param6", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "bool1", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "duration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "end_time", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "combo", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "peer_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "skill_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 16, name: "choose_player_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BreakoutPhysicalObjectModifier>): BreakoutPhysicalObjectModifier {
        const message = { type: 0, id: 0, param1: 0, param2: 0, param3: 0, param4: 0, param5: 0, param6: 0, bool1: false, duration: 0, endTime: 0, combo: 0, peerId: 0, skillType: 0, level: 0, choosePlayerCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BreakoutPhysicalObjectModifier>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BreakoutPhysicalObjectModifier): BreakoutPhysicalObjectModifier {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 type */ 1:
                    message.type = reader.uint32();
                    break;
                case /* uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* int32 param1 */ 3:
                    message.param1 = reader.int32();
                    break;
                case /* int32 param2 */ 4:
                    message.param2 = reader.int32();
                    break;
                case /* int32 param3 */ 5:
                    message.param3 = reader.int32();
                    break;
                case /* int32 param4 */ 6:
                    message.param4 = reader.int32();
                    break;
                case /* int32 param5 */ 7:
                    message.param5 = reader.int32();
                    break;
                case /* int32 param6 */ 8:
                    message.param6 = reader.int32();
                    break;
                case /* bool bool1 */ 9:
                    message.bool1 = reader.bool();
                    break;
                case /* int32 duration */ 10:
                    message.duration = reader.int32();
                    break;
                case /* int32 end_time */ 11:
                    message.endTime = reader.int32();
                    break;
                case /* uint32 combo */ 12:
                    message.combo = reader.uint32();
                    break;
                case /* uint32 peer_id */ 13:
                    message.peerId = reader.uint32();
                    break;
                case /* uint32 skill_type */ 14:
                    message.skillType = reader.uint32();
                    break;
                case /* uint32 level */ 15:
                    message.level = reader.uint32();
                    break;
                case /* uint32 choose_player_count */ 16:
                    message.choosePlayerCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BreakoutPhysicalObjectModifier, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).uint32(message.type);
        /* uint32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint32(message.id);
        /* int32 param1 = 3; */
        if (message.param1 !== 0)
            writer.tag(3, WireType.Varint).int32(message.param1);
        /* int32 param2 = 4; */
        if (message.param2 !== 0)
            writer.tag(4, WireType.Varint).int32(message.param2);
        /* int32 param3 = 5; */
        if (message.param3 !== 0)
            writer.tag(5, WireType.Varint).int32(message.param3);
        /* int32 param4 = 6; */
        if (message.param4 !== 0)
            writer.tag(6, WireType.Varint).int32(message.param4);
        /* int32 param5 = 7; */
        if (message.param5 !== 0)
            writer.tag(7, WireType.Varint).int32(message.param5);
        /* int32 param6 = 8; */
        if (message.param6 !== 0)
            writer.tag(8, WireType.Varint).int32(message.param6);
        /* bool bool1 = 9; */
        if (message.bool1 !== false)
            writer.tag(9, WireType.Varint).bool(message.bool1);
        /* int32 duration = 10; */
        if (message.duration !== 0)
            writer.tag(10, WireType.Varint).int32(message.duration);
        /* int32 end_time = 11; */
        if (message.endTime !== 0)
            writer.tag(11, WireType.Varint).int32(message.endTime);
        /* uint32 combo = 12; */
        if (message.combo !== 0)
            writer.tag(12, WireType.Varint).uint32(message.combo);
        /* uint32 peer_id = 13; */
        if (message.peerId !== 0)
            writer.tag(13, WireType.Varint).uint32(message.peerId);
        /* uint32 skill_type = 14; */
        if (message.skillType !== 0)
            writer.tag(14, WireType.Varint).uint32(message.skillType);
        /* uint32 level = 15; */
        if (message.level !== 0)
            writer.tag(15, WireType.Varint).uint32(message.level);
        /* uint32 choose_player_count = 16; */
        if (message.choosePlayerCount !== 0)
            writer.tag(16, WireType.Varint).uint32(message.choosePlayerCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BreakoutPhysicalObjectModifier
 */
export const BreakoutPhysicalObjectModifier = new BreakoutPhysicalObjectModifier$Type();
