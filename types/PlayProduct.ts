// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "PlayProduct.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.PlayProduct
 */
export interface PlayProduct {
    /**
     * @generated from protobuf field: optional string product_id = 1;
     */
    productId?: string;
    /**
     * @generated from protobuf field: optional string price_tier = 2;
     */
    priceTier?: string;
    /**
     * @generated from protobuf field: optional uint32 schedule_id = 3;
     */
    scheduleId?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayProduct$Type extends MessageType<PlayProduct> {
    constructor() {
        super("com.midnights.game.PlayProduct", [
            { no: 1, name: "product_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "price_tier", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayProduct>): PlayProduct {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayProduct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayProduct): PlayProduct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string product_id */ 1:
                    message.productId = reader.string();
                    break;
                case /* optional string price_tier */ 2:
                    message.priceTier = reader.string();
                    break;
                case /* optional uint32 schedule_id */ 3:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayProduct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string product_id = 1; */
        if (message.productId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.productId);
        /* optional string price_tier = 2; */
        if (message.priceTier !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.priceTier);
        /* optional uint32 schedule_id = 3; */
        if (message.scheduleId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayProduct
 */
export const PlayProduct = new PlayProduct$Type();
