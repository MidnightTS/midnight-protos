/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerApplyEnterMpAfterMatchAgreedNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MatchType";
import * as dependency_2 from "./OnlinePlayerInfo";
import * as pb_1 from "google-protobuf";
export class PlayerApplyEnterMpAfterMatchAgreedNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        src_player_info?: dependency_2.OnlinePlayerInfo;
        matchserver_id?: number;
        match_type?: dependency_1.MatchType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("src_player_info" in data && data.src_player_info != undefined) {
                this.src_player_info = data.src_player_info;
            }
            if ("matchserver_id" in data && data.matchserver_id != undefined) {
                this.matchserver_id = data.matchserver_id;
            }
            if ("match_type" in data && data.match_type != undefined) {
                this.match_type = data.match_type;
            }
        }
    }
    get src_player_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.OnlinePlayerInfo, 11) as dependency_2.OnlinePlayerInfo;
    }
    set src_player_info(value: dependency_2.OnlinePlayerInfo) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_src_player_info() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get matchserver_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set matchserver_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get match_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.MatchType.MATCH_TYPE_NONE) as dependency_1.MatchType;
    }
    set match_type(value: dependency_1.MatchType) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        src_player_info?: ReturnType<typeof dependency_2.OnlinePlayerInfo.prototype.toObject>;
        matchserver_id?: number;
        match_type?: dependency_1.MatchType;
    }): PlayerApplyEnterMpAfterMatchAgreedNotify {
        const message = new PlayerApplyEnterMpAfterMatchAgreedNotify({});
        if (data.src_player_info != null) {
            message.src_player_info = dependency_2.OnlinePlayerInfo.fromObject(data.src_player_info);
        }
        if (data.matchserver_id != null) {
            message.matchserver_id = data.matchserver_id;
        }
        if (data.match_type != null) {
            message.match_type = data.match_type;
        }
        return message;
    }
    toObject() {
        const data: {
            src_player_info?: ReturnType<typeof dependency_2.OnlinePlayerInfo.prototype.toObject>;
            matchserver_id?: number;
            match_type?: dependency_1.MatchType;
        } = {};
        if (this.src_player_info != null) {
            data.src_player_info = this.src_player_info.toObject();
        }
        if (this.matchserver_id != null) {
            data.matchserver_id = this.matchserver_id;
        }
        if (this.match_type != null) {
            data.match_type = this.match_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_src_player_info)
            writer.writeMessage(11, this.src_player_info, () => this.src_player_info.serialize(writer));
        if (this.matchserver_id != 0)
            writer.writeUint32(10, this.matchserver_id);
        if (this.match_type != dependency_1.MatchType.MATCH_TYPE_NONE)
            writer.writeEnum(3, this.match_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerApplyEnterMpAfterMatchAgreedNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerApplyEnterMpAfterMatchAgreedNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    reader.readMessage(message.src_player_info, () => message.src_player_info = dependency_2.OnlinePlayerInfo.deserialize(reader));
                    break;
                case 10:
                    message.matchserver_id = reader.readUint32();
                    break;
                case 3:
                    message.match_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerApplyEnterMpAfterMatchAgreedNotify {
        return PlayerApplyEnterMpAfterMatchAgreedNotify.deserialize(bytes);
    }
}
