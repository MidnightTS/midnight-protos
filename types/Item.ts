/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Item.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Equip";
import * as dependency_2 from "./Furniture";
import * as dependency_3 from "./Material";
import * as pb_1 from "google-protobuf";
export class Item extends pb_1.Message {
    #one_of_decls: number[][] = [[5, 6, 7]];
    constructor(data?: any[] | ({
        item_id?: number;
        guid?: number;
    } & (({
        material?: dependency_3.Material;
        equip?: never;
        furniture?: never;
    } | {
        material?: never;
        equip?: dependency_1.Equip;
        furniture?: never;
    } | {
        material?: never;
        equip?: never;
        furniture?: dependency_2.Furniture;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("item_id" in data && data.item_id != undefined) {
                this.item_id = data.item_id;
            }
            if ("guid" in data && data.guid != undefined) {
                this.guid = data.guid;
            }
            if ("material" in data && data.material != undefined) {
                this.material = data.material;
            }
            if ("equip" in data && data.equip != undefined) {
                this.equip = data.equip;
            }
            if ("furniture" in data && data.furniture != undefined) {
                this.furniture = data.furniture;
            }
        }
    }
    get item_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set item_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get guid() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set guid(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get material() {
        return pb_1.Message.getWrapperField(this, dependency_3.Material, 5) as dependency_3.Material;
    }
    set material(value: dependency_3.Material) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get has_material() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get equip() {
        return pb_1.Message.getWrapperField(this, dependency_1.Equip, 6) as dependency_1.Equip;
    }
    set equip(value: dependency_1.Equip) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get has_equip() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get furniture() {
        return pb_1.Message.getWrapperField(this, dependency_2.Furniture, 7) as dependency_2.Furniture;
    }
    set furniture(value: dependency_2.Furniture) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get has_furniture() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get detail() {
        const cases: {
            [index: number]: "none" | "material" | "equip" | "furniture";
        } = {
            0: "none",
            5: "material",
            6: "equip",
            7: "furniture"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5, 6, 7])];
    }
    static fromObject(data: {
        item_id?: number;
        guid?: number;
        material?: ReturnType<typeof dependency_3.Material.prototype.toObject>;
        equip?: ReturnType<typeof dependency_1.Equip.prototype.toObject>;
        furniture?: ReturnType<typeof dependency_2.Furniture.prototype.toObject>;
    }): Item {
        const message = new Item({});
        if (data.item_id != null) {
            message.item_id = data.item_id;
        }
        if (data.guid != null) {
            message.guid = data.guid;
        }
        if (data.material != null) {
            message.material = dependency_3.Material.fromObject(data.material);
        }
        if (data.equip != null) {
            message.equip = dependency_1.Equip.fromObject(data.equip);
        }
        if (data.furniture != null) {
            message.furniture = dependency_2.Furniture.fromObject(data.furniture);
        }
        return message;
    }
    toObject() {
        const data: {
            item_id?: number;
            guid?: number;
            material?: ReturnType<typeof dependency_3.Material.prototype.toObject>;
            equip?: ReturnType<typeof dependency_1.Equip.prototype.toObject>;
            furniture?: ReturnType<typeof dependency_2.Furniture.prototype.toObject>;
        } = {};
        if (this.item_id != null) {
            data.item_id = this.item_id;
        }
        if (this.guid != null) {
            data.guid = this.guid;
        }
        if (this.material != null) {
            data.material = this.material.toObject();
        }
        if (this.equip != null) {
            data.equip = this.equip.toObject();
        }
        if (this.furniture != null) {
            data.furniture = this.furniture.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.item_id != 0)
            writer.writeUint32(1, this.item_id);
        if (this.guid != 0)
            writer.writeUint64(2, this.guid);
        if (this.has_material)
            writer.writeMessage(5, this.material, () => this.material.serialize(writer));
        if (this.has_equip)
            writer.writeMessage(6, this.equip, () => this.equip.serialize(writer));
        if (this.has_furniture)
            writer.writeMessage(7, this.furniture, () => this.furniture.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Item {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Item();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.item_id = reader.readUint32();
                    break;
                case 2:
                    message.guid = reader.readUint64();
                    break;
                case 5:
                    reader.readMessage(message.material, () => message.material = dependency_3.Material.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.equip, () => message.equip = dependency_1.Equip.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.furniture, () => message.furniture = dependency_2.Furniture.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Item {
        return Item.deserialize(bytes);
    }
}
