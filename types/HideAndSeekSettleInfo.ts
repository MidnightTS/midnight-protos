/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HideAndSeekSettleInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ExhibitionDisplayInfo";
import * as dependency_2 from "./ProfilePicture";
import * as pb_1 from "google-protobuf";
export class HideAndSeekSettleInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        profile_picture?: dependency_2.ProfilePicture;
        card_list?: dependency_1.ExhibitionDisplayInfo[];
        nickname?: string;
        head_image?: number;
        online_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
            if ("card_list" in data && data.card_list != undefined) {
                this.card_list = data.card_list;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("head_image" in data && data.head_image != undefined) {
                this.head_image = data.head_image;
            }
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_2.ProfilePicture, 1) as dependency_2.ProfilePicture;
    }
    set profile_picture(value: dependency_2.ProfilePicture) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get card_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ExhibitionDisplayInfo, 8) as dependency_1.ExhibitionDisplayInfo[];
    }
    set card_list(value: dependency_1.ExhibitionDisplayInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get head_image() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set head_image(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set online_id(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        uid?: number;
        profile_picture?: ReturnType<typeof dependency_2.ProfilePicture.prototype.toObject>;
        card_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
        nickname?: string;
        head_image?: number;
        online_id?: string;
    }): HideAndSeekSettleInfo {
        const message = new HideAndSeekSettleInfo({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_2.ProfilePicture.fromObject(data.profile_picture);
        }
        if (data.card_list != null) {
            message.card_list = data.card_list.map(item => dependency_1.ExhibitionDisplayInfo.fromObject(item));
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.head_image != null) {
            message.head_image = data.head_image;
        }
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            profile_picture?: ReturnType<typeof dependency_2.ProfilePicture.prototype.toObject>;
            card_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
            nickname?: string;
            head_image?: number;
            online_id?: string;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        if (this.card_list != null) {
            data.card_list = this.card_list.map((item: dependency_1.ExhibitionDisplayInfo) => item.toObject());
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.head_image != null) {
            data.head_image = this.head_image;
        }
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(2, this.uid);
        if (this.has_profile_picture)
            writer.writeMessage(1, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (this.card_list.length)
            writer.writeRepeatedMessage(8, this.card_list, (item: dependency_1.ExhibitionDisplayInfo) => item.serialize(writer));
        if (this.nickname.length)
            writer.writeString(3, this.nickname);
        if (this.head_image != 0)
            writer.writeUint32(4, this.head_image);
        if (this.online_id.length)
            writer.writeString(10, this.online_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HideAndSeekSettleInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HideAndSeekSettleInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.uid = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_2.ProfilePicture.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.card_list, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_1.ExhibitionDisplayInfo.deserialize(reader), dependency_1.ExhibitionDisplayInfo));
                    break;
                case 3:
                    message.nickname = reader.readString();
                    break;
                case 4:
                    message.head_image = reader.readUint32();
                    break;
                case 10:
                    message.online_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HideAndSeekSettleInfo {
        return HideAndSeekSettleInfo.deserialize(bytes);
    }
}
