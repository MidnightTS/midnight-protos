/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ClientCollectorData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ClientCollectorData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        material_id?: number;
        max_points?: number;
        curr_points?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("material_id" in data && data.material_id != undefined) {
                this.material_id = data.material_id;
            }
            if ("max_points" in data && data.max_points != undefined) {
                this.max_points = data.max_points;
            }
            if ("curr_points" in data && data.curr_points != undefined) {
                this.curr_points = data.curr_points;
            }
        }
    }
    get material_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set material_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get max_points() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set max_points(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get curr_points() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set curr_points(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        material_id?: number;
        max_points?: number;
        curr_points?: number;
    }): ClientCollectorData {
        const message = new ClientCollectorData({});
        if (data.material_id != null) {
            message.material_id = data.material_id;
        }
        if (data.max_points != null) {
            message.max_points = data.max_points;
        }
        if (data.curr_points != null) {
            message.curr_points = data.curr_points;
        }
        return message;
    }
    toObject() {
        const data: {
            material_id?: number;
            max_points?: number;
            curr_points?: number;
        } = {};
        if (this.material_id != null) {
            data.material_id = this.material_id;
        }
        if (this.max_points != null) {
            data.max_points = this.max_points;
        }
        if (this.curr_points != null) {
            data.curr_points = this.curr_points;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.material_id != 0)
            writer.writeUint32(10, this.material_id);
        if (this.max_points != 0)
            writer.writeUint32(8, this.max_points);
        if (this.curr_points != 0)
            writer.writeUint32(13, this.curr_points);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientCollectorData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientCollectorData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.material_id = reader.readUint32();
                    break;
                case 8:
                    message.max_points = reader.readUint32();
                    break;
                case 13:
                    message.curr_points = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClientCollectorData {
        return ClientCollectorData.deserialize(bytes);
    }
}
